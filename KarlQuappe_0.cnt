BANK 0
EQU $00 
EQU $01 USE_PB6
EQU $00 START_LEVEL
EQU $05 FROGS_PER_GAME
COMMENT_LABEL $05 number of frogs per game,
EQU $00 HALFSPEED
COMMENT_LABEL $00 if defined, it is possible for objects to move slower than 1 "pixel"
EQU $00 ARCADE_MOVE
COMMENT_LABEL $00 than logs and crocos are also defined in the opposite direction (no levels done though)
LABEL $C800 Vec_Snd_Shadow
COMMENT_LABEL $C800 Shadow of sound chip registers (15 bytes)
LABEL $C80F Vec_Btn_State
COMMENT_LABEL $C80F Current state of all joystick buttons
LABEL $C810 Vec_Prev_Btns
COMMENT_LABEL $C810 Previous state of all joystick buttons
LABEL $C811 Vec_Buttons
COMMENT_LABEL $C811 Current toggle state of all buttons
LABEL $C812 Vec_Button_1_1
COMMENT_LABEL $C812 Current toggle state of stick 1 button 1
LABEL $C813 Vec_Button_1_2
COMMENT_LABEL $C813 Current toggle state of stick 1 button 2
LABEL $C814 Vec_Button_1_3
COMMENT_LABEL $C814 Current toggle state of stick 1 button 3
LABEL $C815 Vec_Button_1_4
COMMENT_LABEL $C815 Current toggle state of stick 1 button 4
LABEL $C816 Vec_Button_2_1
COMMENT_LABEL $C816 Current toggle state of stick 2 button 1
LABEL $C817 Vec_Button_2_2
COMMENT_LABEL $C817 Current toggle state of stick 2 button 2
LABEL $C818 Vec_Button_2_3
COMMENT_LABEL $C818 Current toggle state of stick 2 button 3
LABEL $C819 Vec_Button_2_4
COMMENT_LABEL $C819 Current toggle state of stick 2 button 4
LABEL $C81A Vec_Joy_Resltn
COMMENT_LABEL $C81A Joystick A/D resolution ($80=min $00=max)
LABEL $C81B Vec_Joy_1_X
COMMENT_LABEL $C81B Joystick 1 left/right
LABEL $C81C Vec_Joy_1_Y
COMMENT_LABEL $C81C Joystick 1 up/down
LABEL $C81D Vec_Joy_2_X
COMMENT_LABEL $C81D Joystick 2 left/right
LABEL $C81E Vec_Joy_2_Y
COMMENT_LABEL $C81E Joystick 2 up/down
LABEL $C81F Vec_Joy_Mux
COMMENT_LABEL $C81F Joystick enable/mux flags (4 bytes)
LABEL $C81F Vec_Joy_Mux_1_X
COMMENT_LABEL $C81F Joystick 1 X enable/mux flag (=1)
LABEL $C820 Vec_Joy_Mux_1_Y
COMMENT_LABEL $C820 Joystick 1 Y enable/mux flag (=3)
LABEL $C821 Vec_Joy_Mux_2_X
COMMENT_LABEL $C821 Joystick 2 X enable/mux flag (=5)
LABEL $C822 Vec_Joy_Mux_2_Y
COMMENT_LABEL $C822 Joystick 2 Y enable/mux flag (=7)
LABEL $C823 Vec_Misc_Count
COMMENT_LABEL $C823 Misc counter/flag byte, zero when not in use
LABEL $C824 Vec_0Ref_Enable
COMMENT_LABEL $C824 Check0Ref enable flag
LABEL $C825 Vec_Loop_Count
COMMENT_LABEL $C825 Loop counter word (incremented in Wait_Recal)
LABEL $C827 Vec_Brightness
COMMENT_LABEL $C827 Default brightness
LABEL $C828 Vec_Dot_Dwell
COMMENT_LABEL $C828 Dot dwell time?
LABEL $C829 Vec_Pattern
COMMENT_LABEL $C829 Dot pattern (bits)
LABEL $C82A Vec_Text_HW
COMMENT_LABEL $C82A Default text height and width
LABEL $C82A Vec_Text_Height
COMMENT_LABEL $C82A Default text height
LABEL $C82B Vec_Text_Width
COMMENT_LABEL $C82B Default text width
LABEL $C82C Vec_Str_Ptr
COMMENT_LABEL $C82C Temporary string pointer for Print_Str
LABEL $C82E Vec_Counters
COMMENT_LABEL $C82E Six bytes of counters
LABEL $C82E Vec_Counter_1
COMMENT_LABEL $C82E First  counter byte
LABEL $C82F Vec_Counter_2
COMMENT_LABEL $C82F Second counter byte
LABEL $C830 Vec_Counter_3
COMMENT_LABEL $C830 Third  counter byte
LABEL $C831 Vec_Counter_4
COMMENT_LABEL $C831 Fourth counter byte
LABEL $C832 Vec_Counter_5
COMMENT_LABEL $C832 Fifth  counter byte
LABEL $C833 Vec_Counter_6
COMMENT_LABEL $C833 Sixth  counter byte
LABEL $C834 Vec_RiseRun_Tmp
COMMENT_LABEL $C834 Temp storage word for rise/run
LABEL $C836 Vec_Angle
COMMENT_LABEL $C836 Angle for rise/run and rotation calculations
LABEL $C837 Vec_Run_Index
COMMENT_LABEL $C837 Index pair for run
LABEL $C839 Vec_Rise_Index
COMMENT_LABEL $C839 Index pair for rise
LABEL $C83B Vec_RiseRun_Len
COMMENT_LABEL $C83B length for rise/run
LABEL $C83D Vec_Rfrsh
COMMENT_LABEL $C83D Refresh time (divided by 1.5MHz)
LABEL $C83D Vec_Rfrsh_lo
COMMENT_LABEL $C83D Refresh time low byte
LABEL $C83E Vec_Rfrsh_hi
COMMENT_LABEL $C83E Refresh time high byte
LABEL $C83F Vec_Music_Work
COMMENT_LABEL $C83F Music work buffer (14 bytes, backwards?)
LABEL $C842 Vec_Music_Wk_A
COMMENT_LABEL $C842 register 10
LABEL $C845 Vec_Music_Wk_7
COMMENT_LABEL $C845 register 7
LABEL $C846 Vec_Music_Wk_6
COMMENT_LABEL $C846 register 6
LABEL $C847 Vec_Music_Wk_5
COMMENT_LABEL $C847 register 5
LABEL $C84B Vec_Music_Wk_1
COMMENT_LABEL $C84B register 1
LABEL $C84D Vec_Freq_Table
COMMENT_LABEL $C84D Pointer to note-to-frequency table (normally $FC8D)
LABEL $C84F Vec_Max_Players
COMMENT_LABEL $C84F Maximum number of players for Select_Game
LABEL $C850 Vec_Max_Games
COMMENT_LABEL $C850 Maximum number of games for Select_Game
LABEL $C84F Vec_ADSR_Table
COMMENT_LABEL $C84F Storage for first music header word (ADSR table)
LABEL $C851 Vec_Twang_Table
COMMENT_LABEL $C851 Storage for second music header word ('twang' table)
LABEL $C853 Vec_Music_Ptr
COMMENT_LABEL $C853 Music data pointer
LABEL $C853 Vec_Expl_ChanA
COMMENT_LABEL $C853 Used by Explosion_Snd - bit for first channel used?
LABEL $C854 Vec_Expl_Chans
COMMENT_LABEL $C854 Used by Explosion_Snd - bits for all channels used?
LABEL $C855 Vec_Music_Chan
COMMENT_LABEL $C855 Current sound channel number for Init_Music
LABEL $C856 Vec_Music_Flag
COMMENT_LABEL $C856 Music active flag ($00=off $01=start $80=on)
LABEL $C857 Vec_Duration
COMMENT_LABEL $C857 Duration counter for Init_Music
LABEL $C858 Vec_Music_Twang
COMMENT_LABEL $C858 3 word 'twang' table used by Init_Music
LABEL $C858 Vec_Expl_1
COMMENT_LABEL $C858 Four bytes copied from Explosion_Snd's U-reg parameters
LABEL $C859 Vec_Expl_2
LABEL $C85A Vec_Expl_3
LABEL $C85B Vec_Expl_4
LABEL $C85C Vec_Expl_Chan
COMMENT_LABEL $C85C Used by Explosion_Snd - channel number in use?
LABEL $C85D Vec_Expl_ChanB
COMMENT_LABEL $C85D Used by Explosion_Snd - bit for second channel used?
LABEL $C85E Vec_ADSR_Timers
COMMENT_LABEL $C85E ADSR timers for each sound channel (3 bytes)
LABEL $C861 Vec_Music_Freq
COMMENT_LABEL $C861 Storage for base frequency of each channel (3 words)
LABEL $C867 Vec_Expl_Flag
COMMENT_LABEL $C867 Explosion_Snd initialization flag?
LABEL $C877 Vec_Expl_Timer
COMMENT_LABEL $C877 Used by Explosion_Snd
LABEL $C879 Vec_Num_Players
COMMENT_LABEL $C879 Number of players selected in Select_Game
LABEL $C87A Vec_Num_Game
COMMENT_LABEL $C87A Game number selected in Select_Game
LABEL $C87B Vec_Seed_Ptr
COMMENT_LABEL $C87B Pointer to 3-byte random number seed (=$C87D)
LABEL $C87D Vec_Random_Seed
COMMENT_LABEL $C87D Default 3-byte random number seed
LABEL $CBEA Vec_Default_Stk
COMMENT_LABEL $CBEA Default top-of-stack
LABEL $CBEB Vec_High_Score
COMMENT_LABEL $CBEB High score storage (7 bytes)
LABEL $CBF2 Vec_SWI3_Vector
COMMENT_LABEL $CBF2 SWI2/SWI3 interrupt vector (3 bytes)
LABEL $CBF2 Vec_SWI2_Vector
COMMENT_LABEL $CBF2 SWI2/SWI3 interrupt vector (3 bytes)
LABEL $CBF5 Vec_FIRQ_Vector
COMMENT_LABEL $CBF5 FIRQ interrupt vector (3 bytes)
LABEL $CBF8 Vec_IRQ_Vector
COMMENT_LABEL $CBF8 IRQ interrupt vector (3 bytes)
LABEL $CBFB Vec_SWI_Vector
COMMENT_LABEL $CBFB SWI/NMI interrupt vector (3 bytes)
LABEL $CBFB Vec_NMI_Vector
COMMENT_LABEL $CBFB SWI/NMI interrupt vector (3 bytes)
LABEL $CBFE Vec_Cold_Flag
COMMENT_LABEL $CBFE Cold start flag (warm start if = $7321)
LABEL $D000 VIA_port_b
COMMENT_LABEL $D000 VIA port B data I/O register
LABEL $D001 VIA_port_a
COMMENT_LABEL $D001 VIA port A data I/O register (handshaking)
LABEL $D002 VIA_DDR_b
COMMENT_LABEL $D002 VIA port B data direction register (0=input 1=output)
LABEL $D003 VIA_DDR_a
COMMENT_LABEL $D003 VIA port A data direction register (0=input 1=output)
LABEL $D004 VIA_t1_cnt_lo
COMMENT_LABEL $D004 VIA timer 1 count register lo (scale factor)
LABEL $D005 VIA_t1_cnt_hi
COMMENT_LABEL $D005 VIA timer 1 count register hi
LABEL $D006 VIA_t1_lch_lo
COMMENT_LABEL $D006 VIA timer 1 latch register lo
LABEL $D007 VIA_t1_lch_hi
COMMENT_LABEL $D007 VIA timer 1 latch register hi
LABEL $D008 VIA_t2_lo
COMMENT_LABEL $D008 VIA timer 2 count/latch register lo (refresh)
LABEL $D009 VIA_t2_hi
COMMENT_LABEL $D009 VIA timer 2 count/latch register hi
LABEL $D00A VIA_shift_reg
COMMENT_LABEL $D00A VIA shift register
LABEL $D00B VIA_aux_cntl
COMMENT_LABEL $D00B VIA auxiliary control register
LABEL $D00C VIA_cntl
COMMENT_LABEL $D00C VIA control register
LABEL $D00D VIA_int_flags
COMMENT_LABEL $D00D VIA interrupt flags register
LABEL $D00E VIA_int_enable
COMMENT_LABEL $D00E VIA interrupt enable register
LABEL $D00F VIA_port_a_nohs
COMMENT_LABEL $D00F VIA port A data I/O register (no handshaking)
LABEL $F000 Cold_Start
LABEL $F06C Warm_Start
LABEL $F14C Init_VIA
LABEL $F164 Init_OS_RAM
LABEL $F18B Init_OS
LABEL $F192 Wait_Recal
LABEL $F1A2 Set_Refresh
LABEL $F1AA DP_to_D0
LABEL $F1AF DP_to_C8
LABEL $F1B4 Read_Btns_Mask
LABEL $F1BA Read_Btns
LABEL $F1F5 Joy_Analog
LABEL $F1F8 Joy_Digital
LABEL $F256 Sound_Byte
LABEL $F259 Sound_Byte_x
LABEL $F25B Sound_Byte_raw
LABEL $F272 Clear_Sound
LABEL $F27D Sound_Bytes
LABEL $F284 Sound_Bytes_x
LABEL $F289 Do_Sound
LABEL $F28C Do_Sound_x
LABEL $F29D Intensity_1F
LABEL $F2A1 Intensity_3F
LABEL $F2A5 Intensity_5F
LABEL $F2A9 Intensity_7F
LABEL $F2AB Intensity_a
LABEL $F2BE Dot_ix_b
LABEL $F2C1 Dot_ix
LABEL $F2C3 Dot_d
LABEL $F2C5 Dot_here
LABEL $F2D5 Dot_List
LABEL $F2DE Dot_List_Reset
LABEL $F2E6 Recalibrate
LABEL $F2F2 Moveto_x_7F
LABEL $F2FC Moveto_d_7F
LABEL $F308 Moveto_ix_FF
LABEL $F30C Moveto_ix_7F
LABEL $F30E Moveto_ix_a
LABEL $F310 Moveto_ix
LABEL $F312 Moveto_d
LABEL $F34A Reset0Ref_D0
LABEL $F34F Check0Ref
LABEL $F354 Reset0Ref
LABEL $F35B Reset_Pen
LABEL $F36B Reset0Int
LABEL $F373 Print_Str_hwyx
LABEL $F378 Print_Str_yx
LABEL $F37A Print_Str_d
LABEL $F385 Print_List_hw
LABEL $F38A Print_List
LABEL $F38C Print_List_chk
LABEL $F391 Print_Ships_x
LABEL $F393 Print_Ships
LABEL $F3AD Mov_Draw_VLc_a
COMMENT_LABEL $F3AD count y x y x ...
LABEL $F3B1 Mov_Draw_VL_b
COMMENT_LABEL $F3B1 y x y x ...
LABEL $F3B5 Mov_Draw_VLcs
COMMENT_LABEL $F3B5 count scale y x y x ...
LABEL $F3B7 Mov_Draw_VL_ab
COMMENT_LABEL $F3B7 y x y x ...
LABEL $F3B9 Mov_Draw_VL_a
COMMENT_LABEL $F3B9 y x y x ...
LABEL $F3BC Mov_Draw_VL
COMMENT_LABEL $F3BC y x y x ...
LABEL $F3BE Mov_Draw_VL_d
COMMENT_LABEL $F3BE y x y x ...
LABEL $F3CE Draw_VLc
COMMENT_LABEL $F3CE count y x y x ...
LABEL $F3D2 Draw_VL_b
COMMENT_LABEL $F3D2 y x y x ...
LABEL $F3D6 Draw_VLcs
COMMENT_LABEL $F3D6 count scale y x y x ...
LABEL $F3D8 Draw_VL_ab
COMMENT_LABEL $F3D8 y x y x ...
LABEL $F3DA Draw_VL_a
COMMENT_LABEL $F3DA y x y x ...
LABEL $F3DD Draw_VL
COMMENT_LABEL $F3DD y x y x ...
LABEL $F3DF Draw_Line_d
COMMENT_LABEL $F3DF y x y x ...
LABEL $F404 Draw_VLp_FF
COMMENT_LABEL $F404 pattern y x pattern y x ... $01
LABEL $F408 Draw_VLp_7F
COMMENT_LABEL $F408 pattern y x pattern y x ... $01
LABEL $F40C Draw_VLp_scale
COMMENT_LABEL $F40C scale pattern y x pattern y x ... $01
LABEL $F40E Draw_VLp_b
COMMENT_LABEL $F40E pattern y x pattern y x ... $01
LABEL $F410 Draw_VLp
COMMENT_LABEL $F410 pattern y x pattern y x ... $01
LABEL $F434 Draw_Pat_VL_a
COMMENT_LABEL $F434 y x y x ...
LABEL $F437 Draw_Pat_VL
COMMENT_LABEL $F437 y x y x ...
LABEL $F439 Draw_Pat_VL_d
COMMENT_LABEL $F439 y x y x ...
LABEL $F46E Draw_VL_mode
COMMENT_LABEL $F46E mode y x mode y x ... $01
LABEL $F495 Print_Str
LABEL $F511 Random_3
LABEL $F517 Random
LABEL $F533 Init_Music_Buf
LABEL $F53F Clear_x_b
LABEL $F542 Clear_C8_RAM
COMMENT_LABEL $F542 never used by GCE carts?
LABEL $F545 Clear_x_256
LABEL $F548 Clear_x_d
LABEL $F550 Clear_x_b_80
LABEL $F552 Clear_x_b_a
LABEL $F55A Dec_3_Counters
LABEL $F55E Dec_6_Counters
LABEL $F563 Dec_Counters
LABEL $F56D Delay_3
COMMENT_LABEL $F56D 30 cycles
LABEL $F571 Delay_2
COMMENT_LABEL $F571 25 cycles
LABEL $F575 Delay_1
COMMENT_LABEL $F575 20 cycles
LABEL $F579 Delay_0
COMMENT_LABEL $F579 12 cycles
LABEL $F57A Delay_b
COMMENT_LABEL $F57A 5*B + 10 cycles
LABEL $F57D Delay_RTS
COMMENT_LABEL $F57D 5 cycles
LABEL $F57E Bitmask_a
LABEL $F584 Abs_a_b
LABEL $F58B Abs_b
LABEL $F593 Rise_Run_Angle
LABEL $F5D9 Get_Rise_Idx
LABEL $F5DB Get_Run_Idx
LABEL $F5EF Get_Rise_Run
LABEL $F5FF Rise_Run_X
LABEL $F601 Rise_Run_Y
LABEL $F603 Rise_Run_Len
LABEL $F610 Rot_VL_ab
LABEL $F616 Rot_VL
LABEL $F61F Rot_VL_Mode
LABEL $F62B Rot_VL_M_dft
LABEL $F65B Xform_Run_a
LABEL $F65D Xform_Run
LABEL $F661 Xform_Rise_a
LABEL $F663 Xform_Rise
LABEL $F67F Move_Mem_a_1
LABEL $F683 Move_Mem_a
LABEL $F687 Init_Music_chk
LABEL $F68D Init_Music
LABEL $F692 Init_Music_x
LABEL $F7A9 Select_Game
LABEL $F84F Clear_Score
LABEL $F85E Add_Score_a
LABEL $F87C Add_Score_d
LABEL $F8B7 Strip_Zeros
LABEL $F8C7 Compare_Score
LABEL $F8D8 New_High_Score
LABEL $F8E5 Obj_Will_Hit_u
LABEL $F8F3 Obj_Will_Hit
LABEL $F8FF Obj_Hit
LABEL $F92E Explosion_Snd
LABEL $FF9F Draw_Grid_VL
LABEL $FD0D music1
LABEL $FD1D music2
LABEL $FD81 music3
LABEL $FDD3 music4
LABEL $FE38 music5
LABEL $FE76 music6
LABEL $FEC6 music7
LABEL $FEF8 music8
LABEL $FF26 music9
LABEL $FF44 musica
LABEL $FF62 musicb
LABEL $FF7A musicc
LABEL $FF8F musicd
LABEL $F9F4 Char_Table
LABEL $FBD4 Char_Table_End
EQU $01 MACRO_I
LABEL $C880 user_ram
COMMENT_LABEL $C880 well start of our ram space
LABEL $C880 user_ram_start
LABEL $C880 music_active
COMMENT_LABEL $C880 pointer to music piece which is playing now
LABEL $C882 music_counter
COMMENT_LABEL $C882 pointer to weridos, used only in init screen
LABEL $C884 tmp1
COMMENT_LABEL $C884 two temporal storage variables
LABEL $C886 tmp2
COMMENT_LABEL $C886 ...
LABEL $C888 mul_tmp1
COMMENT_LABEL $C888 two variable used in MY_MUL only
LABEL $C88A mul_tmp2
LABEL $C88C morph_status
COMMENT_LABEL $C88C status---
LABEL $C88D morph_tmp
COMMENT_LABEL $C88D saves a few cycles... for the step counter only in one_morph_step
LABEL $C88E morph_sign
COMMENT_LABEL $C88E number of steps between 'from' and 'to' variable
LABEL $C88F morph_counter
COMMENT_LABEL $C88F number of steps between 'from' and 'to' variable
LABEL $C890 morph_steps
COMMENT_LABEL $C890 number of steps between 'from' and 'to' constant
LABEL $C891 morph_delay
COMMENT_LABEL $C891 delay between one step and another (variable)
LABEL $C893 morph_structure
COMMENT_LABEL $C893 pointer to morphstructure of current morphing
LABEL $C895 morph_div_jsr
COMMENT_LABEL $C895 pointer to indirectly JSR to a divide routine (for optimization)
LABEL $C897 kind_of_death
COMMENT_LABEL $C897 storage to text, what kind of death happened to frog
LABEL $C899 in_home_counter
COMMENT_LABEL $C899 number of free homes in the currently played level
LABEL $C89A game_level
COMMENT_LABEL $C89A what game level are we playing
LABEL $C89B current_frog_size_x
COMMENT_LABEL $C89B size of frog 'sprites' following (all the same for now)
LABEL $C89C current_frog_offset
COMMENT_LABEL $C89C offset to 'zero' of current frog sprite
LABEL $C89E current_frog_heading
COMMENT_LABEL $C89E what direction is karl looking at
LABEL $C89F last_joy_x
COMMENT_LABEL $C89F last joystick position X,
LABEL $C8A0 last_joy_y
COMMENT_LABEL $C8A0 and Y, for checking, we don't want an autorun feature...
LABEL $C8A1 current_frog_brightness
COMMENT_LABEL $C8A1 current brightness of karl,
LABEL $C8A2 high_check
COMMENT_LABEL $C8A2 checker variable for new life (every 10000 points)
LABEL $C8A3 frog_pos
COMMENT_LABEL $C8A3 position 16bit y,x of frog
LABEL $C8A3 frog_y
COMMENT_LABEL $C8A3 y pos of frog
LABEL $C8A4 frog_x
COMMENT_LABEL $C8A4 and the x
LABEL $C8A5 frog_pos_band
COMMENT_LABEL $C8A5 band information (ranging from 0-11), y,x
LABEL $C8A5 frog_y_band
COMMENT_LABEL $C8A5 band y information
LABEL $C8A6 frog_x_band
COMMENT_LABEL $C8A6 band y information
LABEL $C8A7 frog_pic
COMMENT_LABEL $C8A7 now used frog 'picture'
LABEL $C8A9 my_timer_start
COMMENT_LABEL $C8A9 reset value of level timer
LABEL $C8AB y_timer
COMMENT_LABEL $C8AB y value of my timer vector line
LABEL $C8AC my_timer
COMMENT_LABEL $C8AC x value of vector line (8bit) AND the timer variable itself (16bit) variable
LABEL $C8AE fly_timer
COMMENT_LABEL $C8AE timer variable for fly
LABEL $C8AE stringBufferTemp
COMMENT_LABEL $C8AE for option screen is never at the same time as game, so we can double use RAM
LABEL $C8B0 fly_timer_start
COMMENT_LABEL $C8B0 reset value of fly timer
LABEL $C8B2 fly_house
COMMENT_LABEL $C8B2 what house is the fly currently in
LABEL $C8B3 fly_status
COMMENT_LABEL $C8B3 what's the flys status?
LABEL $C8B4 croco_timer
COMMENT_LABEL $C8B4 croco (home) timer variable
LABEL $C8B6 croco_timer_start
COMMENT_LABEL $C8B6 croco timer reset
LABEL $C8B8 croco_house
COMMENT_LABEL $C8B8 what house is the croco currently 'visiting'
LABEL $C8B9 croco_status
COMMENT_LABEL $C8B9 what's the crocos status
LABEL $C8BA dive_timer
COMMENT_LABEL $C8BA (turtle) dive timer variable
LABEL $C8BC dive_timer_start
COMMENT_LABEL $C8BC reset value for the above
LABEL $C8BD frog_bonus
COMMENT_LABEL $C8BD what bonuses has frog collected? (girl, fly)
LABEL $C8BE otter_status
COMMENT_LABEL $C8BE what's the otters status
LABEL $C8BF otter_timer_start
COMMENT_LABEL $C8BF otter timer reset value
LABEL $C8C1 otter_timer
COMMENT_LABEL $C8C1 otter timer variable
LABEL $C8C1 current_highscore_gameMode
LABEL $C8C3 otter_log_pre
COMMENT_LABEL $C8C3 the 'logs' address of the 'log' BEFOR the otter
LABEL $C8C5 otter_log_past
COMMENT_LABEL $C8C5 the 'logs' address of the 'log' BEHIND the otter
LABEL $C8C7 otter_object
COMMENT_LABEL $C8C7 the object information address of current otter
LABEL $C8C9 otter_pos
COMMENT_LABEL $C8C9 current position of otter
LABEL $C8CB otter_anim_counter
COMMENT_LABEL $C8CB animation counter of otter
LABEL $C8CC otter_speed
COMMENT_LABEL $C8CC current speed of otter
LABEL $C8CD otter_band
COMMENT_LABEL $C8CD what band is otter swimming in?
LABEL $C8CF girl_status
COMMENT_LABEL $C8CF what's the girls status?
LABEL $C8D0 girl_round_counter
COMMENT_LABEL $C8D0 counter, for what round girl will be next displayed
LABEL $C8D1 girl_round_counter_reset
COMMENT_LABEL $C8D1 counter reset value
LABEL $C8D2 girl_log_object
COMMENT_LABEL $C8D2 log, the girl is on, allways first log on second river band
LABEL $C8D4 girl_object
COMMENT_LABEL $C8D4 pointer to current girl object information
LABEL $C8D6 girl_pos
COMMENT_LABEL $C8D6 current position of girl
LABEL $C8D8 girl_anim_counter
COMMENT_LABEL $C8D8 animation counter of girl
LABEL $C8D9 girl_zero
COMMENT_LABEL $C8D9 allways a 16 bit zero, to jump out of the loop...
LABEL $C8DB girl_speed
COMMENT_LABEL $C8DB speed of girl
LABEL $C8DC snake_status
COMMENT_LABEL $C8DC snake's status (only one snake on logs possible for now)
LABEL $C8DD snake_round_counter
COMMENT_LABEL $C8DD counter, for what round snake will be next displayed (variable)
LABEL $C8DE snake_round_counter_reset
COMMENT_LABEL $C8DE reset value for above
LABEL $C8DF snake_log_object
COMMENT_LABEL $C8DF 'log', the snake is on, allways first log on third river band!!!
LABEL $C8E1 snake_object
COMMENT_LABEL $C8E1 pointer to snake's object definition
LABEL $C8E1 eeprom_tmp
LABEL $C8E3 snake_pos
COMMENT_LABEL $C8E3 position of snake (y,x)
LABEL $C8E5 hs_reset_tmp
LABEL $C8E5 snake_anim_counter
COMMENT_LABEL $C8E5 animation counter for snake
LABEL $C8E6 snake_gone
COMMENT_LABEL $C8E6 number of steps a snake can make before turing arround
LABEL $C8E7 snake_speed_start
COMMENT_LABEL $C8E7 startspeed of snake (determined by 'log's' speed)
LABEL $C8E8 snake_speed
COMMENT_LABEL $C8E8 speed of snake now
LABEL $C8E9 i_jump
COMMENT_LABEL $C8E9 indirect jump for vector list drawing unlooped
LABEL $C8E9 current_eprom_blocksize
LABEL $C8EA current_eprom_blockadr
LABEL $C8EB nextMusic
COMMENT_LABEL $C8EB word
LABEL $C8ED currentPlayer
COMMENT_LABEL $C8ED 0 = player 1, 1 = player 2
LABEL $C8EE currentSelectedOption
COMMENT_LABEL $C8EE for the option menu, to know which one is hilighted
LABEL $C8EF P1_start
LABEL $C8EF P1_score_digit_front
COMMENT_LABEL $C8EF $81
LABEL $C8F0 P1_score_digit_5
LABEL $C8F1 P1_score_digit_4
LABEL $C8F2 P1_score_digit_3
LABEL $C8F3 P1_score_digit_2
LABEL $C8F4 P1_score_digit_1
LABEL $C8F5 P1_score_digit_SPACE1
LABEL $C8F6 P1_score_digit_LIFES
LABEL $C8F7 P1_score_digit_SPACE2
LABEL $C8F8 P1_score_digit_Level
LABEL $C8F9 P1_score_digit_back
COMMENT_LABEL $C8F9 $81
LABEL $C8FA P1_no_frogs
LABEL $C8FB P1_level
LABEL $C8FC P1_homes
LABEL $C8FD P1_in_home_counter
LABEL $C916 P1_end
LABEL $C916 P2_start
LABEL $C916 P2_score_digit_front
COMMENT_LABEL $C916 $81
LABEL $C917 P2_score_digit_5
LABEL $C918 P2_score_digit_4
LABEL $C919 P2_score_digit_3
LABEL $C91A P2_score_digit_2
LABEL $C91B P2_score_digit_1
LABEL $C91C P2_score_digit_SPACE1
LABEL $C91D P2_score_digit_LIFES
LABEL $C91E P2_score_digit_SPACE2
LABEL $C91F P2_score_digit_Level
LABEL $C920 P2_score_digit_back
COMMENT_LABEL $C920 $81
LABEL $C921 P2_no_frogs
LABEL $C922 P2_level
LABEL $C923 P2_homes
LABEL $C924 P2_in_home_counter
LABEL $C93D P2_end
LABEL $C93E timeLeft
COMMENT_LABEL $C93E ASCII - generated String "TIME xxx",$81
LABEL $C947 skipCount
COMMENT_LABEL $C947 I count the number of "sprites" to skip in each level, when level is initialized
LABEL $C948 skipCount_now
COMMENT_LABEL $C948 these "skipped" will not be displayed, when a frog reached home (and the time is display) - would be over 50Hz otherwise
LABEL $C949 levelFromOptions
LABEL $C94A startDataPos
COMMENT_LABEL $C94A used by ym player
LABEL $C94C nextDataPos
COMMENT_LABEL $C94C used by ym player
LABEL $C94E currentDataBitPos
COMMENT_LABEL $C94E used by ym player
LABEL $C94F currentDataByte
COMMENT_LABEL $C94F used by ym player
LABEL $C950 froggerInJump
COMMENT_LABEL $C950 a jump phase of the frog consists of 7 steps, countdown to 0, this is where current step is stored
LABEL $C951 froggerAnimPointer
COMMENT_LABEL $C951 pointer to the animation sprite object structure for the current frog animation step
LABEL $C953 inMovePointer
COMMENT_LABEL $C953 pointer to the subroutine that gets executed during a "move" - that is always one part of the ym unpacker
LABEL $C955 RecalCounter
COMMENT_LABEL $C955 similar var to BIOS Vec_Loop_Count, this gets increased ones every cycle (but also reseted),
LABEL $C955 RecalCounterHi
LABEL $C956 RecalCounterLow
LABEL $C957 my_random
LABEL $C958 frogDeath
COMMENT_LABEL $C958 indicator flag that we are in a death sequence intermission
LABEL $C959 ds2431Present
COMMENT_LABEL $C959 flag whether the eEprom was found or not
LABEL $C95A ignoreDs2431
COMMENT_LABEL $C95A flag whether to ignore eEprom altogether (button on startup), VecFlash gets irritated by PB6 access
EQU $0A HighScoreEntry
EQU $00 NAME
EQU $03 LEVEL
EQU $04 ASCIISCORE
LABEL $C95B optionsBlock
LABEL $C95B v4e_saveBlockStart
LABEL $C95B playerCountOption
COMMENT_LABEL $C95B 0 = 1 player, 1 = 2 player game
LABEL $C95C gameModeOption
COMMENT_LABEL $C95C 0 = tournament, 1 = training, 2 Hardcore
LABEL $C95D musicOption
COMMENT_LABEL $C95D 0 = on, 1 = off
LABEL $C95E levelEditAllowed
COMMENT_LABEL $C95E 0 = no, 1 = yes
LABEL $C963 optionsBlockEnd
COMMENT_LABEL $C963 8 byte at least for a block
LABEL $C963 highScoreCompetitionBlock
LABEL $C963 highScoreTable
LABEL $C995 highScoreTableEnd
COMMENT_LABEL $C995 5 entries
LABEL $C995 highScoreCompetitionBlockEnd
LABEL $C995 highScoreHardcoreBlock
LABEL $C995 highScoreHardTable
LABEL $C9C7 highScoreHardTableEnd
COMMENT_LABEL $C9C7 5 entries
LABEL $C9C7 highScoreHardcoreBlockEnd
LABEL $C9C7 v4e_saveBlockEnd
LABEL $C9C7 newEepromRAMStart
COMMENT_LABEL $C9C7 new save struct, straight 32 bytes
LABEL $C9E7 newEepromRAMEnd
COMMENT_LABEL $C9E7 of which only 28 bytes are used!
LABEL $C9E7 conversionBuffer
COMMENT_LABEL $C9E7 internal buffer used by conversion ASCII <-> 16 bit value (in D) vice/versa [values from 0 to 65536*10 + $80]
LABEL $C9EE highScoreTmpBuffer
COMMENT_LABEL $C9EE one "0" is added to achieve the tenfold length of 16 bit! (which cant be displayed - hahaha!)
LABEL $C9FC highScoreLevel
COMMENT_LABEL $C9FC the level of the highscore that was reached, a "transport" byte from death sequence to HighScore sequence
LABEL $C9FD currentHSEditPlace
COMMENT_LABEL $C9FD one of the three possible letters
LABEL $C9FE currentHSEditBlinkState
LABEL $C9FF hsEditLetter1
COMMENT_LABEL $C9FF three letters can be edited,
LABEL $CA00 hsEditLetter2
COMMENT_LABEL $CA00 these hold the actual ASCII values
LABEL $CA01 hsEditLetter3
LABEL $CA02 isAttractMode
COMMENT_LABEL $CA02 are we playing in attract mode? 0= no, 1 = yes (no score, no joystick, joystick recording is taken etc)
LABEL $CA03 attractMovePointer
COMMENT_LABEL $CA03 pointer to joystick data of the current attract mode setting
LABEL $CA05 buttonBlinker
COMMENT_LABEL $CA05 blink state of the "press button" in attract mode
LABEL $CA06 buttonBlinkerIntensity
LABEL $CA07 attractCount
COMMENT_LABEL $CA07 number of the next attract level to be displayed
LABEL $CA08 levelDoneTemp
COMMENT_LABEL $CA08 just a temp, that is not one of the above, which already were used
LABEL $CA09 highScorePlace
COMMENT_LABEL $CA09 more of above "transport" vars, what place did the high score reach?
LABEL $CA0A highScoreReached
COMMENT_LABEL $CA0A did we get a highscore at all?
LABEL $CA0B highScoreDone
COMMENT_LABEL $CA0B whatWAS the actual score?
LABEL $CA0D current_brightness
COMMENT_LABEL $CA0D currently = brightness (why didn't I use the vectrex's os variable???)
LABEL $CA0E initMoveTable
COMMENT_LABEL $CA0E current pointer to frog movement in title screen
LABEL $CA10 gimmickPossible
COMMENT_LABEL $CA10 1 = gimick not possible, 0 = possible
LABEL $CA12 gimmickActive
COMMENT_LABEL $CA12 1= active, 0 = not active
LABEL $CA13 gimmick_status
COMMENT_LABEL $CA13 what's the gimmick status?
LABEL $CA14 gimmick_object
COMMENT_LABEL $CA14 pointer to current gimmick object information
LABEL $CA16 gimmick_pos
COMMENT_LABEL $CA16 current position of gimmick
LABEL $CA18 gimmick_anim_counter
COMMENT_LABEL $CA18 animation counter of gimmick
LABEL $CA19 gimmick_speed
COMMENT_LABEL $CA19 speed of gimmick
LABEL $CA1A gimmick_countdown
COMMENT_LABEL $CA1A countdown, # of cycles this gimicks "plays"
LABEL $CA1B gimmick_pointer
COMMENT_LABEL $CA1B pointer to next gimmick in table of all gmmicks
LABEL $CA1D levelString
COMMENT_LABEL $CA1D "LEVEL 1",81
LABEL $CA26 did_rollOver
EQU $06 TWINKLE_COUNT
COMMENT_LABEL $06 six twinkle in title possible at the same time
LABEL $CA27 twinklers
COMMENT_LABEL $CA27 twinklers+TWINKLE_COUNT*(Twinkle) ; 6 structures of twinklers like (following)
EQU $07 Twinkle
EQU $00 TWINKEL_Y
COMMENT_LABEL $00 some data here is redundant, but I didn't change it - enough RAM :-)
EQU $01 TWINKEL_X
EQU $02 TWINKLE_ANGLE
EQU $03 TWINKLE_BRIGHTNESS
EQU $04 TWINKLE_LENGTH
EQU $05 TWINKLE_COUNTER
EQU $06 TWINKLE_WAIT
LABEL $CA27 twinkle1_y
LABEL $CA28 twinkle1_x
LABEL $CA29 twinkle1_angle
LABEL $CA2A twinkle1_brighness
LABEL $CA2B twinkle1_length
LABEL $CA2C twinkle1_counter
LABEL $CA2D twinkle1_wait
LABEL $CA27 user_ram_end
COMMENT_LABEL $CA27 end of user ram
EQU $05 HOME_OBJECT_SIZE
EQU $05 LIST_OBJECT_SIZE
LABEL $CA27 home_objects
LABEL $CA27 home_entry_1
LABEL $CA2C home_entry_2
LABEL $CA31 home_entry_3
LABEL $CA36 home_entry_4
LABEL $CA3B home_entry_5
LABEL $CA40 home_end
LABEL $CA40 object_list
LABEL $CAD8 object_list_end
LABEL $CAD8 band_list
LABEL $CB98 band_list_end
LABEL $CB98 t_list
COMMENT_LABEL $CB98 start of dive object list
LABEL $CBA6 t_list_end
COMMENT_LABEL $CBA6 note maximum of 6 dives per level
LABEL $CA40 current_morph_vectorlist_org
LABEL $003F MAX_VECTOR_MORPH
COMMENT_LABEL $003F this uses 128*3 bytes of RAM, maximum number of vectors for a morph
LABEL $CABF current_morph_vectorlist
LABEL $CB3E current_morph_vector_diffs
LABEL $C868 currentMusic
COMMENT_LABEL $C868 ym player used
LABEL $C86A currentYLenCount
COMMENT_LABEL $C86A ym player used
LABEL $C86E currentSFX
COMMENT_LABEL $C86E sfx player used
LABEL $C870 sfx_pointer_3
COMMENT_LABEL $C870 sfx player used
LABEL $C872 sfx_status_3
COMMENT_LABEL $C872 sfx player used
LABEL $C873 intermissionActive
COMMENT_LABEL $C873 flag whether an intermission is active ( see also "frogDeath")
LABEL $C874 no_frogs
COMMENT_LABEL $C874 current number of lives left to current player
LABEL $C875 bonusScore
COMMENT_LABEL $C875 flag whether to display a little "200" above the home sprite 0=none, 1 = "200", 2 = "200 200"
LABEL $C876 no_frogs2
COMMENT_LABEL $C876 number of frogs the previous active player had left after playing (in one player game same as no_frogs)
LABEL $C878 highScoreEditMode
COMMENT_LABEL $C878 is the high score "viewer" in editor mode?
LABEL $CBEB score_digit_front
COMMENT_LABEL $CBEB $81
LABEL $CBEC score_digit_5
LABEL $CBED score_digit_4
LABEL $CBEE score_digit_3
LABEL $CBEF score_digit_2
LABEL $CBF0 score_digit_1
LABEL $CBF1 score_digit_SPACE1
LABEL $CBF2 score_digit_LIFES
LABEL $CBF3 score_digit_SPACE2
LABEL $CBF4 score_digit_Level
LABEL $CBF5 score_digit_back
COMMENT_LABEL $CBF5 $81
LABEL $C884 loop1
COMMENT_LABEL $C884 loop1 counter in level setup
LABEL $C885 loop2
COMMENT_LABEL $C885 loop2 counter in level setup
LABEL $C888 divide_tmp
COMMENT_LABEL $C888 divide tmp variable, you don't divide while multiplying vice versa
LABEL $C888 tmp_band_offset
COMMENT_LABEL $C888 used in level setup and gameplay, but there is NO multiplication in game...
LABEL $C88A tmp_band_list
COMMENT_LABEL $C88A used in level setup
LABEL $C88A counter
COMMENT_LABEL $C88A counter used in intermissions
LABEL $C89B game_over_intensity
COMMENT_LABEL $C89B intensity of game over text
LABEL $C89C game_over_scaley
COMMENT_LABEL $C89C 16 bit ok scale y of game over string
LABEL $C89D game_over_scalex
COMMENT_LABEL $C89D scale x of game over string
LABEL $C89F game_over_ypos
COMMENT_LABEL $C89F 16 bit ok game over y position
LABEL $C8A0 game_over_xpos
COMMENT_LABEL $C8A0 game over x position
LABEL $C897 init_screen_mode
LABEL $C898 init_current_intensity
EQU $0A OTTER_X_LEN
COMMENT_LABEL $0A size of otter (x) for collision checking
EQU $37 SNAKE_GO_LIMIT
COMMENT_LABEL $37 number of 'pixels' a snake can go before turing arround
EQU $00 NOT_AVAILABLE
COMMENT_LABEL $00 not in this level at all (is not checked for, only via ZERO flag!!!)
EQU $01 IS_CARRIED
COMMENT_LABEL $01 the object (girl) is carried by frog
EQU $02 IS_DISPLAYED
COMMENT_LABEL $02 the object is currently visible
EQU $03 IS_WAITING
COMMENT_LABEL $03 the object is waiting to be displayed
EQU $00 NOT_DIVING
COMMENT_LABEL $00 turtle is not diving (under water) right now
EQU $01 IS_DIVING
COMMENT_LABEL $01 the turtle is under water (frog can drown)
EQU $01 FLY_BONUS
COMMENT_LABEL $01 if = a fly bonus is awarded
EQU $02 GIRL_BONUS
COMMENT_LABEL $02 if = a girl bonus is awarded
EQU $0A MORPHING_DONE
COMMENT_LABEL $0A this morphing structure finnished
EQU $0B MORPHING_WORKING
COMMENT_LABEL $0B is morphing
EQU $00 MORPHING_COMPLETE
COMMENT_LABEL $00 no more morphing
LABEL $CBBC end_of_my_ram
EQU $50 MORPH_STARTUP_DELAY
COMMENT_LABEL $50 constants used in init morph
EQU $0F MORPH_STEPS_INTRO
EQU $02 MORPH_DELAY_INIT
EQU $0F MORPH_STEPS_Z
COMMENT_LABEL $0F below is history, morphing is
EQU $7F SCREEN_TOP
LABEL $0080 SCREEN_BOTTOM
LABEL $0080 SCREEN_LEFT
EQU $7F SCREEN_RIGHT
EQU $00 SCREEN_CENTER
LABEL $F160 NORMAL_TEXT_SIZE
COMMENT_LABEL $F160 big text that is
LABEL $FB30 LITTLE_TEXT_SIZE
COMMENT_LABEL $FB30 fairly small text
LABEL $F530 SCORE_TEXT_SIZE
COMMENT_LABEL $F530 'middle' big text :-)
LABEL $0081 SPECIAL_CROCO_FULL
LABEL $0082 SPECIAL_CROCO_HALF
LABEL $0083 SPECIAL_HOME_FLY
LABEL $0084 SPECIAL_RIGHT_CROCO
LABEL $0085 SPECIAL_LEFT_CROCO
EQU $16 SPECIAL_RIGHT_SNAKE
EQU $17 SPECIAL_LEFT_SNAKE
EQU $20 SPECIAL_GIRL
COMMENT_LABEL $20 note: the $20 in this and the next two
EQU $20 SPECIAL_GIRL_RIGHT
COMMENT_LABEL $20 is ANDed and compared to...
EQU $21 SPECIAL_GIRL_LEFT
EQU $40 SPECIAL_DIVE
COMMENT_LABEL $40 note: the $40 in this and the next two
EQU $40 SPECIAL_DIVE_UP
COMMENT_LABEL $40 is ANDed and compared to...
EQU $41 SPECIAL_DIVE_DOWN
LABEL $00EA SCALE_FACTOR_GRID
COMMENT_LABEL $00EA the virtual grid, which everything is = in
LABEL $0091 SCALE_FACTOR_GAME
COMMENT_LABEL $0091 every (nearly) positioning is made with
EQU $1C SCALE_FACTOR_HOME
COMMENT_LABEL $1C scale factor for drawing the homes
LABEL $0083 SCALE_IN_HOME
COMMENT_LABEL $0083 scale factor for objects within an home
EQU $06 SCALE_FACTOR_SPRITE
COMMENT_LABEL $06 all sprites are drawn using this scale factor
EQU $70 SCALE_FACTOR_VECTOR_MORPH
COMMENT_LABEL $70 scale factor for morphing objects...
EQU $70 BOUNDARY_HI
COMMENT_LABEL $70 right boundary of playfield
LABEL $0086 BOUNDARY_LO
COMMENT_LABEL $0086 left boundary of playfield
EQU $05 MAX_SPRITE_OFFSET
COMMENT_LABEL $05 supposed to maximal sprite offset
EQU $19 SPRITE_BLOW_UP
COMMENT_LABEL $19 thru this sprites get a possible max of 5 * 25 = 125 (pretty near 127...)
EQU $08 HOME_BLOW_UP
COMMENT_LABEL $08 ...
EQU $0C VEC_BLOWUP
COMMENT_LABEL $0C max vector 5 for now, double == 10 times 12 = 120, max would be 128...
EQU $10 GRID_SIZE_GAME
COMMENT_LABEL $10 (10*($ea/$91)), for SCALE_FACTOR_GRID
EQU $0A GRID_SIZE
COMMENT_LABEL $0A for scale factor $ff
LABEL $00B2 HOME1_POS_LEFT
LABEL $00C1 HOME1_POS_RIGHT
LABEL $00D2 HOME2_POS_LEFT
LABEL $00E1 HOME2_POS_RIGHT
LABEL $00F3 HOME3_POS_LEFT
EQU $04 HOME3_POS_RIGHT
EQU $14 HOME4_POS_LEFT
EQU $25 HOME4_POS_RIGHT
EQU $35 HOME5_POS_LEFT
EQU $46 HOME5_POS_RIGHT
EQU $01 HEADING_RIGHT
EQU $02 HEADING_LEFT
EQU $03 HEADING_DOWN
EQU $04 HEADING_UP
LABEL $00A0 FROG_INIT_YPOS
EQU $06 FROG_INIT_XPOS
LABEL $A006 FROG_INIT_POS
EQU $0C FROG_INIT_YPOS_BAND
COMMENT_LABEL $0C home band is twelf (in memory)
EQU $07 FROG_INIT_XPOS_BAND
COMMENT_LABEL $07 six is middle
LABEL $0C07 FROG_INIT_POS_BAND
EQU $10 FROG_X_JUMP
EQU $10 FROG_Y_JUMP
EQU $09 FROG_SIZEX_RIGHT
EQU $09 FROG_SIZEX_LEFT
EQU $09 FROG_SIZEX_DOWN
EQU $09 FROG_SIZEX_UP
EQU $6E FROG_RIGHT_OUT
LABEL $0092 FROG_LEFT_OUT
EQU $77 SCORE_YPOS
LABEL $0088 SCORE_XPOS
EQU $77 LEVEL_YPOS
LABEL $00E2 LEVEL_XPOS
EQU $77 FROGS_YPOS
EQU $43 FROGS_XPOS
EQU $6A HOME_Y_POS
EQU -$50 HOME_X_POS
EQU $24 HOME_X_WIDTH
EQU $50 MY_PRINT_TEXT_WIDTH
EQU -$05 MY_PRINT_TEXT_HEIGHT
EQU $01 MY_MAKROS_I
EQU $19 MAX_LINE_NUM
LABEL $162F line_end
COMMENT_LABEL $162F #noDoubleWarn
LABEL $161B line_start
COMMENT_LABEL $161B #noDoubleWarn
EQU $11 MAX_LINE_NUM_16
EQU $11 game_name
LABEL $0097 entry_point
EQU $20 timeStringBASE
EQU $28 timeStringBASEEnd
EQU $28 backMainMenu
LABEL $0034 v4ecartversion
LABEL $0036 v4ecartflags
LABEL $0038 v4efontptr
LABEL $003A v4efontwidth
LABEL $003B v4efontlastchar
LABEL $003C v4estringlists
LABEL $003E v4eStorageArea
LABEL $7C9A vec4SaveBuffer
LABEL $0040 v4eStorageSize
LABEL $0042 v4eStorageLoaded
EQU $44 v4eStorageID
COMMENT_LABEL $44 fcb      "MAL1"; ; 4 bytes storage identifier
EQU $48 levelStringBASE
EQU $51 levelStringBASEEnd
EQU $51 continue_string
EQU $51 pressButton
EQU $5E defaultValuesEeprom
LABEL $0068 copyDefaults
LABEL $0083 copyEvenMore
LABEL $0088 copyMore
LABEL $2D85 initMoveTable_addresses
LABEL $02DD gimickTable
LABEL $00B6 noignore
LABEL $00C5 noScoreDefaults
LABEL $00C5 nov4e
LABEL $7C55 COPY_RAM_TO_VECROM
LABEL $1CC4 checkEprom
LABEL $0008 EEPROM_STORESIZE_OPTIONS
COMMENT_LABEL $0008 8 only 7 bytes must be used, last byte is always a generated checksum
LABEL $0000 EEPROM_OPTION_BLOCK
LABEL $1D12 eeprom_load_option
LABEL $00F1 donotSaveagain
LABEL $0020 EEPROM_STORESIZE_HS
COMMENT_LABEL $0020 32 only 31 bytes must be used, last byte is always a generated checksum
LABEL $0008 EEPROM_HS1_BLOCK
LABEL $1D0C eeprom_load_highscore
LABEL $0028 EEPROM_HS2_BLOCK
LABEL $5CBE emptyStreamInMove
LABEL $011B new_game
LABEL $0FFE init_vars
LABEL $18F2 init_screen
LABEL $0124 attractEnter
LABEL $10D3 setup_level
LABEL $0144 NoSavecheckAndOut
LABEL $23A1 savePlayer
LABEL $0144 restart_game
LABEL $749F gameStartMusic
LABEL $5C78 init_ym_sound
LABEL $015A main_loop
LABEL $0164 LF19E4
LABEL $0189 noJoystickQueryNeeded
LABEL $16C2 query_joystick
LABEL $042D draw_objects
LABEL $0298 nogimickDisplay
LABEL $01ED nogimickInit
LABEL $01EA noGimickreset
LABEL $0227 gstillActive
LABEL $025F outOfGimick
LABEL $0253 no_anim_change_gimick
LABEL $1432 move_wait_draw_vlc_unloop
LABEL $16B7 calibration
LABEL $74E6 KarlGimmickSound
LABEL $1680 play_sfx_x_if_nothing_else
LABEL $0298 no_change11
LABEL $02A5 noSnakeSound
LABEL $74D6 KarlSnakeNoise_Sound
LABEL $02B6 noWaveSound
LABEL $74DC KarlWaveNoise_Sound
LABEL $1640 do_my_sound
LABEL $02B9 main_loop_enter
LABEL $02D5 attractOver
LABEL $0309 displayButton
COMMENT_LABEL $0309 takes 3700 cycles to display
LABEL $02EB pacman
LABEL $02F0 worm
LABEL $02F5 ghost
LABEL $02FA pacman2
LABEL $02FF worm2
LABEL $0304 ghost2
LABEL $377F pacman1a_object
LABEL $3871 worm1a_object
LABEL $37F7 ghost1a_object
LABEL $0324 noblinkChange
LABEL $031F go60in
LABEL $565E sync_Print_Str_d
LABEL $0342 do_score
LABEL $0363 do_score_goon15
LABEL $0371 noMoveFrog
LABEL $59D3 move_frog
LABEL $540E zahlen2
LABEL $0382 noAtt315
LABEL $03EE noAttJmp315
LABEL $0384 score_draw_move15
LABEL $0395 LF4A518
LABEL $03B1 LF4CB18
LABEL $03AD LF4C718
LABEL $546D zahlen2_end
LABEL $0013 ZAHLEN_MAX
LABEL $03EA LF50A18
LABEL $03CE LF4EB18
LABEL $03D3 to9_318
LABEL $03EE no_score_print15
LABEL $03F3 timer_death
LABEL $03F5 draw_frog_move_timer
LABEL $007A DIE_TIME
LABEL $03FD die_set_2
LABEL $1E6A frog_dead
LABEL $040C not_lost_yet2
LABEL $12C8 game_lost
LABEL $1073 init_new_frog_vars
LABEL $0426 initNext22
LABEL $74A3 inGameMusic1
LABEL $042C doneHere22
LABEL $043D entry_timer_count_down
LABEL $0466 do_collision_check
LABEL $05CA out_here
LABEL $047E collision_loop
LABEL $0497 end_no_collision_detected
COMMENT_LABEL $0497 no collision detected, is that good?
LABEL $0482 collision_loop1
LABEL $04A0 frog_lower
COMMENT_LABEL $04A0 frog is on the left
LABEL $048D frog_higher
COMMENT_LABEL $048D otherwise frog is on the right
LABEL $04A6 collision_detected
COMMENT_LABEL $04A6 ok, a collision happened, check if good or bad
LABEL $0501 die_drown
LABEL $049D end_no_collision_detected_really
LABEL $0510 transporting
COMMENT_LABEL $0510 no we are 'riding' some object
LABEL $04C8 no_special_test_c
LABEL $04BE no_right_snake
LABEL $050B die_snake
LABEL $001F DIE_CAR
LABEL $04CA die_set
LABEL $04CC die
COMMENT_LABEL $04CC the frog is lost
LABEL $04DE not_lost_yet
LABEL $04F3 initNext27
LABEL $04F9 doneHere27
LABEL $04FC die_out
LABEL $002F DIE_OUT
LABEL $003E DIE_DROWN
LABEL $0506 die_croco
LABEL $005A DIE_CROCO
LABEL $004A DIE_SNAKE
LABEL $0534 no_special_test
LABEL $0522 no_left_croco
LABEL $059C _no_snake_
LABEL $0530 no_right_croco
LABEL $0534 no_dived_turtle
LABEL $0560 _no_girl_
LABEL $0547 Abs_b28
LABEL $054E leave_here28
LABEL $0552 girl_collision
LABEL $74D3 KarlGirlGot_Sound
LABEL $1685 play_sfx_x
LABEL $0587 no_log_right_snake
LABEL $057A Abs_b30
LABEL $0581 leave_here30
LABEL $058F Abs_b31
LABEL $0596 leave_here31
LABEL $05C4 band_minus_one
LABEL $05BC band_plus_one
LABEL $2E7E homes
LABEL $05D7 home_draw_move
LABEL $05DD _DRAW_VLA_home
LABEL $05FD _DRAW_END_home
LABEL $05F4 LF3F4_home1
LABEL $0600 LF3F4_home2
LABEL $065F no_timer_change
LABEL $0646 not_dive_timer_change
LABEL $065F otter_no_timer_change
LABEL $066B no_streaming_here
LABEL $5CEF STREAM_PART_1
LABEL $0670 pattern_line_move1
LABEL $0012 HARDMODE
LABEL $06A3 hardModeDone_1n
LABEL $06A0 no_new_life_1n
LABEL $74E0 Karl_NewHigScoreSound
LABEL $06AD line_1_LF3F4
LABEL $06C9 pattern_line_move2
LABEL $06E2 line_2_LF3F4_e
LABEL $0722 die_not_time
LABEL $0713 go_on_timer1
LABEL $74D9 KarlTimeOut_Sound
LABEL $072C time_line_move
LABEL $074F no_timerDraw
LABEL $0749 line_3_LF3F4
LABEL $0761 nexthome
LABEL $0758 no_object_in_1_house_org
LABEL $0902 nonexthome
LABEL $078E no_new_animation_phase_home_1
LABEL $0784 new_animation_phase_home_1
LABEL $07A9 unloop_start_addressh1
LABEL $001E LENGTH_OF_HEADER
LABEL $07A5 home_object_move_1
EQU $14 ONE_LINE_LENGTH
LABEL $07C7 JUMP_INTO_ALL49
LABEL $07C7 JUMP_INTO_1649
LABEL $07DB JUMP_INTO_1549
LABEL $07EF JUMP_INTO_1449
LABEL $0803 JUMP_INTO_1349
LABEL $0817 JUMP_INTO_1249
LABEL $082B JUMP_INTO_1149
LABEL $083F JUMP_INTO_1049
LABEL $0853 JUMP_INTO_0949
LABEL $0867 JUMP_INTO_0849
LABEL $087B JUMP_INTO_0749
LABEL $088F JUMP_INTO_0649
LABEL $08A3 JUMP_INTO_0549
LABEL $08B7 JUMP_INTO_0449
LABEL $08CB JUMP_INTO_0349
LABEL $08DF JUMP_INTO_0249
LABEL $08F3 JUMP_INTO_0149
LABEL $08FB no_object_in_1_house
LABEL $0902 all_home_objects_done
LABEL $09B7 no_otter_in_level
LABEL $0928 destroy_otter
LABEL $09B7 finnished_otter_stuff
LABEL $0918 otter_is_being_displayed
LABEL $0936 display_otter
LABEL $095E display_otter_1
LABEL $006A DIE_MOLE
LABEL $0982 onot_lower_out_of_bounds
LABEL $0988 obound_test_done
LABEL $0988 onot_higher_out_of_bounds
LABEL $09AE no_anim_change_otter
LABEL $09B7 otter_draw_done
LABEL $0A93 no_snake
LABEL $09F7 snot_lower_out_of_bounds
LABEL $09EC snake_wait
LABEL $09FE snake_done_no_snake_next_round
LABEL $09FB snot_higher_out_of_bounds
LABEL $0A5F go_on_snake
LABEL $0A34 switch_to_left_snake
LABEL $0A09 switch_to_right_snake
LABEL $46BC snake1a_object
LABEL $0A7B snake_all_done
LABEL $47E4 snake3a_object
LABEL $0A88 goOnSnameDisplay
LABEL $0A82 LF33D_11
LABEL $0A8F no_snakeDisplay
LABEL $0A93 entry_level_done
LABEL $0A96 next_object
LABEL $0AC9 not_lower_out_of_bounds
LABEL $0AD7 now_check_for_girl
LABEL $0AD5 higherOutOfBounds
LABEL $0B43 not_higher_out_of_bounds2
LABEL $0B0C no_girl_
LABEL $0AF5 girl_might_be_displayed
COMMENT_LABEL $0AF5 check if the girl will be displayed
LABEL $0AEF is_currently_displayed
LABEL $3467 girl1a_object
LABEL $0B3B no_snake_
LABEL $0B0C now_check_for_snake
LABEL $0B3B nothingSpecial
LABEL $0B20 snake_might_be_displayed
COMMENT_LABEL $0B20 check if the snake will be displayed
LABEL $0B1A snake_is_currently_displayed
LABEL $0B41 bound_test_done
LABEL $0B41 not_higher_out_of_bounds
LABEL $0B57 noIntermissionNow
LABEL $0B52 noSnakeBla
LABEL $0B7C doNotDraw
LABEL $0B71 no_animation_move
LABEL $0B5B new_animation_phase
LABEL $0D89 anim_no_next
LABEL $0B85 goOnDraw
LABEL $0B94 unloop_start_address1
LABEL $0B90 objects_not_all_done_move
LABEL $0B90 move_sprite_1
LABEL $1445 header_start
COMMENT_LABEL $1445 #noDoubleWarn
LABEL $1463 header_end
COMMENT_LABEL $1463 #noDoubleWarn
LABEL $0BB2 JUMP_INTO_ALL81
LABEL $0BB2 JUMP_INTO_2481
LABEL $0BC6 JUMP_INTO_2381
LABEL $0BDA JUMP_INTO_2281
LABEL $0BEE JUMP_INTO_2181
LABEL $0C02 JUMP_INTO_2081
LABEL $0C16 JUMP_INTO_1981
LABEL $0C2A JUMP_INTO_1881
LABEL $0C3E JUMP_INTO_1781
LABEL $0C52 JUMP_INTO_1681
LABEL $0C66 JUMP_INTO_1581
LABEL $0C7A JUMP_INTO_1481
LABEL $0C8E JUMP_INTO_1381
LABEL $0CA2 JUMP_INTO_1281
LABEL $0CB6 JUMP_INTO_1181
LABEL $0CCA JUMP_INTO_1081
LABEL $0CDE JUMP_INTO_0981
LABEL $0CF2 JUMP_INTO_0881
LABEL $0D06 JUMP_INTO_0781
LABEL $0D1A JUMP_INTO_0681
LABEL $0D2E JUMP_INTO_0581
LABEL $0D42 JUMP_INTO_0481
LABEL $0D56 JUMP_INTO_0381
LABEL $0D6A JUMP_INTO_0281
LABEL $0D7E JUMP_INTO_0181
LABEL $0D8C objects_all_done
LABEL $0D99 do_girl_stuff
LABEL $0D97 no_girl
LABEL $0D97 girl_allready_done
LABEL $0DE9 do_mainFrogDraw
LABEL $0DE2 no_animation_moveg
LABEL $0DCA new_animation_phaseg
LABEL $0FA7 finaly_done_draw
LABEL $0E12 keep_intensity
LABEL $0E35 no_timer_death
LABEL $0E8C no_fly_in_level
LABEL $0E8C finnished_fly_stuff2
LABEL $0E7A fly_is_being_displayed
LABEL $16B8 getMyRandom
LABEL $0E4B home_got
COMMENT_LABEL $0E4B now we have a random home...
LABEL $0E53 test_next_house
LABEL $0E65 home_is_empty
COMMENT_LABEL $0E65 now we got a 'random' empty home address in B,U
LABEL $0E5D not_last_home_yet
LABEL $0E88 finnished_fly_stuff
LABEL $38C8 fly1a_object
LABEL $0E78 home_ffull
LABEL $0EE5 no_croco_in_level
LABEL $0EE5 finnished_croco_stuff2
LABEL $0ED3 croco_is_being_displayed
LABEL $0EA4 chome_got
COMMENT_LABEL $0EA4 now we have a random home...
LABEL $0EAC ctest_next_house
LABEL $0EBE chome_is_empty
COMMENT_LABEL $0EBE now we got a 'random' empty home address in B,U
LABEL $0EB6 cnot_last_home_yet
LABEL $0EE1 finnished_croco_stuff
LABEL $49DC crocoh1a_object
LABEL $0ED1 home_cfull
LABEL $0F17 no_dive_change
LABEL $0EF1 next_dive_object
LABEL $0F17 all_objects_done
LABEL $0F17 diving_done
LABEL $0F96 finnish_otter_timer_stuff
LABEL $0F2F band_got
COMMENT_LABEL $0F2F now we have a random river band...
LABEL $0F3D object_random_select_init
LABEL $0F3F object_random_select
LABEL $0F43 no_zero_object
LABEL $0F47 object_random_select_done
LABEL $0F51 got_second_log
LABEL $4AC8 otter1a_object
LABEL $0F8E destroy_timer_otter
LABEL $0F83 Abs_b115
LABEL $0F8A leave_here115
LABEL $0F94 timer_otter_ok
LABEL $0F9D draw_frog_move
LABEL $0FA8 oneFrog_move_init
LABEL $0FD7 clearMyScore
LABEL $0011 SPACE
LABEL $1032 nextHomeIni
LABEL $105F noTrainingMode
LABEL $1061 continue_level
LABEL $106C noHardMode
LABEL $2FC1 frogger_up
LABEL $2EAB frogger_up_offset
LABEL $003C FIRST7
LABEL $10F1 no_reinit_level
LABEL $10ED reinit_level
LABEL $008B LEVEL_DATA_LENGTH
COMMENT_LABEL $008B length of one level in byte
LABEL $4B52 level1_data
COMMENT_LABEL $4B52 verified
LABEL $1150 allData
LABEL $5402 level_done_data
LABEL $1152 _loop1
LABEL $115A _loop2
LABEL $11B8 move_on
LABEL $4AF4 object_table
LABEL $118D this_is_no_dive_object
LABEL $11CC doTheRest
LABEL $11D9 error_list_to_long
LABEL $1278 no_reinit_stuff
LABEL $11E9 fly_available
LABEL $11F5 fly_go_on
LABEL $11FF croco_available
LABEL $120B croco_go_on
LABEL $1234 snake_go_on
LABEL $125C girl_go_on
LABEL $003A GIRL_SPRING_TIMER
COMMENT_LABEL $003A how often does the girl hop on her log
LABEL $126A noroll1
LABEL $1280 no_girl_on_this_level
LABEL $128A no_snake_on_this_level
LABEL $1294 no_otter_on_this_level
LABEL $12A6 countOn1
LABEL $12AF nextBand1
LABEL $12B2 countOn2
LABEL $12BB nextBand2
LABEL $12BE countOn3
LABEL $12C7 nextBand3
LABEL $12FC checkDone
LABEL $12F7 wasDeadAlready
LABEL $12D1 otherPlayerjustDied
LABEL $132A gameOverLoop
LABEL $1A65 checkHS2
LABEL $12D6 died_too
LABEL $12F0 initNext124
LABEL $12F6 doneHere124
LABEL $12FC reallyOver
LABEL $12FC no_new_high
LABEL $1325 new_game2
LABEL $1327 getOutToNewGame
LABEL $132A end_of_end_of_game
LABEL $74C3 gameOverMusic
LABEL $1339 game_over_loop1
LABEL $169E do_csa_sound_startup
LABEL $5CBF oneYMRound
LABEL $1352 usethatintensity
LABEL $29CD game_over_string
LABEL $1372 no_y_scale_now
LABEL $137D use_y
LABEL $138B use_x
LABEL $13B5 noMorph1
LABEL $2E48 morph_countdown1
LABEL $24C9 set_up_morphing
LABEL $13B5 game_over_loop2
LABEL $1416 noMorph3
LABEL $142D new_game2_stack
LABEL $253B do_one_morph_step_16
LABEL $140E noMorph2
LABEL $1415 gameoverDone
LABEL $1445 unloop_start_addressSub
LABEL $143F move_sprite_rest
LABEL $1463 JUMP_INTO_ALL135
LABEL $1463 JUMP_INTO_24135
LABEL $1477 JUMP_INTO_23135
LABEL $148B JUMP_INTO_22135
LABEL $149F JUMP_INTO_21135
LABEL $14B3 JUMP_INTO_20135
LABEL $14C7 JUMP_INTO_19135
LABEL $14DB JUMP_INTO_18135
LABEL $14EF JUMP_INTO_17135
LABEL $1503 JUMP_INTO_16135
LABEL $1517 JUMP_INTO_15135
LABEL $152B JUMP_INTO_14135
LABEL $153F JUMP_INTO_13135
LABEL $1553 JUMP_INTO_12135
LABEL $1567 JUMP_INTO_11135
LABEL $157B JUMP_INTO_10135
LABEL $158F JUMP_INTO_09135
LABEL $15A3 JUMP_INTO_08135
LABEL $15B7 JUMP_INTO_07135
LABEL $15CB JUMP_INTO_06135
LABEL $15DF JUMP_INTO_05135
LABEL $15F3 JUMP_INTO_04135
LABEL $1607 JUMP_INTO_03135
LABEL $161B JUMP_INTO_02135
LABEL $162F JUMP_INTO_01135
LABEL $1E07 sfx_doframe_intern_3
LABEL $164B next_reg160
LABEL $1669 inc_reg160
LABEL $167F doneSound160
LABEL $169D no_new_12
LABEL $1690 storeO_12k
LABEL $16A0 do_csa_startup
LABEL $16AE LF19E161
EQU $00 NOT_TEST
LABEL $1708 queryHW162
LABEL $1768 attractDoneHere162
LABEL $16F8 joyIsY162
LABEL $16F3 xisnegative162
LABEL $1703 yisnegative162
EQU $08 DIGITAL_JOYTICK_LOOP_MIN
LABEL $1711 waitLoopV162
LABEL $1729 yReadDone162
LABEL $1739 noymove162
LABEL $1742 waitLoopH162
LABEL $175A xReadDone162
LABEL $1768 noxmove162
LABEL $1769 my_move_to_d
LABEL $177C LF33D163
LABEL $1781 shutup
LABEL $1796 coords_list
LABEL $1810 oneTwinkleStep
LABEL $1885 twinkleDone
LABEL $185A noOverflow1
LABEL $1874 noOverflow2
LABEL $1886 initTwinkler
LABEL $18B1 noTwinkleInit
LABEL $18B2 twinklerpositions
LABEL $190C initNextTwinkle
LABEL $1928 douseit
LABEL $7BB1 messages
LABEL $1950 init_screen_loop_1
LABEL $1963 no_new_music_1
LABEL $7A86 yankee
LABEL $1963 doNotPlayMusic171
LABEL $1971 doNotPlayMusic172
LABEL $1982 doNextTwinkle
LABEL $19AA noAttract
LABEL $199B doAtta1
LABEL $1AE3 doAttractMode
LABEL $78B4 FroggerLogo_data
LABEL $25D6 draw_raster_image
LABEL $19E6 incInt
LABEL $19EE goOnInta
LABEL $19D2 changeStringPointer
LABEL $1A0F no_morph_display
LABEL $1A3C dooptionss_screen
LABEL $1A5E exit_init_screen_1
COMMENT_LABEL $1A5E otherwise proceed
LABEL $1A36 do_highscore_screen
LABEL $7C44 goback
LABEL $2646 highscores_screen
LABEL $575D option_screen
LABEL $1AD5 noHSOptio2n
LABEL $1A7C torunamentHSchs2
LABEL $1A86 compareNext
LABEL $1A94 putHSToX
LABEL $1AD6 copyHSEntry
LABEL $28B7 convertDToAscii
LABEL $1AC9 tournamentSave
LABEL $1AC1 hardmodeSave
LABEL $1ACF doTheSave
LABEL $1CDA eeprom_save_highscore
LABEL $1ADA contcopyhs
LABEL $1AE9 reloadAt
LABEL $2A6B attractLevels
LABEL $1AFC alevelGot
EQU $00 GAMCRT
COMMENT_LABEL $00 Cartridge ROM ($0000-$7fff = 32k)
LABEL $C800 RAM
COMMENT_LABEL $C800 Internal RAM  ($c800-$cbff = 1k)
LABEL $C880 LASRAM
COMMENT_LABEL $C880 Free RAM      ($c880-stack)
LABEL $F000 PWRUP
COMMENT_LABEL $F000 Executive ROM ($f000-$ffff = 4k)
LABEL $D000 CNTRL
COMMENT_LABEL $D000 ORB / IRB - Output Register B / Input Register B
LABEL $D001 DAC
COMMENT_LABEL $D001 ORA / IRA - Output Register A / Input Register A
LABEL $D002 DCNTRL
COMMENT_LABEL $D002 DDRB      - Data Direction Register B
LABEL $D003 DDAC
COMMENT_LABEL $D003 DDRA      - Data Direction Register A
LABEL $D004 T1LOLC
COMMENT_LABEL $D004 T1C-L     - Timer 1 Counter/Latch Low byte
LABEL $D005 T1HOC
COMMENT_LABEL $D005 T1C-H     - Timer 1 Counter High byte
LABEL $D006 T1LOL
COMMENT_LABEL $D006 T1L-L     - Timer 1 Latch Low byte
LABEL $D007 T1HOL
COMMENT_LABEL $D007 T1L-H     - Timer 1 Latch High byte
LABEL $D008 T2LOLC
COMMENT_LABEL $D008 T2C-L     - Timer 2 Counter/Latch Low byte
LABEL $D009 T2HOC
COMMENT_LABEL $D009 T2C-H     - Timer 2 Counter High byte
LABEL $D00A SHIFT
COMMENT_LABEL $D00A SR        - Shift Register
LABEL $D00B ACNTRL
COMMENT_LABEL $D00B ACR       - Auxiliary Control Register
LABEL $D00C PCNTRL
COMMENT_LABEL $D00C PCR       - Peripheral Control Register
LABEL $D00D IFLAG
COMMENT_LABEL $D00D IFR       - Interrupt Flag Register
LABEL $D00E IENABL
COMMENT_LABEL $D00E IER       - Interrupt Enable Register
LABEL $2A03 DS1W_RESETDUR
COMMENT_LABEL $2A03 Reset Pulse duration
LABEL $D002 DS1W_PRESDUR
COMMENT_LABEL $D002 Presence Pulse duration
EQU $78 DS1W_TSLOTDUR
COMMENT_LABEL $78 Time Slot duration
EQU $33 DS1W_READROM
LABEL $00CC DS1W_SKIPROM
EQU $55 DS1W_MATCHROM
LABEL $00F0 DS1W_SEARCHROM
LABEL $1B11 ds1w_open
LABEL $1B19 ds1w_close
LABEL $1B1E ds1w_reset
LABEL $1B29 dsreset_loop1
LABEL $1B54 ds1w_notpresent
LABEL $1B3C dsreset_loop2
LABEL $1B46 dsreset_loop3
LABEL $1B4E ds1w_present
LABEL $1B57 ds1w_txbyte
LABEL $1B5B ds1w_txbits
LABEL $1B73 ds1w_txbit1
LABEL $1B5E ds1w_txbit0
LABEL $1B66 dstx0_loop
LABEL $1B7F dstx1_loop
LABEL $1B88 ds1w_rxbyte
LABEL $1B8C ds1w_rxbits
LABEL $1B9E dsrx_loop
EQU $0F DS2431_WRITESP
COMMENT_LABEL $0F Write bytes to Scratch Pad
EQU $55 DS2431_COPYSP
COMMENT_LABEL $55 Copy entire Scratch Pad to EEPROM
LABEL $00AA DS2431_READSP
COMMENT_LABEL $00AA Read bytes from Scratch Pad
LABEL $00F0 DS2431_READMEM
COMMENT_LABEL $00F0 As READSP, but copies EEPROM to SP first
LABEL $983A DS2431_COPYDUR
COMMENT_LABEL $983A $3a98 = 15000 cycles = 10ms (A1: 12.5ms, A2 and later: 10ms)
LABEL $1BA7 ds2431_load
LABEL $1BD0 ds2431load_exit
LABEL $1BC8 ds2431load_loop
LABEL $1BD5 ds2431_save
LABEL $1BDB ds2431_save_all
LABEL $1BE0 ds2431_scratchpadloop
LABEL $1C54 dssave_exit
LABEL $1BF8 dssave_loop
LABEL $1C44 dssave_loop2
LABEL $1C59 ds2431_verify
LABEL $1C85 dsverify_exit
LABEL $1C7A dsverify_loop
LABEL $0087 EEPROM_CHECKSUM
COMMENT_LABEL $0087 any value other than $00 or $e0
LABEL $1C8A resetEprom
LABEL $1CC0 noDevice1
LABEL $1CB8 noDSDevice
LABEL $1CE1 eeprom_save_options
LABEL $7C60 store_score
LABEL $1CC1 cleanStart
LABEL $1CD7 notPresent
LABEL $1D46 toNewEeprom
LABEL $1CF6 eepromSave_1
LABEL $1CFA eesave_loop
LABEL $1D12 eeprom_load_1
LABEL $1D27 eeprom_load_2
LABEL $1D2E eeload_loop
LABEL $1D45 doneEEL
LABEL $1D6A fromNewEeprom
LABEL $1D4E convertNextScore
LABEL $1DC7 Encode3chars
LABEL $2913 toConversion5
LABEL $297B convertAsciiToD
LABEL $1D74 convertNextScore2
LABEL $1D98 Decode3chars
LABEL $1DA2 decode_zero
LABEL $1DB6 decode_one
LABEL $1DC2 decode_two
LABEL $1DCF encode_zero
LABEL $1DDD encode_one
LABEL $1DF2 encode_two
LABEL $C83F SHADOW_BASE
LABEL $1DF7 sfx_endofeffect_3
LABEL $1E06 noay3
LABEL $1E1B sfx_checktonefreq_3
LABEL $1E24 sfx_checknoisefreq_3
LABEL $1E2D sfx_checkvolume_3
LABEL $1E34 sfx_checktonedisable_3
LABEL $1E4A sfx_enabletone_3
LABEL $1E3B sfx_disabletone_3
LABEL $1E59 sfx_enablenoise_3
LABEL $1E4C sfx_checknoisedisable_3
LABEL $1E50 sfx_disablenoise_3
LABEL $1E62 Death_BOX
LABEL $1EA4 notMoving
LABEL $1E86 continue_left_jump_d
LABEL $1E8E continue_right_jump_d
LABEL $1E96 continue_up_jump_d
LABEL $1E9E continue_down_jump_d
LABEL $1EBA waterDeathSound
LABEL $1EB2 laneDeathSound
LABEL $74CA Karl_DeathLane_Sound
LABEL $1EC5 startDeathing
LABEL $74CD Karl_DeathWater_Sound
LABEL $34D5 frogDeathObject_0
LABEL $1EE4 death_screen_loop1
LABEL $1EF9 no_streaming_4
LABEL $2315 drawBox
LABEL $29E2 cause_strings
LABEL $1F4B no_list
LABEL $1F7E animstagedone
LABEL $1F8C deathDone
LABEL $1F89 no_attract_2
LABEL $1F8C exit_to_reinit
LABEL $1FA4 no_girlyReset1
LABEL $204A exitDeathAtt
LABEL $2047 noHSOption
LABEL $295D scrollOneRight
LABEL $2928 addConversion0
LABEL $1FE2 notEditAllowed
LABEL $1FED torunamentHS
LABEL $204B highScoreFound
LABEL $2045 noHSOptionPre
LABEL $2337 check2Player
LABEL $205A addHundred
LABEL $2075 no_change184
LABEL $2076 frog_in_home
LABEL $2086 initNext185
LABEL $74AF reachedHomeMusicNormal
LABEL $208C doneHere185
LABEL $20AA no_fly_bonus
LABEL $74B7 reachedHomeMusicFly
LABEL $20C6 no_girl_bonus
LABEL $20C3 happy
LABEL $74B3 reachedHomeMusicGirl
LABEL $74BB reachedHomeHappyMusic
LABEL $20D2 initNext188
LABEL $20D5 doneHere188
LABEL $20E5 LF861
LABEL $20F1 LF86D
LABEL $20FC LF878
LABEL $2114 timer_bonus
LABEL $2121 scoreAdd
LABEL $214E noScoreAdd
LABEL $2148 no_change189
LABEL $74E3 KarlTimerBonusSound
LABEL $2160 no_streaming_3
LABEL $222C noBonusDisplay
LABEL $2220 n200
LABEL $2189 nodoublebonus
LABEL $221C n200200
LABEL $2196 noAdd
LABEL $219C goOnScore
LABEL $21AD noXAdjust
LABEL $21BD LF4A5193
LABEL $21D9 LF4CB193
LABEL $21D5 LF4C7193
LABEL $2212 LF50A193
LABEL $21F6 LF4EB193
LABEL $21FB to9_3193
LABEL $2224 Timer_BOX
LABEL $2252 no_attract_1
LABEL $2285 no_girlyReset2
LABEL $2286 level_complete
LABEL $2295 again100197
LABEL $74BF levelDoneMusic
LABEL $22B4 level_loop
LABEL $22C1 no_streaming_21
LABEL $22CB overbox
LABEL $22C3 Level_BOX_1
LABEL $29D7 level_complete_text
LABEL $22FD testmusic
LABEL $230C level_loop_done
LABEL $2305 testdondeon
LABEL $2311 no_new_life1
LABEL $238C checkAndOut
LABEL $235B savePlayerTwo
LABEL $238D stayWithPlayerOtherIsDead2
LABEL $2354 justDied_skip1
LABEL $246B startPlayer
LABEL $236D savePlayerDone
LABEL $2397 stayWithPlayerOtherIsDead1
LABEL $2368 justDied_skip2
LABEL $2380 loadPlayerTwo
LABEL $240D loadPlayer
LABEL $2386 loadPlayerDone
LABEL $23BA crocoOk
LABEL $23D1 flyOk
LABEL $2405 copyHomeGoOn
LABEL $243F copyHomeGoOn_1
LABEL $244D Level_BOX
LABEL $2455 playerOne
LABEL $2460 playerTWO
LABEL $247F startPlayer_loop
LABEL $24AB usePlayerTwo
LABEL $24AE printStringOfPlayer
LABEL $24C4 outofPalyer
LABEL $24E4 A_is_high_vector_counter
LABEL $252C set_up_morphing_loop2
LABEL $2557 morphing_now_16
LABEL $2551 no_new_morph_structure
LABEL $255D delay_done_16
LABEL $25C0 no_morphing_is_last
LABEL $25BC no_morphing_is_first
LABEL $258F do_morph_loop2_16
COMMENT_LABEL $258F loop through all vector coordinates of list
LABEL $2597 no_minus_morph_16
LABEL $25B2 no_minus_morph2_16
EQU $01 ZERO_DELAY
COMMENT_LABEL $01 delay 7 counter is exactly 111 cycles delay between zero SETTING and zero unsetting (in moveto_d)
EQU $64 SCALE_MOVE
LABEL $25E0 next_line
LABEL $25E7 zeroLoop
LABEL $2611 m2d
LABEL $262F oneShiftOutForward
LABEL $2635 dummy1
LABEL $2677 highscores_screen_loop_1
LABEL $268A no_new_music_1hs
LABEL $268A doNotPlayMusic206
LABEL $2698 doNotPlayMusic207
LABEL $2830 highscore_string
LABEL $565E sync_Print_Str_d_fixed
LABEL $26D4 viewTournamentHS
LABEL $5717 hardcore_string
LABEL $26DD goonhigm
LABEL $5702 competition_string
LABEL $26F1 nextHSScore
LABEL $283B buildHighScoreTmp
LABEL $2735 noEdit
LABEL $2717 noBlinkChange
LABEL $2735 drawString
LABEL $2790 dohseditMode
LABEL $277E hs_no_new_xpos_dis
LABEL $277B clrit
LABEL $27FF exitHS
LABEL $27C5 hs_no_new_xpos
LABEL $27B6 pos_left_hse
LABEL $27A4 pos_right_hse
LABEL $27FC positioning_done_hse
LABEL $27FC hs_no_new_ypos
LABEL $27E8 pos_down_hse
LABEL $27D2 pos_up_hse
LABEL $27E4 letterOk_hse
LABEL $280B viewTournamentHS2
LABEL $280E goonhigm2
LABEL $2818 hsFound
LABEL $2813 addhsFound
LABEL $2859 smallerTen
LABEL $285D greater9
LABEL $2876 divide_d_by_tmp1
LABEL $2885 notZero
LABEL $2898 divide_by_zero212
LABEL $2890 divide_next212
LABEL $288A divide_by_zero1212
LABEL $289B divide_end212
LABEL $289C reduceX_by_b_timesU
LABEL $28B5 endreduce
LABEL $28AB nextreduce
LABEL $28BB convertDToAsciiInY
LABEL $2937 Yleading0ToSpace
LABEL $292D next0add
LABEL $293B nextLeady0
LABEL $2948 doneyl0
LABEL $294A YleadingSpaceTo0
LABEL $294E nextLeady
LABEL $295B doneyl
LABEL $2976 doneHeresor
LABEL $297F convertAsciiToDInY
LABEL $29B4 addToX_b_timesU
LABEL $29CC addDoneX
LABEL $29C0 anotherAddX
LABEL $29E2 home_full
LABEL $29F1 wall_jump
LABEL $2A01 car
LABEL $2A11 out
LABEL $2A20 drown
LABEL $2A2C snake
LABEL $2A3C croco
LABEL $2A4C mole
LABEL $2A5C time
LABEL $2C6E level_0Attract_1
LABEL $2C01 level_0Attract_3
LABEL $2A79 level_0Attract_8
LABEL $2B7A level_0Attract_9
LABEL $2B1F level_0Attract_13
LABEL $2AC6 level_0Attract_15
LABEL $2CE7 init_screen_move1
LABEL $2D11 init_screen_move2
LABEL $2D53 init_screen_move3
LABEL $2D8F init_screen_movea
LABEL $2DC9 _0
LABEL $2DE2 _1
LABEL $2DF3 _2
LABEL $2E08 _3
LABEL $2E1D _4
LABEL $2E30 _5
LABEL $2E45 _dot
LABEL $2E51 morph_countdown2
LABEL $2E5A morph_countdown3
LABEL $2E63 morph_countdown4
LABEL $2E6C morph_countdown5
LABEL $2E75 morph_countdown6
EQU $00 GIRL_X_OFFSET
LABEL $2EA9 frogger_down_offset
LABEL $2EAD frogger_left_offset
LABEL $2EAF frogger_right_offset
EQU $14 BLOW_UP_VLISTS
LABEL $2EB1 froggerDownAnim
LABEL $2EC1 frogger_down_0
LABEL $2EE9 frogger_down_1
LABEL $2F11 frogger_down_2
LABEL $2F39 frogger_down_3
LABEL $2F61 frogger_down_4
LABEL $2F89 frogger_down_5
LABEL $2EC1 frogger_down
LABEL $2FB1 froggerUpAnim
LABEL $2FC1 frogger_up_0
LABEL $2FE9 frogger_up_1
LABEL $3011 frogger_up_2
LABEL $3039 frogger_up_3
LABEL $3061 frogger_up_4
LABEL $3089 frogger_up_5
LABEL $30B1 froggerLeftAnim
LABEL $30C1 frogger_left_0
LABEL $30E9 frogger_left_1
LABEL $3111 frogger_left_2
LABEL $3139 frogger_left_3
LABEL $3161 frogger_left_4
LABEL $3189 frogger_left_5
LABEL $31B1 froggerRightAnim
LABEL $31C1 frogger_right_0
LABEL $31E9 frogger_right_1
LABEL $3211 frogger_right_2
LABEL $3239 frogger_right_3
LABEL $3261 frogger_right_4
LABEL $3289 frogger_right_5
LABEL $32B1 frog1a_in_home_sprite
LABEL $32C3 frog1a_in_home_object
LABEL $32E0 frog1b_in_home_object
LABEL $32CE frog1b_in_home_sprite
LABEL $32FD frog1c_in_home_object
LABEL $32EB frog1c_in_home_sprite
LABEL $3308 frog1d_in_home_object
LABEL $3313 froggerGirl_right_0
LABEL $3335 froggerGirl_right_1
LABEL $3357 froggerGirl_right_2
LABEL $3379 froggerGirl_right_3
LABEL $339B froggerGirl_right_4
LABEL $33BD froggerGirl_left_0
LABEL $33DF froggerGirl_left_1
LABEL $3401 froggerGirl_left_2
LABEL $3423 froggerGirl_left_3
LABEL $3445 froggerGirl_left_4
LABEL $3472 girl1a1_object
LABEL $347D girl1a2_object
LABEL $3488 girl1a3_object
LABEL $3493 girl1a4_object
LABEL $349E girl1b_object
LABEL $34A9 girl1b1_object
LABEL $34B4 girl1b2_object
LABEL $34BF girl1b3_object
LABEL $34CA girl1b4_object
EQU $04 DEATH_DELAY
EQU $00 DEATH_Y
EQU $00 DEATH_X
LABEL $3553 FroggerDeathSprite_0
LABEL $34DC frogDeathObject_1
LABEL $357B FroggerDeathSprite_1
LABEL $34E3 frogDeathObject_2
LABEL $35A3 FroggerDeathSprite_2
LABEL $34EA frogDeathObject_3
LABEL $35C1 FroggerDeathSprite_3
LABEL $34F1 frogDeathObject_4
LABEL $35D5 FroggerDeathSprite_4
LABEL $34F8 frogDeathObject_5
LABEL $35DF FroggerDeathSprite_5
LABEL $34FF frogDeathObject_6
EQU -$12 NEW_D_OFFSET_Y
EQU $02 NEW_D_OFFSET_X
LABEL $35E9 FroggerDeathSprite_6
LABEL $3506 frogDeathObject_7
LABEL $35F3 FroggerDeathSprite_7
LABEL $350D frogDeathObject_8
LABEL $361B FroggerDeathSprite_8
LABEL $3514 frogDeathObject_9
LABEL $3643 FroggerDeathSprite_9
LABEL $351B frogDeathObject_10
LABEL $366D FroggerDeathSprite_10
LABEL $3522 frogDeathObject_11
LABEL $3529 frogDeathObject_12
LABEL $3530 frogDeathObject_13
LABEL $3537 frogDeathObject_14
LABEL $353E frogDeathObject_15
LABEL $3545 frogDeathObject_16
LABEL $354C frogDeathObject_17
LABEL $3697 _l_sprite
LABEL $369F _l_object
LABEL $36A8 _e_sprite
LABEL $36B8 _e_object
LABEL $36C1 _v_sprite
LABEL $36CB _v_object
LABEL $36D4 _d_sprite
LABEL $36EA _d_object
LABEL $36F3 _o_sprite
LABEL $370D _o_object
LABEL $3718 _n_sprite
LABEL $3726 _n_object
EQU $0F BLOW_UP_PACMAN
EQU $00 PACMAN_Y_OFFSET
EQU $00 PACMAN_X_OFFSET
EQU $03 PACMAN_ANIM_SPEED
EQU $0C BLOW_UP_GHOST
EQU $00 GHOST_Y_OFFSET
EQU $00 GHOST_X_OFFSET
EQU $03 GHOST_ANIM_SPEED
EQU $00 GHOST_SPEED
EQU $0C BLOW_UP_WORM
EQU $00 WORM_Y_OFFSET
EQU $00 WORM_X_OFFSET
EQU $03 WORM_ANIM_SPEED
EQU $01 WORM_SPEED
LABEL $372F PacmanSmall_0
LABEL $3743 PacmanSmall_1
LABEL $3757 PacmanSmall_2
LABEL $376B PacmanSmall_3
LABEL $3788 pacman1b_object
LABEL $3791 pacman1c_object
LABEL $379A pacman1d_object
LABEL $37A3 pacman1e_object
LABEL $37AC pacman1f_object
LABEL $37B5 GhostSmall_0
LABEL $37CB GhostSmall_1
LABEL $37E1 GhostSmall_2
LABEL $3800 ghost1b_object
LABEL $3809 ghost1c_object
LABEL $3812 ghost1d_object
LABEL $381B WormSmall_0
LABEL $3823 WormSmall_1
LABEL $382F WormSmall_2
LABEL $383D WormSmall_3
LABEL $384B WormSmall_4
LABEL $3859 WormSmall_5
LABEL $3865 WormSmall_6
LABEL $387A worm1b_object
LABEL $3883 worm1c_object
LABEL $388C worm1d_object
LABEL $3895 worm1e_object
LABEL $389E worm1f_object
LABEL $38A7 worm1g_object
LABEL $38B0 fly1a_sprite
LABEL $38E9 fly1b_object
LABEL $38D3 fly1b_sprite
LABEL $390A fly1c_object
LABEL $38F4 fly1c_sprite
LABEL $3915 fly1d_object
EQU $06 CATER_Y_OFFSET
COMMENT_LABEL $06 7
EQU $00 CATER_X_OFFSET
EQU $1C CATER_LENGTH
EQU $03 CATER_Y_OFFSET_MINUS
COMMENT_LABEL $03 7
EQU $00 CATER_X_OFFSET_MINUS
EQU $1C CATER_LENGTH_MINUS
LABEL $3920 car3a_sprite
LABEL $394E caterpillar_1a_object
LABEL $3992 caterpillar_1b_object
LABEL $3959 caterpillar_2a_object
LABEL $399D caterpillar_2b_object
LABEL $3964 car3b_sprite
LABEL $39D6 caterpillar_1c_object
LABEL $39E1 caterpillar_2c_object
LABEL $39A8 car3c_sprite
LABEL $3A1A caterpillar_1d_object
LABEL $3A25 caterpillar_2d_object
LABEL $39EC car3d_sprite
LABEL $3A30 car3a_sprite_minus
LABEL $3A5E caterpillar_m1a_object
LABEL $3AA2 caterpillar_m1b_object
LABEL $3A69 caterpillar_m2a_object
LABEL $3AAD caterpillar_m2b_object
LABEL $3A74 car3b_sprite_minus
LABEL $3AE6 caterpillar_m1c_object
LABEL $3AF1 caterpillar_m2c_object
LABEL $3AB8 car3c_sprite_minus
LABEL $3B2A caterpillar_m1d_object
LABEL $3B35 caterpillar_m2d_object
LABEL $3AFC car3d_sprite_minus
EQU $19 BLOW_UP
EQU -$01 CAR3_Y_OFFSET
COMMENT_LABEL -$01 -2
EQU $01 CAR3_X_OFFSET
EQU $14 CAR3_LENGTH
EQU $04 CAR3_Y_OFFSET_PLUS
EQU $01 CAR3_X_OFFSET_PLUS
EQU $14 CAR3_LENGTH_PLUS
LABEL $3B40 car1a_sprite
LABEL $3B64 carbig_m1a_object
LABEL $3B9E carbig_m1b_object
LABEL $3B6F carbig_m3a_object
LABEL $3BA9 carbig_m3b_object
LABEL $3B7A car1b_sprite
LABEL $3BD8 carbig_m1c_object
LABEL $3BEE carbig_m3c_object
LABEL $3BB4 car1c_sprite
LABEL $3BE3 carbig_m1d_object
LABEL $3BF9 carbig_m3d_object
LABEL $3C04 car1a_sprite_plus
LABEL $3C28 carbig_1a_object
LABEL $3C62 carbig_1b_object
LABEL $3C33 carbig_2a_object
LABEL $3C6D carbig_2b_object
LABEL $3C3E car1b_sprite_plus
LABEL $3C9C carbig_1c_object
LABEL $3CB2 carbig_2c_object
LABEL $3C78 car1c_sprite_plus
LABEL $3CA7 carbig_1d_object
LABEL $3CBD carbig_2d_object
EQU $03 CAR4_Y_OFFSET
COMMENT_LABEL $03 5
EQU $01 CAR4_X_OFFSET
EQU $19 CAR4_X_LENGTH
LABEL $3CC8 truck1a_sprite
LABEL $3CEE carsmall_1a_object
LABEL $3D1F carsmall_1b_object
LABEL $3CF9 truck1b_sprite
LABEL $3D50 carsmall_1c_object
LABEL $3D2A truck1c_sprite
LABEL $3D5B carsmall_2a_object
LABEL $3D66 carsmall_2b_object
LABEL $3D71 carsmall_2c_object
EQU $02 VAN_Y_OFFSET
EQU $00 VAN_X_OFFSET
EQU $26 VAN_LENGTH
EQU $06 VAN_ANIM_SLOW
EQU $05 VAN_ANIM_FAST
EQU $04 VAN_ANIM_FASTEST
LABEL $3D7C van1a_sprite
LABEL $3DA0 van_m1a_object
LABEL $3DE5 van_m1b_object
LABEL $3DAB van_m2a_object
LABEL $3DF0 van_m2b_object
LABEL $3DB6 van_m3a_object
LABEL $3DFB van_m3b_object
LABEL $3DC1 van1b_sprite
LABEL $3E2A van_m1c_object
LABEL $3E35 van_m2c_object
LABEL $3E40 van_m3c_object
LABEL $3E06 van1c_sprite
LABEL $3E4B van_m1d_object
LABEL $3E56 van_m2d_object
LABEL $3E61 van_m3d_object
EQU -$01 SPEEDCAR_Y_OFFSET
EQU -$01 SPEEDCAR_X_OFFSET
EQU $18 SPEEDCAR_LENGTH
LABEL $3E6C moped1a_sprite
LABEL $3E90 speeder_m1a_object
LABEL $3EC1 speeder_m1b_object
LABEL $3E9B moped1b_sprite
LABEL $3EF2 speeder_m1c_object
LABEL $3ECC moped1c_sprite
LABEL $3F25 speeder_m1d_object
LABEL $3EFD moped1d_sprite
LABEL $3F30 speeder_m2a_object
LABEL $3F3B speeder_m2b_object
LABEL $3F46 speeder_m2c_object
LABEL $3F51 speeder_m2d_object
LABEL $3F5C speeder_m3a_object
EQU $00 SPEEDER_M3
EQU $22 LOG_SMALL_LENGTH
EQU $00 LOG_LEFT_Y_OFFSET
LABEL $3F5C log2a_sprite
LABEL $3F7A log2b_sprite
LABEL $3F98 log2c_sprite
LABEL $3FB6 log1a_sprite
LABEL $3FD4 log1a_object
LABEL $3FFD log1b_object
LABEL $3FDF log1b_sprite
LABEL $4026 log1c_object
LABEL $4008 log1c_sprite
LABEL $4031 log1d_object
LABEL $403C log2a_object
LABEL $4047 log2b_object
LABEL $4052 log2c_object
LABEL $405D log2d_object
LABEL $4068 log7a_object
LABEL $4073 log7b_object
LABEL $407E log7c_object
LABEL $4089 log7d_object
LABEL $4094 log8a_object
LABEL $409F log8b_object
LABEL $40AA log8c_object
LABEL $40B5 log8d_object
EQU $23 RIGHT_LOG_LENGTH
LABEL $40C0 log3a_sprite
LABEL $40DA log3a_object
LABEL $40FF log3b_object
LABEL $40E5 log3b_sprite
LABEL $4124 log3c_object
LABEL $410A log3c_sprite
LABEL $412F log3d_object
LABEL $413A log4a_sprite
LABEL $4152 log4a_object
LABEL $4175 log4b_object
LABEL $415D log4b_sprite
LABEL $4198 log4c_object
LABEL $4180 log4c_sprite
LABEL $41A3 log4d_object
LABEL $41AE log9a_object
LABEL $41B9 log9b_object
LABEL $41C4 log9c_object
LABEL $41CF log9d_object
LABEL $41DA log10a_object
LABEL $41E5 log10b_object
LABEL $41F0 log10c_object
LABEL $41FB log10d_object
EQU $1B TURTLE_LENGTH
EQU $16 SPRITE_BLOW_UP_TURTLE
EQU $13 SPRITE_BLOW_UP_TURTLE_y
LABEL $4206 turtle1a_sprite
LABEL $421E turtle1a_object
LABEL $4245 turtle1b_object
LABEL $4229 turtle1b_sprite
LABEL $426C turtle1c_object
LABEL $4250 turtle1c_sprite
LABEL $4277 turtle2a_sprite
LABEL $428F turtle2a_object
LABEL $42B6 turtle2b_object
LABEL $429A turtle2b_sprite
LABEL $42DD turtle2c_object
LABEL $42C1 turtle2c_sprite
LABEL $42E8 turtle3a_object
LABEL $42F3 turtle3b_object
LABEL $42FE turtle3c_object
LABEL $4309 turtle4a_object
LABEL $4314 turtle4b_object
LABEL $431F turtle4c_object
LABEL $432A turtled1a_object
LABEL $4337 turtled1b_object
LABEL $4438 turtlea1a_object
LABEL $4344 turtled1c_object
LABEL $4351 turtled2a_object
LABEL $435E turtled2b_object
LABEL $45A0 turtlea2a_object
LABEL $436B turtled2c_object
LABEL $4378 turtled3a_object
LABEL $4385 turtled3b_object
LABEL $44BA turtlea3a_object
LABEL $4392 turtled3c_object
LABEL $439F turtled4a_object
LABEL $43AC turtled4b_object
LABEL $4622 turtlea4a_object
LABEL $43B9 turtled4c_object
LABEL $43C6 turtlea1a_sprite
LABEL $43DA turtlea1b_sprite
LABEL $43EE turtlea1c_sprite
LABEL $43FC turtlea1d_sprite
LABEL $441A turtlea1e_sprite
LABEL $442E turtlea1f_sprite
LABEL $4445 turtlea1b_object
LABEL $4493 turtleb1a_object
LABEL $4452 turtlea1c_object
LABEL $445F turtlea1d_object
LABEL $446C turtlea1e_object
LABEL $4479 turtlea1f_object
LABEL $4486 turtlea1g_object
LABEL $44A0 turtleb1b_object
LABEL $44AD turtleb1c_object
LABEL $44C7 turtlea3b_object
LABEL $4515 turtleb3a_object
LABEL $44D4 turtlea3c_object
LABEL $44E1 turtlea3d_object
LABEL $44EE turtlea3e_object
LABEL $44FB turtlea3f_object
LABEL $4508 turtlea3g_object
LABEL $4522 turtleb3b_object
LABEL $452F turtleb3c_object
LABEL $453C turtlea2a_sprite
LABEL $4550 turtlea2b_sprite
LABEL $4564 turtlea2d_sprite
LABEL $4582 turtlea2e_sprite
LABEL $4596 turtlea2f_sprite
LABEL $45AD turtlea2b_object
LABEL $45FB turtleb2a_object
LABEL $45BA turtlea2c_object
LABEL $45C7 turtlea2d_object
LABEL $45D4 turtlea2e_object
LABEL $45E1 turtlea2f_object
LABEL $45EE turtlea2g_object
LABEL $4608 turtleb2b_object
LABEL $4615 turtleb2c_object
LABEL $462F turtlea4b_object
LABEL $467D turtleb4a_object
LABEL $463C turtlea4c_object
LABEL $4649 turtlea4d_object
LABEL $4656 turtlea4e_object
LABEL $4663 turtlea4f_object
LABEL $4670 turtlea4g_object
LABEL $468A turtleb4b_object
LABEL $4697 turtleb4c_object
EQU -$05 Y_OFFSET_RIGHT
EQU -$04 Y_OFFSET_LEFT
LABEL $46A4 snake1a_sprite
LABEL $46DF snake1b_object
LABEL $46C7 snake1b_sprite
LABEL $4702 snake1c_object
LABEL $46EA snake1c_sprite
LABEL $4725 snake1d_object
LABEL $470D snake1d_sprite
LABEL $4748 snake1e_object
LABEL $4730 snake1e_sprite
LABEL $4753 snake1f_object
LABEL $475E snake1g_object
LABEL $4769 snake1h_object
LABEL $4774 snake2a_object
LABEL $477F snake2b_object
LABEL $478A snake2c_object
LABEL $4795 snake2d_object
LABEL $47A0 snake2e_object
LABEL $47AB snake2f_object
LABEL $47B6 snake2g_object
LABEL $47C1 snake2h_object
LABEL $47CC snake3a_sprite
LABEL $4807 snake3b_object
LABEL $47EF snake3b_sprite
LABEL $482A snake3c_object
LABEL $4812 snake3c_sprite
LABEL $484D snake3d_object
LABEL $4835 snake3d_sprite
LABEL $4870 snake3e_object
LABEL $4858 snake3e_sprite
LABEL $487B snake3f_object
LABEL $4886 snake3g_object
LABEL $4891 snake3h_object
LABEL $489C snake4a_object
LABEL $48A7 snake4b_object
LABEL $48B2 snake4c_object
LABEL $48BD snake4d_object
LABEL $48C8 snake4e_object
LABEL $48D3 snake4f_object
LABEL $48DE snake4g_object
LABEL $48E9 snake4h_object
EQU $22 CROCO_LENGTH
EQU $02 CROCO_X_OFFSET
EQU -$01 CROCO_Y_OFFSET
LABEL $48F4 croco3a_sprite
LABEL $4912 croco3a_object
LABEL $493B croco3b_object
LABEL $491D croco3b_sprite
LABEL $4960 croco3c_object
LABEL $4946 croco3c_sprite
LABEL $4989 croco3d_object
LABEL $496B croco3d_sprite
LABEL $4994 croco4a_object
LABEL $499F croco4b_object
LABEL $49AA croco4c_object
LABEL $49B5 croco4d_object
LABEL $49C0 crocoh1a_sprite
LABEL $4A09 crocoh1b_object
LABEL $49E7 crocoh1b_sprite
LABEL $4A3A crocoh1c_object
LABEL $4A14 crocoh1c_sprite
LABEL $4A6B crocoh1d_object
LABEL $4A45 crocoh1d_sprite
LABEL $4A9C crocoh1e_object
LABEL $4A76 crocoh1e_sprite
LABEL $4AA7 crocoh1f_object
LABEL $4AB2 otter1a_sprite
LABEL $4AE9 otter1b_object
LABEL $4AD3 otter1b_sprite
LABEL $4B52 levels
LABEL $4BDD level2_data
COMMENT_LABEL $4BDD verified
LABEL $4C68 level3_data
COMMENT_LABEL $4C68 verified
LABEL $4CF3 level4_data
COMMENT_LABEL $4CF3 verified
LABEL $4D7E level5_data
COMMENT_LABEL $4D7E verified
LABEL $4E09 level6_data
COMMENT_LABEL $4E09 verified
LABEL $4E94 level7_data
COMMENT_LABEL $4E94 verified
LABEL $4F1F level8_data
COMMENT_LABEL $4F1F verified
LABEL $4FAA level9_data
COMMENT_LABEL $4FAA ok       non arcade conform!
LABEL $5035 level10_data
COMMENT_LABEL $5035 ok       non arcade conform!
LABEL $50C0 level11_data
COMMENT_LABEL $50C0 ok       non arcade conform!
LABEL $514B level12_data
COMMENT_LABEL $514B ok       non arcade conform!
LABEL $51D6 level13_data
LABEL $5261 level14_data
LABEL $52EC level15_data
COMMENT_LABEL $52EC ;;;;;;;;;;;;
LABEL $5377 level16_data
LABEL $546D FontRow1
LABEL $54B4 FontRow2
LABEL $54FB FontRow3
LABEL $5542 FontRow4
LABEL $5589 FontRow5
LABEL $55D0 FontRow6
LABEL $5617 FontRow7
EQU $02 ZERO_DELAY_P
COMMENT_LABEL $02 delay 7 counter is exactly 111 cycles delay between zero SETTING and zero unsetting (in moveto_d)
EQU $47 FONT_LENGTH
LABEL $544E FONT_START_A
COMMENT_LABEL $544E // space is 1
LABEL $55F8 FONT_END
LABEL $5666 next_line_a
LABEL $5673 zeroLoop_a
LABEL $568B LF33D213
LABEL $568F Print_Str_a
LABEL $5696 LF4A5_a
LABEL $56B8 LF4CB_a
LABEL $56B4 LF4C7_a
LABEL $56D5 LF50A_a
LABEL $56DE options_string
LABEL $56E6 no_players_string_0
LABEL $56F2 no_players_string_1
LABEL $56F4 no_players_string_2
LABEL $56F6 mode_string_0
LABEL $5702 mode_string_1
LABEL $570E mode_string_2
LABEL $5717 mode_string_3
LABEL $5720 music_string_0
LABEL $572C music_string_1
LABEL $572F music_string_2
LABEL $5733 resetHS_0
LABEL $573A resetHS_1
LABEL $5742 resetHS_2
EQU $00 PLAYER_OPTION
EQU $01 MODE_OPTION
EQU $02 MUSIC_OPTION
EQU $03 LEVEL_OPTION
EQU $04 RESET_OPTION
EQU $05 BACK_OPTION
LABEL $5747 concatStrings
LABEL $574B nextLetter
LABEL $5753 nextString
LABEL $5753 nextLetter2
LABEL $576E option_screen_loop
LABEL $5793 no_x_change
LABEL $5804 joystickHandleDone
LABEL $5981 selectLevel
LABEL $58F8 toggleOptions
LABEL $57D3 pos_down_o
LABEL $57A0 pos_up_o
LABEL $57C2 levelSelectOk
LABEL $57BF previousNotReset
LABEL $57F5 levelSelectOk2
LABEL $57F2 previousNotReset2
EQU $50 DEFAULT_INTENSITY
EQU $60 TITLE_INTENSITY
LABEL $597A checkIntensity
LABEL $5833 pl2
LABEL $5836 pls
LABEL $584B normalIntensityLevelGO
LABEL $5853 noIntensityLevel2GO
LABEL $5860 mos2
LABEL $586C mos
LABEL $5869 mos3
LABEL $588A mus2
LABEL $588D mus
LABEL $58A2 noIntensityLevel
LABEL $58A9 normalIntensityLevel
LABEL $58B1 noIntensityLevel2
LABEL $58CF res2
LABEL $58D2 res
LABEL $594A outOptions
LABEL $5914 nextOption1
LABEL $5911 playGoOn
LABEL $5927 nextOption2
LABEL $5921 optionOk1
LABEL $5937 nextOption3
LABEL $5947 nextOption4
LABEL $5955 nov4eback
LABEL $5961 lowerTen
LABEL $59B7 flashInt
LABEL $597E setintcheck
LABEL $59A1 decreaseLevel
LABEL $599A lowLevel
LABEL $599B IncDone
LABEL $599B DecDone
LABEL $59B4 noBiggi
LABEL $59C3 intensityValues
LABEL $59F7 newJumpPossible
LABEL $5A82 continue_left_jump
LABEL $5A38 continue_right_jump
LABEL $5AFF continue_up_jump
LABEL $5B75 continue_down_jump
LABEL $5A99 no_new_xpos
LABEL $5A4F pos_left
LABEL $5A03 pos_right
LABEL $5B89 positioning_done
LABEL $74C7 Karl_Jump_Sound
LABEL $5A99 new_xpos_exit
LABEL $5B89 no_new_ypos
LABEL $5B15 pos_down
LABEL $5AA5 pos_up
LABEL $5AE2 no_change220
LABEL $5B58 no_change222
LABEL $5B89 new_ypos_exit
LABEL $5B8E home_jump_tried
LABEL $000F DIE_WALL_JUMP
LABEL $5B95 home1_test
LABEL $5BA9 home2_test
LABEL $5C26 no_object_in_home
LABEL $5BF9 object_in_home
LABEL $5BBD home3_test
LABEL $5BD1 home4_test
LABEL $5BE5 home5_test
LABEL $5C0D no_home_fly
LABEL $5C26 init_with_bonus
LABEL $5C19 no_half_croco
LABEL $5C20 no_full_croco
LABEL $0000 DIE_HOME_FULL
LABEL $74D0 KarlHomeJump_Sound
LABEL $5C41 gimmickStillPossible
LABEL $5C73 no_new_level
LABEL $5C5B no_roll_over
LABEL $5C69 goingOutHere
EQU $01 HAS_VOICE0
EQU $01 HAS_VOICE1
EQU $01 HAS_TONE0
EQU $01 HAS_TONE1
LABEL $5C92 playMusicOk
LABEL $5CBE no_ym_music
LABEL $5CEE no_streaming_112
LABEL $5D04 bitPosOk227
LABEL $5D10 noChangeAtAllp
LABEL $5D17 STREAM_PART_2
LABEL $5D2C bitPosOk228
LABEL $5D38 noVoiceChange1
LABEL $5D3F STREAM_PART_3
LABEL $5F0A STREAM_PART_6
LABEL $5D54 bitPosOk229
LABEL $5DB4 voice0AmplitudedonePart
LABEL $5D6E bitPosOk230
LABEL $5D82 bitPosOk231
LABEL $5D96 bitPosOk232
LABEL $5DAA bitPosOk233
LABEL $5DC2 STREAM_PART_4
LABEL $5DBB voice0NoLowFreqPartFront
LABEL $5E8E STREAM_PART_5
LABEL $5DD7 bitPosOk235
LABEL $5DF1 bitPosOk236
LABEL $5E05 bitPosOk237
LABEL $5E19 bitPosOk238
LABEL $5E2D bitPosOk239
LABEL $5E41 bitPosOk240
LABEL $5E55 bitPosOk241
LABEL $5E69 bitPosOk242
LABEL $5E7D bitPosOk243
LABEL $5E87 voice0NoLowFreqPart
LABEL $5EA3 bitPosOk245
LABEL $5F03 voice0NoHiFreqPart
LABEL $5EBD bitPosOk246
LABEL $5ED1 bitPosOk247
LABEL $5EE5 bitPosOk248
LABEL $5EF9 bitPosOk249
LABEL $5F1F bitPosOk251
LABEL $5F2B noVoiceChange2
LABEL $5F32 STREAM_PART_7
LABEL $5F47 bitPosOk252
LABEL $5FA7 voice1AmplitudedonePart
LABEL $5F61 bitPosOk253
LABEL $5F75 bitPosOk254
LABEL $5F89 bitPosOk255
LABEL $5F9D bitPosOk256
LABEL $5FB5 STREAM_PART_8
LABEL $5FAE voice1NoLowFreqPartFront
LABEL $6081 STREAM_PART_9
LABEL $5FCA bitPosOk258
LABEL $5FE4 bitPosOk259
LABEL $5FF8 bitPosOk260
LABEL $600C bitPosOk261
LABEL $6020 bitPosOk262
LABEL $6034 bitPosOk263
LABEL $6048 bitPosOk264
LABEL $605C bitPosOk265
LABEL $6070 bitPosOk266
LABEL $607A voice1NoLowFreqPart
LABEL $6096 bitPosOk268
LABEL $60F6 voice1NoHiFreqPart
LABEL $60B0 bitPosOk269
LABEL $60C4 bitPosOk270
LABEL $60D8 bitPosOk271
LABEL $60EC bitPosOk272
LABEL $60FD levelDoneThemeLen
LABEL $60FF levelDoneTheme
LABEL $62E7 gameStartThemeLen
LABEL $62E9 gameStartTheme
LABEL $64F6 inGameTheme1Len
LABEL $64F8 inGameTheme1
LABEL $6AD7 inGameTheme2Len
LABEL $6AD9 inGameTheme2
LABEL $6E26 inGameTheme3Len
LABEL $6E28 inGameTheme3
LABEL $7105 reachedHomeThemeLen
LABEL $7107 reachedHomeTheme
LABEL $721F gameOverThemeLen
LABEL $7221 gameOverTheme
LABEL $736F reachedHomeHappyThemeLen
LABEL $7371 reachedHomeHappyTheme
LABEL $74A7 inGameMusic2
LABEL $74AB inGameMusic3
LABEL $74E9 KarlJump_data
LABEL $7505 KarlDeathLane_data
LABEL $7598 KarlDeathWater_data
LABEL $762D KarlHomeJump_data
LABEL $764B KarlGirlGot_data
LABEL $7726 KarlSnakeNoise_data
LABEL $777A KarlTimeOut_data
LABEL $77CD KarlWaveNoise_data
LABEL $781D NewHighScoreJingle_data
LABEL $786B KarlTimerBonus_data
LABEL $788A KarlGimmick_data
COMMENT_LABEL $788A 7
LABEL $7A76 DFEE8
LABEL $7BC1 message1
LABEL $7BD7 message2
LABEL $7C14 message5
LABEL $7BEE message3
LABEL $7C01 message4
LABEL $7C27 message6
LABEL $7C36 message7
EQU $5A DIE_HOME_CROCO
LABEL $C9C7 ramfunction
LABEL $7C82 ramfunctiondata
LABEL $7C9A ramfuncend
LABEL $7C73 StoreHiscoreFnc
LABEL $7C82 StoreHiscoreFncEnd
LABEL $7C7B v4eloop
LABEL $7C8D ramloop
LABEL $7C94 ramloop2
LABEL $7D06 PADDBYTES
LABEL $7FC8 vec4Register
LABEL $7FE9 *
LABEL $0097 *xfer
COMMENT_LINE $0000 ; hey dissi "watch $circleHalf 2 0"
COMMENT_LINE $0000 FIXED 21.09.2020
COMMENT_LINE $0000 Level 9 on cranky vectrex does not work
COMMENT_LINE $0000 snake levels frog "jumps" from lane to lane ...
COMMENT_LINE $0000 changes on 2. April 2019
COMMENT_LINE $0000 - Fly vectorlist  three positions, to accomodate cranky vectrex
COMMENT_LINE $0000 adjustment for cranky vectrex in demo mode (4 NOP)
COMMENT_LINE $0000 bug fix - car dwath in demo mode, box was not centered (my own wait recal did not Zero!)
COMMENT_LINE $0000 NOT_TEST = 1
COMMENT_LINE $0000 hey dissi "watch RecalCounter 2"
COMMENT_LINE $0000 Karl Quappe
COMMENT_LINE $0000 1.0 Version was:
COMMENT_LINE $0000 written by Malban in March-April 1998, that version was called Vectrex Frogger
COMMENT_LINE $0000 all stuff contained here is public domain
COMMENT_LINE $0000 2.0 Version was done in 2016 by Malban
COMMENT_LINE $0000 comments and vectrex talk are welcome
COMMENT_LINE $0000 my email: malban@malban.de
COMMENT_LINE $0000 Stuff that might be subject to change/is not as a player would expect:
COMMENT_LINE $0000 - RecalCounter is not player dependend -> Wave sound
COMMENT_LINE $0000 start level - first level that will be played, level definitions in "level.i"
COMMENT_LINE $0000 see also if defs for HALFSPEED in other files (InMoves.i -> GENERAL_IN_MOVE_SPRITE e.g.)
COMMENT_LINE $0000 if included defined Bin > 32k
COMMENT_LINE $0000 if included defined Bin > 32k
COMMENT $0000 vectrex function includes
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 this file contains includes for vectrex BIOS functions and variables      ;
COMMENT_LINE $0000 it was written by Bruce Tomlin, slighte changed by Malban                 ;
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 $C839   ;Pointer to copyright string during startup
COMMENT_LINE $0000 $C83B   ;High score cold-start flag (=0 if valid)
COMMENT_LINE $0000 $C83C   ;temp byte
COMMENT_LINE $0000 $C843   ;        register 9
COMMENT_LINE $0000 $C844   ;        register 8
COMMENT_LINE $0000 $C848   ;        register 4
COMMENT_LINE $0000 $C849   ;        register 3
COMMENT_LINE $0000 $C84A   ;        register 2
COMMENT_LINE $0000 $C84C   ;        register 0
COMMENT_LINE $0000 $C85E   ;Scratch 'score' storage for Display_Option (7 bytes)
COMMENT_LINE $0000 $C868...$C876   ;Unused?
COMMENT_LINE $0000 $C878   ;Unused?
COMMENT_LINE $0000 $C880 - $CBEA is user RAM  ;
COMMENT_LINE $0000 0 sample/hold (0=enable  mux 1=disable mux)
COMMENT_LINE $0000 1 mux sel 0
COMMENT_LINE $0000 2 mux sel 1
COMMENT_LINE $0000 3 sound BC1
COMMENT_LINE $0000 4 sound BDIR
COMMENT_LINE $0000 5 comparator input
COMMENT_LINE $0000 6 external device (slot pin 35) initialized to input
COMMENT_LINE $0000 7 /RAMP
COMMENT_LINE $0000 0 PA latch enable
COMMENT_LINE $0000 1 PB latch enable
COMMENT_LINE $0000 2 \                     110=output to CB2 under control of phase 2 clock
COMMENT_LINE $0000 3  > shift register control     (110 is the only mode used by the Vectrex ROM)
COMMENT_LINE $0000 4 /
COMMENT_LINE $0000 5 0=t2 one shot                 1=t2 free running
COMMENT_LINE $0000 6 0=t1 one shot                 1=t1 free running
COMMENT_LINE $0000 7 0=t1 disable PB7 output       1=t1 enable PB7 output
COMMENT_LINE $0000 0 CA1 control     CA1 -> SW7    0=IRQ on low 1=IRQ on high
COMMENT_LINE $0000 1 \
COMMENT_LINE $0000 2  > CA2 control  CA2 -> /ZERO  110=low 111=high
COMMENT_LINE $0000 3 /
COMMENT_LINE $0000 4 CB1 control     CB1 -> NC     0=IRQ on low 1=IRQ on high
COMMENT_LINE $0000 5 \
COMMENT_LINE $0000 6  > CB2 control  CB2 -> /BLANK 110=low 111=high
COMMENT_LINE $0000 7 /
COMMENT_LINE $0000 bit                             cleared by
COMMENT_LINE $0000 0 CA2 interrupt flag            reading or writing port A I/O
COMMENT_LINE $0000 1 CA1 interrupt flag            reading or writing port A I/O
COMMENT_LINE $0000 2 shift register interrupt flag reading or writing shift register
COMMENT_LINE $0000 3 CB2 interrupt flag            reading or writing port B I/O
COMMENT_LINE $0000 4 CB1 interrupt flag            reading or writing port A I/O
COMMENT_LINE $0000 5 timer 2 interrupt flag        read t2 low or write t2 high
COMMENT_LINE $0000 6 timer 1 interrupt flag        read t1 count low or write t1 high
COMMENT_LINE $0000 7 IRQ status flag               write logic 0 to IER or IFR bit
COMMENT_LINE $0000 0 CA2 interrupt enable
COMMENT_LINE $0000 1 CA1 interrupt enable
COMMENT_LINE $0000 2 shift register interrupt enable
COMMENT_LINE $0000 3 CB2 interrupt enable
COMMENT_LINE $0000 4 CB1 interrupt enable
COMMENT_LINE $0000 5 timer 2 interrupt enable
COMMENT_LINE $0000 6 timer 1 interrupt enable
COMMENT_LINE $0000 7 IER set/clear control
COMMENT_LINE $0000 Rot_VL_dft      EQU     $F637   ;
COMMENT_LINE $0000 Rot_VL_ab       EQU     $F610   ;
COMMENT_LINE $0000 Rot_VL          EQU     $F616   ;
COMMENT_LINE $0000 Rot_VL_Mode_a   EQU     $F61F   ;
COMMENT_LINE $0000 Rot_VL_Mode     EQU     $F62B   ;
COMMENT_LINE $0000 Rot_VL_dft      EQU     $F637   ;
COMMENT $0000 vectrex functions as macros (some)
COMMENT_LINE $0000 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $0000 in 2016
COMMENT_LINE $0000 all stuff contained here is public domain
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 this file contains makro definitions of vectrex BIOS functions, these are ;
COMMENT_LINE $0000 sometimes exact clones of the BIOS functions                              ;
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 most of these macros are taken from the ROM to avoid
COMMENT_LINE $0000 all those JSR / RTS, in order to save time (over space)
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 pretty for optimizing to use a makro :-)
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 pretty for optimizing to use a makro :-)
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 /BLANK low and /ZERO low
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 Store intensity in D/A
COMMENT $0000 mux disabled channel 2
COMMENT $0000 mux enabled channel 2
COMMENT $0000 turn off mux
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 move to time 1 lo, this means scaling
COMMENT $0000 move to time 1 lo, this means scaling
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 scale for placing first point
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 point to shadow memory
COMMENT $0000 point to sound buffer
COMMENT $0000 init count for 14 registers
COMMENT $0000 get next register
COMMENT $0000 skip if unchanged
COMMENT $0000 store register select byte
COMMENT $0000 sound BDIR on, BC1 on, mux off
COMMENT $0000 sound BDIR off, BC1 off, mux off
COMMENT $0000 read sound chip status (?)
COMMENT $0000 store data byte
COMMENT $0000 sound BDIR on, BC1 off, mux off
COMMENT $0000 sound BDIR off, BC1 off, mux off
COMMENT $0000 go back for next register
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 the RAM usage could be better organized and optimized
COMMENT_LINE $0000 as of now I still have a 100 bytes (or so) to spare, so there never was a need to optimize
COMMENT_LINE $0000 there are even some vars that are not used anymore but are leftovers that I didn't clean up from version 1
COMMENT_LINE $0000 user variable definitions
COMMENT_LINE $0000 $c880
COMMENT_LINE $0000 following are 'in game' variables, out of the game these can be reused
COMMENT_LINE $0000 scroll_variables_start  EQU  morph_div_jsr + 2            ; from here reuse scroll variables...
COMMENT_LINE $0000 from here only variables in game!!!
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 a short note on the sprite offsets: all sprites have 'naturally' a starting
COMMENT_LINE $0000 point the offset is the space between that starting point and a 'virtual'
COMMENT_LINE $0000 grid position. the value of these offsets heavily depend on which scaling is used,
COMMENT_LINE $0000 so if you use a different 'resolution' these offsets must be changed also...
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 following is an exact list object structure... for girl
COMMENT_LINE $0000 ;;;;;;;;
COMMENT_LINE $0000 one complete = of player information
COMMENT_LINE $0000 this is copy to and from when the players switch
COMMENT_LINE $0000 there is RAM enough to spare, I just didn't want a 3 or 4 player game... (pl 3+4 scores could be on the bottom)
COMMENT_LINE $0000 player 1
COMMENT_LINE $0000 ;;;;;;;;
COMMENT_LINE $0000 ;;;;;;;;
COMMENT_LINE $0000 one complete = of player information
COMMENT_LINE $0000 this is copy to and from when the players switch
COMMENT_LINE $0000 there is RAM enough to spare, I just didn't want a 3 or 4 player game... (pl 3+4 scores could be on the bottom)
COMMENT_LINE $0000 player 2
COMMENT_LINE $0000 ;;;;;;;;
COMMENT_LINE $0000 ;;;;;;;;
COMMENT_LINE $0000 recoded movements are synced to that counter, also some intensity effects
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; -> 9*5 +3 = 48 byte
COMMENT_LINE $0000 this is the "old" save structure
COMMENT_LINE $0000 uses verbatim "bytes
COMMENT_LINE $0000 during a "save" this gets converted to "new save structure"
COMMENT_LINE $0000 which is reduced to use only 32 bytes
COMMENT_LINE $0000 if I wasn't so lazy, than I would have gotton rid
COMMENT_LINE $0000 of the old structure, as it is now it adds to confusion :-)
COMMENT_LINE $0000 anyways, in highscore editing and displaying - the "old" structure is used
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 save to eEprom Starts here!
COMMENT_LINE $0000 eepromRAMStart      EQU     optionsBlock
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $0000 some data here is redundant, but I didn't change it - enough RAM :-)
COMMENT_LINE $0000 for easier debugging
COMMENT_LINE $0000 these are the addresses used in the game
COMMENT_LINE $0000 that ram is used during the game to keep track of sprite movement
COMMENT_LINE $0000 and house occupants
COMMENT_LINE $0000 morphing uses ram occupied by the game, therefor only be used
COMMENT_LINE $0000 as start, end or in between sequences
COMMENT_LINE $0000 end by current_morph_vector_diffs + 2*MAX_VECTOR_MORPH
COMMENT_LINE $0000 following vars use BIOS ram locations, these BIOS routines are not used by Karl Quappe and can thus
COMMENT_LINE $0000 be reused here!
COMMENT_LINE $0000 default BIOS highscore place
COMMENT_LINE $0000 using also IRQ spaces, which are not used by frogger
COMMENT_LINE $0000 following locations keep the entries that are displayed
COMMENT_LINE $0000 as the player score during game play
COMMENT_LINE $0000 following are some 'in' game variables which can be reused, they do not
COMMENT_LINE $0000 collide with the other side...
COMMENT_LINE $0000 variables that are only used on startup screen
COMMENT_LINE $0000 these use the same namespace as the above variables below
COMMENT_LINE $0000 see bottom of file for further addresses!
COMMENT_LINE $0000 following are a lot of constants which I declared for 'better'
COMMENT_LINE $0000 readability (and to keep things variable (constant<->variable!!!)) of the source...
COMMENT_LINE $0000 these are not really well sorted...
COMMENT_LINE $0000 following are some status constants used for turtle, snake, otter, fly, girl and croco
COMMENT_LINE $0000 bonus BIT MAPS, only two for now, these are AND or ORed
COMMENT_LINE $0000 morphing stati...
COMMENT_LINE $0000 and general morphing constants
COMMENT_LINE $0000 now fixed and allways done with
COMMENT_LINE $0000 16 steps!!!
COMMENT_LINE $0000 number of steps between first and second object
COMMENT_LINE $0000 this actually uses shift rights to implement 32 steps between vectors
COMMENT_LINE $0000 here allways the actual number of steps -1
COMMENT_LINE $0000 !!! all values supported, but only
COMMENT_LINE $0000 8, 16, 32, 64 are using shift as divs!!!
COMMENT_LINE $0000 other values will be SLOW
COMMENT_LINE $0000 (about 10000 cycles per round)
COMMENT_LINE $0000 they always appear somewhere... truth values :-)
COMMENT_LINE $0000 vectrex coordinates use range from -128 to +127
COMMENT_LINE $0000 these top and bottom values are for scale factor $ff
COMMENT_LINE $0000 different sizes of texts, in format yx, note: different ranges for y and x!
COMMENT_LINE $0000 following are SPECIAL definitions for special objects
COMMENT_LINE $0000 these must be = in the object definition
COMMENT_LINE $0000 scale factors used in the game (all different for optimization :-) :-( )
COMMENT_LINE $0000 these positions describe where the objects
COMMENT_LINE $0000 will appear/disappear on the screen
COMMENT_LINE $0000 this value is added to the repositioning of sprites
COMMENT_LINE $0000 if they move out of bounds and go to the other side
COMMENT_LINE $0000 to prevent going out of bounds right away again
COMMENT_LINE $0000 because of thei offset
COMMENT_LINE $0000 I'm not sure all sprites keep this maximum
COMMENT_LINE $0000 this may 'cause random repositioning of sprites
COMMENT_LINE $0000 a known problem, but I didin't increase this, since the
COMMENT_LINE $0000 actual playing area is already quite small as it is...
COMMENT_LINE $0000 following are some 'blowup' factors applied to various objects (for optimization)
COMMENT_LINE $0000 these factors must be = that the resulting coordinate is still below 127
COMMENT_LINE $0000 for optimization the resulting vectors should be pretty near 127
COMMENT_LINE $0000 and the scale factor be = that it is the smallest possible value!
COMMENT_LINE $0000 grid size of the virtal grid in different scale factors
COMMENT_LINE $0000 max 10, so that 12*GRID_SIZE still <= 127
COMMENT_LINE $0000 size can than be altered using scale factor
COMMENT_LINE $0000 I want to draw all lines in one
COMMENT_LINE $0000 go, so 10 is max here :-(
COMMENT_LINE $0000 otherwise I could scale the sprites
COMMENT_LINE $0000 with the same scaling value...
COMMENT_LINE $0000 frogger constants
COMMENT_LINE $0000 following are position information as to where the houses are located
COMMENT_LINE $0000 in SCALE_FACTOR_GAME
COMMENT_LINE $0000 following are for constants for checking which way frogger heads
COMMENT_LINE $0000 value of these is of no importance, just difference...
COMMENT_LINE $0000 start position of frog in GRID_SIZE GAME
COMMENT_LINE $0000 start band of frog in (0-12) in GRID POSITION
COMMENT_LINE $0000 number of 'pixels' one jump takes the frog...
COMMENT_LINE $0000 obviously in GRID_SIZE_GAME - for animation of frog, this should be divideable by 8!
COMMENT_LINE $0000 sizes of the different frog objects...
COMMENT_LINE $0000 since all the same, I don't use them anymore...
COMMENT_LINE $0000 positions of where frog will be considered to be out of bounds...
COMMENT_LINE $0000 in GAME position
COMMENT_LINE $0000 some positioning variables for the score information display...
COMMENT_LINE $0000 in screen coordinates
COMMENT_LINE $0000 following are some 'private' makro definitions
COMMENT_LINE $0000 most of them have been splitted into the main source by now
COMMENT_LINE $0000 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $0000 in 2016
COMMENT_LINE $0000 all stuff contained here is public domain
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 this file contains private makros, some are taken from the BIOS of vectrex;
COMMENT_LINE $0000 and changed slightly to be more speedy, other were written alltogether by ;
COMMENT_LINE $0000 me, some of these are even obsolete... but all should be in a working     ;
COMMENT_LINE $0000 state                                                                     ;
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $0000 in 2016
COMMENT_LINE $0000 all stuff contained here is public domain
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 this file contains macros that are used to print the score while in game  ;
COMMENT_LINE $0000 It is special in the way that it uses an own 5 line FONT                  ;
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 High score in Karl Quappe - 3 parts
COMMENT_LINE $0000 1) HighScore while playing
COMMENT_LINE $0000 2) Highscore in HighscoreTable
COMMENT_LINE $0000 3) Highscore on Eprom
COMMENT_LINE $0000 1) While playing - is kept  in 5 seperate bytes
COMMENT_LINE $0000 score_digit_1 - score_digit_5
COMMENT_LINE $0000 each of these digits has a range from 0-9
COMMENT_LINE $0000 digit 5 (MSB) has a range from 0-16
COMMENT_LINE $0000 each digit is printed with a special font, 0-9 representing 0-9 and 10-16 representing 10-16 (in one character)
COMMENT_LINE $0000 so the highest score displayable is: 16 999 0 (last character is always a "0")
COMMENT_LINE $0000 2) Highscore table consists of 6 ascii characters representing the score in ascii nothing special here
COMMENT_LINE $0000 3) Highscore on the eprom is kept as a 16bit unsigned int (0-65535)
COMMENT_LINE $0000 upon conversion the score is shifted one position to the right (divided by 10), since the last position is always a 0
COMMENT_LINE $0000 Thus on the eprom a score up to 655350 can be stored.
COMMENT_LINE $0000 ergo: in game highscore is correct displayed up to a score of 169990
COMMENT_LINE $0000 highscore recording and displaying in HS table is correct up to a score of 655350
COMMENT_LINE $0000 after that the score starts from 0 again
COMMENT $0000 Save string pointer
COMMENT $0000 Point to start of chargen bitmaps
COMMENT $0000 a->AUX: b->ORB: $8x = Disable RAMP, Disable Mux, mux sel = 01 (int offsets)
COMMENT $0000 Clear D/A output
COMMENT $0000 Shift reg mode = 110 (shift out under system clock), T1 PB7 disabled, one shot mode
COMMENT_LINE $0000 first entry here, ramp is disabled
COMMENT_LINE $0000 if there was a jump from below
COMMENT_LINE $0000 ramp will be enabled by next line
COMMENT $0000 ramp off/on set mux to channel 1
COMMENT $0000 Enable mux
COMMENT $0000 both to ORB, both disable ram, mux sel = 0 (y int), a:->enable mux: b:->disable mux
COMMENT $0000 Disable mux
COMMENT $0000 Disable RAMP, set mux to channel 0, disable mux
COMMENT $0000 Enable mux
COMMENT $0000 disable mux
COMMENT_LINE $0000 Note:
COMMENT_LINE $0000 doing another "STB      <VIA_port_b" does not work due to timing issues!
COMMENT $0000 Get text width
COMMENT $0000 Send it to the D/A
COMMENT $0000 [4]enable RAMP, disable mux
COMMENT $0000 [3]
COMMENT_LINE $0000 one letter is drawn (one row that is) in 18 cycles
COMMENT_LINE $0000 13 cycles overhead
COMMENT_LINE $0000 ramp is thus active for #ofLetters*18 + 13 cycles
COMMENT $0000 [+5]Get bitmap from chargen table
COMMENT $0000 [+4]rasterout of char bitmap "row" thru shift out in shift register
COMMENT $0000 [+6]Get next character
COMMENT $0000 [+3]Go back if not terminator
COMMENT $0000 [4]disable RAMP, disable mux
COMMENT $0000 Negate text width to D/A
COMMENT $0000 enable ramp, disable mux
COMMENT $0000 enable RAMP, disable mux
COMMENT $0000 [4]Check for last row
COMMENT $0000 [3]Branch if last row
COMMENT $0000 [5]Point to next chargen row
COMMENT $0000 [6]Get string length
COMMENT $0000 [7]
COMMENT $0000 [2] - 2
COMMENT $0000 [3]Delay a moment
COMMENT_LINE $0000 I think if the Macro was given the length of the string
COMMENT_LINE $0000 than another 2 cycles per line can be saved,
COMMENT_LINE $0000 since we probably could use leay -1,y bne...
COMMENT_LINE $0000 in the loop, and not only load "A", but also B with textheight!
COMMENT $0000 [6] Point to start of text string
COMMENT $0000 [3]Delay a moment
COMMENT $0000 [2]disable RAMP, disable mux
COMMENT $0000 [2]
COMMENT $0000 [2]
COMMENT $0000 [3]Delay some more in a loop
COMMENT $0000 disable RAMP, disable mux
COMMENT $0000 Get text height
COMMENT $0000 Store text height in D/A [go down -> later]
COMMENT $0000 Enable mux
COMMENT $0000 disable RAMP, disable mux
COMMENT $0000 Clear D/A
COMMENT $0000 Go back for next scan line
COMMENT $0000 #$98 ;
COMMENT $0000 T1->PB7 enabled
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 end string with $81
COMMENT $0000 space betwwen score, and lives
COMMENT $0000 space betwwen lifes, and level
COMMENT $0000 end string with $81
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 move to score position
COMMENT $0000 this and the overnext instruction, zero the beam!
COMMENT $0000 /BLANK low and /ZERO low
COMMENT_LINE $0000 for positioning allways 'SCALE_FACTOR_GRID'
COMMENT_LINE $0000 delay in zeroing + integrator reset makes display of score much nore stable
COMMENT $0000 reset integrator offset
COMMENT $0000 clear A, and scale to B
COMMENT $0000 patched for speed... /2
COMMENT_LINE $0000 this is again a move to D, this time D is splitted into two B, A is
COMMENT_LINE $0000 still 0
COMMENT $0000 y,x
COMMENT $0000 Blank low, zero high?
COMMENT $0000 Disable mux
COMMENT $0000 enable timer
COMMENT_LINE $0000 we load our X integrators AFTER we enable RAMP
COMMENT_LINE $0000 since this is a solidary move this is ok
COMMENT_LINE $0000 it saves a few cycles out of the timer wait
COMMENT_LINE $0000 but we have to offset the loss of ramp with a higher integration value
COMMENT $0000 player 1 first
COMMENT $0000 X pos relative to start
COMMENT $0000 Store X in D/A register
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 ;;;;;;;;; MOVE SCORE START
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 125 cycles to spare
COMMENT_LINE $0000 do everything really slowly in here - we have time enough!!!
COMMENT_LINE $0000 following move frog takes abou 80 cycles
COMMENT_LINE $0000 ideal for another in move routine!
COMMENT $0000 get joystick stuff, and move frog, collision detection...
COMMENT $0000 Vec_Str_Ptr ;Point to start of text string
COMMENT $0000 Point to start of chargen bitmaps
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 ;;;;;;;;; MOVE SCORE END
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $0000 done with move?
COMMENT $0000 no, than go on waiting
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 special add routines. since there are only +-10 and 200 hundred
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 the "large" adds are not cycle relevant since only used in intermissions
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 destroys D
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 **************************************************************************
COMMENT_LINE $0000 following are some 'private' makro definitions
COMMENT_LINE $0000 some heavily optimized for speed :-(
COMMENT_LINE $0000 needs: DP = D0
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 a = reg, b = data
COMMENT $0000 store register select byte
COMMENT $0000 sound BDIR on, BC1 on, mux off _ LATCH
COMMENT $0000 sound BDIR off, BC1 off, mux off - INACTIVE
COMMENT $0000 read sound chip status (?)
COMMENT $0000 store data byte
COMMENT $0000 sound BDIR on, BC1 off, mux off - WRITE
COMMENT $0000 sound BDIR off, BC1 off, mux off - INACTIVE
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 store data in reg a in an
COMMENT_LINE $0000 appropriate way to PSG register (here: BIOS working buffer)
COMMENT_LINE $0000 ldu      #(Vec_Music_Work + register)
COMMENT_LINE $0000 sta      ,u
COMMENT_LINE $0000 ldu      #(Vec_Music_Work + register)
COMMENT_LINE $0000 stb      ,u
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 Karl Quappe $3c is default, all music is plaxed using channel 0+1
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 this makro is supposed to 'reset' the sound hardware,
COMMENT $0000 no music is playing ->0
COMMENT $0000 shadow regs
COMMENT_LINE $0000 in the next do sound call
COMMENT_LINE $0000 all regs are cleared automatically
COMMENT $0000 end of macro
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 this makro should be called every round a music is to be played
COMMENT_LINE $0000 this does not play the sound, it initializes it only, but also every round!
COMMENT_LINE $0000 BIOS MUSIC
COMMENT_LINE $0000 leaves with DP = to C8
COMMENT_LINE $0000 expects music to be initialized
COMMENT_LINE $0000 and pointer in music_active
COMMENT $0000 name of macro
COMMENT $0000 (MAKRO) the 'Init_Music_chk' expects this
COMMENT $0000 get active music
COMMENT $0000 and init new notes
COMMENT $0000 end of macro
COMMENT_LINE $0000 offspring of the above, squized cycles :-)
COMMENT $0000 name of macro
COMMENT $0000 get active music
COMMENT $0000 and init new notes
COMMENT $0000 end of macro
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 this makro initializes a new piece of music
COMMENT_LINE $0000 the above 'function' must be called every round in order for the music
COMMENT_LINE $0000 actually to be played
COMMENT_LINE $0000 BIOS MUSIC
COMMENT $0000 name of macro, and variable name, can also be accessed with \1
COMMENT_LINE $0000 the next instructions initialize a new sound
COMMENT_LINE $0000 load #1
COMMENT_LINE $0000 set this as marker for music start
COMMENT_LINE $0000 CLR      Vec_Music_Flag               ; doesn'T destroy a register
COMMENT_LINE $0000 INC      Vec_Music_Flag               ; to do it that way
COMMENT $0000 load a music structure (piece_of_music)
COMMENT $0000 and store it to my own music active pointer
COMMENT_LINE $0000 next a do_my_sound and than do sound must be called
COMMENT $0000 end of macro
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 this makro is sort of the startup for every display round
COMMENT_LINE $0000 does all sound stuff and recalibration, leaves with
COMMENT_LINE $0000 DP = to D0
COMMENT_LINE $0000 destroyes pretty much every register...
COMMENT_LINE $0000 BIOS MUSIC
COMMENT $0000 name of macro
COMMENT $0000 (MAKRO) see above
COMMENT $0000 recal counter, about 21 Minutes befor roll over
COMMENT $0000 sets dp to d0, and pos at 0, 0
COMMENT $0000 just for assembler optimization...
COMMENT $0000 ROM function that does the sound playing
COMMENT $0000 end of macro
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 offspring of the above, squized cycles :-)
COMMENT_LINE $0000 no MUSIC init
COMMENT $0000 name of macro
COMMENT $0000 just for assembler optimization...
COMMENT $0000 end of macro
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 recal counter, about 21 Minutes befor roll over
COMMENT $0000 Wait for timer t2
COMMENT $0000 Store refresh value
COMMENT $0000 into timer t2
COMMENT $0000 blank low and zero low
COMMENT $0000 clear shift register
COMMENT $0000 clear D/A register
COMMENT $0000 mux=1, disable mux
COMMENT $0000 mux=1, enable mux
COMMENT $0000 disable mux
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 the following makros are for intensity setting
COMMENT_LINE $0000 to = a intensity the bios does use some (many) cycles, here a
COMMENT_LINE $0000 test really saves some cycles, if intensity is = many times per round
COMMENT_LINE $0000 (like differently shaded sprites)
COMMENT_LINE $0000 intensity = to value found in register A
COMMENT_LINE $0000 is compared/stored to 'current_brightness'
COMMENT_LINE $0000 if not equal the new brightness is set!
COMMENT $0000 name of macro, and variable name, can also be accessed with
COMMENT $0000 compare to last known value
COMMENT $0000 if the same, than jump
COMMENT $0000 otherwise store new value
COMMENT $0000 and than set the intensity
COMMENT $0000 end of macro
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 same as above, but allways sets the new brightness
COMMENT_LINE $0000 good for startup of new round, since intensity MUST be = at that point
COMMENT_LINE $0000 or after other functions which destroy brighness (print_str...)
COMMENT $0000 name of macro, and variable name, can also be accessed with \1
COMMENT $0000 load brightness to A
COMMENT $0000 store it
COMMENT $0000 and change the brightness
COMMENT $0000 end of macro
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 the following makro ...
COMMENT_LINE $0000 they search for a better (faster) scale/DAC relation and use
COMMENT_LINE $0000 the scaling thus found, it should be somewhat faster that way...
COMMENT_LINE $0000 per round we save approxematly: ? cycles
COMMENT_LINE $0000 both destroy X and D
COMMENT_LINE $0000 SCALE factor is changed
COMMENT_LINE $0000 forget it !!!
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 optimzed, tweaked not perfect... 'MOVE TO D' makro
COMMENT_LINE $0000 Reset0Ref
COMMENT_LINE $0000 NOT DONE:
COMMENT_LINE $0000 what should be done:
COMMENT_LINE $0000 s = $ff / max(abs(a),abs(b))
COMMENT_LINE $0000 a = a * s
COMMENT_LINE $0000 b = b * s
COMMENT_LINE $0000 scaling = scaling / s
COMMENT_LINE $0000 that would give the most efficient positioning
COMMENT_LINE $0000 bother it takes more time to calculate the above,
COMMENT_LINE $0000 than it saves
COMMENT_LINE $0000 with every positioning via this routine now,
COMMENT_LINE $0000 it takes SCALE_FACTOR_GAME + const (of another 100+) cycles
COMMENT_LINE $0000 to do one simple positioning!!!
COMMENT_LINE $0000 that is probably about 300 cycles per positioning
COMMENT_LINE $0000 this is done about 30-40 times per round
COMMENT_LINE $0000 alone the positioning takes thus about over 10000 cycles
COMMENT_LINE $0000 and we haven't drawn a single line yet!!!
COMMENT $0000 Store Y in D/A register
COMMENT $0000 Blank low, zero high?
COMMENT $0000 Enable mux
COMMENT $0000 Clear shift regigster
COMMENT $0000 Disable mux
COMMENT $0000 Store X in D/A register
COMMENT $0000 enable timer
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 there are many 16 bit operands missing, so is
COMMENT_LINE $0000 a LSRD
COMMENT_LINE $0000 this macro does a 16 bit LSR on register D
COMMENT $0000 LSR B
COMMENT $0000 LSR A
COMMENT $0000 if no carry, than exit
COMMENT $0000 otherwise underflow from A to 7bit of B
COMMENT $0000 done
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 divides D by tmp1, result in B
COMMENT_LINE $0000 uses divide_tmp as storage
COMMENT_LINE $0000 only 8 bit in tmp1, but must be manually poked to tmp1 + 1
COMMENT_LINE $0000 sign is correctly handled
COMMENT_LINE $0000 can probably be optimized like hell
COMMENT_LINE $0000 perhaps only nearing the result
COMMENT_LINE $0000 using 2 shifts and a plus
COMMENT_LINE $0000 might be worth a try,
COMMENT_LINE $0000 see vectrex emulator for algorithm...
COMMENT_LINE $0000 could be implemented with a tabel, which in turn
COMMENT_LINE $0000 could be caclulated on the fly... (upon startup)
COMMENT_LINE $0000 this makro divides exact, but slow
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 Set scale factor
COMMENT $0000 blank low and zero low
COMMENT $0000 clear shift register
COMMENT $0000 /BLANK low and /ZERO low
COMMENT $0000 clear shift register
COMMENT $0000 clear D/A register
COMMENT $0000 mux=1, disable mux
COMMENT $0000 mux=1, enable mux
COMMENT $0000 disable mux
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 blank low and zero low
COMMENT $0000 recal counter, about 21 Minutes befor roll over
COMMENT $0000 Wait for timer t2
COMMENT $0000 Store refresh value
COMMENT $0000 into timer t2
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 is some kind of attract mode?
COMMENT $0000 if yes, do not query joystick, but look at our recorded data
COMMENT $0000 default > nothing moved
COMMENT $0000 14 bit of our recorded data is the time stamp
COMMENT $0000 reload data, and check the first 2 bits
COMMENT $0000 if msb is set, than joystick moved in X
COMMENT $0000 jump if else (than y)
COMMENT $0000 if MSB -1 is set, than movement as positive (negative - else)
COMMENT $0000 store it to our joystick result var
COMMENT $0000 negative movement, store...
COMMENT $0000 and out
COMMENT $0000 was an Y movement, reload data
COMMENT $0000 if MSB -1 is set, than movement as positive (negative - else)
COMMENT $0000 store it to our joystick result var
COMMENT $0000 and out
COMMENT $0000 negative movement, store...
COMMENT $0000 and out
COMMENT_LINE $0000 joytick pot readings are also switched by the (de)muliplexer (analog section)
COMMENT_LINE $0000 with joystick pots the switching is not done in regard of the output (in opposite to "input" switching of integrator logic)
COMMENT_LINE $0000 but with regard to input
COMMENT_LINE $0000 thus, the SEL part of the mux now selects which joystick pot is selected and send to the compare logic.
COMMENT_LINE $0000 mux sel:
COMMENT_LINE $0000 xxxx x00x: port 0 horizontal
COMMENT_LINE $0000 xxxx x01x: port 0 vertical
COMMENT_LINE $0000 xxxx x10x: port 1 horizontal
COMMENT_LINE $0000 xxxx x11x: port 1 vertical
COMMENT_LINE $0000 the result of the pot reading is compared to the
COMMENT_LINE $0000 value present in the dac and according to the comparisson the compare flag of VIA (bit 5 of port b) is set.
COMMENT_LINE $0000 (compare bit is = if contents of dac was "smaller" (signed) than the "pot" read)
COMMENT $0000 mux disabled, mux sel = 01 (vertical pot port 0)
COMMENT $0000 mux enabled, mux sel = 01
COMMENT $0000 a wait loop 32 times a loop (waiting for the pots to "read" values, and feed to compare logic)
COMMENT $0000 ...
COMMENT $0000 wait...
COMMENT $0000 disable mux
COMMENT $0000 load a with test value (positive y)
COMMENT $0000 test value to DAC
COMMENT $0000 default result value y was pushed UP
COMMENT $0000 test comparator
COMMENT $0000 if comparator cleared - joystick was moved up
COMMENT $0000 "load" with negative value
COMMENT $0000 also switch the possible result in A
COMMENT $0000 test comparator again
COMMENT $0000 if cleared the joystick was moved down
COMMENT $0000 if still not cleared, we clear a as the final vertical test result (no move at all)
COMMENT $0000 remember the result in "our" joystick data
COMMENT $0000 if y moved I assume no X move
COMMENT_LINE $0000 now the same for horizontal
COMMENT $0000 mux disabled, mux sel = 00 (horizontal pot port 0)
COMMENT $0000 mux enabled, mux sel = 01
COMMENT $0000 a wait loop 32 times a loop (waiting for the pots to "read" values, and feed to compare logic)
COMMENT $0000 ...
COMMENT $0000 wait...
COMMENT $0000 disable mux
COMMENT $0000 load a with test value (positive x)
COMMENT $0000 test value to DAC
COMMENT $0000 default result value x was pushed right
COMMENT $0000 test comparator
COMMENT $0000 if comparator cleared - joystick was moved right
COMMENT $0000 "load" with negative value
COMMENT $0000 also switch the possible result in A
COMMENT $0000 test comparator again
COMMENT $0000 if cleared the joystick was moved left
COMMENT $0000 if still not cleared, we clear a as the final vertical test result (no move at all)
COMMENT $0000 remember the result in "our" joystick data
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 copy all shadows
COMMENT $0000 number of regs to copy (+1)
COMMENT $0000 music players write here
COMMENT $0000 shadow of actual PSG
COMMENT_LINE $0000 no put to psg
COMMENT $0000 ensure shadow has copy
COMMENT_LINE $0000 a = register
COMMENT_LINE $0000 b = value
COMMENT $0000 store register select byte
COMMENT $0000 sound BDIR on, BC1 on, mux off _ LATCH
COMMENT $0000 sound BDIR off, BC1 off, mux off - INACTIVE
COMMENT $0000 read sound chip status (?)
COMMENT $0000 store data byte
COMMENT $0000 sound BDIR on, BC1 off, mux off - WRITE
COMMENT $0000 sound BDIR off, BC1 off, mux off - INACTIVE
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 expect DP = d0
COMMENT_LINE $0000 playes one piece of music, that is given as param
COMMENT $0000 this piece of music
COMMENT $0000 must be played
COMMENT $0000 NOW
COMMENT $0000 this piece of music
COMMENT $0000 must be played
COMMENT $0000 NOW
COMMENT_LINE $0000 playes one piece of music, that is given as param (same as above *cough*)
COMMENT $0000 this piece of music
COMMENT $0000 must be played
COMMENT $0000 NOW
COMMENT_LINE $0000 if no music is playing, than play given piece,
COMMENT_LINE $0000 otherwise play the given piece as next music
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 is there a current piece playing?
COMMENT $0000 if not
COMMENT $0000 play it now
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 is there a current piece playing?
COMMENT $0000 if not
COMMENT $0000 take that piece given and
COMMENT $0000 play it now
COMMENT $0000 otherwise, store it as next possible piece
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 destroys X D
COMMENT_LINE $0000 tests if the given SFX has higher (or same) prio as currently playing
COMMENT_LINE $0000 if prio higher (or none playing)
COMMENT_LINE $0000 than playes the SFX (ignored otherwise)
COMMENT_LINE $0000 all effects are playing in PSG channel 3
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 load current sfx
COMMENT $0000 if none playing - jump
COMMENT $0000 load current prio to a
COMMENT $0000 compare to prio of new sfx
COMMENT $0000 if old prio is higher than go out
COMMENT $0000 new sfx is nice
COMMENT $0000 so we store it as current sfx
COMMENT $0000 and the actual sfx data store to our sfx player vars
COMMENT $0000 tell the player, that it should play!
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 destroys D X
COMMENT_LINE $0000 play the given SFX, but only if nothing else is played (regardless of prio)
COMMENT_LINE $0000 hey dissi "b reak"
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 reset integrators
COMMENT $0000 integrator reset
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 divide (unsigned) D by 16 bit in TMP1
COMMENT_LINE $0000 result in B
COMMENT_LINE $0000 SLOW!
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 gimickTable:
COMMENT_LINE $0000 db 0 ; y
COMMENT_LINE $0000 db -70 ; x
COMMENT_LINE $0000 db 250 ; length
COMMENT_LINE $0000 db pacman1a_object
COMMENT_LINE $0000 gimmickPossible     equ      initMoveTable+2
COMMENT_LINE $0000 gimmickActive       equ      gimmickPossible+2
COMMENT_LINE $0000 gimmick_status      EQU      gimmickActive + 1            ; what's the gimmick status?
COMMENT_LINE $0000 gimmick_object      EQU      gimmick_status + 1           ; pointer to current gimmick object information
COMMENT_LINE $0000 gimmick_pos         EQU      gimmick_object + 2           ; current position of gimmick
COMMENT_LINE $0000 gimmick_anim_counter  EQU    gimmick_pos + 2              ; animation counter of gimmick
COMMENT_LINE $0000 gimmick_speed       EQU      gimmick_anim_counter + 1     ; speed of gimmick
COMMENT_LINE $0000 gimmick_countdown       EQU      gimmick_speed + 1     ; speed of gimmick
COMMENT $0000 go to 0,0
COMMENT_LINE $0000 ............................................................................
COMMENT_LINE $0000 this is actually the same as the code used in the main sprite loop
COMMENT_LINE $0000 just fitted for gimick
COMMENT $0000 scale for game positioning
COMMENT $0000 load position
COMMENT_LINE $0000 move to
COMMENT $0000 Store Y in D/A register
COMMENT $0000 Blank low, zero high?
COMMENT $0000 Enable mux
COMMENT $0000 Disable mux
COMMENT $0000 Store X in D/A register
COMMENT $0000 enable timer
COMMENT_LINE $0000 in move stuff, since it
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 ;;;;;;;;; IN MOVE GIMICK START
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $0000 move to time 1 lo, this means scaling
COMMENT $0000 move to time 1 lo, this means scaling
COMMENT $0000 and do the next
COMMENT_LINE $0000 in move stuff start
COMMENT $0000 load otter position
COMMENT $0000 add the speed
COMMENT $0000 store the new x position
COMMENT $0000 load the otter object to U
COMMENT $0000 decrease animation counter
COMMENT $0000 if zero, we must initialize new animation phase
COMMENT $0000 load old sprite offsets
COMMENT $0000 negate them (A)
COMMENT $0000 negate them (B)
COMMENT $0000 add y position to old sprite offset y
COMMENT $0000 add x position to old sprite offset x
COMMENT $0000 load new object definition
COMMENT $0000 add new sprite offset y
COMMENT $0000 add new sprite offset x
COMMENT $0000 and store the corrected position
COMMENT $0000 store new object definition to object list
COMMENT $0000 load new animation counter start
COMMENT $0000 and set it in object list
COMMENT $0000 load object vector list to X,
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 ;;;;;;;;; IN MOVE OTTER END
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $0000 22 cycles from switch on ZERO disabled, and BLANK enabled
COMMENT_LINE $0000 ............................................................................
COMMENT_LINE $0000 COPY_VECROM_TO_RAM  macro
COMMENT_LINE $0000 ldu      #vec4SaveBuffer              ; Source copy the vec4ever switching function into place
COMMENT_LINE $0000 ldx      #v4e_saveBlockStart          ; destination
COMMENT_LINE $0000 lda      #1+(v4e_saveBlockEnd-v4e_saveBlockStart)
COMMENT_LINE $0000 jsr      Move_Mem_a
COMMENT_LINE $0000 endm
COMMENT_LINE $0000 ............................................................................
COMMENT_LINE $0000 ............................................................................
COMMENT $0000 load default text height & width
COMMENT $0000 poke it to ram location
COMMENT $0000 Sets the intensity of the
COMMENT $0000 get button status
COMMENT $0000 is a button pressed?
COMMENT $0000 no, than stay in init_screen_loop
COMMENT $0000 makros for unlooping
COMMENT_LINE $0000 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $0000 in 2016
COMMENT_LINE $0000 all stuff contained here is public domain
COMMENT_LINE $0000 size similar to: SCALE_FACTOR_SPRITE 6
COMMENT_LINE $0000 "similar" since the drawing below does not use a shift register,
COMMENT_LINE $0000 so the timings are slightly different
COMMENT_LINE $0000 these routines are manualy tested using different vectrex systems
COMMENT_LINE $0000 they seem to defy cycle counting but work on the real machines rather well
COMMENT_LINE $0000 Emulators don' like it (Vide is ok'ish)
COMMENT_LINE $0000 ParaJVE: displayes only dashed
COMMENT_LINE $0000 Mess doesn't display anything
COMMENT_LINE $0000 one "inner line" of the vectorlist drawing routine
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 cycles
COMMENT $0000 #noDoubleWarn
COMMENT $0000 [6] Send X to A/D
COMMENT $0000 [4] enable timer 1
COMMENT_LINE $0000 light on
COMMENT $0000 [4] ZERO disabled, and BLANK disabled
COMMENT_LINE $0000 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0000 [8] load Y coordinate to A, X coordinate to B
COMMENT $0000 [4] Send Y to A/D
COMMENT $0000 [6]
COMMENT $0000 [2]
COMMENT_LINE $0000 light off
COMMENT $0000 [4] ZERO disabled, and BLANK enabled
COMMENT $0000 [6] Disable mux
COMMENT $0000 #noDoubleWarn
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 repetition of the above macro
COMMENT_LINE $0000 27 times below
COMMENT_LINE $0000 this is a "counter" to calculate where to jump into the the unlooping!
COMMENT_LINE $0000 length of one of the vector drawing lines in ASM
COMMENT_LINE $0000 definition must come after the above, otherwise calculation would be false
COMMENT_LINE $0000 the callable unloop" macro
COMMENT_LINE $0000 must be followed after 22 cycles with a
COMMENT_LINE $0000 ldb      #$ce
COMMENT_LINE $0000 STB     <VIA_cntl         ;/BLANK low and /ZERO low
COMMENT_LINE $0000 for example look at the subroutine: "move_wait_draw_vlc_unloop" in the main file
COMMENT_LINE $0000 "y" must be = beforehand to the jump "table"
COMMENT $0000 #noDoubleWarn
COMMENT_LINE $0000 (x) length in bytes
COMMENT_LINE $0000 [x] duration in cycles
COMMENT_LINE $0000 do one "manual" starter line in advance
COMMENT $0000 get current coordinates
COMMENT $0000 (2) [4] Send Y to A/D
COMMENT $0000 (2) [4] enable mux, thus y integrators are set to Y
COMMENT $0000 [6] Disable mux
COMMENT $0000 #noDoubleWarn
COMMENT_LINE $0000 definition must come after the above, otherwise calculation would be false
COMMENT_LINE $0000 JUMP_INTO_26\?:
COMMENT_LINE $0000 ONE_LINE_DRAW
COMMENT_LINE $0000 JUMP_INTO_25\?:
COMMENT_LINE $0000 ONE_LINE_DRAW
COMMENT $0000 [6] Send X to A/D
COMMENT_LINE $0000 light on
COMMENT $0000 [4] enable timer 1
COMMENT $0000 ZERO disabled, and BLANK disabled
COMMENT_LINE $0000 light off
COMMENT_LINE $0000 there must the above mentioned "switch the light off"
COMMENT_LINE $0000 after 22 cycles still be manually done
COMMENT_LINE $0000 (but the 22 cycles might be reused otherwise!)
COMMENT_LINE $0000 (x) length in bytes
COMMENT_LINE $0000 [x] duration in cycles
COMMENT_LINE $0000 do one "manual" starter line in advance
COMMENT $0000 get current coordinates
COMMENT $0000 (2) [4] Send Y to A/D
COMMENT $0000 (2) [4] enable mux, thus y integrators are set to Y
COMMENT $0000 [6] Disable mux
COMMENT $0000 [6] Send X to A/D
COMMENT_LINE $0000 light on
COMMENT $0000 [4] enable timer 1
COMMENT $0000 ZERO disabled, and BLANK disabled
COMMENT_LINE $0000 light off
COMMENT_LINE $0000 there must the above mentioned "switch the light off"
COMMENT_LINE $0000 after 22 cycles still be manually done
COMMENT_LINE $0000 (but the 22 cycles might be reused otherwise!)
COMMENT $0000 subroutines for "in move pauses"
COMMENT_LINE $0000 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $0000 in 2016
COMMENT_LINE $0000 all stuff contained here is public domain
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 all in moves are totally independend
COMMENT_LINE $0000 meaning all registers may be destroyed
COMMENT_LINE $0000 only thing - DP register should stay (or resetted) [Exception: GENERAL_IN_MOVE_SPRITE]
COMMENT_LINE $0000 this is stuff which takes time,
COMMENT_LINE $0000 but can be done anywhere, so we do it here
COMMENT_LINE $0000 in a 'pause', our pause lasts till GAME_SCALE ($91)
COMMENT_LINE $0000 timer is count down, that is our scale - timer...
COMMENT_LINE $0000 note:
COMMENT_LINE $0000 if levels are done well only a small fraction of these pauses will be done
COMMENT_LINE $0000 each round
COMMENT_LINE $0000 these macros are used only ONCE in the source
COMMENT_LINE $0000 this more a form of "code folding" than of macroing
COMMENT_LINE $0000 but since these macros are only used once I
COMMENT_LINE $0000 was abit lax about "local" jumps
COMMENT_LINE $0000 in general it is really dangerous to use non localized jumps in macros, but
COMMENT_LINE $0000 since all of them are used only once it does not realy matter
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 pause stuff start!
COMMENT $0000 load new vector (length was cut by timer :-))
COMMENT_LINE $0000 Bne      no_timer_death               ; if timer is zero, we are dead
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 let us look if we need to initiate/destroy a home object
COMMENT_LINE $0000 that is fly or crocodile
COMMENT_LINE $0000 independent code section
COMMENT_LINE $0000 do timer stuff for fly
COMMENT_LINE $0000 insert/remove fly
COMMENT $0000 is there any fly stuff at all?
COMMENT $0000 no?, than go on
COMMENT $0000 is zero?
COMMENT $0000 if not zero, do nothing
COMMENT $0000 fly is waiting to be displayed
COMMENT $0000 no?, than it is allready displayed
COMMENT_LINE $0000 if zero... initiate new fly
COMMENT_LINE $0000 JSR      Random                       ; get a random number
COMMENT $0000 only the lower three bits
COMMENT $0000 not higher than 4
COMMENT $0000 if lower than ok
COMMENT $0000 otherwise take only half of it
COMMENT $0000 now we have a random home...
COMMENT $0000 must multiply by 5, length of home object
COMMENT $0000 times 5
COMMENT $0000 remember start address if all homes are occupied
COMMENT $0000 load the address to U, start of list of homes
COMMENT $0000 is this home empty (only checking upper byte, should be ok)
COMMENT $0000 if yes, than go on
COMMENT $0000 otherwise, compare to 20 (right most home)
COMMENT $0000 not last home?, than go on
COMMENT $0000 store -5, so that +5 is 0, leftmost home
COMMENT $0000 check next home (home object is 5 bytes long)
COMMENT $0000 checked all homes yet
COMMENT $0000 yes, than no home is free
COMMENT $0000 and check again if empty...
COMMENT $0000 now we got a 'random' empty home address in B,U
COMMENT $0000 remember offset to home for removal
COMMENT $0000 get address of U and add the offset
COMMENT $0000 in U address of 'random' home
COMMENT $0000 load fly object
COMMENT $0000 store to the calculated home address
COMMENT $0000 load animation counter of object
COMMENT $0000 and store it to object in RAM
COMMENT $0000 IS DISPLAYED
COMMENT $0000 and finnished with fly stuff...
COMMENT_LINE $0000 fly is allready displayed, must check if we should destroy it...
COMMENT_LINE $0000 now destroy fly
COMMENT $0000 load current fly offset
COMMENT $0000 get address of U and add the offset
COMMENT $0000 in U address of 'random' home
COMMENT $0000 is WAITING
COMMENT $0000 reload the fly timer
COMMENT $0000 and store it
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 do timer stuff for croco (home)
COMMENT_LINE $0000 insert/remove croco
COMMENT $0000 is there any croco stuff at all?
COMMENT $0000 no?, than go on
COMMENT $0000 store it back
COMMENT $0000 if not zero, do nothing
COMMENT $0000 is there any croco stuff at all?
COMMENT $0000 croco is waiting to be displayed
COMMENT $0000 no?, than it is allready displayed
COMMENT_LINE $0000 if zero... initiate new croco
COMMENT_LINE $0000 JSR      Random                       ; get a random number
COMMENT $0000 only the lower three bits
COMMENT $0000 not higher than 4
COMMENT $0000 if lower than ok
COMMENT $0000 otherwise take only half of it
COMMENT $0000 now we have a random home...
COMMENT $0000 must multiply by 5, length of home object
COMMENT $0000 times 5
COMMENT $0000 remember start address if all homes are occupied
COMMENT $0000 load the address to U, start of list of homes
COMMENT $0000 is this home empty (only checking upper byte, should be ok)
COMMENT $0000 if yes, than go on
COMMENT $0000 otherwise, compate to 20 (right most home)
COMMENT $0000 not last home?, than go on
COMMENT $0000 store -5, so that +5 is 0, leftmost home
COMMENT $0000 check next home (home object is 5 bytes long)
COMMENT $0000 checked all homes yet
COMMENT $0000 yes, than no home is free
COMMENT $0000 and check again if empty...
COMMENT $0000 now we got a 'random' empty home address in B,U
COMMENT $0000 remember offset to home for removal
COMMENT $0000 get address of U and add the offset
COMMENT $0000 in U address of 'random' home
COMMENT $0000 load croco object
COMMENT $0000 store to the calculated home address
COMMENT $0000 load animation counter of object
COMMENT $0000 and store it to object in RAM
COMMENT $0000 is DISPLAYED
COMMENT $0000 and finnished with croco stuff...
COMMENT_LINE $0000 croco is allready displayed, must check if we should destroy it...
COMMENT_LINE $0000 now destroy croco
COMMENT $0000 load current croco offset
COMMENT $0000 get address of U and add the offset
COMMENT $0000 in U address of 'random' home
COMMENT $0000 IS WAITING
COMMENT $0000 reload the croco timer
COMMENT $0000 and store it
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 EXPECTS DP = C8!
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 independent code section
COMMENT_LINE $0000 do timer stuff for diving turtles
COMMENT_LINE $0000 initiate alternate turtle sprites on
COMMENT_LINE $0000 timer...
COMMENT_LINE $0000 clean up stuff
COMMENT_LINE $0000 NOTE: turtles really suck
COMMENT_LINE $0000 sometimes turtles are torn appart due to
COMMENT_LINE $0000 huge sprite offsets
COMMENT_LINE $0000 higher than the (now used 5 maximum offset)
COMMENT $0000 should the turtles dive?
COMMENT $0000 if not zero, don't do anything
COMMENT $0000 first let us restore the timer
COMMENT $0000 store it HI
COMMENT_LINE $0000 go thru all sprites
COMMENT_LINE $0000 see if diving special is there,
COMMENT_LINE $0000 than change sprites to diving sprites
COMMENT $0000 load object address
COMMENT_LINE $0000 U pointer to object
COMMENT_LINE $0000 X pointer to this object list
COMMENT_LINE $0000 Y pointer to t_list
COMMENT_LINE $0000 from here we change the actual object in the object list
COMMENT_LINE $0000 these special objects (for now only turtles)
COMMENT_LINE $0000 have an extra entry in their object describtion
COMMENT_LINE $0000 this is the 'alternate' object describtion address
COMMENT_LINE $0000 this will be loaded and placed in the object list
COMMENT_LINE $0000 on each timer 0 we just change to the alternate sprite
COMMENT_LINE $0000 which allways switches back and forth between diving
COMMENT_LINE $0000 and non diving turtles (as we defined the object
COMMENT_LINE $0000 information as this)
COMMENT $0000 faster than a PSHS
COMMENT $0000 load alternate object to Y
COMMENT $0000 load old sprite offsets
COMMENT $0000 negate them (A)
COMMENT $0000 negate them (B)
COMMENT $0000 add y position to old sprite offset y
COMMENT $0000 add x position to old sprite offset x
COMMENT $0000 add new sprite offset y
COMMENT $0000 add new sprite offset x
COMMENT $0000 and store the corrected position
COMMENT $0000 load new animation counter start
COMMENT $0000 and set it in object list
COMMENT $0000 store new object definition to object list
COMMENT $0000 faster than a PULS
COMMENT $0000 and go on
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $0000 if not zero, do nothing
COMMENT $0000 if not zero, do nothing
COMMENT_LINE $0000 if zero... initiate new otter
COMMENT_LINE $0000 JSR      Random                       ; get a random number
COMMENT $0000 random in range of 0 - 15
COMMENT $0000 remember for lane offset
COMMENT $0000 only the lower three bits
COMMENT $0000 not higher than 5
COMMENT $0000 if lower than ok
COMMENT $0000 otherwise take only half of it
COMMENT $0000 now we have a random river band...
COMMENT $0000 this is the band we are on now
COMMENT $0000 multiply by band structure width
COMMENT $0000 which is 16 bytes
COMMENT $0000 copy A to B
COMMENT $0000 SEX B :-) but without sign
COMMENT $0000 add address start of band list
COMMENT_LINE $0000 now we try to get a pseudo random offset of objects within
COMMENT_LINE $0000 this lane, we use the same random number as for lane determination
COMMENT_LINE $0000 but this time ranging from 0 - 15, see above
COMMENT $0000 at least 1 in tmp1 so we don't loop to 255
COMMENT_LINE $0000 start address of this bandlist is in D (and remains there untouched...)
COMMENT $0000 copy start of lane list to X
COMMENT $0000 load object list address to U
COMMENT $0000 if zero than we have gone past the last object
COMMENT_LINE $0000 and jump to reinit X
COMMENT $0000 otherwise we decrement our random value by 1
COMMENT $0000 if not zero, get the next object list member
COMMENT $0000 store list object address of
COMMENT_LINE $0000 'log' pre otter
COMMENT $0000 load next list position
COMMENT $0000 if not zero jump
COMMENT $0000 if zero we have to use the first object in this band
COMMENT $0000 even if it is the same... as the pre object
COMMENT $0000 store list object address of
COMMENT_LINE $0000 'log' past otter
COMMENT $0000 load object address of first otter animation to X
COMMENT $0000 load pre otter object list address
COMMENT $0000 position of pre list object
COMMENT $0000 pre object
COMMENT $0000 modify for y offset of pre object
COMMENT $0000 modify for x offset of pre object
COMMENT $0000 add length of pre object
COMMENT $0000 modify y position with otter offset
COMMENT $0000 modify x position with otter offset
COMMENT $0000 add another 3 just for good measure...
COMMENT $0000 and store this as the new otter position
COMMENT $0000 are we to far to the right?
COMMENT $0000 if so, don't use this otter
COMMENT $0000 are we to far to the left?
COMMENT $0000 if so don't use this otter either
COMMENT_LINE $0000 the above is sort of needed, since I don't want to check
COMMENT_LINE $0000 all fancy cases... there e.g. might be some weird positioning
COMMENT_LINE $0000 that otter is quasi outside of the main screen and the
COMMENT_LINE $0000 log it is looking for reaches the out of bounds boundary allways
COMMENT_LINE $0000 befor the otter has a chance to realize it is allready near
COMMENT_LINE $0000 thus the otter might stay there forever...
COMMENT $0000 load speed of pre object
COMMENT $0000 otter allways + 1
COMMENT_LINE $0000 my otter allways moves from left to right
COMMENT_LINE $0000 or standstill
COMMENT $0000 store the new speed
COMMENT $0000 store otter anim A 1 object as the relevant otter object
COMMENT $0000 reset animation counter for otter
COMMENT $0000 and store it
COMMENT_LINE $0000 now we do some checking if we haven't gotten ourself a real
COMMENT_LINE $0000 stupid 'log' object, like a midway turtle or a
COMMENT_LINE $0000 middle 'big' log...
COMMENT $0000 load object list address of object past otter
COMMENT $0000 and load the position of otter now
COMMENT $0000 subtract these two
COMMENT $0000 absolute that
COMMENT $0000 look if they are really near each other
COMMENT_LINE $0000 15 'includes' length of otter, hardcoded :-(
COMMENT $0000 if not near, go to end, otherwise destroy otter
COMMENT $0000 reload the otter timer
COMMENT $0000 and store it
COMMENT $0000 and go to done
COMMENT $0000 is displayed
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 IN MOVE 1 END
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 independent code section
COMMENT $0000 test if we are in death timer loop
COMMENT $0000 frog is allready dead!
COMMENT $0000 load fly timer
COMMENT $0000 decrease it
COMMENT $0000 store it back
COMMENT $0000 load croco timer
COMMENT $0000 decrease it
COMMENT $0000 store it back
COMMENT $0000 load the timer value
COMMENT $0000 if $ff, than no turtle
COMMENT $0000 overstep the next two
COMMENT $0000 count it down by $20
COMMENT $0000 store it
COMMENT $0000 load the timer value
COMMENT_LINE $0000 SUBD #$20 ; count it down by $20
COMMENT $0000 count it down by $20
COMMENT $0000 store it
COMMENT $0000 is displayed
COMMENT $0000 load otter timer
COMMENT $0000 decrease it
COMMENT $0000 store it back
COMMENT $0000 if music is not playing
COMMENT $0000 jump, otherwise initialize "in move" subroutines for ym decode
COMMENT $0000 also sets up inMovePointer
COMMENT $0000 first and second is really small
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 independent code section
COMMENT_LINE $0000 decrease and check level timer
COMMENT_LINE $0000 warn if low
COMMENT $0000 load new vector (length was cut by timer :-))
COMMENT $0000 is it small yet?
COMMENT $0000 no, than jump
COMMENT $0000 is it really really small?
COMMENT $0000 nah, not that small yet
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $0000 fourth is big
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 collosion only allowed when not already dead
COMMENT_LINE $0000 hey dissi "br eak"
COMMENT $0000 load band information
COMMENT_LINE $0000 first we must get the position of this band in the band list
COMMENT $0000 one less, since homes, don't have a band
COMMENT $0000 fixed to 16 byte,
COMMENT $0000 so we just use some LSL instead
COMMENT $0000 of MUL...
COMMENT $0000 load bandlist
COMMENT $0000 and go to current band in bandlist
COMMENT $0000 get pointer to next object_list element in this band
COMMENT $0000 if empty we are done
COMMENT_LINE $0000 ok, here we have an object_list entry we must check...
COMMENT_LINE $0000 U pointer to object_list, points to position (y,x) information of current entry
COMMENT_LINE $0000 X pointer to band_list, points to NEXT possible entry of object_list
COMMENT_LINE $0000 Y pointer to object structure, points to speed of the current object
COMMENT_LINE $0000 now it gets tricky, we have to compare the position information,
COMMENT_LINE $0000 which is in SCALE_FACTOR_GAME
COMMENT_LINE $0000 with the sprite length and width, which is in SCALE_FACTOR_SPRITE
COMMENT_LINE $0000 we dismiss the difference here and just think that the
COMMENT_LINE $0000 value we find in 'length' in the object definition is
COMMENT_LINE $0000 also in SCALE_FACTOR_GAME, than we can do a normal compare!
COMMENT $0000 load frog position
COMMENT $0000 so that detection is not all THAT sharp
COMMENT $0000 so that detection is not all THAT sharp
COMMENT $0000 compare it to x postion of object
COMMENT $0000 if frog further left, jump
COMMENT $0000 otherwise frog is on the right
COMMENT $0000 subtract length of object
COMMENT $0000 subtract X position of object
COMMENT $0000 if we are now on 'the left' we hit it
COMMENT $0000 get pointer to next object_list element in this band
COMMENT $0000 if empty we are done
COMMENT $0000 no collision detected, is that good?
COMMENT $0000 load band, if in lower half
COMMENT $0000 not collision is good
COMMENT $0000 otherwise we die (drowning)
COMMENT $0000 frog is on the left
COMMENT $0000 add the size of the frog to A (position of frog)
COMMENT $0000 compare it to x postion of object
COMMENT $0000 still lower, than no collision
COMMENT $0000 ok, a collision happened, check if good or bad
COMMENT $0000 load band information
COMMENT $0000 if in upper half, than it is good
COMMENT $0000 than we are being transported
COMMENT $0000 SPECIAL...
COMMENT $0000 middle band is treated as a street
COMMENT $0000 if a snake is encountered
COMMENT $0000 jump if not
COMMENT $0000 load the frog postion
COMMENT $0000 minus X position of object
COMMENT $0000 hardcoded length of snake :-(
COMMENT $0000 otherwise go on
COMMENT $0000 otherwise die a snake death
COMMENT_LINE $0000 must be left snake than (or something is wrong)
COMMENT_LINE $0000 there are no special cars!
COMMENT $0000 load the frog postion
COMMENT $0000 minus X position of object
COMMENT $0000 hardcoded length of snake :-(
COMMENT $0000 otherwise go on
COMMENT $0000 if lower than bitten by snake
COMMENT_LINE $0000 NOTE: A should always be zero here
COMMENT $0000 otherwise we die a DIE_CAR
COMMENT $0000 type of death
COMMENT $0000 the frog is lost
COMMENT $0000 decrease number of available frogs
COMMENT $0000 do a frog_dead intermission, kind of death
COMMENT_LINE $0000 is correctly set in 'kind_of_death'
COMMENT $0000 attract mode does not lose
COMMENT_LINE $0000 LDA # '0' ; compare to '0'
COMMENT_LINE $0000 CMPA no_frogs ; the number of available frogs
COMMENT $0000 if not zero yet, go on
COMMENT $0000 do a game_lost intermission and return there
COMMENT $0000 init_new_frog_vars expects dp at c8
COMMENT $0000 clear the frog variables
COMMENT $0000 init_new_frog_vars expects dp at c8
COMMENT_LINE $0000 rts
COMMENT $0000 die a DIE_OUT kind of
COMMENT $0000 jump to die
COMMENT $0000 die a DIE_DROWN kind of
COMMENT $0000 jump to die
COMMENT $0000 die a DIE_CROCO kind of
COMMENT $0000 jump to die
COMMENT $0000 die a DIE_SNAKE kind of
COMMENT $0000 jump to die
COMMENT $0000 no we are 'riding' some object
COMMENT $0000 lets test the special flag...
COMMENT $0000 if no special go on
COMMENT $0000 test for left crocodile
COMMENT $0000 if not, jump
COMMENT $0000 load the frog postion
COMMENT $0000 subtract X position of object
COMMENT $0000 hardcoded length of croco :-(
COMMENT $0000 not eaten by croco, nothing else can be here
COMMENT $0000 if lower frogger was eaten by crocodile
COMMENT $0000 are we sitting on a right croco?
COMMENT $0000 no? than jump
COMMENT_LINE $0000 hey dissi "bre ak"
COMMENT $0000 load the frog postion
COMMENT $0000 subtract X position of object
COMMENT $0000 hardcoded length of croco :-(
COMMENT $0000 not eaten by croco, nothing else can be here
COMMENT $0000 if higher frogger was eaten by crocodile
COMMENT $0000 look if this is a dived turtle
COMMENT $0000 if yes... drown
COMMENT_LINE $0000 check if we 'capture' a girl
COMMENT $0000 what's the girls status?
COMMENT $0000 is it displayed
COMMENT $0000 no? than jump
COMMENT $0000 load log object address
COMMENT $0000 address + 3 is stored, correct it
COMMENT $0000 subtract the current object information
COMMENT $0000 if not the same, go to no_girl_
COMMENT_LINE $0000 check for collision
COMMENT $0000 load girl x pos
COMMENT $0000 subtract frog_x pos
COMMENT $0000 absolute it
COMMENT $0000 if not in the range of 10
COMMENT $0000 jump to no girl
COMMENT $0000 IS CARRIED
COMMENT $0000 load bonus state
COMMENT $0000 add a girl bonus
COMMENT $0000 store it
COMMENT_LINE $0000 check if we hit a 'log' snake
COMMENT $0000 what's the snake's status?
COMMENT $0000 is it displayed
COMMENT $0000 no? than jump
COMMENT $0000 what band are we on now ?
COMMENT $0000 compare with 'snake band'
COMMENT $0000 if not our band... go on
COMMENT $0000 which contains the log a objectlist address
COMMENT $0000 load special
COMMENT $0000 if a snake is encountered
COMMENT $0000 jump if not
COMMENT $0000 load the frog postion
COMMENT $0000 minus X position of object
COMMENT $0000 real hardcoded length
COMMENT $0000 absolut it
COMMENT $0000 somewhere arround the snakes head?
COMMENT $0000 if higher, than not hit
COMMENT $0000 otherwise than bitten by snake
COMMENT $0000 now we look for left snake
COMMENT $0000 no?, than jump
COMMENT $0000 load the frog postion
COMMENT $0000 minus X position of object
COMMENT $0000 absolut it
COMMENT $0000 somewhere arround the snakes head?
COMMENT $0000 if lower than bitten by snake
COMMENT $0000 load the frog postion
COMMENT $0000 add the speed of the object
COMMENT $0000 and store it
COMMENT $0000 are we out of bounds right?
COMMENT $0000 than dead
COMMENT $0000 are we out of bounds left?
COMMENT $0000 than dead
COMMENT $0000 ok, for checking of 'normal' bounds
COMMENT_LINE $0000 we need to calculate the band_x
COMMENT_LINE $0000 coordinates, 'tmp_band_offset' is now
COMMENT_LINE $0000 used as a helper
COMMENT_LINE $0000 it counts from 0 to 9
COMMENT_LINE $0000 if below 0 band_x is decremented
COMMENT_LINE $0000 if 10 or high it is incremented...
COMMENT $0000 add the speed of the object
COMMENT $0000 if below zero, dec band_x 1
COMMENT $0000 if higher GRID_SIZE...
COMMENT $0000 ... add one to band_x
COMMENT $0000 otherwise just store it back
COMMENT $0000 for internal checking
COMMENT $0000 make it modulo 10
COMMENT $0000 store it
COMMENT $0000 for internal checking
COMMENT $0000 make it modulo 10
COMMENT $0000 store it
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $0000 + 1
COMMENT $0000 do positioning, load pos here
COMMENT $0000 add the speed, got from log information earlier
COMMENT $0000 is on left side out of bounds?
COMMENT $0000 no, than no coordinate fiddling
COMMENT $0000 is waiting
COMMENT $0000 initiate the round counter
COMMENT $0000 store it
COMMENT $0000 check if we are out of bounds on the right
COMMENT $0000 and 're' store it
COMMENT $0000 decrease the number of steps a snake does befor turing arround
COMMENT $0000 if not turning... go on
COMMENT $0000 look at special in object definition for information...
COMMENT $0000 are we now left or right?
COMMENT $0000 if right... jump
COMMENT $0000 load old sprite offsets
COMMENT $0000 negate them (A)
COMMENT $0000 negate them (B)
COMMENT $0000 add y position to old sprite offset y
COMMENT $0000 add x position to old sprite offset x
COMMENT $0000 load new object definition
COMMENT $0000 add new sprite offset y
COMMENT $0000 add new sprite offset x
COMMENT $0000 and store the corrected position
COMMENT $0000 store new object definition
COMMENT $0000 load new animation counter start
COMMENT $0000 and set it in object list
COMMENT $0000 now go to opposite direction +1 equal log speed
COMMENT $0000 plus another to be 1 step faster
COMMENT $0000 get the limit of snake movement before turing again
COMMENT $0000 and store it
COMMENT $0000 done with snake
COMMENT $0000 load old sprite offsets
COMMENT $0000 negate them (A)
COMMENT $0000 negate them (B)
COMMENT $0000 add y position to old sprite offset y
COMMENT $0000 add x position to old sprite offset x
COMMENT $0000 load new object definition
COMMENT $0000 add new sprite offset y
COMMENT $0000 add new sprite offset x
COMMENT $0000 and store the corrected position
COMMENT $0000 store new object definition
COMMENT $0000 load new animation counter start
COMMENT $0000 and set it in object list
COMMENT $0000 now go to opposite direction -1 equal log speed
COMMENT $0000 minus another to be 1 step faster
COMMENT $0000 get the limit of snake movement before turing again
COMMENT $0000 and store it
COMMENT $0000 done with snake, on turn, no animation check is needed
COMMENT $0000 decrease animation counter
COMMENT $0000 if zero, we must initialize new animation phase
COMMENT_LINE $0000 snake animation change
COMMENT $0000 load old sprite offsets
COMMENT $0000 negate them (A)
COMMENT $0000 negate them (B)
COMMENT $0000 add y position to old sprite offset y
COMMENT $0000 add x position to old sprite offset x
COMMENT $0000 load new object definition
COMMENT $0000 add new sprite offset y
COMMENT $0000 add new sprite offset x
COMMENT $0000 and store the corrected position
COMMENT $0000 store new object definition to object list
COMMENT $0000 load new animation counter start
COMMENT $0000 and set it in object list
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 in move action here!
COMMENT_LINE $0000 following code must be executed here for all
COMMENT_LINE $0000 in moves in the vectorlist,
COMMENT_LINE $0000 it is the preparation of the next object,
COMMENT_LINE $0000 so we leave it here...
COMMENT_LINE $0000 I go out of may way here to have y only localy used
COMMENT_LINE $0000 that way I can use y as a indirect jump variable for the unlooping
COMMENT_LINE $0000 jump ,y is 3 cycles
COMMENT_LINE $0000 jump [location] is 8 cycles!
COMMENT $0000 [3] Increment X by 5
COMMENT $0000 add to B (x coordinate that is)
COMMENT_LINE $0000 the speed value (in the list object,
COMMENT_LINE $0000 e.g. car_1), increment Y by 1
COMMENT_LINE $0000 ;;;; NOT USED NOW ;;;;;
COMMENT_LINE $0000 idea is to add speed only X cycles
COMMENT_LINE $0000 that way really slow speeds and differences can be done
COMMENT_LINE $0000 the main crux is girl and snake which
COMMENT_LINE $0000 depend on parents speeds
COMMENT_LINE $0000 this can be accomplished using two new variables - but
COMMENT_LINE $0000 i don't think it is NEEDED - really
COMMENT_LINE $0000 the below few lines do NOT make a speed difference since its completley in MOVE TO
COMMENT $0000 brightness
COMMENT_LINE $0000 ;;;; NOT USED NOW END ;;;;;
COMMENT $0000 is on left side out of bounds?
COMMENT $0000 no, than no coordinate fiddling
COMMENT $0000 don't check for right out of bounds now
COMMENT $0000 check if we are out of bounds on the right
COMMENT_LINE $0000 BLE not_higher_out_of_bounds ; no? than go on
COMMENT $0000 store the new x position
COMMENT_LINE $0000 (X points to animation)
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 ;;;;;;;;; MOVE X START
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 about 20 - 30 cycles have already passed
COMMENT_LINE $0000 but neither girl nor snake was processed
COMMENT_LINE $0000 so we may do a short special in move here
COMMENT_LINE $0000 dp is c8 and does not need to be restored internally!
COMMENT $0000 [12] stream processing done in jsrs
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 ;;;;;;;;; MOVE X END
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 on each out of bounds a girl check is made...
COMMENT $0000 save coordinates
COMMENT $0000 what's the girls status?
COMMENT $0000 no girl at all? than jump
COMMENT $0000 if not the same, go to no_girl_
COMMENT $0000 what's the girls status?
COMMENT $0000 we are waiting to be displayed
COMMENT $0000 than go to might be displayed routine
COMMENT $0000 if frogger carries girl,
COMMENT $0000 do nothing
COMMENT_LINE $0000 now IS_DISPLAYED, resetting counter and reset status
COMMENT $0000 IS WAITING
COMMENT $0000 initiate the round counter
COMMENT $0000 store it
COMMENT_LINE $0000 bra no_girl ; do not redisplay at once!
COMMENT $0000 check if the girl will be displayed
COMMENT $0000 count down the round counter
COMMENT $0000 if not zero, than no girl will be displayed
COMMENT $0000 IS DISPLAYED
COMMENT $0000 load girl object address
COMMENT $0000 store it as first object
COMMENT_LINE $0000 now do positioning...
COMMENT $0000 the position of the log is on the stack
COMMENT $0000 more in the middle of the log
COMMENT $0000 get and store the X position
COMMENT $0000 y position hardcoded, since sprites have different starting points
COMMENT $0000 store y position
COMMENT $0000 if we did girl, than no snake here!
COMMENT $0000 what's the snake's status?
COMMENT $0000 no snake at all? than jump
COMMENT $0000 if not the same, go to no_snake_
COMMENT $0000 what's the snake's status?
COMMENT $0000 we are waiting to be displayed
COMMENT $0000 than go to might be displayed routine
COMMENT $0000 IS WAITING
COMMENT $0000 initiate the round counter
COMMENT $0000 store it
COMMENT $0000 check if the snake will be displayed
COMMENT $0000 count down the round counter
COMMENT $0000 if not zero, than no snake will be displayed
COMMENT $0000 IS DISPLAYED
COMMENT $0000 load snake object address
COMMENT $0000 store it as first object
COMMENT_LINE $0000 now do positioning...
COMMENT $0000 the position of the log is on the stack
COMMENT $0000 get and store the X position
COMMENT $0000 y position hardcoded, since sprites have different starting points
COMMENT $0000 store y position
COMMENT $0000 get the speed of snake start
COMMENT $0000 store it
COMMENT $0000 get the number of steps a snake can take befor turning arround (hardcoded :-()
COMMENT $0000 and store it
COMMENT $0000 restore coordinates
COMMENT $0000 store the new x position, and increment U
COMMENT_LINE $0000 (U points to animation)
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 now we do that animation checking
COMMENT $0000 load object vector list to u
COMMENT_LINE $0000 ;;;;;;;;;;; costs e.g. in level 8 18 cycles alltogether, we are still in "IN MOVE" range
COMMENT_LINE $0000 ;;;; DRAW no snakes in intermission
COMMENT $0000 get special flag
COMMENT $0000 no_sprite_draw
COMMENT_LINE $0000 ;;;; DRAW no snakes in intermission
COMMENT_LINE $0000 ;;;;;;;;;;;
COMMENT $0000 decrease animation counter
COMMENT $0000 if zero, we must initialize new animation phase
COMMENT_LINE $0000 4 cycles less than above -> if I weren't lazy I would do that switch in other places also...
COMMENT $0000 load new object definition
COMMENT $0000 add new sprite offset y
COMMENT $0000 add new sprite offset x
COMMENT $0000 and store the corrected position
COMMENT $0000 store new object definition to object list
COMMENT $0000 load new animation counter start
COMMENT $0000 and set it in object list
COMMENT $0000 just a test if next vectorlist is 0
COMMENT $0000 and do the next object (or jump away)
COMMENT $0000 no_sprite_draw
COMMENT_LINE $0000 stop moving forcably!
COMMENT $0000 move to time 1 lo, this means scaling
COMMENT $0000 move to time 1 lo, this means scaling
COMMENT $0000 and do the next
COMMENT $0000 A= SCALE, B = Timer IRQ check
COMMENT_LINE $0000 the following is the position checking loop
COMMENT_LINE $0000 waiting till an interrupt occurs
COMMENT $0000 scale for sprite
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 it turns out, sorting the different displayed
COMMENT_LINE $0000 vector drawing parts influences the
COMMENT_LINE $0000 stability of the screen,
COMMENT_LINE $0000 so e.g. printing the score (a fixed display)
COMMENT_LINE $0000 after moving or blinking parts -> is a bad idea
COMMENT_LINE $0000 since the score is also slightly displaced...
COMMENT_LINE $0000 jsr smallCalibration
COMMENT_LINE $0000 jsr      calibration
COMMENT_LINE $0000 jsr smallCalibration
COMMENT_LINE $0000 jsr smallCalibration
COMMENT_LINE $0000 jsr smallCalibration
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 start of vectrex memory with cartridge name...
COMMENT $0000 'g' is copyright sign
COMMENT $000B music from the rom
COMMENT $000D hight, width, rel y, rel x (from 0,0)
COMMENT $0011 some game information, ending with $80
COMMENT $001D end of game header
COMMENT_LINE $001E ***************************************************************************
COMMENT_LINE $001E here the cartridge program starts off
COMMENT_LINE $001E ***************************************************************************
COMMENT_LINE $002F ***************************************************************************
COMMENT_LINE $002F MAGIC CARTHEADER SECTION
COMMENT_LINE $002F DO NOT CHANGE THIS STRUCT
COMMENT_LINE $002F ***************************************************************************
COMMENT $0030 magic handshake marker
COMMENT $0034 I always have a version
COMMENT_LINE $0036 in comm. structs
COMMENT $0036 v4e flags:
COMMENT_LINE $0038 $8000 + always set by v4e
COMMENT_LINE $0038 $4000 - hiscore entry supported
COMMENT_LINE $0038 $2000 - enable cart as ram
COMMENT_LINE $0038 $1000 - supply default font
COMMENT_LINE $0038 $0800 - 1: fast menu switch supported
COMMENT_LINE $0038 set to 0 if hiscore entry
COMMENT_LINE $0038 $0700 + v4e timing bits:
COMMENT_LINE $0038 0 - heuristic
COMMENT_LINE $0038 1 - zero
COMMENT_LINE $0038 2 - one
COMMENT_LINE $0038 3 - two
COMMENT_LINE $0038 4 - three
COMMENT_LINE $0038 $0080 - populate storage upon start
COMMENT_LINE $0038 $0040 - 1: extension calls used
COMMENT_LINE $0038 $0020 - gpios used (@7ffe)
COMMENT_LINE $0038 $0010 - free for future use
COMMENT_LINE $0038 $0008 - 1:screensaver enabled
COMMENT_LINE $0038 $0003 - font size
COMMENT_LINE $0038 first the variables for the v4e font system
COMMENT $0038 supplied by app:
COMMENT_LINE $003A if != 0: the cart uses this
COMMENT_LINE $003A ptr to supply a font and to
COMMENT_LINE $003A optimize strings;
COMMENT $003A supplied by app:
COMMENT_LINE $003B the cart stores a system
COMMENT_LINE $003B font at v4efontptr+0x20 and
COMMENT_LINE $003B adds v4efontwidth per line
COMMENT_LINE $003B ..must be at least $3f
COMMENT $003B supplied by cart:($5e or $7e)
COMMENT_LINE $003C last char supplied by v4e
COMMENT_LINE $003C (first one is always 0x20)
COMMENT $003C if !=0 a ptr to a list of ptrs
COMMENT_LINE $003E containing lists of constant
COMMENT_LINE $003E strings that can be optimized
COMMENT_LINE $003E for a given font (0 == end
COMMENT_LINE $003E of lists)
COMMENT_LINE $003E now the variables for the v4e store/load area
COMMENT $003E pointer to the area - 0: unused
COMMENT $0040 and its size
COMMENT $0042 = by v4e: return size for a load
COMMENT_LINE $0044 e.g. if set to zero in compile an != 0
COMMENT_LINE $0044 at the start shows whether something was
COMMENT_LINE $0044 loaded via 'populate storage upon start'
COMMENT_LINE $0048 end of v4e cart header
COMMENT_LINE $005E db       0,0,0,0                      ; playerCountOption, gameModeOption, musicOption. levelEditAllowedOption
COMMENT_LINE $005E db       "MAL", 0, "  1000"
COMMENT_LINE $005E db       "MAL", 0, "   500"
COMMENT_LINE $005E db       "MAL", 0, "   400"
COMMENT_LINE $005E db       "MAL", 0, "   300"
COMMENT_LINE $0068 db       0                            ; filler
COMMENT_LINE $0068 db       0                            ; checksum
FORCE_NO_SYMBOL $0068
FORCE_SYMBOL $006B optionsBlock
FORCE_SYMBOL $0077 highScoreCompetitionBlock
FORCE_SYMBOL $007A highScoreHardcoreBlock
COMMENT $007E 5 * 10
FORCE_NO_SYMBOL $007E
FORCE_SYMBOL $0080 tmp1
COMMENT $0083 5 * 10
FORCE_NO_SYMBOL $0083
FORCE_SYMBOL $0085 defaultValuesEeprom
FORCE_SYMBOL $0091 tmp1
COMMENT_LINE $0097 debug_print
COMMENT_LINE $0097 DEBUG_PRINT__
COMMENT_LINE $0097 rts
COMMENT_LINE $0097 null db "000",$80
COMMENT_LINE $0097 eins db "111",$80
COMMENT_LINE $0097 zwei db "222",$80
COMMENT_LINE $0097 store db "STORE",$80
COMMENT_LINE $0097 vier db "444",$80
COMMENT_LINE $0097 viera db "4 A",$80
COMMENT_LINE $0097 fuenf db "555",$80
COMMENT_LINE $0097 sechs db "666",$80
COMMENT_LINE $0097 defaults db "DEFAULT",$80
COMMENT_LINE $0097 DEBUG_PRINT eins
COMMENT_LINE $0097 Do one time initializations
COMMENT_LINE $0097 DEBUG_PRINT eins
COMMENT $0097 number of first attract mode
FORCE_SYMBOL $0097 attractCount
COMMENT $009A not in highscore edit mode
FORCE_SYMBOL $009A highScoreEditMode
COMMENT $009D we assume a eEprom is available
FORCE_SYMBOL $009D ignoreDs2431
COMMENT $00A0 movement of frog in title screen default
FORCE_SYMBOL $00A0 initMoveTable_addresses
FORCE_SYMBOL $00A3 initMoveTable
FORCE_SYMBOL $00A6 gimickTable
FORCE_SYMBOL $00A9 gimmick_pointer
COMMENT_LINE $00AC check if we should ignore eEprom completly (Button press on startup)
COMMENT $00AC get button status
FORCE_SYMBOL $00AC Read_Btns
COMMENT $00AF is a button pressed?
FORCE_NO_SYMBOL $00AF
COMMENT $00B3 yes, than set ignore flag
FORCE_SYMBOL $00B3 ignoreDs2431
COMMENT $00B6 check if v4e did load bytes from storage area
FORCE_SYMBOL $00B6 v4eStorageLoaded
COMMENT $00B9 if != 0, than yes -> jump
COMMENT $00BB initiate eEprom Highscore defaults
COMMENT $00BD check if there is any v4e at all?
FORCE_SYMBOL $00BD v4ecartflags
COMMENT $00C0 if not (positive) jump
COMMENT $00C2 otherwise fill the (usual) ROM with default values (v4e this is RAM to!)
FORCE_SYMBOL $00C2 COPY_RAM_TO_VECROM
COMMENT $00C5 is there an eprom (ignore flag always checked in eeprom routines)
FORCE_SYMBOL $00C5 checkEprom
COMMENT_LINE $00C8 eprom saves valus in three stages, to keep times smaller (when only block save is needed)
FORCE_SYMBOL $00CB current_eprom_blocksize
FORCE_SYMBOL $00CE optionsBlock
COMMENT $00D1 load eprom data (also resets if no data found)
FORCE_SYMBOL $00D1 eeprom_load_option
COMMENT $00D4 check if there is any v4e at all?
FORCE_SYMBOL $00D4 v4ecartflags
COMMENT $00D7 if yes, than don't save the same stuff 3 times, poor Flash...
FORCE_SYMBOL $00DC current_eprom_blocksize
FORCE_SYMBOL $00DF highScoreCompetitionBlock
COMMENT $00E2 load eprom data (also resets if no data found)
FORCE_SYMBOL $00E2 eeprom_load_highscore
FORCE_SYMBOL $00E8 current_eprom_blocksize
FORCE_SYMBOL $00EB highScoreHardcoreBlock
COMMENT $00EE load eprom data (also resets if no data found)
FORCE_SYMBOL $00EE eeprom_load_highscore
FORCE_NO_SYMBOL $00F1
FORCE_SYMBOL $00F3 timeStringBASE
FORCE_SYMBOL $00F6 timeLeft
FORCE_SYMBOL $00F9 Move_Mem_a
FORCE_NO_SYMBOL $00FC
FORCE_SYMBOL $00FE levelStringBASE
FORCE_SYMBOL $0101 levelString
FORCE_SYMBOL $0104 Move_Mem_a
FORCE_NO_SYMBOL $0107
COMMENT $0109 default level 1
FORCE_SYMBOL $0109 levelFromOptions
COMMENT $010C first jumper of ym decoder -> direct RTS
FORCE_SYMBOL $010C emptyStreamInMove
FORCE_SYMBOL $010F inMovePointer
COMMENT $0112 no music is played
FORCE_NO_SYMBOL $0112
FORCE_SYMBOL $0115 nextMusic
COMMENT $0118 we are not in attract mode
FORCE_SYMBOL $0118 isAttractMode
COMMENT_LINE $011B done with one times
COMMENT_LINE $011B new game will always start here
COMMENT $011B initialize game variables
FORCE_SYMBOL $011B init_vars
COMMENT $011E startup screen
FORCE_SYMBOL $011E init_screen
COMMENT_LINE $0121 init_screen messes up variables,
COMMENT_LINE $0121 so init them again :-)
COMMENT $0121 initialize game variables
FORCE_SYMBOL $0121 init_vars
COMMENT_LINE $0124 entry point for attract mode from main menu
COMMENT $0124 starting attract mode resets counter
FORCE_SYMBOL $0124 RecalCounter
COMMENT $0127 otherwise joystick simulation would not sync
FORCE_SYMBOL $012A my_random
COMMENT $012D set up the first level
FORCE_SYMBOL $012D setup_level
COMMENT $0130 player 1 first
FORCE_SYMBOL $0130 currentPlayer
COMMENT $0133 if there are two players, we first must set up there
FORCE_SYMBOL $0133 playerCountOption
COMMENT $0136 RAM save structures
COMMENT $0138 init save structures
FORCE_SYMBOL $0138 P1_start
FORCE_SYMBOL $013B savePlayer
FORCE_SYMBOL $013E P2_start
FORCE_SYMBOL $0141 savePlayer
COMMENT $0144 round_startup_main expects dp set to d0
FORCE_NO_SYMBOL $0144
COMMENT $0148 no music is playing ->0
FORCE_SYMBOL $0148 Vec_Music_Flag
COMMENT $014B shadow regs
FORCE_SYMBOL $014B Init_Music_Buf
COMMENT $014E ROM function that does the sound playing
FORCE_SYMBOL $014E Do_Sound
COMMENT $0151 this piece of music
FORCE_SYMBOL $0151 gameStartMusic
COMMENT $0154 must be played
FORCE_SYMBOL $0154 currentMusic
COMMENT $0157 NOW
FORCE_SYMBOL $0157 init_ym_sound
COMMENT $015A well, this does the round initializing, main optimized special
COMMENT $015A just for assembler optimization...
FORCE_NO_SYMBOL $015A
COMMENT $015C recal counter, about 21 Minutes befor roll over
FORCE_SYMBOL $015C RecalCounter
FORCE_NO_SYMBOL $015F
FORCE_SYMBOL $0161 RecalCounter
COMMENT $0164 Wait for timer t2
FORCE_SYMBOL $0164 VIA_int_flags
COMMENT $0168 Store refresh value
FORCE_NO_SYMBOL $0168
COMMENT $016B into timer t2
FORCE_SYMBOL $016B VIA_t2_lo
FORCE_NO_SYMBOL $016D
COMMENT $0170 blank low and zero low
FORCE_SYMBOL $0170 VIA_cntl
COMMENT $0172 clear shift register
FORCE_SYMBOL $0172 VIA_shift_reg
COMMENT $0174 clear D/A register
FORCE_SYMBOL $0174 VIA_port_a
FORCE_NO_SYMBOL $0176
COMMENT $0179 mux=1, disable mux
FORCE_SYMBOL $0179 VIA_port_b
COMMENT $017B mux=1, enable mux
FORCE_SYMBOL $017B VIA_port_b
FORCE_NO_SYMBOL $017D
COMMENT $017F disable mux
FORCE_SYMBOL $017F VIA_port_b
COMMENT $0181 is a "old" jump still ongoing?
FORCE_SYMBOL $0181 froggerInJump
FORCE_SYMBOL $0186 query_joystick
COMMENT $0189 after draw objects, dp is set to d0
COMMENT_LINE $0189 splitted, saves one DP_TO_C8!
COMMENT $0189 draw all graphical elements (and does everything else, since everything else is "in move" now)
FORCE_SYMBOL $0189 draw_objects
COMMENT $018C only when not 1 level and only when 0 or 1 house is occupied
FORCE_SYMBOL $018C gimmickPossible
COMMENT $0193 no gimmick in intermission
FORCE_SYMBOL $0193 intermissionActive
COMMENT $019A no gimick in attrackt
FORCE_SYMBOL $019A isAttractMode
COMMENT $01A1 no gimick while training
FORCE_SYMBOL $01A1 gameModeOption
COMMENT $01A8 load new vector (length was cut by timer :-))
COMMENT $01AB is it small yet?
FORCE_NO_SYMBOL $01AB
FORCE_SYMBOL $01AF current_frog_heading
FORCE_SYMBOL $01B2 HEADING_DOWN
FORCE_SYMBOL $01B6 gimmickActive
FORCE_SYMBOL $01BB gimmick_pointer
FORCE_NO_SYMBOL $01BE
FORCE_NO_SYMBOL $01C0
FORCE_SYMBOL $01C2 gimmick_pos
FORCE_NO_SYMBOL $01C5
FORCE_SYMBOL $01C7 gimmick_object
FORCE_NO_SYMBOL $01CA
FORCE_SYMBOL $01CC gimmick_anim_counter
FORCE_NO_SYMBOL $01CF
FORCE_SYMBOL $01D1 gimmick_countdown
FORCE_NO_SYMBOL $01D4
FORCE_SYMBOL $01D6 gimmickActive
FORCE_NO_SYMBOL $01D9
FORCE_SYMBOL $01DB gimmick_speed
FORCE_SYMBOL $01DE gimmick_pointer
FORCE_NO_SYMBOL $01E1
FORCE_NO_SYMBOL $01E3
FORCE_SYMBOL $01E7 gimickTable
FORCE_SYMBOL $01EA gimmick_pointer
FORCE_SYMBOL $01ED gimmickActive
COMMENT $01F4 go to 0,0
FORCE_NO_SYMBOL $01F4
COMMENT $01F6 /BLANK low and /ZERO low
FORCE_SYMBOL $01F6 VIA_cntl
FORCE_NO_SYMBOL $01F8
FORCE_SYMBOL $01FA Intensity_a
COMMENT_LINE $01FD ............................................................................
COMMENT_LINE $01FD this is actually the same as the code used in the main sprite loop
COMMENT_LINE $01FD just fitted for gimick
COMMENT $01FD scale for game positioning
FORCE_SYMBOL $01FD SCALE_FACTOR_GAME
COMMENT $01FF move to time 1 lo, this means scaling
FORCE_SYMBOL $01FF VIA_t1_cnt_lo
COMMENT $0201 load position
FORCE_SYMBOL $0201 gimmick_pos
COMMENT_LINE $0204 move to
COMMENT $0204 Store Y in D/A register
FORCE_SYMBOL $0204 VIA_port_a
COMMENT $0206 Blank low, zero high?
FORCE_NO_SYMBOL $0206
FORCE_SYMBOL $0208 VIA_cntl
COMMENT $020B Enable mux
FORCE_SYMBOL $020B VIA_port_b
COMMENT $020D Disable mux
FORCE_SYMBOL $020D VIA_port_b
COMMENT $020F Store X in D/A register
FORCE_SYMBOL $020F VIA_port_a
COMMENT $0211 enable timer
FORCE_SYMBOL $0211 VIA_t1_cnt_hi
COMMENT_LINE $0213 in move stuff, since it
COMMENT_LINE $0213 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0213 ;;;;;;;;; IN MOVE GIMICK START
COMMENT_LINE $0213 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
FORCE_SYMBOL $0213 gimmick_countdown
FORCE_NO_SYMBOL $0218
FORCE_SYMBOL $021A gimmickActive
COMMENT $021D move to time 1 lo, this means scaling
FORCE_SYMBOL $021D VIA_t1_cnt_lo
COMMENT $021F move to time 1 lo, this means scaling
FORCE_SYMBOL $021F VIA_t1_cnt_hi
FORCE_SYMBOL $0222 gimmickPossible
COMMENT $0225 and do the next
COMMENT_LINE $0227 in move stuff start
COMMENT $0227 load otter position
FORCE_SYMBOL $0227 gimmick_pos
COMMENT $022A add the speed
FORCE_SYMBOL $022A gimmick_speed
COMMENT $022D store the new x position
COMMENT $0230 load the otter object to U
FORCE_SYMBOL $0230 gimmick_object
COMMENT $0233 decrease animation counter
FORCE_SYMBOL $0233 gimmick_anim_counter
COMMENT $0236 if zero, we must initialize new animation phase
COMMENT $0238 load old sprite offsets
FORCE_NO_SYMBOL $0238
COMMENT $023A negate them (A)
COMMENT $023B negate them (B)
COMMENT $023C add y position to old sprite offset y
FORCE_SYMBOL $023C gimmick_pos
COMMENT $023F add x position to old sprite offset x
COMMENT $0242 load new object definition
FORCE_NO_SYMBOL $0242
COMMENT $0244 add new sprite offset y
FORCE_NO_SYMBOL $0244
COMMENT $0246 add new sprite offset x
FORCE_NO_SYMBOL $0246
COMMENT $0248 and store the corrected position
FORCE_SYMBOL $0248 gimmick_pos
COMMENT $024B store new object definition to object list
FORCE_SYMBOL $024B gimmick_object
COMMENT $024E load new animation counter start
FORCE_NO_SYMBOL $024E
COMMENT $0250 and set it in object list
FORCE_SYMBOL $0250 gimmick_anim_counter
COMMENT $0253 load object vector list to X,
FORCE_NO_SYMBOL $0253
COMMENT_LINE $0255 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0255 ;;;;;;;;; IN MOVE OTTER END
COMMENT_LINE $0255 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
FORCE_SYMBOL $0255 move_wait_draw_vlc_unloop
FORCE_NO_SYMBOL $0258
COMMENT $025A 22 cycles from switch on ZERO disabled, and BLANK enabled
FORCE_SYMBOL $025A VIA_cntl
FORCE_SYMBOL $025C calibration
FORCE_NO_SYMBOL $025F
FORCE_SYMBOL $0261 Intensity_a
FORCE_SYMBOL $0264 KarlGimmickSound
FORCE_SYMBOL $0267 play_sfx_x_if_nothing_else
COMMENT $026A otherwise joystick simulation would not sync
FORCE_NO_SYMBOL $026D
COMMENT $0271 Bonus score for gimmick!
FORCE_SYMBOL $0274 score_digit_2
FORCE_SYMBOL $0277 score_digit_2
FORCE_SYMBOL $027C score_digit_2
FORCE_SYMBOL $027F score_digit_3
FORCE_SYMBOL $0282 score_digit_3
FORCE_SYMBOL $0287 score_digit_3
FORCE_SYMBOL $028A score_digit_4
FORCE_SYMBOL $028D score_digit_4
FORCE_SYMBOL $0292 score_digit_4
FORCE_SYMBOL $0295 score_digit_5
COMMENT $0298 check if we have a snake on a log
FORCE_SYMBOL $0298 snake_status
COMMENT $029B if snake is displayed,
FORCE_SYMBOL $029B IS_DISPLAYED
COMMENT $029D we must make the "sname sound" (jump if not)
FORCE_SYMBOL $029F KarlSnakeNoise_Sound
FORCE_SYMBOL $02A2 play_sfx_x_if_nothing_else
COMMENT $02A5 check if quite some time has passed, if so
FORCE_SYMBOL $02A5 RecalCounter
COMMENT $02A8 12 ~ 1 Minute with WaitRecal 50 Hz
FORCE_NO_SYMBOL $02A8
COMMENT $02AA check if its is time for another of those sounds
FORCE_NO_SYMBOL $02AC
COMMENT $02AE if yes, make that "shhhh" sound (or jump out)
FORCE_SYMBOL $02B0 KarlWaveNoise_Sound
FORCE_SYMBOL $02B3 play_sfx_x_if_nothing_else
COMMENT_LINE $02B6 put all gathered sound chips and throw them at the PSG
FORCE_SYMBOL $02B6 do_my_sound
COMMENT $02B9 are we in attract mode?
FORCE_SYMBOL $02B9 isAttractMode
COMMENT $02BC no? -> than jump
FORCE_SYMBOL $02C0 calibration
COMMENT $02C3 otherwise check if our movement sim is over (== 0)
FORCE_SYMBOL $02C3 attractMovePointer
FORCE_NO_SYMBOL $02C6
COMMENT $02CA if not over, display our "press button" message and
COMMENT $02CC get button status
FORCE_SYMBOL $02CC Read_Btns
COMMENT $02CF is a button pressed?
FORCE_NO_SYMBOL $02CF
COMMENT $02D1 if not, start another round
COMMENT $02D5 correct current stack
FORCE_NO_SYMBOL $02D5
COMMENT $02D7 correct DP
FORCE_SYMBOL $02D7 DP_to_C8
COMMENT $02DA and jump out of here!
FORCE_SYMBOL $02DA init_screen
COMMENT_LINE $02DD ***************************************************************************
COMMENT $02EB y
COMMENT $02EC x
COMMENT $02ED length
COMMENT $02F0 y
COMMENT $02F1 x
COMMENT $02F2 length
COMMENT $02F5 y
COMMENT $02F6 x
COMMENT $02F7 length
COMMENT $02FA y
COMMENT $02FB x
COMMENT $02FC length
COMMENT $02FF y
COMMENT $0300 x
COMMENT $0301 length
COMMENT $0304 y
COMMENT $0305 x
COMMENT $0306 length
COMMENT_LINE $0309 print string "presss button to play"
FORCE_SYMBOL $0309 buttonBlinker
COMMENT $030E every 20 cylces the blink "changes" the state
FORCE_NO_SYMBOL $030E
FORCE_SYMBOL $0310 buttonBlinker
FORCE_SYMBOL $0313 buttonBlinkerIntensity
COMMENT $0318 0 intensity
FORCE_NO_SYMBOL $0318
FORCE_SYMBOL $031A buttonBlinkerIntensity
COMMENT $031F or 60 intensity
FORCE_NO_SYMBOL $031F
FORCE_SYMBOL $0321 buttonBlinkerIntensity
FORCE_SYMBOL $0324 buttonBlinkerIntensity
FORCE_SYMBOL $0327 Intensity_a
COMMENT $032A size of text in strength
FORCE_NO_SYMBOL $032A
FORCE_SYMBOL $032D Vec_Text_Height
COMMENT $0330 scale for movement
FORCE_NO_SYMBOL $0330
COMMENT $0332 move to time 1 lo, this means scaling
FORCE_SYMBOL $0332 VIA_t1_cnt_lo
FORCE_SYMBOL $0334 pressButton
FORCE_NO_SYMBOL $0337
FORCE_SYMBOL $033A sync_Print_Str_d
FORCE_NO_SYMBOL $033D
FORCE_SYMBOL $033F Intensity_a
COMMENT_LINE $0342 rts
COMMENT_LINE $0342 ***************************************************************************
COMMENT_LINE $0342 move to score position
COMMENT $0342 this and the overnext instruction, zero the beam!
COMMENT $0345 /BLANK low and /ZERO low
FORCE_SYMBOL $0345 VIA_cntl
COMMENT_LINE $0347 for positioning allways 'SCALE_FACTOR_GRID'
COMMENT_LINE $0347 delay in zeroing + integrator reset makes display of score much nore stable
COMMENT $0347 reset integrator offset
FORCE_SYMBOL $0347 VIA_port_a
FORCE_SYMBOL $0349 VIA_port_b
COMMENT $034B clear A, and scale to B
FORCE_NO_SYMBOL $034B
COMMENT $034E patched for speed... /2
COMMENT $034E move to time 1 lo, this means scaling
FORCE_SYMBOL $034E VIA_t1_cnt_lo
COMMENT_LINE $0350 this is again a move to D, this time D is splitted into two B, A is
COMMENT_LINE $0350 still 0
COMMENT $0350 y,x
FORCE_NO_SYMBOL $0350
FORCE_SYMBOL $0352 VIA_port_b
COMMENT $0354 Blank low, zero high?
FORCE_NO_SYMBOL $0354
FORCE_SYMBOL $0356 VIA_cntl
COMMENT $0358 Disable mux
FORCE_SYMBOL $0358 VIA_port_b
COMMENT $035A enable timer
FORCE_SYMBOL $035A VIA_t1_cnt_hi
COMMENT_LINE $035C we load our X integrators AFTER we enable RAMP
COMMENT_LINE $035C since this is a solidary move this is ok
COMMENT_LINE $035C it saves a few cycles out of the timer wait
COMMENT_LINE $035C but we have to offset the loss of ramp with a higher integration value
COMMENT $035C player 1 first
FORCE_SYMBOL $035C currentPlayer
COMMENT $0361 X pos relative to start
COMMENT $0363 Store X in D/A register
FORCE_SYMBOL $0363 VIA_port_a
COMMENT_LINE $0365 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0365 ;;;;;;;;; MOVE SCORE START
COMMENT_LINE $0365 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0365 125 cycles to spare
COMMENT_LINE $0365 do everything really slowly in here - we have time enough!!!
FORCE_SYMBOL $0365 intermissionActive
COMMENT_LINE $036A following move frog takes abou 80 cycles
COMMENT_LINE $036A ideal for another in move routine!
COMMENT $036A get joystick stuff, and move frog, collision detection...
FORCE_SYMBOL $036A move_frog
FORCE_NO_SYMBOL $036D
COMMENT $0371 Vec_Str_Ptr ;Point to start of text string
FORCE_SYMBOL $0371 score_digit_5
COMMENT $0374 Point to start of chargen bitmaps
FORCE_SYMBOL $0374 zahlen2
FORCE_SYMBOL $0377 isAttractMode
FORCE_SYMBOL $037C VIA_t1_cnt_lo
FORCE_SYMBOL $037E VIA_t1_cnt_hi
COMMENT_LINE $0382 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0382 ;;;;;;;;; MOVE SCORE END
COMMENT_LINE $0382 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
FORCE_NO_SYMBOL $0382
COMMENT $0384 done with move?
FORCE_SYMBOL $0384 VIA_int_flags
COMMENT $0386 no, than go on waiting
COMMENT $0388 Save string pointer
FORCE_SYMBOL $0388 Vec_Str_Ptr
COMMENT $038B Point to start of chargen bitmaps
FORCE_SYMBOL $038B zahlen2
COMMENT $038E a->AUX: b->ORB: $8x = Disable RAMP, Disable Mux, mux sel = 01 (int offsets)
FORCE_NO_SYMBOL $038E
COMMENT $0391 Clear D/A output
FORCE_SYMBOL $0391 VIA_port_a
COMMENT $0393 Shift reg mode = 110 (shift out under system clock), T1 PB7 disabled, one shot mode
FORCE_SYMBOL $0393 VIA_aux_cntl
COMMENT_LINE $0395 first entry here, ramp is disabled
COMMENT_LINE $0395 if there was a jump from below
COMMENT_LINE $0395 ramp will be enabled by next line
COMMENT $0395 ramp off/on set mux to channel 1
FORCE_SYMBOL $0395 VIA_port_b
COMMENT $0397 Enable mux
FORCE_SYMBOL $0397 VIA_port_b
COMMENT $0399 both to ORB, both disable ram, mux sel = 0 (y int), a:->enable mux: b:->disable mux
FORCE_NO_SYMBOL $0399
COMMENT $039C Disable mux
FORCE_SYMBOL $039C VIA_port_b
COMMENT $039E Disable RAMP, set mux to channel 0, disable mux
FORCE_SYMBOL $039E VIA_port_b
COMMENT $03A0 Enable mux
FORCE_SYMBOL $03A0 VIA_port_b
COMMENT $03A2 disable mux
FORCE_SYMBOL $03A2 VIA_port_b
COMMENT_LINE $03A4 Note:
COMMENT_LINE $03A4 doing another "STB      <VIA_port_b" does not work due to timing issues!
COMMENT $03A4 Get text width
COMMENT $03A7 Send it to the D/A
FORCE_SYMBOL $03A7 VIA_port_a
COMMENT $03A9 [4]enable RAMP, disable mux
FORCE_SYMBOL $03A9 VIA_port_b
COMMENT $03AB [3]
COMMENT_LINE $03AD one letter is drawn (one row that is) in 18 cycles
COMMENT_LINE $03AD 13 cycles overhead
COMMENT_LINE $03AD ramp is thus active for #ofLetters*18 + 13 cycles
COMMENT $03AD [+5]Get bitmap from chargen table
COMMENT $03AF [+4]rasterout of char bitmap "row" thru shift out in shift register
FORCE_SYMBOL $03AF VIA_shift_reg
COMMENT $03B1 [+6]Get next character
COMMENT $03B3 [+3]Go back if not terminator
COMMENT $03B5 [4]disable RAMP, disable mux
FORCE_SYMBOL $03B5 VIA_port_b
COMMENT $03B7 Negate text width to D/A
FORCE_SYMBOL $03B7 VIA_port_a
COMMENT $03B9 enable ramp, disable mux
FORCE_NO_SYMBOL $03B9
COMMENT $03BB enable RAMP, disable mux
FORCE_SYMBOL $03BB VIA_port_b
COMMENT $03BD [4]Check for last row
COMMENT $03C0 [3]Branch if last row
COMMENT $03C2 [5]Point to next chargen row
FORCE_SYMBOL $03C2 ZAHLEN_MAX
COMMENT $03C5 [6]Get string length
COMMENT $03C7 [7]
FORCE_SYMBOL $03C7 Vec_Str_Ptr
COMMENT $03CA [2] - 2
FORCE_NO_SYMBOL $03CA
COMMENT $03CC [3]Delay a moment
COMMENT_LINE $03CE I think if the Macro was given the length of the string
COMMENT_LINE $03CE than another 2 cycles per line can be saved,
COMMENT_LINE $03CE since we probably could use leay -1,y bne...
COMMENT_LINE $03CE in the loop, and not only load "A", but also B with textheight!
COMMENT $03CE [6] Point to start of text string
FORCE_SYMBOL $03CE Vec_Str_Ptr
COMMENT $03D1 [3]Delay a moment
COMMENT $03D3 [2]disable RAMP, disable mux
FORCE_NO_SYMBOL $03D3
COMMENT $03D5 [2]
COMMENT $03D6 [2]
COMMENT $03D7 [3]Delay some more in a loop
COMMENT $03D9 disable RAMP, disable mux
FORCE_SYMBOL $03D9 VIA_port_b
COMMENT $03DB Get text height
COMMENT $03DD Store text height in D/A [go down -> later]
FORCE_SYMBOL $03DD VIA_port_a
COMMENT $03DF Enable mux
FORCE_SYMBOL $03DF VIA_port_b
FORCE_NO_SYMBOL $03E1
COMMENT $03E4 disable RAMP, disable mux
FORCE_SYMBOL $03E4 VIA_port_b
COMMENT $03E6 Clear D/A
FORCE_SYMBOL $03E6 VIA_port_a
COMMENT $03E8 Go back for next scan line
COMMENT $03EA #$98 ;
FORCE_NO_SYMBOL $03EA
COMMENT $03EC T1->PB7 enabled
FORCE_SYMBOL $03EC VIA_aux_cntl
FORCE_NO_SYMBOL $03EE
COMMENT $03F0 /BLANK low and /ZERO low
FORCE_SYMBOL $03F0 VIA_cntl
COMMENT_LINE $03F2 jsr smallCalibration
COMMENT_LINE $03F3 ***************************************************************************
COMMENT_LINE $03F3 belongs to draw object below
COMMENT_LINE $03F3 is here because of short branch...
COMMENT $03F3 B timer 1 bit test
FORCE_NO_SYMBOL $03F3
COMMENT $03F5 done with move?
FORCE_SYMBOL $03F5 VIA_int_flags
COMMENT $03F8 no, than go on waiting
COMMENT $03FA die a DIE_TIME kind of
FORCE_SYMBOL $03FA DIE_TIME
COMMENT $03FD type of death
FORCE_SYMBOL $03FD kind_of_death
COMMENT $03FF decrease number of available frogs
FORCE_SYMBOL $03FF no_frogs
COMMENT $0401 do a frog_dead intermission, kind of death
FORCE_SYMBOL $0401 frog_dead
COMMENT_LINE $0404 is correctly set in 'kind_of_death'
FORCE_SYMBOL $0404 no_frogs2
COMMENT $0407 if not zero yet, go on
COMMENT $0409 otherwise do a game_lost intermission
FORCE_SYMBOL $0409 game_lost
FORCE_NO_SYMBOL $040C
COMMENT $0410 clear the frog variables
FORCE_SYMBOL $0410 init_new_frog_vars
FORCE_SYMBOL $0413 DP_to_D0
COMMENT $0416 is there a current piece playing?
FORCE_SYMBOL $0416 currentMusic
COMMENT $0419 if not
COMMENT $041B take that piece given and
FORCE_SYMBOL $041B inGameMusic1
COMMENT $041E play it now
FORCE_SYMBOL $041E currentMusic
FORCE_SYMBOL $0421 init_ym_sound
COMMENT $0426 otherwise, store it as next possible piece
FORCE_SYMBOL $0426 inGameMusic1
FORCE_SYMBOL $0429 nextMusic
COMMENT_LINE $042D ***************************************************************************
COMMENT_LINE $042D exits with dp to d0
COMMENT_LINE $042D nothing is returned
FORCE_NO_SYMBOL $042D
COMMENT $042F all following sprites have intensity of $60
COMMENT $042F Store intensity in D/A
FORCE_SYMBOL $042F VIA_port_a
COMMENT $0431 mux disabled channel 2
FORCE_NO_SYMBOL $0431
FORCE_SYMBOL $0434 VIA_port_b
COMMENT $0436 mux enabled channel 2
FORCE_SYMBOL $0436 VIA_port_b
COMMENT $0438 turn off mux
FORCE_SYMBOL $0438 VIA_port_b
COMMENT_LINE $043A ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $043A print the score, # of lives and # level, all in one "fast" draw String, takes pretty exactly 2000 cylces
COMMENT_LINE $043A in the move section all the frog move data handling from the joystick query is done
COMMENT_LINE $043A ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $043A no jumper
FORCE_SYMBOL $043A do_score
COMMENT_LINE $043D ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $043D here is the entry point for the timer count down / intermissions / death
COMMENT_LINE $043D when frog reaches home...
COMMENT_LINE $043D first draw homes
COMMENT_LINE $043D than 2 lines in the middle
COMMENT_LINE $043D and last the timer line
COMMENT_LINE $043D ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $043D independent code section
COMMENT_LINE $043D draw home, middway and timer line
FORCE_NO_SYMBOL $043D
COMMENT $0440 Shift reg mode = 000 free disable, T1 PB7 enabled
FORCE_SYMBOL $0440 VIA_aux_cntl
COMMENT $0442 /BLANK low and /ZERO low
FORCE_SYMBOL $0442 VIA_cntl
COMMENT_LINE $0444 for positioning allways 'SCALE_FACTOR_GRID'
COMMENT $0444 clear A, and scale to B
COMMENT $0447 patched for speed... /2
COMMENT $0447 move to time 1 lo, this means scaling
FORCE_SYMBOL $0447 VIA_t1_cnt_lo
COMMENT_LINE $0449 this is again a move to D, this time D is splitted into two B, A is
COMMENT_LINE $0449 still 0
COMMENT $0449 B=Y pos
COMMENT_LINE $044B STD      <VIA_port_b
FORCE_SYMBOL $044B VIA_port_b
FORCE_SYMBOL $044D VIA_port_a
COMMENT $044F only cranky Vectrex and only in demo mode!
COMMENT $0453 Blank low, zero high?
FORCE_NO_SYMBOL $0453
FORCE_SYMBOL $0455 VIA_cntl
COMMENT $0457 Disable mux
FORCE_SYMBOL $0457 VIA_port_b
COMMENT $0459 X pos relative to start
COMMENT $045B Store X in D/A register
FORCE_SYMBOL $045B VIA_port_a
COMMENT $045D enable timer
FORCE_SYMBOL $045D VIA_t1_cnt_hi
COMMENT_LINE $045F ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $045F ;;;;;;;;; MOVE 3 START
COMMENT_LINE $045F ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $045F prepare hardcoded vectorlength for home draw (20)
COMMENT $045F 0 to shiftreg
FORCE_SYMBOL $045F VIA_shift_reg
FORCE_NO_SYMBOL $0461
COMMENT $0463 remember in counter
FORCE_NO_SYMBOL $0463
COMMENT $0466 no jumper
FORCE_NO_SYMBOL $0466
COMMENT_LINE $046A collosion only allowed when not already dead
FORCE_SYMBOL $046A frogDeath
COMMENT_LINE $0471 hey dissi "br eak"
COMMENT $0471 load band information
FORCE_SYMBOL $0471 frog_y_band
COMMENT_LINE $0473 first we must get the position of this band in the band list
COMMENT $0473 one less, since homes, don't have a band
COMMENT $0474 fixed to 16 byte,
COMMENT $0475 so we just use some LSL instead
COMMENT $0476 of MUL...
COMMENT $0479 load bandlist
FORCE_SYMBOL $0479 band_list
COMMENT $047C and go to current band in bandlist
COMMENT $047E get pointer to next object_list element in this band
COMMENT $0480 if empty we are done
COMMENT_LINE $0482 ok, here we have an object_list entry we must check...
FORCE_NO_SYMBOL $0482
COMMENT_LINE $0485 U pointer to object_list, points to position (y,x) information of current entry
COMMENT_LINE $0485 X pointer to band_list, points to NEXT possible entry of object_list
COMMENT_LINE $0485 Y pointer to object structure, points to speed of the current object
COMMENT_LINE $0485 now it gets tricky, we have to compare the position information,
COMMENT_LINE $0485 which is in SCALE_FACTOR_GAME
COMMENT_LINE $0485 with the sprite length and width, which is in SCALE_FACTOR_SPRITE
COMMENT_LINE $0485 we dismiss the difference here and just think that the
COMMENT_LINE $0485 value we find in 'length' in the object definition is
COMMENT_LINE $0485 also in SCALE_FACTOR_GAME, than we can do a normal compare!
COMMENT $0485 load frog position
FORCE_SYMBOL $0485 frog_x
COMMENT $0487 so that detection is not all THAT sharp
COMMENT $0488 so that detection is not all THAT sharp
COMMENT $0489 compare it to x postion of object
FORCE_NO_SYMBOL $0489
COMMENT $048B if frog further left, jump
COMMENT $048D subtract length of object
FORCE_NO_SYMBOL $048D
COMMENT $048F subtract X position of object
FORCE_NO_SYMBOL $048F
COMMENT $0491 if we are now on 'the left' we hit it
COMMENT $0493 get pointer to next object_list element in this band
COMMENT $0495 if empty we are done
COMMENT $0497 load band, if in lower half
FORCE_SYMBOL $0497 frog_y_band
COMMENT $0499 not collision is good
FORCE_NO_SYMBOL $0499
COMMENT $049B otherwise we die (drowning)
FORCE_SYMBOL $049D out_here
COMMENT $04A0 add the size of the frog to A (position of frog)
FORCE_SYMBOL $04A0 current_frog_size_x
COMMENT $04A2 compare it to x postion of object
FORCE_NO_SYMBOL $04A2
COMMENT $04A4 still lower, than no collision
COMMENT $04A6 load band information
FORCE_SYMBOL $04A6 frog_y_band
COMMENT $04A8 if in upper half, than it is good
FORCE_NO_SYMBOL $04A8
COMMENT $04AA than we are being transported
COMMENT $04AC SPECIAL...
FORCE_NO_SYMBOL $04AC
COMMENT $04AE middle band is treated as a street
COMMENT $04B0 if a snake is encountered
FORCE_SYMBOL $04B0 SPECIAL_RIGHT_SNAKE
COMMENT $04B2 jump if not
COMMENT $04B4 load the frog postion
FORCE_SYMBOL $04B4 frog_x
COMMENT $04B6 minus X position of object
FORCE_NO_SYMBOL $04B6
COMMENT $04B8 hardcoded length of snake :-(
FORCE_NO_SYMBOL $04B8
COMMENT $04BA otherwise go on
COMMENT $04BC otherwise die a snake death
COMMENT_LINE $04BE must be left snake than (or something is wrong)
COMMENT_LINE $04BE there are no special cars!
COMMENT $04BE load the frog postion
FORCE_SYMBOL $04BE frog_x
COMMENT $04C0 minus X position of object
FORCE_NO_SYMBOL $04C0
COMMENT $04C2 hardcoded length of snake :-(
FORCE_NO_SYMBOL $04C2
COMMENT $04C4 otherwise go on
COMMENT $04C6 if lower than bitten by snake
COMMENT_LINE $04C8 NOTE: A should always be zero here
COMMENT $04C8 otherwise we die a DIE_CAR
FORCE_SYMBOL $04C8 DIE_CAR
COMMENT $04CA type of death
FORCE_SYMBOL $04CA kind_of_death
COMMENT $04CC decrease number of available frogs
FORCE_SYMBOL $04CC no_frogs
COMMENT $04CE do a frog_dead intermission, kind of death
FORCE_SYMBOL $04CE frog_dead
COMMENT_LINE $04D1 is correctly set in 'kind_of_death'
FORCE_SYMBOL $04D1 isAttractMode
COMMENT $04D4 attract mode does not lose
COMMENT_LINE $04D6 LDA # '0' ; compare to '0'
COMMENT_LINE $04D6 CMPA no_frogs ; the number of available frogs
FORCE_SYMBOL $04D6 no_frogs2
COMMENT $04D9 if not zero yet, go on
COMMENT $04DB do a game_lost intermission and return there
FORCE_SYMBOL $04DB game_lost
COMMENT $04DE init_new_frog_vars expects dp at c8
FORCE_SYMBOL $04DE DP_to_C8
COMMENT $04E1 clear the frog variables
FORCE_SYMBOL $04E1 init_new_frog_vars
COMMENT $04E4 is there a current piece playing?
FORCE_SYMBOL $04E4 currentMusic
COMMENT $04E6 if not
COMMENT $04E8 take that piece given and
FORCE_SYMBOL $04E8 inGameMusic1
COMMENT $04EB play it now
FORCE_SYMBOL $04EB currentMusic
FORCE_SYMBOL $04EE init_ym_sound
COMMENT $04F3 otherwise, store it as next possible piece
FORCE_SYMBOL $04F3 inGameMusic1
FORCE_SYMBOL $04F6 nextMusic
COMMENT $04F9 init_new_frog_vars expects dp at c8
FORCE_SYMBOL $04F9 DP_to_D0
COMMENT_LINE $04FC rts
COMMENT $04FC die a DIE_OUT kind of
FORCE_SYMBOL $04FC DIE_OUT
COMMENT $04FF jump to die
COMMENT $0501 die a DIE_DROWN kind of
FORCE_SYMBOL $0501 DIE_DROWN
COMMENT $0504 jump to die
COMMENT $0506 die a DIE_CROCO kind of
FORCE_SYMBOL $0506 DIE_CROCO
COMMENT $0509 jump to die
COMMENT $050B die a DIE_SNAKE kind of
FORCE_SYMBOL $050B DIE_SNAKE
COMMENT $050E jump to die
COMMENT $0510 lets test the special flag...
FORCE_NO_SYMBOL $0510
COMMENT $0512 if no special go on
COMMENT $0514 test for left crocodile
FORCE_SYMBOL $0514 SPECIAL_LEFT_CROCO
COMMENT $0516 if not, jump
COMMENT $0518 load the frog postion
FORCE_SYMBOL $0518 frog_x
COMMENT $051A subtract X position of object
FORCE_NO_SYMBOL $051A
COMMENT $051C hardcoded length of croco :-(
FORCE_NO_SYMBOL $051C
COMMENT $051E not eaten by croco, nothing else can be here
COMMENT $0520 if lower frogger was eaten by crocodile
COMMENT $0522 are we sitting on a right croco?
FORCE_SYMBOL $0522 SPECIAL_RIGHT_CROCO
COMMENT $0524 no? than jump
COMMENT_LINE $0526 hey dissi "bre ak"
COMMENT $0526 load the frog postion
FORCE_SYMBOL $0526 frog_x
COMMENT $0528 subtract X position of object
FORCE_NO_SYMBOL $0528
COMMENT $052A hardcoded length of croco :-(
FORCE_NO_SYMBOL $052A
COMMENT $052C not eaten by croco, nothing else can be here
COMMENT $052E if higher frogger was eaten by crocodile
COMMENT $0530 look if this is a dived turtle
FORCE_SYMBOL $0530 SPECIAL_DIVE_DOWN
COMMENT $0532 if yes... drown
COMMENT_LINE $0534 check if we 'capture' a girl
COMMENT $0534 what's the girls status?
FORCE_SYMBOL $0534 girl_status
COMMENT $0536 is it displayed
FORCE_SYMBOL $0536 IS_DISPLAYED
COMMENT $0538 no? than jump
COMMENT $053A load log object address
FORCE_SYMBOL $053A girl_log_object
COMMENT $053C address + 3 is stored, correct it
FORCE_NO_SYMBOL $053C
COMMENT $053F subtract the current object information
COMMENT $0541 if not the same, go to no_girl_
COMMENT_LINE $0543 check for collision
COMMENT $0543 load girl x pos
COMMENT $0545 subtract frog_x pos
FORCE_SYMBOL $0545 frog_x
COMMENT $0547 absolute it
COMMENT $054E if not in the range of 10
FORCE_NO_SYMBOL $054E
COMMENT $0550 jump to no girl
COMMENT $0552 IS CARRIED
FORCE_SYMBOL $0552 girl_status
COMMENT $0554 load bonus state
FORCE_SYMBOL $0554 frog_bonus
COMMENT $0556 add a girl bonus
FORCE_SYMBOL $0556 GIRL_BONUS
COMMENT $0558 store it
FORCE_SYMBOL $0558 frog_bonus
FORCE_SYMBOL $055A KarlGirlGot_Sound
FORCE_SYMBOL $055D play_sfx_x
COMMENT_LINE $0560 check if we hit a 'log' snake
COMMENT $0560 what's the snake's status?
FORCE_SYMBOL $0560 snake_status
COMMENT $0562 is it displayed
FORCE_SYMBOL $0562 IS_DISPLAYED
COMMENT $0564 no? than jump
COMMENT $0566 what band are we on now ?
FORCE_SYMBOL $0566 frog_y_band
COMMENT $0568 compare with 'snake band'
FORCE_NO_SYMBOL $0568
COMMENT $056A if not our band... go on
COMMENT $056C which contains the log a objectlist address
FORCE_SYMBOL $056C snake_object
COMMENT $056E load special
FORCE_NO_SYMBOL $056E
COMMENT $0570 if a snake is encountered
FORCE_SYMBOL $0570 SPECIAL_RIGHT_SNAKE
COMMENT $0572 jump if not
COMMENT $0574 load the frog postion
FORCE_SYMBOL $0574 frog_x
COMMENT $0576 minus X position of object
COMMENT $0578 real hardcoded length
FORCE_NO_SYMBOL $0578
COMMENT $057A absolut it
COMMENT $0581 somewhere arround the snakes head?
FORCE_NO_SYMBOL $0581
COMMENT $0583 if higher, than not hit
COMMENT $0585 otherwise than bitten by snake
COMMENT $0587 now we look for left snake
FORCE_SYMBOL $0587 SPECIAL_LEFT_SNAKE
COMMENT $0589 no?, than jump
COMMENT $058B load the frog postion
FORCE_SYMBOL $058B frog_x
COMMENT $058D minus X position of object
COMMENT $058F absolut it
COMMENT $0596 somewhere arround the snakes head?
FORCE_NO_SYMBOL $0596
COMMENT $0598 if lower than bitten by snake
COMMENT $059C load the frog postion
FORCE_SYMBOL $059C frog_x
COMMENT $059E add the speed of the object
FORCE_NO_SYMBOL $059E
COMMENT $05A0 and store it
FORCE_SYMBOL $05A0 frog_x
COMMENT $05A2 are we out of bounds right?
FORCE_SYMBOL $05A2 FROG_RIGHT_OUT
COMMENT $05A4 than dead
COMMENT $05A8 are we out of bounds left?
FORCE_SYMBOL $05A8 FROG_LEFT_OUT
COMMENT $05AA than dead
COMMENT $05AE ok, for checking of 'normal' bounds
FORCE_SYMBOL $05AE tmp_band_offset
COMMENT_LINE $05B0 we need to calculate the band_x
COMMENT_LINE $05B0 coordinates, 'tmp_band_offset' is now
COMMENT_LINE $05B0 used as a helper
COMMENT_LINE $05B0 it counts from 0 to 9
COMMENT_LINE $05B0 if below 0 band_x is decremented
COMMENT_LINE $05B0 if 10 or high it is incremented...
COMMENT $05B0 add the speed of the object
FORCE_NO_SYMBOL $05B0
COMMENT $05B2 if below zero, dec band_x 1
COMMENT $05B4 if higher GRID_SIZE...
FORCE_SYMBOL $05B4 GRID_SIZE_GAME
COMMENT $05B6 ... add one to band_x
COMMENT $05B8 otherwise just store it back
FORCE_SYMBOL $05B8 tmp_band_offset
COMMENT $05BC for internal checking
FORCE_SYMBOL $05BC frog_x_band
COMMENT $05BE make it modulo 10
FORCE_SYMBOL $05BE GRID_SIZE_GAME
COMMENT $05C0 store it
FORCE_SYMBOL $05C0 tmp_band_offset
COMMENT $05C4 for internal checking
FORCE_SYMBOL $05C4 frog_x_band
COMMENT $05C6 make it modulo 10
FORCE_SYMBOL $05C6 GRID_SIZE_GAME
COMMENT $05C8 store it
FORCE_SYMBOL $05C8 tmp_band_offset
FORCE_NO_SYMBOL $05CA
COMMENT $05CE address of home vector list
COMMENT $05D1 A = Scale factor, B Bit for timer test #$1c40
COMMENT_LINE $05D4 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $05D4 ;;;;;;;;; MOVE 3 END
COMMENT_LINE $05D4 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $05D4 scale factor can be set while in move!
COMMENT_LINE $05D4 own scale factor to homes, since they are drawn in an individually fitted scale
COMMENT $05D4 move to time 1 lo, this means scaling
FORCE_SYMBOL $05D4 VIA_t1_cnt_lo
COMMENT $05D6 clear A
COMMENT $05D7 done with move?
FORCE_SYMBOL $05D7 VIA_int_flags
COMMENT $05D9 no, than go on waiting
COMMENT_LINE $05DB done with move
COMMENT_LINE $05DB now a MY_DRAW_VLC
COMMENT $05DB A= how many vectors?, B = Y coordinate
FORCE_SYMBOL $05DD VIA_port_b
COMMENT_LINE $05DF STa      <VIA_port_b
COMMENT_LINE $05DF STb      <VIA_port_a
COMMENT_LINE $05DF nop
COMMENT $05DF load next coordinate (X)
FORCE_NO_SYMBOL $05DF
COMMENT $05E1 Disable mux
FORCE_SYMBOL $05E1 VIA_port_b
COMMENT $05E3 Send X to A/D
FORCE_SYMBOL $05E3 VIA_port_a
COMMENT $05E5 Put pattern in shift register ($ff)
FORCE_SYMBOL $05E5 VIA_shift_reg
COMMENT $05E7 enable timer 1
FORCE_SYMBOL $05E7 VIA_t1_cnt_hi
COMMENT $05E9 [5] next coordinate (Y)
FORCE_NO_SYMBOL $05E9
COMMENT $05EB [7] more vectors?
FORCE_NO_SYMBOL $05EB
COMMENT $05EE [3] Go back for more points
COMMENT $05F0 [2] B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $05F0
COMMENT $05F2 [3]
FORCE_NO_SYMBOL $05F2
COMMENT $05F4 [4] Wait for T1 to time out
FORCE_SYMBOL $05F4 VIA_int_flags
COMMENT $05F6 [3]
COMMENT $05F8 [2] Wait a moment more
COMMENT $05F9 [4] Clear shift register (blank output)
FORCE_SYMBOL $05F9 VIA_shift_reg
COMMENT_LINE $05FB 28 cycles - exactly $1c scale factor
COMMENT_LINE $05FB instead of flag testing we should just do 4 nops
COMMENT $05FD A-reg = T1 interrupt bit, B = zero vector byte
COMMENT $0600 Wait for T1 to time out
FORCE_SYMBOL $0600 VIA_int_flags
COMMENT $0604 Wait a moment more
FORCE_SYMBOL $0605 VIA_shift_reg
COMMENT_LINE $0607 DRAW THE LINES IN BETWEEN
COMMENT $0607 /BLANK low and /ZERO low
FORCE_SYMBOL $0607 VIA_cntl
COMMENT $0609 patched for speed... /2
COMMENT $0609 scale for placing first point
COMMENT $060B move to time 1 lo, this means scaling
FORCE_SYMBOL $060B VIA_t1_cnt_lo
COMMENT $060D Y pos, A=0
COMMENT_LINE $0610 move to D
FORCE_SYMBOL $0610 VIA_port_b
FORCE_SYMBOL $0612 VIA_port_b
FORCE_SYMBOL $0614 VIA_port_a
COMMENT $0616 Blank low, zero high?
FORCE_NO_SYMBOL $0616
COMMENT $0618 Disable mux
FORCE_SYMBOL $0618 VIA_port_b
COMMENT $061A zero high!
FORCE_SYMBOL $061A VIA_cntl
COMMENT $061C X pos relative to start
COMMENT $061E Store X in D/A register
FORCE_SYMBOL $061E VIA_port_a
COMMENT $0620 enable timer
FORCE_SYMBOL $0620 VIA_t1_cnt_hi
COMMENT_LINE $0622 ;;
COMMENT_LINE $0622 cycles wasted in below wait for TI1
COMMENT_LINE $0622 we use the time and do some stuff in here...
COMMENT_LINE $0622 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0622 ;;;;;;;;; MOVE 4 START
COMMENT_LINE $0622 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $0622 test if we are in death timer loop
COMMENT $0625 frog is allready dead!
COMMENT $0627 load fly timer
FORCE_SYMBOL $0627 fly_timer
COMMENT $062A decrease it
FORCE_NO_SYMBOL $062A
COMMENT $062D store it back
FORCE_SYMBOL $062D fly_timer
COMMENT $0630 load croco timer
FORCE_SYMBOL $0630 croco_timer
COMMENT $0633 decrease it
FORCE_NO_SYMBOL $0633
COMMENT $0636 store it back
FORCE_SYMBOL $0636 croco_timer
COMMENT $0639 load the timer value
FORCE_SYMBOL $0639 dive_timer
COMMENT $063C if $ff, than no turtle
FORCE_NO_SYMBOL $063C
COMMENT $063E overstep the next two
COMMENT $0640 count it down by $20
FORCE_NO_SYMBOL $0640
COMMENT $0643 store it
FORCE_SYMBOL $0643 dive_timer
COMMENT $0646 load the timer value
FORCE_SYMBOL $0646 my_timer
COMMENT_LINE $0649 SUBD #$20 ; count it down by $20
COMMENT $0649 count it down by $20
FORCE_NO_SYMBOL $0649
COMMENT $064C store it
FORCE_SYMBOL $064C my_timer
FORCE_SYMBOL $064F otter_status
COMMENT $0652 is displayed
FORCE_SYMBOL $0652 IS_WAITING
COMMENT $0656 load otter timer
FORCE_SYMBOL $0656 otter_timer
COMMENT $0659 decrease it
FORCE_NO_SYMBOL $0659
COMMENT $065C store it back
FORCE_SYMBOL $065C otter_timer
COMMENT $065F if music is not playing
FORCE_SYMBOL $065F currentMusic
COMMENT $0662 jump, otherwise initialize "in move" subroutines for ym decode
COMMENT $0664 also sets up inMovePointer
FORCE_SYMBOL $0664 STREAM_PART_1
COMMENT $0667 first and second is really small
FORCE_SYMBOL $0667 inMovePointer
COMMENT $066B A is scale, B is bit test $40
COMMENT $066E move to time 1 lo, this means scaling
FORCE_SYMBOL $066E VIA_t1_cnt_lo
COMMENT_LINE $0670 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0670 ;;;;;;;;; MOVE 4 START
COMMENT_LINE $0670 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $0670 Wait for T1 to time out
FORCE_SYMBOL $0670 VIA_int_flags
COMMENT_LINE $0674 move to done
COMMENT_LINE $0674 draw line...
COMMENT $0674 A=0, B=X
COMMENT $0677 Send Y to A/D
FORCE_SYMBOL $0677 VIA_port_a
COMMENT $0679 Enable mux
FORCE_SYMBOL $0679 VIA_port_b
COMMENT $067B Disable mux
FORCE_SYMBOL $067B VIA_port_b
COMMENT $067D Send X to A/D
FORCE_SYMBOL $067D VIA_port_a
COMMENT $067F enable T1H
FORCE_SYMBOL $067F VIA_t1_cnt_hi
FORCE_SYMBOL $0681 VIA_shift_reg
COMMENT_LINE $0683 this waits for $ea cycles to finish drawing
COMMENT_LINE $0683 *shudder*
COMMENT_LINE $0683 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0683 in move DRAW
COMMENT_LINE $0683 following CAN be done, since the routine is sort of stable!
COMMENT_LINE $0683 the changes in cycles are really seldom,
COMMENT_LINE $0683 otherwise the length of the drawn vector would be shaky
FORCE_SYMBOL $0683 gameModeOption
FORCE_SYMBOL $0686 HARDMODE
FORCE_NO_SYMBOL $0688
FORCE_SYMBOL $068C score_digit_5
FORCE_SYMBOL $068F high_check
COMMENT $0694 and store it, for new life at change... (every 10000 points)
FORCE_SYMBOL $0694 high_check
COMMENT $0697 incraese frog lifes
FORCE_SYMBOL $0697 no_frogs
FORCE_SYMBOL $069A Karl_NewHigScoreSound
FORCE_SYMBOL $069D play_sfx_x
COMMENT $06A0 is in
FORCE_SYMBOL $06A0 no_frogs
FORCE_SYMBOL $06A3 score_digit_LIFES
COMMENT $06A9 move to time 1 lo, this means scaling
FORCE_SYMBOL $06A9 VIA_t1_cnt_lo
COMMENT_LINE $06AB ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $06AB B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $06AB
COMMENT $06AD Wait for T1 to time out
FORCE_SYMBOL $06AD VIA_int_flags
COMMENT_LINE $06B1 line draw done
COMMENT_LINE $06B1 move start
COMMENT $06B1 a small Y offset down
COMMENT $06B3 Clear shift register (blank output)
FORCE_SYMBOL $06B3 VIA_shift_reg
COMMENT $06B5 Store Y in D/A register
FORCE_SYMBOL $06B5 VIA_port_a
COMMENT $06B7 Enable mux
FORCE_SYMBOL $06B7 VIA_port_b
COMMENT $06B9 Blank low, zero high?
FORCE_NO_SYMBOL $06B9
FORCE_SYMBOL $06BB VIA_cntl
COMMENT $06BD Disable mux
FORCE_SYMBOL $06BD VIA_port_b
COMMENT $06BF Store X in D/A register
FORCE_SYMBOL $06BF VIA_port_a
COMMENT $06C1 enable timer
FORCE_SYMBOL $06C1 VIA_t1_cnt_hi
COMMENT_LINE $06C3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $06C3 ;;;;;;;;; MOVE 5 START
COMMENT_LINE $06C3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $06C3 this is a "small" move, we do not use
COMMENT_LINE $06C3 move is "only" (SCALE_FACTOR_GRID/12)
COMMENT $06C3 A is scale, B is bit test $40
COMMENT $06C6 move to time 1 lo, this means scaling
FORCE_SYMBOL $06C6 VIA_t1_cnt_lo
COMMENT_LINE $06C9 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $06C9 ;;;;;;;;; MOVE 5 END
COMMENT_LINE $06C9 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $06C9 Wait for T1 to time out
FORCE_SYMBOL $06C9 VIA_int_flags
COMMENT_LINE $06CD move end
COMMENT_LINE $06CD draw start
COMMENT $06CD A=0, B=X
COMMENT $06CF Send Y to A/D
FORCE_SYMBOL $06CF VIA_port_a
COMMENT $06D1 Enable mux
FORCE_SYMBOL $06D1 VIA_port_b
COMMENT $06D3 Disable mux
FORCE_SYMBOL $06D3 VIA_port_b
COMMENT $06D5 Send X to A/D
FORCE_SYMBOL $06D5 VIA_port_a
COMMENT $06D7 Set T1H (scale factor?)
FORCE_SYMBOL $06D7 VIA_t1_cnt_hi
FORCE_SYMBOL $06D9 VIA_shift_reg
COMMENT_LINE $06DB this waits for $ea cycles to finish drawing
COMMENT_LINE $06DB *shudder*
COMMENT_LINE $06DB Seeking - what could be donein this $ea cycles?
COMMENT_LINE $06DB haven't found more stuff todo in waiting *grml*
COMMENT_LINE $06DB new:
COMMENT_LINE $06DB just doing both JSR "earlier" than later in a move
COMMENT_LINE $06DB seems to save (level 1) about 100 cycles, so I do it here
COMMENT_LINE $06DB vide measurements - hurray!
COMMENT_LINE $06DB jsr      [inMovePointer]              ; first is really small
COMMENT_LINE $06DB jsr      [inMovePointer]              ; first is really small
COMMENT_LINE $06DB I can not use the above two EVEN though they fit perfectly
COMMENT_LINE $06DB because they use different cycles each call
COMMENT_LINE $06DB because of that the blank is switched on on a different cycle count
COMMENT_LINE $06DB and the end of the vector "wiggles" - thats vectrex
COMMENT_LINE $06DB if I find a routine with a fixed cycle count - I can put it in here and
COMMENT_LINE $06DB save them!
COMMENT $06DD move to time 1 lo, this means scaling
FORCE_SYMBOL $06DD VIA_t1_cnt_lo
FORCE_NO_SYMBOL $06DF
COMMENT $06E2 Wait for T1 to time out
FORCE_SYMBOL $06E2 VIA_int_flags
COMMENT $06E7 Clear shift register (blank output)
FORCE_SYMBOL $06E7 VIA_shift_reg
COMMENT_LINE $06E9 draw end
COMMENT_LINE $06E9 notice!
COMMENT_LINE $06E9 the timer line length could also be altered using the scale factor,
COMMENT_LINE $06E9 in fact that would save some cycles, especially
COMMENT_LINE $06E9 when time goes low...
COMMENT_LINE $06E9 also the timer line would not grow "brighter" the shorter it gets...
COMMENT $06E9 /BLANK low and /ZERO low
FORCE_SYMBOL $06E9 VIA_cntl
COMMENT_LINE $06EB move to
COMMENT $06EB y offset
COMMENT $06ED Store Y in D/A register
FORCE_SYMBOL $06ED VIA_port_a
COMMENT $06EF Enable mux
FORCE_SYMBOL $06EF VIA_port_b
COMMENT $06F1 Blank low, zero high?
FORCE_NO_SYMBOL $06F1
COMMENT $06F3 Disable mux
FORCE_SYMBOL $06F3 VIA_port_b
COMMENT $06F5 zero high, this is really a few cycles to early!
FORCE_SYMBOL $06F5 VIA_cntl
COMMENT $06F7 X pos relative to start
COMMENT $06F9 Store X in D/A register
FORCE_SYMBOL $06F9 VIA_port_a
COMMENT $06FB enable timer
FORCE_SYMBOL $06FB VIA_t1_cnt_hi
COMMENT_LINE $06FD ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $06FD ;;;;;;;;; MOVE 6 START
COMMENT_LINE $06FD ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $06FD this is a "small" move, we do not use extensivly
COMMENT_LINE $06FD move is "only" (SCALE_FACTOR_GRID/2) - which is still large and might be used
COMMENT_LINE $06FD jsr emptyInMove
COMMENT $06FD load new vector (length was cut by timer :-))
COMMENT $0700 is it small yet?
FORCE_NO_SYMBOL $0700
COMMENT $0704 no, than jump
FORCE_SYMBOL $0706 intermissionActive
FORCE_SYMBOL $070B KarlTimeOut_Sound
FORCE_SYMBOL $070E play_sfx_x
COMMENT $0713 is it really really small?
FORCE_NO_SYMBOL $0713
COMMENT $0715 nah, not that small yet
FORCE_SYMBOL $0717 intermissionActive
FORCE_SYMBOL $071C KarlTimeOut_Sound
FORCE_SYMBOL $071F play_sfx_x
COMMENT_LINE $0722 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $0722 fourth is big
FORCE_SYMBOL $0722 inMovePointer
COMMENT $0726 A= scale, B-reg = T1 interrupt bit
COMMENT $0729 move to time 1 lo, this means scaling
FORCE_SYMBOL $0729 VIA_t1_cnt_lo
COMMENT_LINE $072C ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $072C ;;;;;;;;; MOVE 6 END
COMMENT_LINE $072C ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $072C Wait for T1 to time out
FORCE_SYMBOL $072C VIA_int_flags
COMMENT_LINE $0730 move done
COMMENT $0730 load new vector (length was cut by timer :-)), y is always 0
COMMENT $0733 skip null timer (from intermissions)
COMMENT_LINE $0735 draw line
COMMENT $0735 Send Y to A/D
FORCE_SYMBOL $0735 VIA_port_a
COMMENT $0737 Enable mux
FORCE_SYMBOL $0737 VIA_port_b
COMMENT $0739 Disable mux
FORCE_SYMBOL $0739 VIA_port_b
COMMENT $073B Send X to A/D
FORCE_SYMBOL $073B VIA_port_a
COMMENT $073D Set T1H (scale factor?)
FORCE_SYMBOL $073D VIA_t1_cnt_hi
FORCE_SYMBOL $073F VIA_shift_reg
COMMENT $0741 B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $0741
COMMENT $0743 clear temporal
FORCE_SYMBOL $0743 tmp1
COMMENT $0746 storage for offset
COMMENT $0749 Wait for T1 to time out
FORCE_SYMBOL $0749 VIA_int_flags
COMMENT $074D Clear shift register (blank output)
FORCE_SYMBOL $074D VIA_shift_reg
COMMENT_LINE $074F draw end
COMMENT_LINE $074F ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $074F jsr smallCalibration
COMMENT_LINE $074F ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $074F ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $074F independent code section
COMMENT_LINE $074F draw all 'home' sprites
COMMENT $074F load the address to x, start of list of homes
FORCE_SYMBOL $074F home_objects
FORCE_NO_SYMBOL $0752
COMMENT $0754 Shift reg mode = 000 free disable, T1 PB7 enabled
FORCE_SYMBOL $0754 VIA_aux_cntl
FORCE_SYMBOL $0758 HOME_OBJECT_SIZE
COMMENT $0761 prepare for zero below - SCAL_HOME = $83
COMMENT $0764 22 cycles from switch on ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0764 VIA_cntl
COMMENT $0766 load object to u
FORCE_NO_SYMBOL $0766
COMMENT $0768 if zero, than anothing to do
COMMENT_LINE $076A do 1 house object here!
COMMENT_LINE $076A zero here for following homes
COMMENT $076A for first house
COMMENT $076A move to time 1 lo, this means scaling
FORCE_SYMBOL $076A VIA_t1_cnt_lo
COMMENT $076C load object position
FORCE_NO_SYMBOL $076C
COMMENT $076E korrect with sprite offset Y
FORCE_NO_SYMBOL $076E
COMMENT $0770 korrect with sprite offset X
FORCE_NO_SYMBOL $0770
COMMENT_LINE $0772 move to
COMMENT $0772 Store Y in D/A register
FORCE_SYMBOL $0772 VIA_port_a
COMMENT $0774 Enable mux
FORCE_SYMBOL $0774 VIA_port_b
COMMENT $0776 Blank low, zero high?
FORCE_NO_SYMBOL $0776
FORCE_SYMBOL $0778 VIA_cntl
COMMENT $077A Disable mux
FORCE_SYMBOL $077A VIA_port_b
COMMENT $077C Store X in D/A register
FORCE_SYMBOL $077C VIA_port_a
COMMENT $077E enable timer
FORCE_SYMBOL $077E VIA_t1_cnt_hi
COMMENT_LINE $0780 ;;;;; IN MOVE HERE
COMMENT $0780 decrease animation counter
FORCE_NO_SYMBOL $0780
COMMENT $0782 if zero, we must initialize new animation phase
COMMENT $0784 load new object definition
FORCE_NO_SYMBOL $0784
COMMENT $0787 store new object definition to object list
FORCE_NO_SYMBOL $0787
COMMENT $078A load new animation counter start
FORCE_NO_SYMBOL $078A
COMMENT $078C and set it in object list
FORCE_NO_SYMBOL $078C
COMMENT $078E load object vector list to , (save u in y register)
FORCE_NO_SYMBOL $078E
COMMENT_LINE $0791 in this move (if it happens) we can do some ym decoding....
COMMENT $0791 do ym decode "in move"
FORCE_SYMBOL $0791 inMovePointer
COMMENT $0795 restore and u
FORCE_NO_SYMBOL $0795
COMMENT $0797 load offset of vector list draw
FORCE_NO_SYMBOL $0797
COMMENT $079E A= scale, B= Timer flag
COMMENT $07A1 do it
COMMENT $07A1 move to time 1 lo, this means scaling
FORCE_SYMBOL $07A1 VIA_t1_cnt_lo
FORCE_SYMBOL $07A3 HOME_OBJECT_SIZE
COMMENT $07A5 Wait for T1 to time out
FORCE_SYMBOL $07A5 VIA_int_flags
COMMENT_LINE $07A9 move to done
COMMENT_LINE $07A9 in X vector list now!
COMMENT_LINE $07A9 U still untouched, pointer to first home!
COMMENT_LINE $07A9 display the vector list
COMMENT_LINE $07A9 since there can actually be 5 sprites displayed at once I do not use a subroutine, but the
COMMENT_LINE $07A9 direct unlooping via a macro (this costs nearly 600 bytes)
COMMENT_LINE $07A9 (x) length in bytes
COMMENT_LINE $07A9 [x] duration in cycles
COMMENT_LINE $07A9 do one "manual" starter line in advance
COMMENT $07A9 get current coordinates
COMMENT $07AB (2) [4] Send Y to A/D
FORCE_SYMBOL $07AB VIA_port_a
COMMENT $07AD (2) [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $07AD VIA_port_b
COMMENT $07AF [6] Disable mux
FORCE_SYMBOL $07AF VIA_port_b
COMMENT $07B1 [6] Send X to A/D
FORCE_SYMBOL $07B1 VIA_port_a
FORCE_NO_SYMBOL $07B3
COMMENT $07B5 [4] enable timer 1
FORCE_SYMBOL $07B5 VIA_t1_cnt_hi
COMMENT_LINE $07B7 light on
COMMENT $07B7 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $07B7 VIA_cntl
COMMENT_LINE $07B9 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $07B9 [8] load Y coordinate to A, X coordinate to B
COMMENT $07BB [4] Send Y to A/D
FORCE_SYMBOL $07BB VIA_port_a
COMMENT $07BD [6]
FORCE_SYMBOL $07BD VIA_port_b
COMMENT $07BF [2]
FORCE_NO_SYMBOL $07BF
COMMENT_LINE $07C1 light off
COMMENT $07C1 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $07C1 VIA_cntl
COMMENT $07C3 [6] Disable mux
FORCE_SYMBOL $07C3 VIA_port_b
FORCE_NO_SYMBOL $07C5
COMMENT $07C7 [6] Send X to A/D
FORCE_SYMBOL $07C7 VIA_port_a
FORCE_NO_SYMBOL $07C9
COMMENT $07CB [4] enable timer 1
FORCE_SYMBOL $07CB VIA_t1_cnt_hi
COMMENT_LINE $07CD light on
COMMENT $07CD [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $07CD VIA_cntl
COMMENT_LINE $07CF pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $07CF [8] load Y coordinate to A, X coordinate to B
COMMENT $07D1 [4] Send Y to A/D
FORCE_SYMBOL $07D1 VIA_port_a
COMMENT $07D3 [6]
FORCE_SYMBOL $07D3 VIA_port_b
COMMENT $07D5 [2]
FORCE_NO_SYMBOL $07D5
COMMENT_LINE $07D7 light off
COMMENT $07D7 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $07D7 VIA_cntl
COMMENT $07D9 [6] Disable mux
FORCE_SYMBOL $07D9 VIA_port_b
COMMENT $07DB [6] Send X to A/D
FORCE_SYMBOL $07DB VIA_port_a
FORCE_NO_SYMBOL $07DD
COMMENT $07DF [4] enable timer 1
FORCE_SYMBOL $07DF VIA_t1_cnt_hi
COMMENT_LINE $07E1 light on
COMMENT $07E1 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $07E1 VIA_cntl
COMMENT_LINE $07E3 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $07E3 [8] load Y coordinate to A, X coordinate to B
COMMENT $07E5 [4] Send Y to A/D
FORCE_SYMBOL $07E5 VIA_port_a
COMMENT $07E7 [6]
FORCE_SYMBOL $07E7 VIA_port_b
COMMENT $07E9 [2]
FORCE_NO_SYMBOL $07E9
COMMENT_LINE $07EB light off
COMMENT $07EB [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $07EB VIA_cntl
COMMENT $07ED [6] Disable mux
FORCE_SYMBOL $07ED VIA_port_b
COMMENT $07EF [6] Send X to A/D
FORCE_SYMBOL $07EF VIA_port_a
FORCE_NO_SYMBOL $07F1
COMMENT $07F3 [4] enable timer 1
FORCE_SYMBOL $07F3 VIA_t1_cnt_hi
COMMENT_LINE $07F5 light on
COMMENT $07F5 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $07F5 VIA_cntl
COMMENT_LINE $07F7 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $07F7 [8] load Y coordinate to A, X coordinate to B
COMMENT $07F9 [4] Send Y to A/D
FORCE_SYMBOL $07F9 VIA_port_a
COMMENT $07FB [6]
FORCE_SYMBOL $07FB VIA_port_b
COMMENT $07FD [2]
FORCE_NO_SYMBOL $07FD
COMMENT_LINE $07FF light off
COMMENT $07FF [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $07FF VIA_cntl
COMMENT $0801 [6] Disable mux
FORCE_SYMBOL $0801 VIA_port_b
COMMENT $0803 [6] Send X to A/D
FORCE_SYMBOL $0803 VIA_port_a
FORCE_NO_SYMBOL $0805
COMMENT $0807 [4] enable timer 1
FORCE_SYMBOL $0807 VIA_t1_cnt_hi
COMMENT_LINE $0809 light on
COMMENT $0809 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0809 VIA_cntl
COMMENT_LINE $080B pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $080B [8] load Y coordinate to A, X coordinate to B
COMMENT $080D [4] Send Y to A/D
FORCE_SYMBOL $080D VIA_port_a
COMMENT $080F [6]
FORCE_SYMBOL $080F VIA_port_b
COMMENT $0811 [2]
FORCE_NO_SYMBOL $0811
COMMENT_LINE $0813 light off
COMMENT $0813 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0813 VIA_cntl
COMMENT $0815 [6] Disable mux
FORCE_SYMBOL $0815 VIA_port_b
COMMENT $0817 [6] Send X to A/D
FORCE_SYMBOL $0817 VIA_port_a
FORCE_NO_SYMBOL $0819
COMMENT $081B [4] enable timer 1
FORCE_SYMBOL $081B VIA_t1_cnt_hi
COMMENT_LINE $081D light on
COMMENT $081D [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $081D VIA_cntl
COMMENT_LINE $081F pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $081F [8] load Y coordinate to A, X coordinate to B
COMMENT $0821 [4] Send Y to A/D
FORCE_SYMBOL $0821 VIA_port_a
COMMENT $0823 [6]
FORCE_SYMBOL $0823 VIA_port_b
COMMENT $0825 [2]
FORCE_NO_SYMBOL $0825
COMMENT_LINE $0827 light off
COMMENT $0827 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0827 VIA_cntl
COMMENT $0829 [6] Disable mux
FORCE_SYMBOL $0829 VIA_port_b
COMMENT $082B [6] Send X to A/D
FORCE_SYMBOL $082B VIA_port_a
FORCE_NO_SYMBOL $082D
COMMENT $082F [4] enable timer 1
FORCE_SYMBOL $082F VIA_t1_cnt_hi
COMMENT_LINE $0831 light on
COMMENT $0831 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0831 VIA_cntl
COMMENT_LINE $0833 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0833 [8] load Y coordinate to A, X coordinate to B
COMMENT $0835 [4] Send Y to A/D
FORCE_SYMBOL $0835 VIA_port_a
COMMENT $0837 [6]
FORCE_SYMBOL $0837 VIA_port_b
COMMENT $0839 [2]
FORCE_NO_SYMBOL $0839
COMMENT_LINE $083B light off
COMMENT $083B [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $083B VIA_cntl
COMMENT $083D [6] Disable mux
FORCE_SYMBOL $083D VIA_port_b
COMMENT $083F [6] Send X to A/D
FORCE_SYMBOL $083F VIA_port_a
FORCE_NO_SYMBOL $0841
COMMENT $0843 [4] enable timer 1
FORCE_SYMBOL $0843 VIA_t1_cnt_hi
COMMENT_LINE $0845 light on
COMMENT $0845 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0845 VIA_cntl
COMMENT_LINE $0847 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0847 [8] load Y coordinate to A, X coordinate to B
COMMENT $0849 [4] Send Y to A/D
FORCE_SYMBOL $0849 VIA_port_a
COMMENT $084B [6]
FORCE_SYMBOL $084B VIA_port_b
COMMENT $084D [2]
FORCE_NO_SYMBOL $084D
COMMENT_LINE $084F light off
COMMENT $084F [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $084F VIA_cntl
COMMENT $0851 [6] Disable mux
FORCE_SYMBOL $0851 VIA_port_b
COMMENT $0853 [6] Send X to A/D
FORCE_SYMBOL $0853 VIA_port_a
FORCE_NO_SYMBOL $0855
COMMENT $0857 [4] enable timer 1
FORCE_SYMBOL $0857 VIA_t1_cnt_hi
COMMENT_LINE $0859 light on
COMMENT $0859 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0859 VIA_cntl
COMMENT_LINE $085B pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $085B [8] load Y coordinate to A, X coordinate to B
COMMENT $085D [4] Send Y to A/D
FORCE_SYMBOL $085D VIA_port_a
COMMENT $085F [6]
FORCE_SYMBOL $085F VIA_port_b
COMMENT $0861 [2]
FORCE_NO_SYMBOL $0861
COMMENT_LINE $0863 light off
COMMENT $0863 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0863 VIA_cntl
COMMENT $0865 [6] Disable mux
FORCE_SYMBOL $0865 VIA_port_b
COMMENT $0867 [6] Send X to A/D
FORCE_SYMBOL $0867 VIA_port_a
FORCE_NO_SYMBOL $0869
COMMENT $086B [4] enable timer 1
FORCE_SYMBOL $086B VIA_t1_cnt_hi
COMMENT_LINE $086D light on
COMMENT $086D [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $086D VIA_cntl
COMMENT_LINE $086F pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $086F [8] load Y coordinate to A, X coordinate to B
COMMENT $0871 [4] Send Y to A/D
FORCE_SYMBOL $0871 VIA_port_a
COMMENT $0873 [6]
FORCE_SYMBOL $0873 VIA_port_b
COMMENT $0875 [2]
FORCE_NO_SYMBOL $0875
COMMENT_LINE $0877 light off
COMMENT $0877 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0877 VIA_cntl
COMMENT $0879 [6] Disable mux
FORCE_SYMBOL $0879 VIA_port_b
COMMENT $087B [6] Send X to A/D
FORCE_SYMBOL $087B VIA_port_a
FORCE_NO_SYMBOL $087D
COMMENT $087F [4] enable timer 1
FORCE_SYMBOL $087F VIA_t1_cnt_hi
COMMENT_LINE $0881 light on
COMMENT $0881 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0881 VIA_cntl
COMMENT_LINE $0883 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0883 [8] load Y coordinate to A, X coordinate to B
COMMENT $0885 [4] Send Y to A/D
FORCE_SYMBOL $0885 VIA_port_a
COMMENT $0887 [6]
FORCE_SYMBOL $0887 VIA_port_b
COMMENT $0889 [2]
FORCE_NO_SYMBOL $0889
COMMENT_LINE $088B light off
COMMENT $088B [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $088B VIA_cntl
COMMENT $088D [6] Disable mux
FORCE_SYMBOL $088D VIA_port_b
COMMENT $088F [6] Send X to A/D
FORCE_SYMBOL $088F VIA_port_a
FORCE_NO_SYMBOL $0891
COMMENT $0893 [4] enable timer 1
FORCE_SYMBOL $0893 VIA_t1_cnt_hi
COMMENT_LINE $0895 light on
COMMENT $0895 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0895 VIA_cntl
COMMENT_LINE $0897 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0897 [8] load Y coordinate to A, X coordinate to B
COMMENT $0899 [4] Send Y to A/D
FORCE_SYMBOL $0899 VIA_port_a
COMMENT $089B [6]
FORCE_SYMBOL $089B VIA_port_b
COMMENT $089D [2]
FORCE_NO_SYMBOL $089D
COMMENT_LINE $089F light off
COMMENT $089F [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $089F VIA_cntl
COMMENT $08A1 [6] Disable mux
FORCE_SYMBOL $08A1 VIA_port_b
COMMENT $08A3 [6] Send X to A/D
FORCE_SYMBOL $08A3 VIA_port_a
FORCE_NO_SYMBOL $08A5
COMMENT $08A7 [4] enable timer 1
FORCE_SYMBOL $08A7 VIA_t1_cnt_hi
COMMENT_LINE $08A9 light on
COMMENT $08A9 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $08A9 VIA_cntl
COMMENT_LINE $08AB pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $08AB [8] load Y coordinate to A, X coordinate to B
COMMENT $08AD [4] Send Y to A/D
FORCE_SYMBOL $08AD VIA_port_a
COMMENT $08AF [6]
FORCE_SYMBOL $08AF VIA_port_b
COMMENT $08B1 [2]
FORCE_NO_SYMBOL $08B1
COMMENT_LINE $08B3 light off
COMMENT $08B3 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $08B3 VIA_cntl
COMMENT $08B5 [6] Disable mux
FORCE_SYMBOL $08B5 VIA_port_b
COMMENT $08B7 [6] Send X to A/D
FORCE_SYMBOL $08B7 VIA_port_a
FORCE_NO_SYMBOL $08B9
COMMENT $08BB [4] enable timer 1
FORCE_SYMBOL $08BB VIA_t1_cnt_hi
COMMENT_LINE $08BD light on
COMMENT $08BD [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $08BD VIA_cntl
COMMENT_LINE $08BF pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $08BF [8] load Y coordinate to A, X coordinate to B
COMMENT $08C1 [4] Send Y to A/D
FORCE_SYMBOL $08C1 VIA_port_a
COMMENT $08C3 [6]
FORCE_SYMBOL $08C3 VIA_port_b
COMMENT $08C5 [2]
FORCE_NO_SYMBOL $08C5
COMMENT_LINE $08C7 light off
COMMENT $08C7 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $08C7 VIA_cntl
COMMENT $08C9 [6] Disable mux
FORCE_SYMBOL $08C9 VIA_port_b
COMMENT $08CB [6] Send X to A/D
FORCE_SYMBOL $08CB VIA_port_a
FORCE_NO_SYMBOL $08CD
COMMENT $08CF [4] enable timer 1
FORCE_SYMBOL $08CF VIA_t1_cnt_hi
COMMENT_LINE $08D1 light on
COMMENT $08D1 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $08D1 VIA_cntl
COMMENT_LINE $08D3 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $08D3 [8] load Y coordinate to A, X coordinate to B
COMMENT $08D5 [4] Send Y to A/D
FORCE_SYMBOL $08D5 VIA_port_a
COMMENT $08D7 [6]
FORCE_SYMBOL $08D7 VIA_port_b
COMMENT $08D9 [2]
FORCE_NO_SYMBOL $08D9
COMMENT_LINE $08DB light off
COMMENT $08DB [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $08DB VIA_cntl
COMMENT $08DD [6] Disable mux
FORCE_SYMBOL $08DD VIA_port_b
COMMENT $08DF [6] Send X to A/D
FORCE_SYMBOL $08DF VIA_port_a
FORCE_NO_SYMBOL $08E1
COMMENT $08E3 [4] enable timer 1
FORCE_SYMBOL $08E3 VIA_t1_cnt_hi
COMMENT_LINE $08E5 light on
COMMENT $08E5 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $08E5 VIA_cntl
COMMENT_LINE $08E7 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $08E7 [8] load Y coordinate to A, X coordinate to B
COMMENT $08E9 [4] Send Y to A/D
FORCE_SYMBOL $08E9 VIA_port_a
COMMENT $08EB [6]
FORCE_SYMBOL $08EB VIA_port_b
COMMENT $08ED [2]
FORCE_NO_SYMBOL $08ED
COMMENT_LINE $08EF light off
COMMENT $08EF [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $08EF VIA_cntl
COMMENT $08F1 [6] Disable mux
FORCE_SYMBOL $08F1 VIA_port_b
COMMENT $08F3 [6] Send X to A/D
FORCE_SYMBOL $08F3 VIA_port_a
COMMENT_LINE $08F5 light on
FORCE_NO_SYMBOL $08F5
COMMENT $08F7 [4] enable timer 1
FORCE_SYMBOL $08F7 VIA_t1_cnt_hi
COMMENT $08F9 ZERO disabled, and BLANK disabled
FORCE_SYMBOL $08F9 VIA_cntl
COMMENT_LINE $08FB light off
COMMENT_LINE $08FB there must the above mentioned "switch the light off"
COMMENT_LINE $08FB after 22 cycles still be manually done
COMMENT_LINE $08FB (but the 22 cycles might be reused otherwise!)
COMMENT_LINE $08FB loop thru all five homes
COMMENT_LINE $0902 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0902 print the score, # of lives and # level, all in one "fast" draw String, takes pretty exactly 2000 cylces
COMMENT_LINE $0902 in the move section all the frog move data handling from the joystick query is done
FORCE_NO_SYMBOL $0902
COMMENT $0904 /BLANK low and /ZERO low
FORCE_SYMBOL $0904 VIA_cntl
COMMENT_LINE $0906 jsr smallCalibration
COMMENT_LINE $0906 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0906 independent code section
COMMENT_LINE $0906 remove/display otter
COMMENT $0906 is there any otter stuff at all?
FORCE_SYMBOL $0906 otter_status
COMMENT $0909 no?, than go on
FORCE_SYMBOL $090D intermissionActive
COMMENT $0912 croco is waiting to be displayed
FORCE_SYMBOL $0912 IS_WAITING
COMMENT $0914 if zero, do nothing
COMMENT_LINE $0918 otter is already displayed, must check if we should destroy it...
COMMENT $0918 load object list address of object past otter
FORCE_SYMBOL $0918 otter_log_past
COMMENT $091B and load the position of otter now
COMMENT $091E compare to log pos
FORCE_NO_SYMBOL $091E
COMMENT $0920 go to display if otter higher log
COMMENT_LINE $0922 here when otter pos smaller log pos
COMMENT $0922 now add the hardcoded length plus some (5) extra 'pixel'
COMMENT $0924 compare to log pos
FORCE_NO_SYMBOL $0924
COMMENT $0926 if still lower, than display
COMMENT_LINE $0928 otherwise if now greater, than a 'collision' with log happened
COMMENT_LINE $0928 now destroy otter
FORCE_SYMBOL $0928 IS_WAITING
FORCE_SYMBOL $092A otter_status
COMMENT $092D reload the otter timer
FORCE_SYMBOL $092D otter_timer_start
COMMENT $0930 and store it
FORCE_SYMBOL $0930 otter_timer
COMMENT $0933 and go to done
FORCE_SYMBOL $0933 finnished_otter_stuff
COMMENT_LINE $0936 ok, otter is available and still displayed...
COMMENT_LINE $0936 first let us look if there is afrog to be eaten... :-)
COMMENT $0936 go to 0,0
FORCE_NO_SYMBOL $0936
COMMENT $0938 /BLANK low and /ZERO low
FORCE_SYMBOL $0938 VIA_cntl
COMMENT $093A what band are we on now ?
FORCE_SYMBOL $093A otter_band
COMMENT $093D plus one to compare with frog band
COMMENT $093E compare with frog band
FORCE_SYMBOL $093E frog_y_band
COMMENT $0941 if not equal... do a simple otter display
COMMENT $0943 load otter position
COMMENT $0946 subtract frog position
FORCE_SYMBOL $0946 frog_x
COMMENT $0949 if positive no collision is possible -> jump to display
COMMENT $094B near 20
COMMENT $094D if lower, than everything OK
COMMENT $094F test if we are in death timer loop
COMMENT $0952 frog is allready dead!
FORCE_NO_SYMBOL $0954
COMMENT $0958 die a DIE_MOLE kind of
FORCE_SYMBOL $0958 DIE_MOLE
FORCE_SYMBOL $095B die_set_2
COMMENT_LINE $095E ............................................................................
COMMENT_LINE $095E this is actually the same as the code used in the main sprite loop
COMMENT_LINE $095E just fitted for otter only...
COMMENT $095E scale for game positioning
FORCE_SYMBOL $095E SCALE_FACTOR_GAME
COMMENT $0960 move to time 1 lo, this means scaling
FORCE_SYMBOL $0960 VIA_t1_cnt_lo
COMMENT $0962 load otter position
FORCE_SYMBOL $0962 otter_pos
COMMENT_LINE $0965 move to
COMMENT $0965 Store Y in D/A register
FORCE_SYMBOL $0965 VIA_port_a
COMMENT $0967 Blank low, zero high?
FORCE_NO_SYMBOL $0967
FORCE_SYMBOL $0969 VIA_cntl
COMMENT $096C Enable mux
FORCE_SYMBOL $096C VIA_port_b
COMMENT $096E Disable mux
FORCE_SYMBOL $096E VIA_port_b
COMMENT $0970 Store X in D/A register
FORCE_SYMBOL $0970 VIA_port_a
COMMENT $0972 enable timer
FORCE_SYMBOL $0972 VIA_t1_cnt_hi
COMMENT_LINE $0974 this is a "special"
COMMENT_LINE $0974 in move stuff, since it
COMMENT_LINE $0974 is only relevant if there realy is an otter
COMMENT_LINE $0974 and we do not even get to this code
COMMENT_LINE $0974 if there is no otter,
COMMENT_LINE $0974 for that reason no subroutine is called - but left here directly
COMMENT_LINE $0974 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0974 ;;;;;;;;; IN MOVE OTTER START
COMMENT_LINE $0974 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0974 in move stuff start
COMMENT $0974 load otter position
FORCE_SYMBOL $0974 otter_pos
COMMENT $0977 add the speed
FORCE_SYMBOL $0977 otter_speed
COMMENT $097A is on left side out of bounds?
FORCE_SYMBOL $097A BOUNDARY_LO
COMMENT $097C no, than no coordinate fiddling
COMMENT $0980 don't check for right out of bounds now
COMMENT $0982 check if we are out of bounds on the right
FORCE_SYMBOL $0982 BOUNDARY_HI
COMMENT $0984 no? than go on
COMMENT $0988 store the new x position
COMMENT $098B load the otter object to U
FORCE_SYMBOL $098B otter_object
COMMENT $098E decrease animation counter
FORCE_SYMBOL $098E otter_anim_counter
COMMENT $0991 if zero, we must initialize new animation phase
COMMENT $0993 load old sprite offsets
FORCE_NO_SYMBOL $0993
COMMENT $0995 negate them (A)
COMMENT $0996 negate them (B)
COMMENT $0997 add y position to old sprite offset y
FORCE_SYMBOL $0997 otter_pos
COMMENT $099A add x position to old sprite offset x
COMMENT $099D load new object definition
FORCE_NO_SYMBOL $099D
COMMENT $099F add new sprite offset y
FORCE_NO_SYMBOL $099F
COMMENT $09A1 add new sprite offset x
FORCE_NO_SYMBOL $09A1
COMMENT $09A3 and store the corrected position
FORCE_SYMBOL $09A3 otter_pos
COMMENT $09A6 store new object definition to object list
FORCE_SYMBOL $09A6 otter_object
COMMENT $09A9 load new animation counter start
FORCE_NO_SYMBOL $09A9
COMMENT $09AB and set it in object list
FORCE_SYMBOL $09AB otter_anim_counter
COMMENT $09AE load object vector list to X,
FORCE_NO_SYMBOL $09AE
COMMENT_LINE $09B0 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $09B0 ;;;;;;;;; IN MOVE OTTER END
COMMENT_LINE $09B0 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
FORCE_SYMBOL $09B0 move_wait_draw_vlc_unloop
FORCE_NO_SYMBOL $09B3
COMMENT $09B5 22 cycles from switch on ZERO disabled, and BLANK enabled
FORCE_SYMBOL $09B5 VIA_cntl
COMMENT_LINE $09B7 ............................................................................
COMMENT_LINE $09B7 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $09B7 now look if there is a snake on some log
COMMENT $09B7 get the status
FORCE_SYMBOL $09B7 snake_status
COMMENT $09BA if zero, than no snake on level
COMMENT $09BE if waiting
FORCE_SYMBOL $09BE IS_DISPLAYED
COMMENT $09C0 go to no snake
COMMENT_LINE $09C4 now we set the new coordinates
COMMENT $09C4 a different scale again... still very high :-(
FORCE_SYMBOL $09C4 SCALE_FACTOR_GAME
COMMENT $09C6 move to time 1 lo, this means scaling
FORCE_SYMBOL $09C6 VIA_t1_cnt_lo
COMMENT $09C8 do positioning, load pos here
FORCE_SYMBOL $09C8 snake_pos
COMMENT_LINE $09CB move to start
COMMENT $09CB Store Y in D/A register
FORCE_SYMBOL $09CB VIA_port_a
COMMENT $09CD Blank low, zero high?
FORCE_NO_SYMBOL $09CD
FORCE_SYMBOL $09CF VIA_cntl
COMMENT $09D2 Enable mux
FORCE_SYMBOL $09D2 VIA_port_b
COMMENT $09D4 Disable mux
FORCE_SYMBOL $09D4 VIA_port_b
COMMENT $09D6 Store X in D/A register
FORCE_SYMBOL $09D6 VIA_port_a
COMMENT $09D8 enable timer
FORCE_SYMBOL $09D8 VIA_t1_cnt_hi
COMMENT_LINE $09DA this is a "special"
COMMENT_LINE $09DA in move stuff, since it
COMMENT_LINE $09DA is only relevant if there realy is a snake
COMMENT_LINE $09DA and we do not even get to this code
COMMENT_LINE $09DA if there is no snake,
COMMENT_LINE $09DA for that reason no subroutine is called - but left here directly
COMMENT_LINE $09DA ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $09DA ;;;;;;;;; IN MOVE SNAKE START
COMMENT_LINE $09DA ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $09DA X to snake_anim_counter
FORCE_SYMBOL $09DA snake_anim_counter
COMMENT $09DD U to snake object
FORCE_SYMBOL $09DD snake_object
COMMENT $09E0 + 1
FORCE_NO_SYMBOL $09E0
COMMENT $09E2 do positioning, load pos here
FORCE_SYMBOL $09E2 snake_pos
COMMENT $09E5 add the speed, got from log information earlier
FORCE_SYMBOL $09E5 snake_speed
COMMENT $09E8 is on left side out of bounds?
FORCE_SYMBOL $09E8 BOUNDARY_LO
COMMENT $09EA no, than no coordinate fiddling
COMMENT $09EC is waiting
FORCE_SYMBOL $09EC snake_status
COMMENT $09EF initiate the round counter
FORCE_SYMBOL $09EF snake_round_counter_reset
COMMENT $09F2 store it
FORCE_SYMBOL $09F2 snake_round_counter
COMMENT $09F7 check if we are out of bounds on the right
FORCE_SYMBOL $09F7 BOUNDARY_HI
COMMENT $09FB and 're' store it
FORCE_SYMBOL $09FB snake_pos
COMMENT $09FE decrease the number of steps a snake does befor turing arround
FORCE_SYMBOL $09FE snake_gone
COMMENT $0A01 if not turning... go on
COMMENT $0A03 look at special in object definition for information...
FORCE_NO_SYMBOL $0A03
COMMENT $0A05 are we now left or right?
FORCE_SYMBOL $0A05 SPECIAL_RIGHT_SNAKE
COMMENT $0A07 if right... jump
COMMENT $0A09 load old sprite offsets
FORCE_NO_SYMBOL $0A09
COMMENT $0A0B negate them (A)
COMMENT $0A0C negate them (B)
COMMENT $0A0D add y position to old sprite offset y
FORCE_SYMBOL $0A0D snake_pos
COMMENT $0A10 add x position to old sprite offset x
COMMENT $0A13 load new object definition
FORCE_SYMBOL $0A13 snake1a_object
COMMENT $0A17 add new sprite offset y
FORCE_NO_SYMBOL $0A17
COMMENT $0A19 add new sprite offset x
FORCE_NO_SYMBOL $0A19
COMMENT $0A1B and store the corrected position
FORCE_SYMBOL $0A1B snake_pos
COMMENT $0A1E store new object definition
FORCE_SYMBOL $0A1E snake_object
COMMENT $0A22 load new animation counter start
FORCE_NO_SYMBOL $0A22
COMMENT $0A24 and set it in object list
FORCE_SYMBOL $0A24 snake_anim_counter
COMMENT $0A27 now go to opposite direction +1 equal log speed
FORCE_SYMBOL $0A27 snake_speed
COMMENT $0A2A plus another to be 1 step faster
FORCE_SYMBOL $0A2A snake_speed
COMMENT $0A2D get the limit of snake movement before turing again
FORCE_SYMBOL $0A2D SNAKE_GO_LIMIT
COMMENT $0A2F and store it
FORCE_SYMBOL $0A2F snake_gone
COMMENT $0A32 done with snake
COMMENT $0A34 load old sprite offsets
FORCE_NO_SYMBOL $0A34
COMMENT $0A36 negate them (A)
COMMENT $0A37 negate them (B)
COMMENT $0A38 add y position to old sprite offset y
FORCE_SYMBOL $0A38 snake_pos
COMMENT $0A3B add x position to old sprite offset x
COMMENT $0A3E load new object definition
FORCE_SYMBOL $0A3E snake3a_object
COMMENT $0A42 add new sprite offset y
FORCE_NO_SYMBOL $0A42
COMMENT $0A44 add new sprite offset x
FORCE_NO_SYMBOL $0A44
COMMENT $0A46 and store the corrected position
FORCE_SYMBOL $0A46 snake_pos
COMMENT $0A49 store new object definition
FORCE_SYMBOL $0A49 snake_object
COMMENT $0A4D load new animation counter start
FORCE_NO_SYMBOL $0A4D
COMMENT $0A4F and set it in object list
FORCE_SYMBOL $0A4F snake_anim_counter
COMMENT $0A52 now go to opposite direction -1 equal log speed
FORCE_SYMBOL $0A52 snake_speed
COMMENT $0A55 minus another to be 1 step faster
FORCE_SYMBOL $0A55 snake_speed
COMMENT $0A58 get the limit of snake movement before turing again
FORCE_SYMBOL $0A58 SNAKE_GO_LIMIT
COMMENT $0A5A and store it
FORCE_SYMBOL $0A5A snake_gone
COMMENT $0A5D done with snake, on turn, no animation check is needed
COMMENT $0A5F decrease animation counter
COMMENT $0A61 if zero, we must initialize new animation phase
COMMENT_LINE $0A63 snake animation change
COMMENT $0A63 load old sprite offsets
FORCE_NO_SYMBOL $0A63
COMMENT $0A65 negate them (A)
COMMENT $0A66 negate them (B)
COMMENT $0A67 add y position to old sprite offset y
COMMENT $0A69 add x position to old sprite offset x
COMMENT $0A6B load new object definition
FORCE_NO_SYMBOL $0A6B
COMMENT $0A6E add new sprite offset y
FORCE_NO_SYMBOL $0A6E
COMMENT $0A70 add new sprite offset x
FORCE_NO_SYMBOL $0A70
COMMENT $0A72 and store the corrected position
COMMENT $0A74 store new object definition to object list
COMMENT $0A77 load new animation counter start
FORCE_NO_SYMBOL $0A77
COMMENT $0A79 and set it in object list
FORCE_SYMBOL $0A7B intermissionActive
FORCE_NO_SYMBOL $0A80
COMMENT $0A82 wait for timer to finnish move to
FORCE_SYMBOL $0A82 VIA_int_flags
COMMENT_LINE $0A88 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0A88 ;;;;;;;;; IN MOVE SNAKE END
COMMENT_LINE $0A88 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $0A88 load object vector list to X,
FORCE_NO_SYMBOL $0A88
COMMENT $0A8A scale for sprite
COMMENT $0A8A move to time 1 lo, this means scaling
FORCE_SYMBOL $0A8A VIA_t1_cnt_lo
COMMENT_LINE $0A8C unloop_start_address10:
FORCE_SYMBOL $0A8C move_wait_draw_vlc_unloop
FORCE_NO_SYMBOL $0A8F
COMMENT $0A91 22 cycles from switch on ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0A91 VIA_cntl
COMMENT_LINE $0A93 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0A93 entry for 'LEVEL DONE' display
COMMENT_LINE $0A93 only the 'sprites' are displayed (and moved) below...
COMMENT_LINE $0A93 (new: collosion check
COMMENT_LINE $0A93 is inlined now as well, but wrapped with a "death"/intermission check)
COMMENT_LINE $0A93 jsr smallCalibration
COMMENT_LINE $0A93 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0A93 independent code section
COMMENT_LINE $0A93 setup independend code section jumper
COMMENT_LINE $0A93 DRAW ALL LEVEL SPRITES
COMMENT_LINE $0A93 now drawing all sprites (or object, whatever you call them)
COMMENT_LINE $0A93 routine, to draw all sprites,
COMMENT_LINE $0A93 move them, do an out of bounds checking,
COMMENT_LINE $0A93 intensity changing, and initializing
COMMENT_LINE $0A93 new animation sequences?
COMMENT_LINE $0A93 actually the animation initialization takes most of the code
COMMENT $0A93 load the address to X, start of list of
COMMENT_LINE $0A96 all objects (sprites) for this level
COMMENT_LINE $0A96 and their position
COMMENT_LINE $0A96 -2 and offsets are chose, that we adjust X only once in the GENERAL MACRO
COMMENT_LINE $0A96 moved to "in move" LDY      object_list                 ; load new list object
COMMENT_LINE $0A96 X pointing to Y coordinate now
COMMENT_LINE $0A96 Y pointing to object structure AND
COMMENT_LINE $0A96 Y pointing to x-speed in object structure
COMMENT $0A96 [5] load y, x coordinate from object_list to
COMMENT_LINE $0A98 A,B=D,
COMMENT_LINE $0A98 intensities of all sprites are the same, so no
COMMENT_LINE $0A98 setting is really needed!
COMMENT_LINE $0A98 since game positioning is done with a 'huge' scale factor ($91) there
COMMENT_LINE $0A98 is a whole lot of empty space in here, and that at EACH sprite.
COMMENT_LINE $0A98 anyway, the thing done in (befor!) that loop is the
COMMENT_LINE $0A98 checking whether an animation occurs or not.
COMMENT_LINE $0A98 and now if the sprite is out of bounds
COMMENT_LINE $0A98 and girl and snake checking!!!
COMMENT_LINE $0A98 another 1000 cycles saved.
COMMENT_LINE $0A98 ;;;;;;;;;;;; NOW MOVE_TO_D
COMMENT_LINE $0A98 note: there are 2 or 3 cycles more that could be saved here
COMMENT_LINE $0A98 by optimizing, but the vectrex zeroing is NOT
COMMENT_LINE $0A98 fast enough, vectors are not positioned correctly than!!!
COMMENT $0A98 [4]Store Y in D/A register
FORCE_SYMBOL $0A98 VIA_port_a
FORCE_NO_SYMBOL $0A9B
COMMENT $0A9D /BLANK low and /ZERO low -> move cursor to zero
FORCE_SYMBOL $0A9D VIA_cntl
FORCE_SYMBOL $0A9F SCALE_FACTOR_GAME
COMMENT $0AA1 move to time 1 lo, this means scaling
FORCE_SYMBOL $0AA1 VIA_t1_cnt_lo
COMMENT_LINE $0AA3 [8] a different scale again... still very high :-(
COMMENT_LINE $0AA3 wait for zeroing to take effect
COMMENT_LINE $0AA3 if we do not wait here, the zeroing is not 100% completed, and some sprites are
COMMENT_LINE $0AA3 a little bit off in their positioning
COMMENT $0AA3 wait with buffer for bad vectrex to finish zeroing, this nops takes about 600 cycles!
COMMENT $0AAE Enable mux, this sets the Y integrator
FORCE_SYMBOL $0AAE VIA_port_b
COMMENT $0AB0 Disable mux
FORCE_SYMBOL $0AB0 VIA_port_b
COMMENT $0AB2 Store X in D/A register this goes to the X integrator
FORCE_SYMBOL $0AB2 VIA_port_a
COMMENT $0AB4 enable timer, by accessing it!
FORCE_SYMBOL $0AB4 VIA_t1_cnt_hi
COMMENT $0AB6 Blank low, zero high?
FORCE_NO_SYMBOL $0AB6
COMMENT $0AB8 Now zero is off... we can integrate!
FORCE_SYMBOL $0AB8 VIA_cntl
COMMENT_LINE $0ABA ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0ABA ;;;;;;;;; MOVE 7 START
COMMENT_LINE $0ABA ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0ABA in move action here!
COMMENT_LINE $0ABA following code must be executed here for all
COMMENT_LINE $0ABA in moves in the vectorlist,
COMMENT_LINE $0ABA it is the preparation of the next object,
COMMENT_LINE $0ABA so we leave it here...
COMMENT_LINE $0ABA I go out of may way here to have y only localy used
COMMENT_LINE $0ABA that way I can use y as a indirect jump variable for the unlooping
COMMENT_LINE $0ABA jump ,y is 3 cycles
COMMENT_LINE $0ABA jump [location] is 8 cycles!
FORCE_NO_SYMBOL $0ABA
COMMENT $0ABD [3] Increment X by 5
FORCE_NO_SYMBOL $0ABD
COMMENT $0ABF add to B (x coordinate that is)
FORCE_NO_SYMBOL $0ABF
COMMENT_LINE $0AC1 the speed value (in the list object,
COMMENT_LINE $0AC1 e.g. car_1), increment Y by 1
COMMENT_LINE $0AC1 ;;;; NOT USED NOW ;;;;;
COMMENT_LINE $0AC1 idea is to add speed only X cycles
COMMENT_LINE $0AC1 that way really slow speeds and differences can be done
COMMENT_LINE $0AC1 the main crux is girl and snake which
COMMENT_LINE $0AC1 depend on parents speeds
COMMENT_LINE $0AC1 this can be accomplished using two new variables - but
COMMENT_LINE $0AC1 i don't think it is NEEDED - really
COMMENT_LINE $0AC1 the below few lines do NOT make a speed difference since its completley in MOVE TO
COMMENT_LINE $0000 ;;;; NOT USED NOW END ;;;;;
COMMENT $0AC1 is on left side out of bounds?
FORCE_SYMBOL $0AC1 BOUNDARY_LO
COMMENT $0AC3 no, than no coordinate fiddling
COMMENT $0AC7 don't check for right out of bounds now
COMMENT $0AC9 check if we are out of bounds on the right
FORCE_SYMBOL $0AC9 BOUNDARY_HI
COMMENT_LINE $0ACB BLE not_higher_out_of_bounds ; no? than go on
COMMENT $0ACD store the new x position
FORCE_NO_SYMBOL $0ACD
COMMENT_LINE $0ACF (X points to animation)
COMMENT_LINE $0ACF ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0ACF ;;;;;;;;; MOVE X START
COMMENT_LINE $0ACF ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0ACF about 20 - 30 cycles have already passed
COMMENT_LINE $0ACF but neither girl nor snake was processed
COMMENT_LINE $0ACF so we may do a short special in move here
COMMENT_LINE $0ACF dp is c8 and does not need to be restored internally!
COMMENT $0ACF [12] stream processing done in jsrs
FORCE_SYMBOL $0ACF inMovePointer
COMMENT_LINE $0AD3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0AD3 ;;;;;;;;; MOVE X END
COMMENT_LINE $0AD3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0AD7 on each out of bounds a girl check is made...
COMMENT $0AD7 save coordinates
FORCE_NO_SYMBOL $0AD9
COMMENT $0ADD what's the girls status?
FORCE_SYMBOL $0ADD girl_status
COMMENT $0ADF no girl at all? than jump
FORCE_SYMBOL $0AE1 girl_log_object
COMMENT $0AE3 if not the same, go to no_girl_
COMMENT $0AE5 what's the girls status?
FORCE_SYMBOL $0AE5 girl_status
COMMENT $0AE7 we are waiting to be displayed
FORCE_SYMBOL $0AE7 IS_WAITING
COMMENT $0AE9 than go to might be displayed routine
COMMENT $0AEB if frogger carries girl,
FORCE_SYMBOL $0AEB IS_CARRIED
COMMENT $0AED do nothing
COMMENT_LINE $0AEF now IS_DISPLAYED, resetting counter and reset status
COMMENT $0AEF IS WAITING
FORCE_SYMBOL $0AEF girl_status
COMMENT $0AF1 initiate the round counter
FORCE_SYMBOL $0AF1 girl_round_counter_reset
COMMENT $0AF3 store it
FORCE_SYMBOL $0AF3 girl_round_counter
COMMENT_LINE $0AF5 bra no_girl ; do not redisplay at once!
COMMENT $0AF5 count down the round counter
FORCE_SYMBOL $0AF5 girl_round_counter
COMMENT $0AF7 if not zero, than no girl will be displayed
COMMENT $0AF9 IS DISPLAYED
FORCE_SYMBOL $0AF9 girl_status
COMMENT $0AFB load girl object address
FORCE_SYMBOL $0AFB girl1a_object
COMMENT $0AFE store it as first object
FORCE_SYMBOL $0AFE girl_object
COMMENT_LINE $0B00 now do positioning...
COMMENT $0B00 the position of the log is on the stack
FORCE_NO_SYMBOL $0B00
COMMENT $0B02 more in the middle of the log
FORCE_NO_SYMBOL $0B02
COMMENT $0B04 get and store the X position
COMMENT $0B06 y position hardcoded, since sprites have different starting points
FORCE_NO_SYMBOL $0B06
COMMENT $0B08 store y position
FORCE_SYMBOL $0B08 girl_pos
COMMENT $0B0A if we did girl, than no snake here!
COMMENT $0B0C what's the snake's status?
FORCE_SYMBOL $0B0C snake_status
COMMENT $0B0E no snake at all? than jump
FORCE_SYMBOL $0B10 snake_log_object
COMMENT $0B12 if not the same, go to no_snake_
COMMENT $0B14 what's the snake's status?
FORCE_SYMBOL $0B14 snake_status
COMMENT $0B16 we are waiting to be displayed
FORCE_SYMBOL $0B16 IS_WAITING
COMMENT $0B18 than go to might be displayed routine
COMMENT $0B1A IS WAITING
FORCE_SYMBOL $0B1A snake_status
COMMENT $0B1C initiate the round counter
FORCE_SYMBOL $0B1C snake_round_counter_reset
COMMENT $0B1E store it
FORCE_SYMBOL $0B1E snake_round_counter
COMMENT $0B20 count down the round counter
FORCE_SYMBOL $0B20 snake_round_counter
COMMENT $0B22 if not zero, than no snake will be displayed
COMMENT $0B24 IS DISPLAYED
FORCE_SYMBOL $0B24 snake_status
COMMENT $0B26 load snake object address
FORCE_SYMBOL $0B26 snake1a_object
COMMENT $0B29 store it as first object
FORCE_SYMBOL $0B29 snake_object
COMMENT_LINE $0B2B now do positioning...
COMMENT $0B2B the position of the log is on the stack
FORCE_NO_SYMBOL $0B2B
COMMENT $0B2D get and store the X position
COMMENT $0B2F y position hardcoded, since sprites have different starting points
FORCE_NO_SYMBOL $0B2F
COMMENT $0B31 store y position
FORCE_SYMBOL $0B31 snake_pos
COMMENT $0B33 get the speed of snake start
FORCE_SYMBOL $0B33 snake_speed_start
COMMENT $0B35 store it
FORCE_SYMBOL $0B35 snake_speed
COMMENT $0B37 get the number of steps a snake can take befor turning arround (hardcoded :-()
COMMENT $0B39 and store it
FORCE_SYMBOL $0B39 snake_gone
FORCE_NO_SYMBOL $0B3B
COMMENT $0B3F restore coordinates
COMMENT $0B41 store the new x position, and increment U
FORCE_NO_SYMBOL $0B41
COMMENT_LINE $0B43 (U points to animation)
COMMENT_LINE $0B43 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0B43 now we do that animation checking
COMMENT $0B43 load object vector list to u
FORCE_NO_SYMBOL $0B43
COMMENT_LINE $0B45 ;;;;;;;;;;; costs e.g. in level 8 18 cycles alltogether, we are still in "IN MOVE" range
COMMENT_LINE $0B45 ;;;; DRAW no snakes in intermission
FORCE_SYMBOL $0B45 intermissionActive
FORCE_NO_SYMBOL $0B4A
COMMENT $0B4C get special flag
FORCE_NO_SYMBOL $0B4C
FORCE_SYMBOL $0B52 skipCount_now
COMMENT $0B55 no_sprite_draw
COMMENT_LINE $0B57 ;;;; DRAW no snakes in intermission
COMMENT_LINE $0B57 ;;;;;;;;;;;
COMMENT $0B57 decrease animation counter
FORCE_NO_SYMBOL $0B57
COMMENT $0B59 if zero, we must initialize new animation phase
COMMENT_LINE $0B5B 4 cycles less than above -> if I weren't lazy I would do that switch in other places also...
FORCE_NO_SYMBOL $0B5D
FORCE_NO_SYMBOL $0B5F
COMMENT $0B61 load new object definition
FORCE_NO_SYMBOL $0B61
COMMENT $0B64 add new sprite offset y
FORCE_NO_SYMBOL $0B64
COMMENT $0B66 add new sprite offset x
FORCE_NO_SYMBOL $0B66
COMMENT $0B68 and store the corrected position
COMMENT $0B6A store new object definition to object list
COMMENT $0B6D load new animation counter start
FORCE_NO_SYMBOL $0B6D
COMMENT $0B6F and set it in object list
FORCE_NO_SYMBOL $0B6F
COMMENT $0B71 just a test if next vectorlist is 0
FORCE_NO_SYMBOL $0B71
COMMENT $0B73 and do the next object (or jump away)
FORCE_SYMBOL $0B77 skipCount_now
COMMENT $0B7A no_sprite_draw
COMMENT_LINE $0B7C stop moving forcably!
FORCE_NO_SYMBOL $0B7C
COMMENT $0B7E move to time 1 lo, this means scaling
FORCE_SYMBOL $0B7E VIA_t1_cnt_lo
COMMENT $0B80 move to time 1 lo, this means scaling
FORCE_SYMBOL $0B80 VIA_t1_cnt_hi
COMMENT $0B82 and do the next
FORCE_SYMBOL $0B82 next_object
COMMENT $0B8B A= SCALE, B = Timer IRQ check
COMMENT_LINE $0B8E the following is the position checking loop
COMMENT_LINE $0B8E waiting till an interrupt occurs
COMMENT $0B8E scale for sprite
COMMENT $0B8E move to time 1 lo, this means scaling
FORCE_SYMBOL $0B8E VIA_t1_cnt_lo
COMMENT_LINE $0B90 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0B90 ;;;;;;;;; MOVE 7 END
COMMENT_LINE $0B90 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0B90 in move action done
COMMENT $0B90 test the bit
FORCE_SYMBOL $0B90 VIA_int_flags
COMMENT $0B92 if not zero, than loop
COMMENT_LINE $0B94 (x) length in bytes
COMMENT_LINE $0B94 [x] duration in cycles
COMMENT_LINE $0B94 do one "manual" starter line in advance
COMMENT $0B94 get current coordinates
COMMENT $0B96 (2) [4] Send Y to A/D
FORCE_SYMBOL $0B96 VIA_port_a
COMMENT $0B98 (2) [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0B98 VIA_port_b
COMMENT $0B9A [6] Disable mux
FORCE_SYMBOL $0B9A VIA_port_b
COMMENT $0B9C [6] Send X to A/D
FORCE_SYMBOL $0B9C VIA_port_a
FORCE_NO_SYMBOL $0B9E
COMMENT $0BA0 [4] enable timer 1
FORCE_SYMBOL $0BA0 VIA_t1_cnt_hi
COMMENT_LINE $0BA2 light on
COMMENT $0BA2 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0BA2 VIA_cntl
COMMENT_LINE $0BA4 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0BA4 [8] load Y coordinate to A, X coordinate to B
COMMENT $0BA6 [4] Send Y to A/D
FORCE_SYMBOL $0BA6 VIA_port_a
COMMENT $0BA8 [6]
FORCE_SYMBOL $0BA8 VIA_port_b
COMMENT $0BAA [2]
FORCE_NO_SYMBOL $0BAA
COMMENT_LINE $0BAC light off
COMMENT $0BAC [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0BAC VIA_cntl
COMMENT $0BAE [6] Disable mux
FORCE_SYMBOL $0BAE VIA_port_b
FORCE_NO_SYMBOL $0BB0
COMMENT_LINE $0BB2 definition must come after the above, otherwise calculation would be false
COMMENT_LINE $0BB2 JUMP_INTO_26\?:
COMMENT_LINE $0BB2 ONE_LINE_DRAW
COMMENT_LINE $0BB2 JUMP_INTO_25\?:
COMMENT_LINE $0BB2 ONE_LINE_DRAW
COMMENT $0BB2 [6] Send X to A/D
FORCE_SYMBOL $0BB2 VIA_port_a
FORCE_NO_SYMBOL $0BB4
COMMENT $0BB6 [4] enable timer 1
FORCE_SYMBOL $0BB6 VIA_t1_cnt_hi
COMMENT_LINE $0BB8 light on
COMMENT $0BB8 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0BB8 VIA_cntl
COMMENT_LINE $0BBA pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0BBA [8] load Y coordinate to A, X coordinate to B
COMMENT $0BBC [4] Send Y to A/D
FORCE_SYMBOL $0BBC VIA_port_a
COMMENT $0BBE [6]
FORCE_SYMBOL $0BBE VIA_port_b
COMMENT $0BC0 [2]
FORCE_NO_SYMBOL $0BC0
COMMENT_LINE $0BC2 light off
COMMENT $0BC2 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0BC2 VIA_cntl
COMMENT $0BC4 [6] Disable mux
FORCE_SYMBOL $0BC4 VIA_port_b
COMMENT $0BC6 [6] Send X to A/D
FORCE_SYMBOL $0BC6 VIA_port_a
FORCE_NO_SYMBOL $0BC8
COMMENT $0BCA [4] enable timer 1
FORCE_SYMBOL $0BCA VIA_t1_cnt_hi
COMMENT_LINE $0BCC light on
COMMENT $0BCC [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0BCC VIA_cntl
COMMENT_LINE $0BCE pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0BCE [8] load Y coordinate to A, X coordinate to B
COMMENT $0BD0 [4] Send Y to A/D
FORCE_SYMBOL $0BD0 VIA_port_a
COMMENT $0BD2 [6]
FORCE_SYMBOL $0BD2 VIA_port_b
COMMENT $0BD4 [2]
FORCE_NO_SYMBOL $0BD4
COMMENT_LINE $0BD6 light off
COMMENT $0BD6 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0BD6 VIA_cntl
COMMENT $0BD8 [6] Disable mux
FORCE_SYMBOL $0BD8 VIA_port_b
COMMENT $0BDA [6] Send X to A/D
FORCE_SYMBOL $0BDA VIA_port_a
FORCE_NO_SYMBOL $0BDC
COMMENT $0BDE [4] enable timer 1
FORCE_SYMBOL $0BDE VIA_t1_cnt_hi
COMMENT_LINE $0BE0 light on
COMMENT $0BE0 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0BE0 VIA_cntl
COMMENT_LINE $0BE2 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0BE2 [8] load Y coordinate to A, X coordinate to B
COMMENT $0BE4 [4] Send Y to A/D
FORCE_SYMBOL $0BE4 VIA_port_a
COMMENT $0BE6 [6]
FORCE_SYMBOL $0BE6 VIA_port_b
COMMENT $0BE8 [2]
FORCE_NO_SYMBOL $0BE8
COMMENT_LINE $0BEA light off
COMMENT $0BEA [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0BEA VIA_cntl
COMMENT $0BEC [6] Disable mux
FORCE_SYMBOL $0BEC VIA_port_b
COMMENT $0BEE [6] Send X to A/D
FORCE_SYMBOL $0BEE VIA_port_a
FORCE_NO_SYMBOL $0BF0
COMMENT $0BF2 [4] enable timer 1
FORCE_SYMBOL $0BF2 VIA_t1_cnt_hi
COMMENT_LINE $0BF4 light on
COMMENT $0BF4 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0BF4 VIA_cntl
COMMENT_LINE $0BF6 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0BF6 [8] load Y coordinate to A, X coordinate to B
COMMENT $0BF8 [4] Send Y to A/D
FORCE_SYMBOL $0BF8 VIA_port_a
COMMENT $0BFA [6]
FORCE_SYMBOL $0BFA VIA_port_b
COMMENT $0BFC [2]
FORCE_NO_SYMBOL $0BFC
COMMENT_LINE $0BFE light off
COMMENT $0BFE [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0BFE VIA_cntl
COMMENT $0C00 [6] Disable mux
FORCE_SYMBOL $0C00 VIA_port_b
COMMENT $0C02 [6] Send X to A/D
FORCE_SYMBOL $0C02 VIA_port_a
FORCE_NO_SYMBOL $0C04
COMMENT $0C06 [4] enable timer 1
FORCE_SYMBOL $0C06 VIA_t1_cnt_hi
COMMENT_LINE $0C08 light on
COMMENT $0C08 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0C08 VIA_cntl
COMMENT_LINE $0C0A pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0C0A [8] load Y coordinate to A, X coordinate to B
COMMENT $0C0C [4] Send Y to A/D
FORCE_SYMBOL $0C0C VIA_port_a
COMMENT $0C0E [6]
FORCE_SYMBOL $0C0E VIA_port_b
COMMENT $0C10 [2]
FORCE_NO_SYMBOL $0C10
COMMENT_LINE $0C12 light off
COMMENT $0C12 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0C12 VIA_cntl
COMMENT $0C14 [6] Disable mux
FORCE_SYMBOL $0C14 VIA_port_b
COMMENT $0C16 [6] Send X to A/D
FORCE_SYMBOL $0C16 VIA_port_a
FORCE_NO_SYMBOL $0C18
COMMENT $0C1A [4] enable timer 1
FORCE_SYMBOL $0C1A VIA_t1_cnt_hi
COMMENT_LINE $0C1C light on
COMMENT $0C1C [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0C1C VIA_cntl
COMMENT_LINE $0C1E pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0C1E [8] load Y coordinate to A, X coordinate to B
COMMENT $0C20 [4] Send Y to A/D
FORCE_SYMBOL $0C20 VIA_port_a
COMMENT $0C22 [6]
FORCE_SYMBOL $0C22 VIA_port_b
COMMENT $0C24 [2]
FORCE_NO_SYMBOL $0C24
COMMENT_LINE $0C26 light off
COMMENT $0C26 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0C26 VIA_cntl
COMMENT $0C28 [6] Disable mux
FORCE_SYMBOL $0C28 VIA_port_b
COMMENT $0C2A [6] Send X to A/D
FORCE_SYMBOL $0C2A VIA_port_a
FORCE_NO_SYMBOL $0C2C
COMMENT $0C2E [4] enable timer 1
FORCE_SYMBOL $0C2E VIA_t1_cnt_hi
COMMENT_LINE $0C30 light on
COMMENT $0C30 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0C30 VIA_cntl
COMMENT_LINE $0C32 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0C32 [8] load Y coordinate to A, X coordinate to B
COMMENT $0C34 [4] Send Y to A/D
FORCE_SYMBOL $0C34 VIA_port_a
COMMENT $0C36 [6]
FORCE_SYMBOL $0C36 VIA_port_b
COMMENT $0C38 [2]
FORCE_NO_SYMBOL $0C38
COMMENT_LINE $0C3A light off
COMMENT $0C3A [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0C3A VIA_cntl
COMMENT $0C3C [6] Disable mux
FORCE_SYMBOL $0C3C VIA_port_b
COMMENT $0C3E [6] Send X to A/D
FORCE_SYMBOL $0C3E VIA_port_a
FORCE_NO_SYMBOL $0C40
COMMENT $0C42 [4] enable timer 1
FORCE_SYMBOL $0C42 VIA_t1_cnt_hi
COMMENT_LINE $0C44 light on
COMMENT $0C44 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0C44 VIA_cntl
COMMENT_LINE $0C46 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0C46 [8] load Y coordinate to A, X coordinate to B
COMMENT $0C48 [4] Send Y to A/D
FORCE_SYMBOL $0C48 VIA_port_a
COMMENT $0C4A [6]
FORCE_SYMBOL $0C4A VIA_port_b
COMMENT $0C4C [2]
FORCE_NO_SYMBOL $0C4C
COMMENT_LINE $0C4E light off
COMMENT $0C4E [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0C4E VIA_cntl
COMMENT $0C50 [6] Disable mux
FORCE_SYMBOL $0C50 VIA_port_b
COMMENT $0C52 [6] Send X to A/D
FORCE_SYMBOL $0C52 VIA_port_a
FORCE_NO_SYMBOL $0C54
COMMENT $0C56 [4] enable timer 1
FORCE_SYMBOL $0C56 VIA_t1_cnt_hi
COMMENT_LINE $0C58 light on
COMMENT $0C58 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0C58 VIA_cntl
COMMENT_LINE $0C5A pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0C5A [8] load Y coordinate to A, X coordinate to B
COMMENT $0C5C [4] Send Y to A/D
FORCE_SYMBOL $0C5C VIA_port_a
COMMENT $0C5E [6]
FORCE_SYMBOL $0C5E VIA_port_b
COMMENT $0C60 [2]
FORCE_NO_SYMBOL $0C60
COMMENT_LINE $0C62 light off
COMMENT $0C62 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0C62 VIA_cntl
COMMENT $0C64 [6] Disable mux
FORCE_SYMBOL $0C64 VIA_port_b
COMMENT $0C66 [6] Send X to A/D
FORCE_SYMBOL $0C66 VIA_port_a
FORCE_NO_SYMBOL $0C68
COMMENT $0C6A [4] enable timer 1
FORCE_SYMBOL $0C6A VIA_t1_cnt_hi
COMMENT_LINE $0C6C light on
COMMENT $0C6C [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0C6C VIA_cntl
COMMENT_LINE $0C6E pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0C6E [8] load Y coordinate to A, X coordinate to B
COMMENT $0C70 [4] Send Y to A/D
FORCE_SYMBOL $0C70 VIA_port_a
COMMENT $0C72 [6]
FORCE_SYMBOL $0C72 VIA_port_b
COMMENT $0C74 [2]
FORCE_NO_SYMBOL $0C74
COMMENT_LINE $0C76 light off
COMMENT $0C76 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0C76 VIA_cntl
COMMENT $0C78 [6] Disable mux
FORCE_SYMBOL $0C78 VIA_port_b
COMMENT $0C7A [6] Send X to A/D
FORCE_SYMBOL $0C7A VIA_port_a
FORCE_NO_SYMBOL $0C7C
COMMENT $0C7E [4] enable timer 1
FORCE_SYMBOL $0C7E VIA_t1_cnt_hi
COMMENT_LINE $0C80 light on
COMMENT $0C80 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0C80 VIA_cntl
COMMENT_LINE $0C82 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0C82 [8] load Y coordinate to A, X coordinate to B
COMMENT $0C84 [4] Send Y to A/D
FORCE_SYMBOL $0C84 VIA_port_a
COMMENT $0C86 [6]
FORCE_SYMBOL $0C86 VIA_port_b
COMMENT $0C88 [2]
FORCE_NO_SYMBOL $0C88
COMMENT_LINE $0C8A light off
COMMENT $0C8A [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0C8A VIA_cntl
COMMENT $0C8C [6] Disable mux
FORCE_SYMBOL $0C8C VIA_port_b
COMMENT $0C8E [6] Send X to A/D
FORCE_SYMBOL $0C8E VIA_port_a
FORCE_NO_SYMBOL $0C90
COMMENT $0C92 [4] enable timer 1
FORCE_SYMBOL $0C92 VIA_t1_cnt_hi
COMMENT_LINE $0C94 light on
COMMENT $0C94 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0C94 VIA_cntl
COMMENT_LINE $0C96 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0C96 [8] load Y coordinate to A, X coordinate to B
COMMENT $0C98 [4] Send Y to A/D
FORCE_SYMBOL $0C98 VIA_port_a
COMMENT $0C9A [6]
FORCE_SYMBOL $0C9A VIA_port_b
COMMENT $0C9C [2]
FORCE_NO_SYMBOL $0C9C
COMMENT_LINE $0C9E light off
COMMENT $0C9E [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0C9E VIA_cntl
COMMENT $0CA0 [6] Disable mux
FORCE_SYMBOL $0CA0 VIA_port_b
COMMENT $0CA2 [6] Send X to A/D
FORCE_SYMBOL $0CA2 VIA_port_a
FORCE_NO_SYMBOL $0CA4
COMMENT $0CA6 [4] enable timer 1
FORCE_SYMBOL $0CA6 VIA_t1_cnt_hi
COMMENT_LINE $0CA8 light on
COMMENT $0CA8 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0CA8 VIA_cntl
COMMENT_LINE $0CAA pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0CAA [8] load Y coordinate to A, X coordinate to B
COMMENT $0CAC [4] Send Y to A/D
FORCE_SYMBOL $0CAC VIA_port_a
COMMENT $0CAE [6]
FORCE_SYMBOL $0CAE VIA_port_b
COMMENT $0CB0 [2]
FORCE_NO_SYMBOL $0CB0
COMMENT_LINE $0CB2 light off
COMMENT $0CB2 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0CB2 VIA_cntl
COMMENT $0CB4 [6] Disable mux
FORCE_SYMBOL $0CB4 VIA_port_b
COMMENT $0CB6 [6] Send X to A/D
FORCE_SYMBOL $0CB6 VIA_port_a
FORCE_NO_SYMBOL $0CB8
COMMENT $0CBA [4] enable timer 1
FORCE_SYMBOL $0CBA VIA_t1_cnt_hi
COMMENT_LINE $0CBC light on
COMMENT $0CBC [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0CBC VIA_cntl
COMMENT_LINE $0CBE pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0CBE [8] load Y coordinate to A, X coordinate to B
COMMENT $0CC0 [4] Send Y to A/D
FORCE_SYMBOL $0CC0 VIA_port_a
COMMENT $0CC2 [6]
FORCE_SYMBOL $0CC2 VIA_port_b
COMMENT $0CC4 [2]
FORCE_NO_SYMBOL $0CC4
COMMENT_LINE $0CC6 light off
COMMENT $0CC6 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0CC6 VIA_cntl
COMMENT $0CC8 [6] Disable mux
FORCE_SYMBOL $0CC8 VIA_port_b
COMMENT $0CCA [6] Send X to A/D
FORCE_SYMBOL $0CCA VIA_port_a
FORCE_NO_SYMBOL $0CCC
COMMENT $0CCE [4] enable timer 1
FORCE_SYMBOL $0CCE VIA_t1_cnt_hi
COMMENT_LINE $0CD0 light on
COMMENT $0CD0 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0CD0 VIA_cntl
COMMENT_LINE $0CD2 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0CD2 [8] load Y coordinate to A, X coordinate to B
COMMENT $0CD4 [4] Send Y to A/D
FORCE_SYMBOL $0CD4 VIA_port_a
COMMENT $0CD6 [6]
FORCE_SYMBOL $0CD6 VIA_port_b
COMMENT $0CD8 [2]
FORCE_NO_SYMBOL $0CD8
COMMENT_LINE $0CDA light off
COMMENT $0CDA [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0CDA VIA_cntl
COMMENT $0CDC [6] Disable mux
FORCE_SYMBOL $0CDC VIA_port_b
COMMENT $0CDE [6] Send X to A/D
FORCE_SYMBOL $0CDE VIA_port_a
FORCE_NO_SYMBOL $0CE0
COMMENT $0CE2 [4] enable timer 1
FORCE_SYMBOL $0CE2 VIA_t1_cnt_hi
COMMENT_LINE $0CE4 light on
COMMENT $0CE4 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0CE4 VIA_cntl
COMMENT_LINE $0CE6 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0CE6 [8] load Y coordinate to A, X coordinate to B
COMMENT $0CE8 [4] Send Y to A/D
FORCE_SYMBOL $0CE8 VIA_port_a
COMMENT $0CEA [6]
FORCE_SYMBOL $0CEA VIA_port_b
COMMENT $0CEC [2]
FORCE_NO_SYMBOL $0CEC
COMMENT_LINE $0CEE light off
COMMENT $0CEE [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0CEE VIA_cntl
COMMENT $0CF0 [6] Disable mux
FORCE_SYMBOL $0CF0 VIA_port_b
COMMENT $0CF2 [6] Send X to A/D
FORCE_SYMBOL $0CF2 VIA_port_a
FORCE_NO_SYMBOL $0CF4
COMMENT $0CF6 [4] enable timer 1
FORCE_SYMBOL $0CF6 VIA_t1_cnt_hi
COMMENT_LINE $0CF8 light on
COMMENT $0CF8 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0CF8 VIA_cntl
COMMENT_LINE $0CFA pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0CFA [8] load Y coordinate to A, X coordinate to B
COMMENT $0CFC [4] Send Y to A/D
FORCE_SYMBOL $0CFC VIA_port_a
COMMENT $0CFE [6]
FORCE_SYMBOL $0CFE VIA_port_b
COMMENT $0D00 [2]
FORCE_NO_SYMBOL $0D00
COMMENT_LINE $0D02 light off
COMMENT $0D02 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0D02 VIA_cntl
COMMENT $0D04 [6] Disable mux
FORCE_SYMBOL $0D04 VIA_port_b
COMMENT $0D06 [6] Send X to A/D
FORCE_SYMBOL $0D06 VIA_port_a
FORCE_NO_SYMBOL $0D08
COMMENT $0D0A [4] enable timer 1
FORCE_SYMBOL $0D0A VIA_t1_cnt_hi
COMMENT_LINE $0D0C light on
COMMENT $0D0C [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0D0C VIA_cntl
COMMENT_LINE $0D0E pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0D0E [8] load Y coordinate to A, X coordinate to B
COMMENT $0D10 [4] Send Y to A/D
FORCE_SYMBOL $0D10 VIA_port_a
COMMENT $0D12 [6]
FORCE_SYMBOL $0D12 VIA_port_b
COMMENT $0D14 [2]
FORCE_NO_SYMBOL $0D14
COMMENT_LINE $0D16 light off
COMMENT $0D16 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0D16 VIA_cntl
COMMENT $0D18 [6] Disable mux
FORCE_SYMBOL $0D18 VIA_port_b
COMMENT $0D1A [6] Send X to A/D
FORCE_SYMBOL $0D1A VIA_port_a
FORCE_NO_SYMBOL $0D1C
COMMENT $0D1E [4] enable timer 1
FORCE_SYMBOL $0D1E VIA_t1_cnt_hi
COMMENT_LINE $0D20 light on
COMMENT $0D20 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0D20 VIA_cntl
COMMENT_LINE $0D22 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0D22 [8] load Y coordinate to A, X coordinate to B
COMMENT $0D24 [4] Send Y to A/D
FORCE_SYMBOL $0D24 VIA_port_a
COMMENT $0D26 [6]
FORCE_SYMBOL $0D26 VIA_port_b
COMMENT $0D28 [2]
FORCE_NO_SYMBOL $0D28
COMMENT_LINE $0D2A light off
COMMENT $0D2A [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0D2A VIA_cntl
COMMENT $0D2C [6] Disable mux
FORCE_SYMBOL $0D2C VIA_port_b
COMMENT $0D2E [6] Send X to A/D
FORCE_SYMBOL $0D2E VIA_port_a
FORCE_NO_SYMBOL $0D30
COMMENT $0D32 [4] enable timer 1
FORCE_SYMBOL $0D32 VIA_t1_cnt_hi
COMMENT_LINE $0D34 light on
COMMENT $0D34 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0D34 VIA_cntl
COMMENT_LINE $0D36 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0D36 [8] load Y coordinate to A, X coordinate to B
COMMENT $0D38 [4] Send Y to A/D
FORCE_SYMBOL $0D38 VIA_port_a
COMMENT $0D3A [6]
FORCE_SYMBOL $0D3A VIA_port_b
COMMENT $0D3C [2]
FORCE_NO_SYMBOL $0D3C
COMMENT_LINE $0D3E light off
COMMENT $0D3E [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0D3E VIA_cntl
COMMENT $0D40 [6] Disable mux
FORCE_SYMBOL $0D40 VIA_port_b
COMMENT $0D42 [6] Send X to A/D
FORCE_SYMBOL $0D42 VIA_port_a
FORCE_NO_SYMBOL $0D44
COMMENT $0D46 [4] enable timer 1
FORCE_SYMBOL $0D46 VIA_t1_cnt_hi
COMMENT_LINE $0D48 light on
COMMENT $0D48 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0D48 VIA_cntl
COMMENT_LINE $0D4A pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0D4A [8] load Y coordinate to A, X coordinate to B
COMMENT $0D4C [4] Send Y to A/D
FORCE_SYMBOL $0D4C VIA_port_a
COMMENT $0D4E [6]
FORCE_SYMBOL $0D4E VIA_port_b
COMMENT $0D50 [2]
FORCE_NO_SYMBOL $0D50
COMMENT_LINE $0D52 light off
COMMENT $0D52 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0D52 VIA_cntl
COMMENT $0D54 [6] Disable mux
FORCE_SYMBOL $0D54 VIA_port_b
COMMENT $0D56 [6] Send X to A/D
FORCE_SYMBOL $0D56 VIA_port_a
FORCE_NO_SYMBOL $0D58
COMMENT $0D5A [4] enable timer 1
FORCE_SYMBOL $0D5A VIA_t1_cnt_hi
COMMENT_LINE $0D5C light on
COMMENT $0D5C [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0D5C VIA_cntl
COMMENT_LINE $0D5E pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0D5E [8] load Y coordinate to A, X coordinate to B
COMMENT $0D60 [4] Send Y to A/D
FORCE_SYMBOL $0D60 VIA_port_a
COMMENT $0D62 [6]
FORCE_SYMBOL $0D62 VIA_port_b
COMMENT $0D64 [2]
FORCE_NO_SYMBOL $0D64
COMMENT_LINE $0D66 light off
COMMENT $0D66 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0D66 VIA_cntl
COMMENT $0D68 [6] Disable mux
FORCE_SYMBOL $0D68 VIA_port_b
COMMENT $0D6A [6] Send X to A/D
FORCE_SYMBOL $0D6A VIA_port_a
FORCE_NO_SYMBOL $0D6C
COMMENT $0D6E [4] enable timer 1
FORCE_SYMBOL $0D6E VIA_t1_cnt_hi
COMMENT_LINE $0D70 light on
COMMENT $0D70 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0D70 VIA_cntl
COMMENT_LINE $0D72 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0D72 [8] load Y coordinate to A, X coordinate to B
COMMENT $0D74 [4] Send Y to A/D
FORCE_SYMBOL $0D74 VIA_port_a
COMMENT $0D76 [6]
FORCE_SYMBOL $0D76 VIA_port_b
COMMENT $0D78 [2]
FORCE_NO_SYMBOL $0D78
COMMENT_LINE $0D7A light off
COMMENT $0D7A [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0D7A VIA_cntl
COMMENT $0D7C [6] Disable mux
FORCE_SYMBOL $0D7C VIA_port_b
COMMENT $0D7E [6] Send X to A/D
FORCE_SYMBOL $0D7E VIA_port_a
COMMENT_LINE $0D80 light on
FORCE_NO_SYMBOL $0D80
COMMENT $0D82 [4] enable timer 1
FORCE_SYMBOL $0D82 VIA_t1_cnt_hi
COMMENT $0D84 ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0D84 VIA_cntl
COMMENT_LINE $0D86 light off
COMMENT_LINE $0D86 there must the above mentioned "switch the light off"
COMMENT_LINE $0D86 after 22 cycles still be manually done
COMMENT_LINE $0D86 (but the 22 cycles might be reused otherwise!)
COMMENT $0D86 and do the next
FORCE_SYMBOL $0D86 next_object
COMMENT_LINE $0D89 here if no new animation is to be done
COMMENT_LINE $0D89 the last object is done via a JSR, for easier loop exiting
FORCE_SYMBOL $0D89 move_wait_draw_vlc_unloop
COMMENT_LINE $0D8C ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0D8C now look if there is a girl on some log
COMMENT $0D8C get the status
FORCE_SYMBOL $0D8C girl_status
COMMENT $0D8F if waiting
FORCE_SYMBOL $0D8F IS_DISPLAYED
COMMENT $0D91 go to girl stuff
COMMENT $0D93 go to zero
FORCE_NO_SYMBOL $0D93
COMMENT $0D95 /BLANK low and /ZERO low
FORCE_SYMBOL $0D95 VIA_cntl
COMMENT_LINE $0D99 girl stuff below main function for short branches...
COMMENT_LINE $0D99 now we set the new coordinates and jump into the object
COMMENT_LINE $0D99 display loop again
COMMENT_LINE $0D99 setup all registers for a jump into the object loop
COMMENT $0D99 a different scale again... still very high :-(
FORCE_SYMBOL $0D99 SCALE_FACTOR_GAME
COMMENT $0D9B move to time 1 lo, this means scaling
FORCE_SYMBOL $0D9B VIA_t1_cnt_lo
COMMENT_LINE $0D9D todo check with real hardare
COMMENT_LINE $0D9D here the game scale is done befor -> should be 4 nops less (8) cycles
COMMENT_LINE $0D9D nop      (10-4)                      ; wait till abou 22 cycles passed from light sitch on to off
COMMENT $0D9D go allways to zero, is sort of bad,
FORCE_NO_SYMBOL $0D9D
COMMENT $0D9F /BLANK low and /ZERO low
FORCE_SYMBOL $0D9F VIA_cntl
COMMENT $0DA1 do positioning, load pos here
FORCE_SYMBOL $0DA1 girl_pos
COMMENT $0DA4 Store Y in D/A register
FORCE_SYMBOL $0DA4 VIA_port_a
COMMENT $0DA6 Enable mux, this sets the Y integrator
FORCE_SYMBOL $0DA6 VIA_port_b
COMMENT $0DA8 Disable mux
FORCE_SYMBOL $0DA8 VIA_port_b
COMMENT $0DAA Store X in D/A register this goes to the X integrator
FORCE_SYMBOL $0DAA VIA_port_a
COMMENT $0DAC Blank low, zero high?
FORCE_NO_SYMBOL $0DAC
COMMENT $0DAE Now zero is of... we can integrate!
FORCE_SYMBOL $0DAE VIA_cntl
COMMENT $0DB0 enable timer, by accessing it!
FORCE_SYMBOL $0DB0 VIA_t1_cnt_hi
COMMENT_LINE $0DB2 this is a "special"
COMMENT_LINE $0DB2 in move stuff, since it
COMMENT_LINE $0DB2 is only relevant if there realy is an girl
COMMENT_LINE $0DB2 and we do not even get to this code
COMMENT_LINE $0DB2 if there is no girl,
COMMENT_LINE $0DB2 for that reason no subroutine is called - but left here directly
COMMENT_LINE $0DB2 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0DB2 ;;;;;;;;; IN MOVE GIRL START
COMMENT_LINE $0DB2 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0DB2 here we have more than SCALE_FACTOR_GAME ($91) cycles time!
COMMENT_LINE $0DB2 nothing is now done here!
COMMENT $0DB2 x to girl_anim_counter
FORCE_SYMBOL $0DB2 girl_anim_counter
COMMENT $0DB5 Y to girl object
FORCE_SYMBOL $0DB5 girl_object
COMMENT $0DB9 + 1
FORCE_NO_SYMBOL $0DB9
COMMENT $0DBB do positioning, load pos here
FORCE_SYMBOL $0DBB girl_pos
COMMENT $0DBE add the speed, got from log information earlier
FORCE_SYMBOL $0DBE girl_speed
COMMENT $0DC1 and 're' store it
FORCE_SYMBOL $0DC1 girl_pos
COMMENT_LINE $0DC4 now we do that animation checking
COMMENT $0DC4 load object vector list to u,
FORCE_NO_SYMBOL $0DC4
COMMENT $0DC6 decrease animation counter
COMMENT $0DC8 if zero, we must initialize new animation phase
COMMENT $0DCA load old sprite offsets
FORCE_NO_SYMBOL $0DCA
COMMENT $0DCC negate them (A)
COMMENT $0DCD negate them (B)
COMMENT $0DCE add y position to old sprite offset y
COMMENT $0DD0 add x position to old sprite offset x
COMMENT $0DD2 load new object definition
FORCE_NO_SYMBOL $0DD2
COMMENT $0DD5 add new sprite offset y
FORCE_NO_SYMBOL $0DD5
COMMENT $0DD7 add new sprite offset x
FORCE_NO_SYMBOL $0DD7
COMMENT $0DD9 and store the corrected position
COMMENT $0DDB store new object definition to object list
COMMENT $0DDE load new animation counter start
FORCE_NO_SYMBOL $0DDE
COMMENT $0DE0 and set it in object list
COMMENT_LINE $0DE2 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0DE2 ;;;;;;;;; IN MOVE GIRL END
COMMENT_LINE $0DE2 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
FORCE_SYMBOL $0DE2 move_wait_draw_vlc_unloop
FORCE_NO_SYMBOL $0DE5
COMMENT $0DE7 22 cycles from switch on ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0DE7 VIA_cntl
FORCE_NO_SYMBOL $0DE9
FORCE_SYMBOL $0DEB VIA_port_a
FORCE_SYMBOL $0DED VIA_port_b
FORCE_SYMBOL $0DF0 VIA_port_b
FORCE_SYMBOL $0DF2 intermissionActive
COMMENT_LINE $0DF9 independent code section
COMMENT_LINE $0DF9 draw frog
COMMENT_LINE $0DF9 intensity is "default" at $60 now
FORCE_SYMBOL $0DF9 girl_status
COMMENT $0DFC if girl is carried - flicker slightly!
FORCE_SYMBOL $0DFC IS_CARRIED
COMMENT $0E00 lsb of counter is used as "flicker" "counter"
FORCE_NO_SYMBOL $0E03
FORCE_NO_SYMBOL $0E05
COMMENT $0E07 Store intensity in D/A
FORCE_SYMBOL $0E07 VIA_port_a
COMMENT $0E09 mux disabled channel 2
FORCE_NO_SYMBOL $0E09
FORCE_SYMBOL $0E0C VIA_port_b
COMMENT $0E0E mux enabled channel 2
FORCE_SYMBOL $0E0E VIA_port_b
COMMENT $0E10 turn off mux
FORCE_SYMBOL $0E10 VIA_port_b
COMMENT $0E12 set game scaling
FORCE_SYMBOL $0E12 SCALE_FACTOR_GAME
COMMENT $0E14 move to time 1 lo, this means scaling
FORCE_SYMBOL $0E14 VIA_t1_cnt_lo
COMMENT $0E16 load current frog position to D
FORCE_SYMBOL $0E16 frog_pos
COMMENT_LINE $0E19 following passage is a move_to_d derivat
COMMENT $0E19 Store Y in D/A register
FORCE_SYMBOL $0E19 VIA_port_a
COMMENT $0E1B Blank low, zero high?
FORCE_NO_SYMBOL $0E1B
FORCE_SYMBOL $0E1D VIA_cntl
COMMENT $0E20 Enable mux
FORCE_SYMBOL $0E20 VIA_port_b
COMMENT $0E22 Disable mux
FORCE_SYMBOL $0E22 VIA_port_b
COMMENT $0E24 Store X in D/A register
FORCE_SYMBOL $0E24 VIA_port_a
COMMENT $0E26 enable timer
FORCE_SYMBOL $0E26 VIA_t1_cnt_hi
COMMENT_LINE $0E28 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0E28 ;;;;;;;;; MOVE 1 START
COMMENT_LINE $0E28 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $0E28 clear the count of currently skipped sprites each round (used in intermissions to switch of first 3 lanes)
FORCE_SYMBOL $0E28 skipCount_now
COMMENT $0E2B no jumper
COMMENT_LINE $0E2B pause stuff start!
FORCE_NO_SYMBOL $0E2B
COMMENT $0E2F load new vector (length was cut by timer :-))
COMMENT_LINE $0E31 Bne      no_timer_death               ; if timer is zero, we are dead
COMMENT_LINE $0E35 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0E35 let us look if we need to initiate/destroy a home object
COMMENT_LINE $0E35 that is fly or crocodile
COMMENT_LINE $0E35 independent code section
COMMENT_LINE $0E35 do timer stuff for fly
COMMENT_LINE $0E35 insert/remove fly
COMMENT $0E35 is there any fly stuff at all?
FORCE_SYMBOL $0E35 fly_status
COMMENT $0E37 no?, than go on
COMMENT $0E39 is zero?
FORCE_SYMBOL $0E39 fly_timer
COMMENT $0E3B if not zero, do nothing
COMMENT $0E3D fly is waiting to be displayed
FORCE_SYMBOL $0E3D IS_WAITING
COMMENT $0E3F no?, than it is allready displayed
COMMENT_LINE $0E41 if zero... initiate new fly
COMMENT_LINE $0E41 JSR      Random                       ; get a random number
FORCE_SYMBOL $0E41 getMyRandom
COMMENT $0E44 only the lower three bits
FORCE_NO_SYMBOL $0E44
COMMENT $0E46 not higher than 4
FORCE_NO_SYMBOL $0E46
COMMENT $0E48 if lower than ok
COMMENT $0E4A otherwise take only half of it
COMMENT $0E4B must multiply by 5, length of home object
FORCE_NO_SYMBOL $0E4B
COMMENT $0E4D times 5
COMMENT $0E4E remember start address if all homes are occupied
FORCE_SYMBOL $0E4E tmp1
COMMENT $0E50 load the address to U, start of list of homes
FORCE_SYMBOL $0E50 home_objects
COMMENT $0E53 is this home empty (only checking upper byte, should be ok)
COMMENT $0E55 if yes, than go on
COMMENT $0E57 otherwise, compare to 20 (right most home)
COMMENT $0E59 not last home?, than go on
COMMENT $0E5B store -5, so that +5 is 0, leftmost home
COMMENT $0E5D check next home (home object is 5 bytes long)
FORCE_SYMBOL $0E5D HOME_OBJECT_SIZE
COMMENT $0E5F checked all homes yet
FORCE_SYMBOL $0E5F tmp1
COMMENT $0E61 yes, than no home is free
COMMENT $0E63 and check again if empty...
COMMENT $0E65 remember offset to home for removal
FORCE_SYMBOL $0E65 fly_house
COMMENT $0E67 get address of U and add the offset
FORCE_SYMBOL $0E67 home_objects
COMMENT $0E6A in U address of 'random' home
COMMENT $0E6C load fly object
FORCE_SYMBOL $0E6C fly1a_object
COMMENT $0E6F store to the calculated home address
FORCE_NO_SYMBOL $0E6F
COMMENT $0E71 load animation counter of object
COMMENT $0E74 and store it to object in RAM
FORCE_NO_SYMBOL $0E74
COMMENT $0E76 IS DISPLAYED
FORCE_SYMBOL $0E76 fly_status
COMMENT $0E78 and finnished with fly stuff...
COMMENT_LINE $0E7A fly is allready displayed, must check if we should destroy it...
COMMENT_LINE $0E7A now destroy fly
COMMENT $0E7A load current fly offset
FORCE_SYMBOL $0E7A fly_house
COMMENT $0E7C get address of U and add the offset
FORCE_SYMBOL $0E7C home_objects
COMMENT $0E7F in U address of 'random' home
FORCE_NO_SYMBOL $0E81
FORCE_NO_SYMBOL $0E84
COMMENT $0E86 is WAITING
FORCE_SYMBOL $0E86 fly_status
COMMENT $0E88 reload the fly timer
FORCE_SYMBOL $0E88 fly_timer_start
COMMENT $0E8A and store it
FORCE_SYMBOL $0E8A fly_timer
COMMENT_LINE $0E8C ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0E8C do timer stuff for croco (home)
COMMENT_LINE $0E8C insert/remove croco
COMMENT $0E8C is there any croco stuff at all?
FORCE_SYMBOL $0E8C croco_status
COMMENT $0E8E no?, than go on
COMMENT $0E90 store it back
FORCE_SYMBOL $0E90 croco_timer
COMMENT $0E92 if not zero, do nothing
COMMENT $0E94 is there any croco stuff at all?
FORCE_SYMBOL $0E94 croco_status
COMMENT $0E96 croco is waiting to be displayed
FORCE_SYMBOL $0E96 IS_WAITING
COMMENT $0E98 no?, than it is allready displayed
COMMENT_LINE $0E9A if zero... initiate new croco
COMMENT_LINE $0E9A JSR      Random                       ; get a random number
FORCE_SYMBOL $0E9A getMyRandom
COMMENT $0E9D only the lower three bits
FORCE_NO_SYMBOL $0E9D
COMMENT $0E9F not higher than 4
FORCE_NO_SYMBOL $0E9F
COMMENT $0EA1 if lower than ok
COMMENT $0EA3 otherwise take only half of it
COMMENT $0EA4 must multiply by 5, length of home object
FORCE_NO_SYMBOL $0EA4
COMMENT $0EA6 times 5
COMMENT $0EA7 remember start address if all homes are occupied
FORCE_SYMBOL $0EA7 tmp1
COMMENT $0EA9 load the address to U, start of list of homes
FORCE_SYMBOL $0EA9 home_objects
COMMENT $0EAC is this home empty (only checking upper byte, should be ok)
COMMENT $0EAE if yes, than go on
COMMENT $0EB0 otherwise, compate to 20 (right most home)
COMMENT $0EB2 not last home?, than go on
COMMENT $0EB4 store -5, so that +5 is 0, leftmost home
COMMENT $0EB6 check next home (home object is 5 bytes long)
FORCE_SYMBOL $0EB6 HOME_OBJECT_SIZE
COMMENT $0EB8 checked all homes yet
FORCE_SYMBOL $0EB8 tmp1
COMMENT $0EBA yes, than no home is free
COMMENT $0EBC and check again if empty...
COMMENT $0EBE remember offset to home for removal
FORCE_SYMBOL $0EBE croco_house
COMMENT $0EC0 get address of U and add the offset
FORCE_SYMBOL $0EC0 home_objects
COMMENT $0EC3 in U address of 'random' home
COMMENT $0EC5 load croco object
FORCE_SYMBOL $0EC5 crocoh1a_object
COMMENT $0EC8 store to the calculated home address
FORCE_NO_SYMBOL $0EC8
COMMENT $0ECA load animation counter of object
COMMENT $0ECD and store it to object in RAM
FORCE_NO_SYMBOL $0ECD
COMMENT $0ECF is DISPLAYED
FORCE_SYMBOL $0ECF croco_status
COMMENT $0ED1 and finnished with croco stuff...
COMMENT_LINE $0ED3 croco is allready displayed, must check if we should destroy it...
COMMENT_LINE $0ED3 now destroy croco
COMMENT $0ED3 load current croco offset
FORCE_SYMBOL $0ED3 croco_house
COMMENT $0ED5 get address of U and add the offset
FORCE_SYMBOL $0ED5 home_objects
COMMENT $0ED8 in U address of 'random' home
FORCE_NO_SYMBOL $0EDA
FORCE_NO_SYMBOL $0EDD
COMMENT $0EDF IS WAITING
FORCE_SYMBOL $0EDF croco_status
COMMENT $0EE1 reload the croco timer
FORCE_SYMBOL $0EE1 croco_timer_start
COMMENT $0EE3 and store it
FORCE_SYMBOL $0EE3 croco_timer
COMMENT_LINE $0EE5 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0EE5 EXPECTS DP = C8!
COMMENT_LINE $0EE5 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0EE5 independent code section
COMMENT_LINE $0EE5 do timer stuff for diving turtles
COMMENT_LINE $0EE5 initiate alternate turtle sprites on
COMMENT_LINE $0EE5 timer...
COMMENT_LINE $0EE5 clean up stuff
COMMENT_LINE $0EE5 NOTE: turtles really suck
COMMENT_LINE $0EE5 sometimes turtles are torn appart due to
COMMENT_LINE $0EE5 huge sprite offsets
COMMENT_LINE $0EE5 higher than the (now used 5 maximum offset)
COMMENT $0EE5 should the turtles dive?
FORCE_SYMBOL $0EE5 dive_timer
COMMENT $0EE7 if not zero, don't do anything
COMMENT $0EE9 first let us restore the timer
FORCE_SYMBOL $0EE9 dive_timer_start
COMMENT $0EEB store it HI
FORCE_SYMBOL $0EEB dive_timer
COMMENT_LINE $0EED go thru all sprites
COMMENT_LINE $0EED see if diving special is there,
COMMENT_LINE $0EED than change sprites to diving sprites
FORCE_SYMBOL $0EED t_list
COMMENT $0EF5 load object address
FORCE_NO_SYMBOL $0EF5
COMMENT_LINE $0EF7 U pointer to object
COMMENT_LINE $0EF7 X pointer to this object list
COMMENT_LINE $0EF7 Y pointer to t_list
COMMENT_LINE $0EF7 from here we change the actual object in the object list
COMMENT_LINE $0EF7 these special objects (for now only turtles)
COMMENT_LINE $0EF7 have an extra entry in their object describtion
COMMENT_LINE $0EF7 this is the 'alternate' object describtion address
COMMENT_LINE $0EF7 this will be loaded and placed in the object list
COMMENT_LINE $0EF7 on each timer 0 we just change to the alternate sprite
COMMENT_LINE $0EF7 which allways switches back and forth between diving
COMMENT_LINE $0EF7 and non diving turtles (as we defined the object
COMMENT_LINE $0EF7 information as this)
COMMENT $0EF7 faster than a PSHS
FORCE_SYMBOL $0EF7 tmp1
COMMENT $0EFA load alternate object to Y
FORCE_NO_SYMBOL $0EFA
COMMENT $0EFD load old sprite offsets
FORCE_NO_SYMBOL $0EFD
COMMENT $0EFF negate them (A)
COMMENT $0F00 negate them (B)
COMMENT $0F01 add y position to old sprite offset y
FORCE_NO_SYMBOL $0F01
COMMENT $0F03 add x position to old sprite offset x
FORCE_NO_SYMBOL $0F03
COMMENT $0F05 add new sprite offset y
FORCE_NO_SYMBOL $0F05
COMMENT $0F07 add new sprite offset x
FORCE_NO_SYMBOL $0F07
COMMENT $0F09 and store the corrected position
FORCE_NO_SYMBOL $0F09
COMMENT $0F0B load new animation counter start
FORCE_NO_SYMBOL $0F0B
COMMENT $0F0D and set it in object list
FORCE_NO_SYMBOL $0F0D
COMMENT $0F0F store new object definition to object list
FORCE_NO_SYMBOL $0F0F
COMMENT $0F12 faster than a PULS
FORCE_SYMBOL $0F12 tmp1
COMMENT $0F15 and go on
COMMENT_LINE $0F17 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
FORCE_SYMBOL $0F17 otter_status
FORCE_SYMBOL $0F19 IS_WAITING
COMMENT $0F1B if not zero, do nothing
FORCE_SYMBOL $0F1D otter_timer
COMMENT $0F1F if not zero, do nothing
COMMENT_LINE $0F21 if zero... initiate new otter
COMMENT_LINE $0F21 JSR      Random                       ; get a random number
FORCE_SYMBOL $0F21 getMyRandom
COMMENT $0F24 random in range of 0 - 15
FORCE_NO_SYMBOL $0F24
COMMENT $0F26 remember for lane offset
FORCE_SYMBOL $0F26 tmp1
COMMENT $0F28 only the lower three bits
FORCE_NO_SYMBOL $0F28
COMMENT $0F2A not higher than 5
FORCE_NO_SYMBOL $0F2A
COMMENT $0F2C if lower than ok
COMMENT $0F2E otherwise take only half of it
COMMENT $0F2F this is the band we are on now
FORCE_SYMBOL $0F2F otter_band
COMMENT $0F31 multiply by band structure width
COMMENT $0F32 which is 16 bytes
COMMENT $0F35 copy A to B
COMMENT $0F37 SEX B :-) but without sign
COMMENT $0F38 add address start of band list
FORCE_SYMBOL $0F38 band_list
COMMENT_LINE $0F3B now we try to get a pseudo random offset of objects within
COMMENT_LINE $0F3B this lane, we use the same random number as for lane determination
COMMENT_LINE $0F3B but this time ranging from 0 - 15, see above
COMMENT $0F3B at least 1 in tmp1 so we don't loop to 255
FORCE_SYMBOL $0F3B tmp1
COMMENT_LINE $0F3D start address of this bandlist is in D (and remains there untouched...)
COMMENT $0F3D copy start of lane list to X
COMMENT $0F3F load object list address to U
COMMENT $0F41 if zero than we have gone past the last object
COMMENT_LINE $0F43 and jump to reinit X
COMMENT $0F43 otherwise we decrement our random value by 1
FORCE_SYMBOL $0F43 tmp1
COMMENT $0F45 if not zero, get the next object list member
COMMENT $0F47 store list object address of
FORCE_SYMBOL $0F47 otter_log_pre
COMMENT_LINE $0F49 'log' pre otter
COMMENT $0F49 load next list position
FORCE_NO_SYMBOL $0F49
COMMENT $0F4B if not zero jump
COMMENT $0F4D if zero we have to use the first object in this band
COMMENT $0F4F even if it is the same... as the pre object
FORCE_NO_SYMBOL $0F4F
COMMENT $0F51 store list object address of
FORCE_SYMBOL $0F51 otter_log_past
COMMENT_LINE $0F53 'log' past otter
COMMENT $0F53 load object address of first otter animation to X
FORCE_SYMBOL $0F53 otter1a_object
COMMENT $0F56 load pre otter object list address
FORCE_SYMBOL $0F56 otter_log_pre
COMMENT $0F58 position of pre list object
FORCE_NO_SYMBOL $0F58
COMMENT $0F5A pre object
FORCE_NO_SYMBOL $0F5A
COMMENT $0F5C modify for y offset of pre object
FORCE_NO_SYMBOL $0F5C
COMMENT $0F5E modify for x offset of pre object
FORCE_NO_SYMBOL $0F5E
COMMENT $0F60 add length of pre object
FORCE_NO_SYMBOL $0F60
COMMENT $0F62 modify y position with otter offset
FORCE_NO_SYMBOL $0F62
COMMENT $0F64 modify x position with otter offset
FORCE_NO_SYMBOL $0F64
COMMENT $0F66 add another 3 just for good measure...
FORCE_NO_SYMBOL $0F66
COMMENT $0F68 and store this as the new otter position
FORCE_SYMBOL $0F68 otter_pos
COMMENT $0F6A are we to far to the right?
FORCE_NO_SYMBOL $0F6A
COMMENT $0F6C if so, don't use this otter
COMMENT $0F6E are we to far to the left?
COMMENT $0F70 if so don't use this otter either
COMMENT_LINE $0F72 the above is sort of needed, since I don't want to check
COMMENT_LINE $0F72 all fancy cases... there e.g. might be some weird positioning
COMMENT_LINE $0F72 that otter is quasi outside of the main screen and the
COMMENT_LINE $0F72 log it is looking for reaches the out of bounds boundary allways
COMMENT_LINE $0F72 befor the otter has a chance to realize it is allready near
COMMENT_LINE $0F72 thus the otter might stay there forever...
COMMENT $0F72 load speed of pre object
FORCE_NO_SYMBOL $0F72
COMMENT $0F74 otter allways + 1
COMMENT_LINE $0F75 my otter allways moves from left to right
COMMENT_LINE $0F75 or standstill
COMMENT $0F75 store the new speed
FORCE_SYMBOL $0F75 otter_speed
COMMENT $0F77 store otter anim A 1 object as the relevant otter object
FORCE_SYMBOL $0F77 otter_object
COMMENT $0F79 reset animation counter for otter
FORCE_NO_SYMBOL $0F79
COMMENT $0F7B and store it
FORCE_SYMBOL $0F7B otter_anim_counter
COMMENT_LINE $0F7D now we do some checking if we haven't gotten ourself a real
COMMENT_LINE $0F7D stupid 'log' object, like a midway turtle or a
COMMENT_LINE $0F7D middle 'big' log...
COMMENT $0F7D load object list address of object past otter
FORCE_SYMBOL $0F7D otter_log_past
COMMENT $0F7F and load the position of otter now
COMMENT $0F81 subtract these two
FORCE_NO_SYMBOL $0F81
COMMENT $0F83 absolute that
COMMENT $0F8A look if they are really near each other
FORCE_NO_SYMBOL $0F8A
COMMENT_LINE $0F8C 15 'includes' length of otter, hardcoded :-(
COMMENT $0F8C if not near, go to end, otherwise destroy otter
COMMENT $0F8E reload the otter timer
FORCE_SYMBOL $0F8E otter_timer_start
COMMENT $0F90 and store it
FORCE_SYMBOL $0F90 otter_timer
COMMENT $0F92 and go to done
COMMENT $0F94 is displayed
FORCE_SYMBOL $0F94 otter_status
COMMENT_LINE $0F96 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
FORCE_NO_SYMBOL $0F96
COMMENT $0F9A load current frog sprite
FORCE_SYMBOL $0F9A frog_pic
COMMENT_LINE $0F9D ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0F9D ;;;;;;;;; MOVE 1 END
COMMENT_LINE $0F9D ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0F9D done with our in 'pause' move stuff!
FORCE_SYMBOL $0F9D move_wait_draw_vlc_unloop
FORCE_NO_SYMBOL $0FA0
COMMENT $0FA3 Shift reg mode = 000 free disable, T1 PB7 enabled
FORCE_SYMBOL $0FA3 VIA_aux_cntl
COMMENT $0FA5 /BLANK low and /ZERO low
FORCE_SYMBOL $0FA5 VIA_cntl
COMMENT $0FA7 and finnished drawing even the girl
COMMENT_LINE $0FA8 ***************************************************************************
COMMENT_LINE $0FA8 this darling moves the frog on the title screen
COMMENT_LINE $0FA8 query joystick handles the actual move information via recorded data given
FORCE_SYMBOL $0FA8 query_joystick
FORCE_SYMBOL $0FAB move_frog
FORCE_NO_SYMBOL $0FAE
FORCE_SYMBOL $0FB3 Intensity_a
COMMENT $0FB6 set game scaling
FORCE_SYMBOL $0FB6 SCALE_FACTOR_GAME
COMMENT $0FB8 move to time 1 lo, this means scaling
FORCE_SYMBOL $0FB8 VIA_t1_cnt_lo
COMMENT $0FBA load current frog position to D
FORCE_SYMBOL $0FBA frog_pos
COMMENT_LINE $0FBD following passage is a move_to_d derivat
COMMENT $0FBD Store Y in D/A register
FORCE_SYMBOL $0FBD VIA_port_a
COMMENT $0FBF Blank low, zero high?
FORCE_NO_SYMBOL $0FBF
FORCE_SYMBOL $0FC1 VIA_cntl
COMMENT $0FC4 Enable mux
FORCE_SYMBOL $0FC4 VIA_port_b
COMMENT $0FC6 Disable mux
FORCE_SYMBOL $0FC6 VIA_port_b
COMMENT $0FC8 Store X in D/A register
FORCE_SYMBOL $0FC8 VIA_port_a
COMMENT $0FCA enable timer
FORCE_SYMBOL $0FCA VIA_t1_cnt_hi
COMMENT_LINE $0FCC ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0FCC ;;;;;;;;; MOVE 1 START
COMMENT_LINE $0FCC ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $0FCC load current frog sprite
FORCE_SYMBOL $0FCC frog_pic
COMMENT_LINE $0FCF ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0FCF ;;;;;;;;; MOVE 1 END
COMMENT_LINE $0FCF ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
FORCE_SYMBOL $0FCF move_wait_draw_vlc_unloop
COMMENT_LINE $0FD2 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
FORCE_NO_SYMBOL $0FD2
COMMENT $0FD4 Shift reg mode = 000 free disable, T1 PB7 enabled
FORCE_SYMBOL $0FD4 VIA_aux_cntl
COMMENT_LINE $0FD7 ***************************************************************************
FORCE_NO_SYMBOL $0FD7
FORCE_SYMBOL $0FDA score_digit_5
FORCE_SYMBOL $0FDD score_digit_3
FORCE_SYMBOL $0FE0 score_digit_1
COMMENT $0FE3 end string with $81
FORCE_SYMBOL $0FE3 SPACE
COMMENT $0FE5 space betwwen score, and lives
FORCE_SYMBOL $0FE5 score_digit_SPACE1
COMMENT $0FE8 space betwwen lifes, and level
FORCE_SYMBOL $0FE8 score_digit_SPACE2
FORCE_NO_SYMBOL $0FEB
FORCE_SYMBOL $0FED score_digit_LIFES
FORCE_NO_SYMBOL $0FF0
FORCE_SYMBOL $0FF2 score_digit_Level
COMMENT $0FF5 end string with $81
FORCE_NO_SYMBOL $0FF5
FORCE_SYMBOL $0FF7 score_digit_front
FORCE_SYMBOL $0FFA score_digit_back
COMMENT_LINE $0FFE ***************************************************************************
COMMENT_LINE $0FFE this routine initializes the game variables
COMMENT_LINE $0FFE nothing is expected and nothing is returned
COMMENT_LINE $0FFE leaves DP to C8
FORCE_SYMBOL $0FFE DP_to_C8
COMMENT $1001 for attract mode to work properly - we need a not so random seed!
FORCE_NO_SYMBOL $1001
FORCE_SYMBOL $1004 Vec_Random_Seed
COMMENT $100A these set up the joystick
FORCE_NO_SYMBOL $100A
FORCE_SYMBOL $100D Vec_Joy_Mux_1_X
COMMENT $100F not on startup = 1
FORCE_SYMBOL $100F gimmickPossible
COMMENT_LINE $1012 enquiries
COMMENT_LINE $1012 allowing only all directions for
COMMENT_LINE $1012 for joystick one
COMMENT $1012 this setting up saves a few hundred
FORCE_NO_SYMBOL $1012
FORCE_SYMBOL $1015 did_rollOver
FORCE_SYMBOL $1018 gimmickActive
COMMENT $101B cycles
FORCE_SYMBOL $101B Vec_Joy_Mux_2_X
COMMENT_LINE $101D don't miss it, if you don't need the
COMMENT_LINE $101D second joystick!
COMMENT $101F address to clear
FORCE_SYMBOL $101F home_objects
COMMENT $1022 number of bytes - 1 to clear
COMMENT $1025 clear sub routine in ROM
FORCE_SYMBOL $1025 Clear_x_d
FORCE_NO_SYMBOL $1028
FORCE_SYMBOL $102A tmp1
COMMENT $102C pointer to y pos
FORCE_SYMBOL $1032 HOME_X_WIDTH
FORCE_NO_SYMBOL $1034
FORCE_NO_SYMBOL $1036
FORCE_SYMBOL $1038 tmp1
COMMENT_LINE $103C ;;;;;;;;;
COMMENT $103C address to clear
FORCE_SYMBOL $103C object_list
COMMENT $103F number of bytes - 1 to clear
COMMENT $1042 clear sub routine in ROM
FORCE_SYMBOL $1042 Clear_x_d
COMMENT $1045 address to clear
FORCE_SYMBOL $1045 band_list
COMMENT $1048 number of bytes - 1 to clear
COMMENT $104B clear sub routine in ROM
FORCE_SYMBOL $104B Clear_x_d
COMMENT $104E initial game level
FORCE_SYMBOL $104E START_LEVEL
COMMENT $1050 upon startup
FORCE_SYMBOL $1050 game_level
FORCE_SYMBOL $1052 gameModeOption
FORCE_NO_SYMBOL $1055
COMMENT $1059 one based
FORCE_SYMBOL $1059 levelFromOptions
FORCE_SYMBOL $105D game_level
COMMENT $105F no y change for timer line...
FORCE_SYMBOL $105F y_timer
COMMENT_LINE $1061 entry point for continue with current level
COMMENT $1061 balls 5
FORCE_SYMBOL $1061 FROGS_PER_GAME
FORCE_SYMBOL $1063 gameModeOption
FORCE_NO_SYMBOL $1066
FORCE_NO_SYMBOL $106A
COMMENT $106C and store five balls
FORCE_SYMBOL $106C no_frogs
FORCE_SYMBOL $106E score_digit_5
COMMENT $1071 and store it, for new life at change... (every 10000 points)
FORCE_SYMBOL $1071 high_check
COMMENT_LINE $1073 entry point for each new frog
FORCE_NO_SYMBOL $1073
COMMENT $1076 sta currentSFX+1
FORCE_SYMBOL $1076 currentSFX
COMMENT $1078 sta Vec_Joy_1_Y
FORCE_SYMBOL $1078 Vec_Joy_1_X
FORCE_SYMBOL $107A froggerInJump
COMMENT_LINE $107E ensure no autojump!
COMMENT $107E only jump if last joy pos was zero
FORCE_SYMBOL $107E last_joy_x
COMMENT $1080 only jump if last joy pos was zero
FORCE_SYMBOL $1080 last_joy_y
COMMENT $1082 frogger faces up
FORCE_SYMBOL $1082 frogger_up
COMMENT $1085 upon startup
FORCE_SYMBOL $1085 frog_pic
COMMENT $1087 adjust sizing information
FORCE_SYMBOL $1087 FROG_SIZEX_UP
COMMENT $1089 store it
FORCE_SYMBOL $1089 current_frog_size_x
COMMENT $108B first frog is looking up
FORCE_SYMBOL $108B HEADING_UP
COMMENT $108D store that
FORCE_SYMBOL $108D current_frog_heading
COMMENT $108F load the offset of the currently used pic
FORCE_SYMBOL $108F frogger_up_offset
COMMENT $1092 and store it for later use
FORCE_SYMBOL $1092 current_frog_offset
COMMENT $1094 load init values
FORCE_SYMBOL $1094 FROG_INIT_POS
COMMENT $1097 and evalute the new pos
FORCE_SYMBOL $1097 frogger_up_offset
COMMENT $109A corresponding to the offset
COMMENT $109D and store them...
FORCE_SYMBOL $109D frog_pos
COMMENT $109F load init values
FORCE_SYMBOL $109F FROG_INIT_POS_BAND
COMMENT $10A2 and store them...
FORCE_SYMBOL $10A2 frog_pos_band
COMMENT $10A4 initialize timer
FORCE_SYMBOL $10A4 my_timer_start
COMMENT $10A6 store it
FORCE_SYMBOL $10A6 my_timer
COMMENT $10A8 always clear, for double death check
FORCE_NO_SYMBOL $10AC
COMMENT $10B0 Karl Quappe $3c is default, all music is plaxed using channel 0+1
FORCE_NO_SYMBOL $10B3
COMMENT_LINE $10B6 ldu      #(Vec_Music_Work + register)
COMMENT_LINE $10B6 stb      ,u
COMMENT $10B8 store register select byte
FORCE_SYMBOL $10B8 VIA_port_a
COMMENT $10BA sound BDIR on, BC1 on, mux off _ LATCH
FORCE_NO_SYMBOL $10BA
FORCE_SYMBOL $10BC VIA_port_b
COMMENT $10BE sound BDIR off, BC1 off, mux off - INACTIVE
FORCE_NO_SYMBOL $10BE
FORCE_SYMBOL $10C0 VIA_port_b
COMMENT $10C2 read sound chip status (?)
FORCE_SYMBOL $10C2 VIA_port_a
COMMENT $10C4 store data byte
FORCE_SYMBOL $10C4 VIA_port_a
COMMENT $10C6 sound BDIR on, BC1 off, mux off - WRITE
FORCE_NO_SYMBOL $10C6
FORCE_SYMBOL $10C8 VIA_port_b
COMMENT $10CA sound BDIR off, BC1 off, mux off - INACTIVE
FORCE_NO_SYMBOL $10CA
FORCE_SYMBOL $10CC VIA_port_b
COMMENT $10D0 sign for calling "score print" to NOT print score
FORCE_NO_SYMBOL $10D0
COMMENT_LINE $10D3 expects DP to $C8
COMMENT_LINE $10D3 mainly this routine sets up the sprite information which are
COMMENT_LINE $10D3 stored in the simple level structure
COMMENT_LINE $10D3 sprites are arranged in a fixed length list
COMMENT_LINE $10D3 a maximum of currently 30 sprites (should be enough) can be
COMMENT_LINE $10D3 stored in that list
COMMENT_LINE $10D3 though it depends on the size and position of these sprites if
COMMENT_LINE $10D3 vectrex is capable of drawing them in a way which doesn't hurt the eyes
COMMENT_LINE $10D3 the 'playfield' is divided into a 12*12 grid
COMMENT_LINE $10D3 the lowest position cannot contain any sprites, since
COMMENT_LINE $10D3 that's where frogger starts of
COMMENT_LINE $10D3 the level (see levels.i for an example) is constructed of a field of
COMMENT_LINE $10D3 bytes. If a byte differs from 0 a sprite is assumed
COMMENT_LINE $10D3 in that position
COMMENT_LINE $10D3 the position in screen coordinates is calculated from the byte position
COMMENT_LINE $10D3 in the field.
COMMENT_LINE $10D3 the byte itself is used as information what kind of sprite is to be
COMMENT_LINE $10D3 used
COMMENT_LINE $10D3 the position and the address where the sprite data is stored is
COMMENT_LINE $10D3 copied to an object_list in vectrex ram
COMMENT_LINE $10D3 this list will be repainted every round
COMMENT_LINE $10D3 for easier collision detection a second list is used
COMMENT_LINE $10D3 one for each band, a maximum of 7 sprites per band is currently supported
COMMENT_LINE $10D3 that way I don't have to check every single sprite, only those
COMMENT_LINE $10D3 in the band which interests me (still a few sprites to check)
COMMENT_LINE $10D3 the length of the sprite is stored in it's data structure, only the
COMMENT_LINE $10D3 length is relevant for collision detection,
COMMENT_LINE $10D3 since it is assumed that frogger allways hops over a whole band
COMMENT_LINE $10D3 sprites are allways assumed to start at 0 and than have a width of
COMMENT_LINE $10D3 'length'
COMMENT_LINE $10D3 if frogger 'touches' such a length it dies (or swims)
COMMENT_LINE $10D3 actually I think this is a very nasty collision detection
COMMENT_LINE $10D3 for the road, since the mearest scratch kills frogger,
COMMENT_LINE $10D3 on the other hand, he can get hold of only a 'pixel' of log
COMMENT_LINE $10D3 and still hold on to it :-)
COMMENT $10D3 five homes exist
FORCE_NO_SYMBOL $10D3
COMMENT $10D5 store it
FORCE_SYMBOL $10D5 in_home_counter
COMMENT_LINE $10D7 this means 5 empty homes
COMMENT $10D7 clear all homes
FORCE_NO_SYMBOL $10D7
COMMENT $10DA first home
FORCE_SYMBOL $10DA home_objects
COMMENT $10DE store the clear to home 1
FORCE_NO_SYMBOL $10DE
COMMENT $10E0 store the clear to home 2
FORCE_NO_SYMBOL $10E0
COMMENT $10E2 store the clear to home 3
FORCE_NO_SYMBOL $10E2
COMMENT $10E4 store the clear to home 4
FORCE_NO_SYMBOL $10E4
COMMENT $10E6 store the clear to home 5
FORCE_NO_SYMBOL $10E6
COMMENT $10E9 this is a helper if we reinit the
FORCE_SYMBOL $10E9 tmp2
COMMENT $10EB level or start a new one
COMMENT_LINE $10ED this sets it to new level
COMMENT_LINE $10ED entry point for level reinit
COMMENT_LINE $10ED must allways be done after a morph, since a morph uses
COMMENT_LINE $10ED the same ram as the level information
COMMENT_LINE $10ED damn only 1 K (or less that is)
COMMENT $10ED otherwise set tmp2
FORCE_SYMBOL $10ED tmp2
COMMENT $10EF to 1, which means reinit
FORCE_SYMBOL $10EF tmp2
FORCE_SYMBOL $10F1 SPACE
COMMENT $10F3 space betwwen score, and lives
FORCE_SYMBOL $10F3 score_digit_SPACE1
COMMENT $10F6 space betwwen lifes, and level
FORCE_SYMBOL $10F6 score_digit_SPACE2
COMMENT $10F9 look at level
FORCE_SYMBOL $10F9 game_level
COMMENT $10FB start at 1 not 0
COMMENT $10FC high "level" is per default a space
FORCE_SYMBOL $10FC score_digit_Level
COMMENT $10FF end string with $81
FORCE_NO_SYMBOL $10FF
FORCE_SYMBOL $1101 score_digit_front
FORCE_SYMBOL $1104 score_digit_back
COMMENT $1107 != 0
FORCE_SYMBOL $1107 frogDeath
COMMENT $110A != 0
FORCE_SYMBOL $110A intermissionActive
COMMENT $110E clear all homes
FORCE_NO_SYMBOL $110E
COMMENT_LINE $1111 clear static dive turtle list
COMMENT $1111 load start address
FORCE_SYMBOL $1111 t_list
COMMENT $1114 load length of structure
FORCE_NO_SYMBOL $1114
COMMENT $1117 clear object structure
FORCE_SYMBOL $1117 Clear_x_d
COMMENT_LINE $111A first clear the current level
COMMENT_LINE $111A this clears the last level band list
COMMENT $111A load start address
FORCE_SYMBOL $111A band_list
COMMENT $111D savety copy to tmp_band_list
FORCE_SYMBOL $111D tmp_band_list
COMMENT $111F load length of structure
COMMENT $1122 clear band_list
FORCE_SYMBOL $1122 Clear_x_d
COMMENT_LINE $1125 this clears the level object list
COMMENT $1125 load start address
FORCE_SYMBOL $1125 object_list
COMMENT $1128 load length of structure
COMMENT $112B clear object structure
FORCE_SYMBOL $112B Clear_x_d
COMMENT $112E load the address to U
FORCE_SYMBOL $112E object_list
COMMENT_LINE $1131 than we go to current level
COMMENT $1131 load length of level
FORCE_SYMBOL $1131 LEVEL_DATA_LENGTH
COMMENT $1133 load level number
FORCE_SYMBOL $1133 game_level
COMMENT $1135 multiply these two
COMMENT $1136 and add to start address of level data
FORCE_SYMBOL $1136 level1_data
COMMENT $1139 and in X register for easier access (indexed)
COMMENT_LINE $113B now we will loop a while, first thru all bands (11)
COMMENT $113B 11 bands (10+ middle)
FORCE_NO_SYMBOL $113B
COMMENT $113D if the level ist the "LEVEL DONE" level, only the middle band is loaded, all other
FORCE_SYMBOL $113D game_level
COMMENT $113F data is ignored
FORCE_NO_SYMBOL $113F
FORCE_SYMBOL $1143 band_list
FORCE_SYMBOL $1149 tmp_band_list
FORCE_SYMBOL $114B level_done_data
FORCE_NO_SYMBOL $114E
COMMENT $1150 initialize counter for loop1
FORCE_SYMBOL $1150 loop1
COMMENT_LINE $1152 and than the inner loop thru all band positions (12)
COMMENT $1152 band list (x) offset for each new
FORCE_SYMBOL $1152 tmp_band_offset
COMMENT $1154 band = 0
COMMENT $1156 fixed GRID_WIDTH
FORCE_NO_SYMBOL $1156
COMMENT $1158 initialize counter for loop2
FORCE_SYMBOL $1158 loop2
COMMENT $115A load level information (one byte each pass), increment X by 1
COMMENT $115C than move on
COMMENT_LINE $115E if we encounter something different than 0
COMMENT_LINE $115E we have a sprite which we will place in the
COMMENT_LINE $115E object structure,
COMMENT_LINE $115E this object structur will be updated all thru the
COMMENT_LINE $115E game...
COMMENT $115E clear A
COMMENT $115F since it starts at 1 not 0
COMMENT $1160 multiply B by 2
COMMENT $1161 add object table address
FORCE_SYMBOL $1161 object_table
COMMENT $1164 move to index register Y
COMMENT $1166 and load the the sprite object structure to D
FORCE_NO_SYMBOL $1166
COMMENT_LINE $1168 first lets save this object list position to the current band_list
COMMENT_LINE $1168 pointer
COMMENT_LINE $1168 in the band_list are all object_list positions stored, sorted
COMMENT_LINE $1168 by each band
COMMENT_LINE $1168 band list provides storage for a maximum of 7 sprites per band
COMMENT_LINE $1168 this is NOT checked, make the levels good!!!
COMMENT $1168 save X,D register
COMMENT $116A load current band list 'band' (y) position
FORCE_SYMBOL $116A tmp_band_list
COMMENT $116C add the current (x) position (how many objects on this band)
FORCE_SYMBOL $116C tmp_band_offset
COMMENT $116E increment the offset
COMMENT $1170 by two
COMMENT $1172 store that in X index register
COMMENT $1174 save the current object_list position to band_list
FORCE_NO_SYMBOL $1174
COMMENT $1176 and restore the pointer to level information
COMMENT_LINE $1178 in D still the current object
COMMENT_LINE $1178 init dive turtle start
COMMENT_LINE $1178 a list with a max of 6, not checked!
COMMENT $1178 save D and X
COMMENT $117A transfer D to index Y, get the object pointer to Y
COMMENT $117C load special to A
FORCE_NO_SYMBOL $117C
COMMENT $117E look if it is a DIVE_SPECIAL
FORCE_SYMBOL $117E SPECIAL_DIVE
COMMENT $1180 if not, go on
COMMENT $1182 counter for number of divers
COMMENT $1184 position to store divers
FORCE_SYMBOL $1184 t_list
COMMENT $1187 store object_list position to t_list plus offset
COMMENT $1189 and increment list pointer by 2
COMMENT $118B and store it back
COMMENT $118D restore D and X
COMMENT_LINE $118F init dive turtle end
COMMENT_LINE $118F now store the object definition address to the object_list
COMMENT_LINE $118F and initialize all variables...
COMMENT $118F and store it to object_list increment U by two
COMMENT $1191 transfer D to index Y
COMMENT $1193 load the offsets from Y pointer
FORCE_NO_SYMBOL $1193
COMMENT $1195 y offset (these are offset in the sprite)
FORCE_NO_SYMBOL $1195
COMMENT $1197 x offset itself, an offset to the starting vector
FORCE_NO_SYMBOL $1197
COMMENT $1199 now get the y pos
FORCE_SYMBOL $1199 loop1
COMMENT $119B make it signed
FORCE_NO_SYMBOL $119B
COMMENT $119D in game pos relation
FORCE_SYMBOL $119D GRID_SIZE_GAME
COMMENT $119F should be a byte value
COMMENT $11A0 add to offset
FORCE_NO_SYMBOL $11A0
COMMENT $11A2 and store it to object... increment U by one
COMMENT $11A4 now get the x pos
FORCE_SYMBOL $11A4 loop2
COMMENT $11A6 reverse the X coordinate
COMMENT $11A7 make it signed
FORCE_NO_SYMBOL $11A7
COMMENT $11A9 in game pos relation
FORCE_SYMBOL $11A9 GRID_SIZE_GAME
COMMENT $11AB should be a byte value
COMMENT $11AC add to offset
FORCE_NO_SYMBOL $11AC
COMMENT $11AE and store it to object... increment U by one
COMMENT $11B0 randomize the animation startup
FORCE_SYMBOL $11B0 Random
COMMENT_LINE $11B3 so that not all sprites are animated
COMMENT_LINE $11B3 in the same round...
COMMENT $11B3 maximum of 15
FORCE_NO_SYMBOL $11B3
COMMENT $11B5 at least one
COMMENT $11B6 store it to anim counter
COMMENT $11B8 dec loop2
FORCE_SYMBOL $11B8 loop2
COMMENT $11BA end check if finnished
FORCE_SYMBOL $11BC game_level
FORCE_NO_SYMBOL $11BE
COMMENT $11C3 store to status, this means no girl on screen
FORCE_SYMBOL $11C3 girl_status
FORCE_SYMBOL $11C5 girl_log_object
COMMENT $11C7 default girl_object = 0
COMMENT $11C9 if !=0 than it is the round_counter
FORCE_SYMBOL $11C9 girl_round_counter_reset
COMMENT_LINE $11CC lbeq     no_reinit_stuff
COMMENT $11CC fixed band list len
FORCE_NO_SYMBOL $11CC
COMMENT $11CF go one band list element further
FORCE_SYMBOL $11CF tmp_band_list
COMMENT $11D1 and store it
FORCE_SYMBOL $11D1 tmp_band_list
COMMENT $11D3 dec loop1
FORCE_SYMBOL $11D3 loop1
COMMENT $11D5 end check if finnished
COMMENT $11D9 we don't won't to reinit
FORCE_SYMBOL $11D9 tmp2
COMMENT $11DB the next stuff
COMMENT $11DF fly
FORCE_SYMBOL $11E1 NOT_AVAILABLE
COMMENT $11E3 if fly available , jump
COMMENT $11E5 store to status, this means no fly on screen
FORCE_SYMBOL $11E5 fly_status
COMMENT $11E7 and go on
COMMENT $11E9 otherwise use A as timer information HI
FORCE_SYMBOL $11E9 fly_timer_start
COMMENT $11EB clear LO
COMMENT $11ED reload
FORCE_SYMBOL $11ED fly_timer_start
COMMENT $11EF and set the used timer to it
FORCE_SYMBOL $11EF fly_timer
COMMENT $11F1 fly is waiting to be displayed
FORCE_SYMBOL $11F1 IS_WAITING
COMMENT $11F3 store it
FORCE_SYMBOL $11F3 fly_status
COMMENT $11F5 crocodile
FORCE_SYMBOL $11F7 NOT_AVAILABLE
COMMENT $11F9 if croco available , jump
COMMENT $11FB store to status, this means no croco on screen
FORCE_SYMBOL $11FB croco_status
COMMENT $11FD and go on
COMMENT $11FF otherwise use A as timer information HI
FORCE_SYMBOL $11FF croco_timer_start
COMMENT $1201 clear LO
COMMENT $1203 reload
FORCE_SYMBOL $1203 croco_timer_start
COMMENT $1205 and set the used timer to it
FORCE_SYMBOL $1205 croco_timer
COMMENT $1207 croco is waiting to be displayed
FORCE_SYMBOL $1207 IS_WAITING
COMMENT $1209 store it
FORCE_SYMBOL $1209 croco_status
COMMENT $120B reset LO of otter timer allways
COMMENT $120D otter
COMMENT $120F store to status, this means no otter on screen if zero
FORCE_SYMBOL $120F otter_status
COMMENT $1211 otherwise use A as timer information HI
FORCE_SYMBOL $1211 otter_timer_start
COMMENT_LINE $1213 rest of otter is initialized below in the 'always' section
COMMENT $1213 snake on log
COMMENT $1215 store to status, this means no snake on log
FORCE_SYMBOL $1215 snake_status
COMMENT $1217 if !=0 than it is the round_counter
FORCE_SYMBOL $1217 snake_round_counter_reset
COMMENT $1219 and go on
COMMENT_LINE $121B x, y pos will be set in sprite draw loop
COMMENT_LINE $121B speed will also be taken from host (log) object
COMMENT $121B and store it to object
FORCE_SYMBOL $121B snake_round_counter
COMMENT $121D reasonably small value
FORCE_NO_SYMBOL $121D
COMMENT $121F and store it to object
FORCE_SYMBOL $121F snake_anim_counter
COMMENT $1221 align snake to first object in band 3
COMMENT $1225 remember the object list position of that object
FORCE_NO_SYMBOL $1225
COMMENT $1228 get the object address
FORCE_NO_SYMBOL $1228
COMMENT $122A get the speed of the object
FORCE_NO_SYMBOL $122A
COMMENT $122C allways go from left to right on startup...
COMMENT $122D store it
FORCE_SYMBOL $122D snake_speed_start
COMMENT $122F add three to object list position for easier checking in
FORCE_NO_SYMBOL $122F
COMMENT_LINE $1231 draw object routine
COMMENT $1231 save the objectlist address...
FORCE_SYMBOL $1231 snake_log_object
COMMENT $1234 female
COMMENT $1236 store to status, this means no girl on screen
FORCE_SYMBOL $1236 girl_status
FORCE_SYMBOL $1238 girl_log_object
COMMENT $123A default girl_object = 0
COMMENT $123C if !=0 than it is the round_counter
FORCE_SYMBOL $123C girl_round_counter_reset
COMMENT $123E and go on
COMMENT_LINE $1240 x, y pos will be set in sprite draw loop
COMMENT_LINE $1240 speed will also be taken from host (log) object
COMMENT $1240 and store it to object
FORCE_SYMBOL $1240 girl_round_counter
COMMENT $1242 reasonable value for wait of first girl jump
FORCE_SYMBOL $1242 GIRL_SPRING_TIMER
FORCE_SYMBOL $1244 girl_anim_counter
COMMENT $1246 clear the girl zero vector
FORCE_SYMBOL $1246 girl_zero
COMMENT $1248 so that we jump out of the display loop
COMMENT $124A align girl to first object in band 4
COMMENT $124E remember the object list position of that object
FORCE_NO_SYMBOL $124E
COMMENT $1251 get the object address
FORCE_NO_SYMBOL $1251
COMMENT $1253 get the speed of the object
FORCE_NO_SYMBOL $1253
COMMENT $1255 store it
FORCE_SYMBOL $1255 girl_speed
COMMENT $1257 add three to object list position for easier checking in
FORCE_NO_SYMBOL $1257
COMMENT_LINE $1259 draw object routine
COMMENT $1259 save the objectlist address...
FORCE_SYMBOL $1259 girl_log_object
COMMENT $125C timer
FORCE_SYMBOL $125E did_rollOver
FORCE_NO_SYMBOL $1264
FORCE_NO_SYMBOL $1268
COMMENT $126A store time for level information
FORCE_SYMBOL $126A my_timer_start
COMMENT $126C and set low timer
FORCE_NO_SYMBOL $126C
COMMENT_LINE $126E this now has the same length as the middway
COMMENT_LINE $126E (if timer in level is set correctly that is)
COMMENT $126E store it
COMMENT $1270 turtle timer
COMMENT $1272 load the diving counter
FORCE_SYMBOL $1272 dive_timer_start
COMMENT $1274 and set the timer for diving HI
FORCE_SYMBOL $1274 dive_timer
COMMENT $1276 clear LO
COMMENT_LINE $1278 from here on again some 'allways init' stuff
COMMENT $1278 if !=0 than it is the round_counter
FORCE_SYMBOL $1278 girl_round_counter_reset
COMMENT $127A if !=0 than it is the round_counter
FORCE_SYMBOL $127A girl_round_counter
COMMENT $127E girl is waiting to be displayed
FORCE_SYMBOL $127E IS_WAITING
COMMENT $1280 store it
FORCE_SYMBOL $1280 girl_status
COMMENT $1282 if !=0 than it is the round_counter
FORCE_SYMBOL $1282 snake_round_counter_reset
COMMENT $1284 if !=0 than it is the round_counter
FORCE_SYMBOL $1284 snake_round_counter
COMMENT $1288 snake is waiting to be displayed
FORCE_SYMBOL $1288 IS_WAITING
COMMENT $128A store it
FORCE_SYMBOL $128A snake_status
COMMENT $128C reload the otter timer
FORCE_SYMBOL $128C otter_timer_start
COMMENT $128E and store it
FORCE_SYMBOL $128E otter_timer
COMMENT $1292 otter status now is 'is waiting'
FORCE_SYMBOL $1292 IS_WAITING
COMMENT $1294 store the status
FORCE_SYMBOL $1294 otter_status
COMMENT $1296 no bonus collected for this frog
FORCE_SYMBOL $1296 frog_bonus
COMMENT $1298 reset timer
FORCE_SYMBOL $1298 my_timer_start
COMMENT $129A store it
FORCE_SYMBOL $129A my_timer
COMMENT $129C needed for band information calculation
COMMENT $129E when frog 'rides' an object
FORCE_SYMBOL $129E tmp_band_offset
COMMENT_LINE $12A0 calculate skip count
FORCE_SYMBOL $12A0 skipCount
COMMENT $12A3 band 0
FORCE_SYMBOL $12A3 band_list
FORCE_SYMBOL $12AA skipCount
COMMENT $12AF band 1
FORCE_SYMBOL $12B6 skipCount
COMMENT $12BB band 2
FORCE_SYMBOL $12C2 skipCount
COMMENT_LINE $12C8 ***************************************************************************
FORCE_SYMBOL $12C8 playerCountOption
COMMENT $12CD last played player lives
FORCE_SYMBOL $12CD no_frogs2
FORCE_SYMBOL $12D3 checkHS2
FORCE_NO_SYMBOL $12D6
COMMENT $12DA clear the frog variables
FORCE_SYMBOL $12DA init_new_frog_vars
FORCE_SYMBOL $12DD DP_to_D0
COMMENT $12E0 is there a current piece playing?
FORCE_SYMBOL $12E0 currentMusic
COMMENT $12E3 if not
COMMENT $12E5 take that piece given and
FORCE_SYMBOL $12E5 inGameMusic1
COMMENT $12E8 play it now
FORCE_SYMBOL $12E8 currentMusic
FORCE_SYMBOL $12EB init_ym_sound
COMMENT $12F0 otherwise, store it as next possible piece
FORCE_SYMBOL $12F0 inGameMusic1
FORCE_SYMBOL $12F3 nextMusic
COMMENT_LINE $12F7 check if current player is also dead
COMMENT $12F7 last played player lives
FORCE_SYMBOL $12F7 no_frogs
COMMENT $12FC not speed optimized, but space!
FORCE_SYMBOL $12FC DP_to_C8
COMMENT_LINE $12FF do some extro
COMMENT $12FF clear A
FORCE_NO_SYMBOL $12FF
COMMENT $1302 and store in intensity
FORCE_SYMBOL $1302 game_over_intensity
COMMENT $1304 scale y
FORCE_SYMBOL $1304 game_over_scaley
COMMENT $1306 pos y
FORCE_SYMBOL $1306 game_over_ypos
FORCE_SYMBOL $130A checkHS2
FORCE_SYMBOL $130D DP_to_C8
FORCE_SYMBOL $1310 gameModeOption
FORCE_NO_SYMBOL $1313
FORCE_SYMBOL $1317 clearMyScore
FORCE_SYMBOL $131A reinit_level
COMMENT $131D clear the frog variables
FORCE_SYMBOL $131D continue_level
COMMENT_LINE $1320 correct stack, since we came here from a subroutine "jsr draw_objects"
FORCE_NO_SYMBOL $1320
FORCE_SYMBOL $1322 restart_game
COMMENT $1325 correct stack
FORCE_SYMBOL $1327 new_game
COMMENT_LINE $132A BRA new_game ; start a new game
COMMENT_LINE $132A ***************************************************************************
COMMENT $132A default
COMMENT $132A this piece of music
FORCE_SYMBOL $132A gameOverMusic
COMMENT $132D must be played
FORCE_SYMBOL $132D currentMusic
COMMENT $1330 NOW
FORCE_SYMBOL $1330 init_ym_sound
FORCE_SYMBOL $1333 RecalCounter
FORCE_NO_SYMBOL $1339
FORCE_SYMBOL $133D do_csa_sound_startup
FORCE_SYMBOL $1340 oneYMRound
COMMENT $1343 prepare drawing of game over string , load scaling stuff
FORCE_SYMBOL $1343 game_over_scaley
COMMENT $1346 poke it to ram location
FORCE_SYMBOL $1346 Vec_Text_HW
COMMENT $1349 load intensity
FORCE_SYMBOL $1349 game_over_intensity
FORCE_NO_SYMBOL $134C
FORCE_NO_SYMBOL $1350
COMMENT $1352 set intensity
FORCE_SYMBOL $1352 Intensity_a
COMMENT $1355 load position, to D (A,B) register
FORCE_SYMBOL $1355 game_over_ypos
COMMENT $1358 and the address of the string itself
FORCE_SYMBOL $1358 game_over_string
COMMENT $135B and draw it
FORCE_SYMBOL $135B Print_Str_d
COMMENT_LINE $135E calculate new appearence
COMMENT $135E increase intensity
FORCE_SYMBOL $135E game_over_intensity
COMMENT $1361 three per step
FORCE_NO_SYMBOL $1361
COMMENT $1363 store it
FORCE_SYMBOL $1363 game_over_intensity
COMMENT_LINE $1366 ANDA     #$1                          ; every second step increase
COMMENT $1366 every second step increase
FORCE_NO_SYMBOL $1366
COMMENT $1368 y scale of string
COMMENT $136A load it
FORCE_SYMBOL $136A game_over_scaley
COMMENT $136D increase it
FORCE_NO_SYMBOL $136D
COMMENT $136F save it
FORCE_SYMBOL $136F game_over_scaley
COMMENT $1372 now look at the position of the
FORCE_SYMBOL $1372 game_over_ypos
COMMENT $1375 string, first y pos
FORCE_NO_SYMBOL $1375
COMMENT $1377 increase it by two, but not to much
FORCE_NO_SYMBOL $1377
COMMENT $137B maximum at $70
FORCE_NO_SYMBOL $137B
COMMENT $137D store it
FORCE_SYMBOL $137D game_over_ypos
COMMENT $1380 likewise treat x pos load it
FORCE_SYMBOL $1380 game_over_xpos
COMMENT $1383 decrease it
FORCE_NO_SYMBOL $1383
COMMENT $1385 till -$70
COMMENT $1389 or use minimum of -$70
COMMENT $138B store it
FORCE_SYMBOL $138B game_over_xpos
COMMENT $138E now do the x scaling
FORCE_SYMBOL $138E game_over_scalex
COMMENT $1391 every round add 3
FORCE_NO_SYMBOL $1391
COMMENT $1393 and store it
FORCE_SYMBOL $1393 game_over_scalex
COMMENT $1396 do all this
FORCE_SYMBOL $1396 game_over_intensity
COMMENT $1399 till intensity is full
FORCE_NO_SYMBOL $1399
COMMENT $139B do the game loop
COMMENT $139D get button status once, since only
FORCE_SYMBOL $139D Read_Btns
COMMENT_LINE $13A0 differences are noticed
COMMENT $13A0 now correct x scaling
FORCE_SYMBOL $13A0 game_over_scalex
COMMENT $13A3 since it just rolled over, sub 3
FORCE_NO_SYMBOL $13A3
COMMENT $13A5 and store it
FORCE_SYMBOL $13A5 game_over_scalex
FORCE_SYMBOL $13A8 gameModeOption
FORCE_NO_SYMBOL $13AB
COMMENT $13AF load address of morph structure
FORCE_SYMBOL $13AF morph_countdown1
COMMENT $13B2 and initialize a new morphing
FORCE_SYMBOL $13B2 set_up_morphing
FORCE_NO_SYMBOL $13B5
FORCE_SYMBOL $13B9 do_csa_sound_startup
FORCE_SYMBOL $13BC oneYMRound
COMMENT $13BF and do it
FORCE_SYMBOL $13BF Intensity_5F
COMMENT $13C2 prepare drawing of game over string , load scaling stuff
FORCE_SYMBOL $13C2 game_over_scaley
COMMENT $13C5 poke it to ram location
FORCE_SYMBOL $13C5 Vec_Text_HW
COMMENT $13C8 load position, to D (A,B) register
FORCE_SYMBOL $13C8 game_over_ypos
COMMENT $13CB and the address of the string itself
FORCE_SYMBOL $13CB game_over_string
COMMENT $13CE and draw it
FORCE_SYMBOL $13CE Print_Str_d
COMMENT $13D1 and do it
FORCE_SYMBOL $13D1 Intensity_5F
COMMENT $13D4 back to zero
FORCE_NO_SYMBOL $13D4
COMMENT $13D6 /BLANK low and /ZERO low
FORCE_SYMBOL $13D6 VIA_cntl
FORCE_SYMBOL $13D8 gameModeOption
FORCE_NO_SYMBOL $13DB
COMMENT $13DF look of morphing is complete
FORCE_SYMBOL $13DF morph_status
COMMENT $13E2 don't morph anymore
COMMENT $13E4 does one morph step, changing of vectors
FORCE_SYMBOL $13E4 do_one_morph_step_16
COMMENT $13E7 scale for placing first point
COMMENT $13E9 move to time 1 lo, this means scaling
FORCE_SYMBOL $13E9 VIA_t1_cnt_lo
COMMENT $13EB y=0, X = '5'
COMMENT $13EE and move there
FORCE_SYMBOL $13EE Moveto_d
COMMENT $13F1 load the morph vector list to X
FORCE_SYMBOL $13F1 current_morph_vectorlist
COMMENT $13F4 scale it correctly
COMMENT $13F4 scale for placing first point
FORCE_SYMBOL $13F4 SCALE_FACTOR_VECTOR_MORPH
COMMENT $13F6 move to time 1 lo, this means scaling
FORCE_SYMBOL $13F6 VIA_t1_cnt_lo
COMMENT $13F8 and draw the vectorlist
FORCE_SYMBOL $13F8 Draw_VLc
COMMENT $13FB back to zero
FORCE_NO_SYMBOL $13FB
COMMENT $13FD /BLANK low and /ZERO low
FORCE_SYMBOL $13FD VIA_cntl
COMMENT $13FF load score text size
FORCE_SYMBOL $13FF LITTLE_TEXT_SIZE
COMMENT $1402 poke it to ram location
FORCE_SYMBOL $1402 Vec_Text_HW
COMMENT $1405 load position, to D (A,B) register
COMMENT $1408 get address of string
FORCE_SYMBOL $1408 continue_string
COMMENT $140B and draw it
FORCE_SYMBOL $140B Print_Str_d
COMMENT_LINE $140E morph_complete:
COMMENT $140E get button status
FORCE_SYMBOL $140E Read_Btns
COMMENT $1411 is a button pressed?
FORCE_NO_SYMBOL $1411
COMMENT $1413 no, than stay in game_over_loop2
COMMENT_LINE $1415 here continue...
COMMENT $1416 if music is playing, the length of the game over music determins the
FORCE_SYMBOL $1416 currentYLenCount
COMMENT $1419 length of the game over sign that is displayed
FORCE_NO_SYMBOL $1419
COMMENT $141E if music is not playing
FORCE_SYMBOL $141E musicOption
FORCE_SYMBOL $1423 RecalCounter
COMMENT $1426 than show it for 3 seconds
FORCE_NO_SYMBOL $1426
FORCE_NO_SYMBOL $142D
FORCE_SYMBOL $142F getOutToNewGame
COMMENT_LINE $1432 ***************************************************************************
COMMENT $1432 load offset of vector list draw
COMMENT $1438 A= SCALE, B = Timer IRQ check
COMMENT_LINE $143B the following is the position checking loop
COMMENT_LINE $143B waiting till an interrupt occurs
COMMENT $143B scale for sprite
COMMENT $143B move to time 1 lo, this means scaling
FORCE_SYMBOL $143B VIA_t1_cnt_lo
FORCE_NO_SYMBOL $143D
COMMENT $143F test the bit
FORCE_SYMBOL $143F VIA_int_flags
COMMENT $1441 if not zero, than loop
COMMENT $1443 Shift reg mode = 000 free disable, T1 PB7 enabled
FORCE_SYMBOL $1443 VIA_aux_cntl
COMMENT_LINE $1445 (x) length in bytes
COMMENT_LINE $1445 [x] duration in cycles
COMMENT_LINE $1445 do one "manual" starter line in advance
COMMENT $1445 get current coordinates
COMMENT $1447 (2) [4] Send Y to A/D
FORCE_SYMBOL $1447 VIA_port_a
COMMENT $1449 (2) [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $1449 VIA_port_b
COMMENT $144B [6] Disable mux
FORCE_SYMBOL $144B VIA_port_b
COMMENT $144D [6] Send X to A/D
FORCE_SYMBOL $144D VIA_port_a
FORCE_NO_SYMBOL $144F
COMMENT $1451 [4] enable timer 1
FORCE_SYMBOL $1451 VIA_t1_cnt_hi
COMMENT_LINE $1453 light on
COMMENT $1453 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $1453 VIA_cntl
COMMENT_LINE $1455 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $1455 [8] load Y coordinate to A, X coordinate to B
COMMENT $1457 [4] Send Y to A/D
FORCE_SYMBOL $1457 VIA_port_a
COMMENT $1459 [6]
FORCE_SYMBOL $1459 VIA_port_b
COMMENT $145B [2]
FORCE_NO_SYMBOL $145B
COMMENT_LINE $145D light off
COMMENT $145D [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $145D VIA_cntl
COMMENT $145F [6] Disable mux
FORCE_SYMBOL $145F VIA_port_b
FORCE_NO_SYMBOL $1461
COMMENT_LINE $1463 definition must come after the above, otherwise calculation would be false
COMMENT_LINE $1463 JUMP_INTO_26\?:
COMMENT_LINE $1463 ONE_LINE_DRAW
COMMENT_LINE $1463 JUMP_INTO_25\?:
COMMENT_LINE $1463 ONE_LINE_DRAW
COMMENT $1463 [6] Send X to A/D
FORCE_SYMBOL $1463 VIA_port_a
FORCE_NO_SYMBOL $1465
COMMENT $1467 [4] enable timer 1
FORCE_SYMBOL $1467 VIA_t1_cnt_hi
COMMENT_LINE $1469 light on
COMMENT $1469 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $1469 VIA_cntl
COMMENT_LINE $146B pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $146B [8] load Y coordinate to A, X coordinate to B
COMMENT $146D [4] Send Y to A/D
FORCE_SYMBOL $146D VIA_port_a
COMMENT $146F [6]
FORCE_SYMBOL $146F VIA_port_b
COMMENT $1471 [2]
FORCE_NO_SYMBOL $1471
COMMENT_LINE $1473 light off
COMMENT $1473 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $1473 VIA_cntl
COMMENT $1475 [6] Disable mux
FORCE_SYMBOL $1475 VIA_port_b
COMMENT $1477 [6] Send X to A/D
FORCE_SYMBOL $1477 VIA_port_a
FORCE_NO_SYMBOL $1479
COMMENT $147B [4] enable timer 1
FORCE_SYMBOL $147B VIA_t1_cnt_hi
COMMENT_LINE $147D light on
COMMENT $147D [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $147D VIA_cntl
COMMENT_LINE $147F pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $147F [8] load Y coordinate to A, X coordinate to B
COMMENT $1481 [4] Send Y to A/D
FORCE_SYMBOL $1481 VIA_port_a
COMMENT $1483 [6]
FORCE_SYMBOL $1483 VIA_port_b
COMMENT $1485 [2]
FORCE_NO_SYMBOL $1485
COMMENT_LINE $1487 light off
COMMENT $1487 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $1487 VIA_cntl
COMMENT $1489 [6] Disable mux
FORCE_SYMBOL $1489 VIA_port_b
COMMENT $148B [6] Send X to A/D
FORCE_SYMBOL $148B VIA_port_a
FORCE_NO_SYMBOL $148D
COMMENT $148F [4] enable timer 1
FORCE_SYMBOL $148F VIA_t1_cnt_hi
COMMENT_LINE $1491 light on
COMMENT $1491 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $1491 VIA_cntl
COMMENT_LINE $1493 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $1493 [8] load Y coordinate to A, X coordinate to B
COMMENT $1495 [4] Send Y to A/D
FORCE_SYMBOL $1495 VIA_port_a
COMMENT $1497 [6]
FORCE_SYMBOL $1497 VIA_port_b
COMMENT $1499 [2]
FORCE_NO_SYMBOL $1499
COMMENT_LINE $149B light off
COMMENT $149B [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $149B VIA_cntl
COMMENT $149D [6] Disable mux
FORCE_SYMBOL $149D VIA_port_b
COMMENT $149F [6] Send X to A/D
FORCE_SYMBOL $149F VIA_port_a
FORCE_NO_SYMBOL $14A1
COMMENT $14A3 [4] enable timer 1
FORCE_SYMBOL $14A3 VIA_t1_cnt_hi
COMMENT_LINE $14A5 light on
COMMENT $14A5 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $14A5 VIA_cntl
COMMENT_LINE $14A7 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $14A7 [8] load Y coordinate to A, X coordinate to B
COMMENT $14A9 [4] Send Y to A/D
FORCE_SYMBOL $14A9 VIA_port_a
COMMENT $14AB [6]
FORCE_SYMBOL $14AB VIA_port_b
COMMENT $14AD [2]
FORCE_NO_SYMBOL $14AD
COMMENT_LINE $14AF light off
COMMENT $14AF [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $14AF VIA_cntl
COMMENT $14B1 [6] Disable mux
FORCE_SYMBOL $14B1 VIA_port_b
COMMENT $14B3 [6] Send X to A/D
FORCE_SYMBOL $14B3 VIA_port_a
FORCE_NO_SYMBOL $14B5
COMMENT $14B7 [4] enable timer 1
FORCE_SYMBOL $14B7 VIA_t1_cnt_hi
COMMENT_LINE $14B9 light on
COMMENT $14B9 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $14B9 VIA_cntl
COMMENT_LINE $14BB pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $14BB [8] load Y coordinate to A, X coordinate to B
COMMENT $14BD [4] Send Y to A/D
FORCE_SYMBOL $14BD VIA_port_a
COMMENT $14BF [6]
FORCE_SYMBOL $14BF VIA_port_b
COMMENT $14C1 [2]
FORCE_NO_SYMBOL $14C1
COMMENT_LINE $14C3 light off
COMMENT $14C3 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $14C3 VIA_cntl
COMMENT $14C5 [6] Disable mux
FORCE_SYMBOL $14C5 VIA_port_b
COMMENT $14C7 [6] Send X to A/D
FORCE_SYMBOL $14C7 VIA_port_a
FORCE_NO_SYMBOL $14C9
COMMENT $14CB [4] enable timer 1
FORCE_SYMBOL $14CB VIA_t1_cnt_hi
COMMENT_LINE $14CD light on
COMMENT $14CD [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $14CD VIA_cntl
COMMENT_LINE $14CF pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $14CF [8] load Y coordinate to A, X coordinate to B
COMMENT $14D1 [4] Send Y to A/D
FORCE_SYMBOL $14D1 VIA_port_a
COMMENT $14D3 [6]
FORCE_SYMBOL $14D3 VIA_port_b
COMMENT $14D5 [2]
FORCE_NO_SYMBOL $14D5
COMMENT_LINE $14D7 light off
COMMENT $14D7 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $14D7 VIA_cntl
COMMENT $14D9 [6] Disable mux
FORCE_SYMBOL $14D9 VIA_port_b
COMMENT $14DB [6] Send X to A/D
FORCE_SYMBOL $14DB VIA_port_a
FORCE_NO_SYMBOL $14DD
COMMENT $14DF [4] enable timer 1
FORCE_SYMBOL $14DF VIA_t1_cnt_hi
COMMENT_LINE $14E1 light on
COMMENT $14E1 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $14E1 VIA_cntl
COMMENT_LINE $14E3 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $14E3 [8] load Y coordinate to A, X coordinate to B
COMMENT $14E5 [4] Send Y to A/D
FORCE_SYMBOL $14E5 VIA_port_a
COMMENT $14E7 [6]
FORCE_SYMBOL $14E7 VIA_port_b
COMMENT $14E9 [2]
FORCE_NO_SYMBOL $14E9
COMMENT_LINE $14EB light off
COMMENT $14EB [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $14EB VIA_cntl
COMMENT $14ED [6] Disable mux
FORCE_SYMBOL $14ED VIA_port_b
COMMENT $14EF [6] Send X to A/D
FORCE_SYMBOL $14EF VIA_port_a
FORCE_NO_SYMBOL $14F1
COMMENT $14F3 [4] enable timer 1
FORCE_SYMBOL $14F3 VIA_t1_cnt_hi
COMMENT_LINE $14F5 light on
COMMENT $14F5 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $14F5 VIA_cntl
COMMENT_LINE $14F7 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $14F7 [8] load Y coordinate to A, X coordinate to B
COMMENT $14F9 [4] Send Y to A/D
FORCE_SYMBOL $14F9 VIA_port_a
COMMENT $14FB [6]
FORCE_SYMBOL $14FB VIA_port_b
COMMENT $14FD [2]
FORCE_NO_SYMBOL $14FD
COMMENT_LINE $14FF light off
COMMENT $14FF [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $14FF VIA_cntl
COMMENT $1501 [6] Disable mux
FORCE_SYMBOL $1501 VIA_port_b
COMMENT $1503 [6] Send X to A/D
FORCE_SYMBOL $1503 VIA_port_a
FORCE_NO_SYMBOL $1505
COMMENT $1507 [4] enable timer 1
FORCE_SYMBOL $1507 VIA_t1_cnt_hi
COMMENT_LINE $1509 light on
COMMENT $1509 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $1509 VIA_cntl
COMMENT_LINE $150B pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $150B [8] load Y coordinate to A, X coordinate to B
COMMENT $150D [4] Send Y to A/D
FORCE_SYMBOL $150D VIA_port_a
COMMENT $150F [6]
FORCE_SYMBOL $150F VIA_port_b
COMMENT $1511 [2]
FORCE_NO_SYMBOL $1511
COMMENT_LINE $1513 light off
COMMENT $1513 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $1513 VIA_cntl
COMMENT $1515 [6] Disable mux
FORCE_SYMBOL $1515 VIA_port_b
COMMENT $1517 [6] Send X to A/D
FORCE_SYMBOL $1517 VIA_port_a
FORCE_NO_SYMBOL $1519
COMMENT $151B [4] enable timer 1
FORCE_SYMBOL $151B VIA_t1_cnt_hi
COMMENT_LINE $151D light on
COMMENT $151D [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $151D VIA_cntl
COMMENT_LINE $151F pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $151F [8] load Y coordinate to A, X coordinate to B
COMMENT $1521 [4] Send Y to A/D
FORCE_SYMBOL $1521 VIA_port_a
COMMENT $1523 [6]
FORCE_SYMBOL $1523 VIA_port_b
COMMENT $1525 [2]
FORCE_NO_SYMBOL $1525
COMMENT_LINE $1527 light off
COMMENT $1527 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $1527 VIA_cntl
COMMENT $1529 [6] Disable mux
FORCE_SYMBOL $1529 VIA_port_b
COMMENT $152B [6] Send X to A/D
FORCE_SYMBOL $152B VIA_port_a
FORCE_NO_SYMBOL $152D
COMMENT $152F [4] enable timer 1
FORCE_SYMBOL $152F VIA_t1_cnt_hi
COMMENT_LINE $1531 light on
COMMENT $1531 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $1531 VIA_cntl
COMMENT_LINE $1533 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $1533 [8] load Y coordinate to A, X coordinate to B
COMMENT $1535 [4] Send Y to A/D
FORCE_SYMBOL $1535 VIA_port_a
COMMENT $1537 [6]
FORCE_SYMBOL $1537 VIA_port_b
COMMENT $1539 [2]
FORCE_NO_SYMBOL $1539
COMMENT_LINE $153B light off
COMMENT $153B [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $153B VIA_cntl
COMMENT $153D [6] Disable mux
FORCE_SYMBOL $153D VIA_port_b
COMMENT $153F [6] Send X to A/D
FORCE_SYMBOL $153F VIA_port_a
FORCE_NO_SYMBOL $1541
COMMENT $1543 [4] enable timer 1
FORCE_SYMBOL $1543 VIA_t1_cnt_hi
COMMENT_LINE $1545 light on
COMMENT $1545 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $1545 VIA_cntl
COMMENT_LINE $1547 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $1547 [8] load Y coordinate to A, X coordinate to B
COMMENT $1549 [4] Send Y to A/D
FORCE_SYMBOL $1549 VIA_port_a
COMMENT $154B [6]
FORCE_SYMBOL $154B VIA_port_b
COMMENT $154D [2]
FORCE_NO_SYMBOL $154D
COMMENT_LINE $154F light off
COMMENT $154F [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $154F VIA_cntl
COMMENT $1551 [6] Disable mux
FORCE_SYMBOL $1551 VIA_port_b
COMMENT $1553 [6] Send X to A/D
FORCE_SYMBOL $1553 VIA_port_a
FORCE_NO_SYMBOL $1555
COMMENT $1557 [4] enable timer 1
FORCE_SYMBOL $1557 VIA_t1_cnt_hi
COMMENT_LINE $1559 light on
COMMENT $1559 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $1559 VIA_cntl
COMMENT_LINE $155B pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $155B [8] load Y coordinate to A, X coordinate to B
COMMENT $155D [4] Send Y to A/D
FORCE_SYMBOL $155D VIA_port_a
COMMENT $155F [6]
FORCE_SYMBOL $155F VIA_port_b
COMMENT $1561 [2]
FORCE_NO_SYMBOL $1561
COMMENT_LINE $1563 light off
COMMENT $1563 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $1563 VIA_cntl
COMMENT $1565 [6] Disable mux
FORCE_SYMBOL $1565 VIA_port_b
COMMENT $1567 [6] Send X to A/D
FORCE_SYMBOL $1567 VIA_port_a
FORCE_NO_SYMBOL $1569
COMMENT $156B [4] enable timer 1
FORCE_SYMBOL $156B VIA_t1_cnt_hi
COMMENT_LINE $156D light on
COMMENT $156D [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $156D VIA_cntl
COMMENT_LINE $156F pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $156F [8] load Y coordinate to A, X coordinate to B
COMMENT $1571 [4] Send Y to A/D
FORCE_SYMBOL $1571 VIA_port_a
COMMENT $1573 [6]
FORCE_SYMBOL $1573 VIA_port_b
COMMENT $1575 [2]
FORCE_NO_SYMBOL $1575
COMMENT_LINE $1577 light off
COMMENT $1577 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $1577 VIA_cntl
COMMENT $1579 [6] Disable mux
FORCE_SYMBOL $1579 VIA_port_b
COMMENT $157B [6] Send X to A/D
FORCE_SYMBOL $157B VIA_port_a
FORCE_NO_SYMBOL $157D
COMMENT $157F [4] enable timer 1
FORCE_SYMBOL $157F VIA_t1_cnt_hi
COMMENT_LINE $1581 light on
COMMENT $1581 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $1581 VIA_cntl
COMMENT_LINE $1583 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $1583 [8] load Y coordinate to A, X coordinate to B
COMMENT $1585 [4] Send Y to A/D
FORCE_SYMBOL $1585 VIA_port_a
COMMENT $1587 [6]
FORCE_SYMBOL $1587 VIA_port_b
COMMENT $1589 [2]
FORCE_NO_SYMBOL $1589
COMMENT_LINE $158B light off
COMMENT $158B [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $158B VIA_cntl
COMMENT $158D [6] Disable mux
FORCE_SYMBOL $158D VIA_port_b
COMMENT $158F [6] Send X to A/D
FORCE_SYMBOL $158F VIA_port_a
FORCE_NO_SYMBOL $1591
COMMENT $1593 [4] enable timer 1
FORCE_SYMBOL $1593 VIA_t1_cnt_hi
COMMENT_LINE $1595 light on
COMMENT $1595 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $1595 VIA_cntl
COMMENT_LINE $1597 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $1597 [8] load Y coordinate to A, X coordinate to B
COMMENT $1599 [4] Send Y to A/D
FORCE_SYMBOL $1599 VIA_port_a
COMMENT $159B [6]
FORCE_SYMBOL $159B VIA_port_b
COMMENT $159D [2]
FORCE_NO_SYMBOL $159D
COMMENT_LINE $159F light off
COMMENT $159F [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $159F VIA_cntl
COMMENT $15A1 [6] Disable mux
FORCE_SYMBOL $15A1 VIA_port_b
COMMENT $15A3 [6] Send X to A/D
FORCE_SYMBOL $15A3 VIA_port_a
FORCE_NO_SYMBOL $15A5
COMMENT $15A7 [4] enable timer 1
FORCE_SYMBOL $15A7 VIA_t1_cnt_hi
COMMENT_LINE $15A9 light on
COMMENT $15A9 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $15A9 VIA_cntl
COMMENT_LINE $15AB pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $15AB [8] load Y coordinate to A, X coordinate to B
COMMENT $15AD [4] Send Y to A/D
FORCE_SYMBOL $15AD VIA_port_a
COMMENT $15AF [6]
FORCE_SYMBOL $15AF VIA_port_b
COMMENT $15B1 [2]
FORCE_NO_SYMBOL $15B1
COMMENT_LINE $15B3 light off
COMMENT $15B3 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $15B3 VIA_cntl
COMMENT $15B5 [6] Disable mux
FORCE_SYMBOL $15B5 VIA_port_b
COMMENT $15B7 [6] Send X to A/D
FORCE_SYMBOL $15B7 VIA_port_a
FORCE_NO_SYMBOL $15B9
COMMENT $15BB [4] enable timer 1
FORCE_SYMBOL $15BB VIA_t1_cnt_hi
COMMENT_LINE $15BD light on
COMMENT $15BD [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $15BD VIA_cntl
COMMENT_LINE $15BF pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $15BF [8] load Y coordinate to A, X coordinate to B
COMMENT $15C1 [4] Send Y to A/D
FORCE_SYMBOL $15C1 VIA_port_a
COMMENT $15C3 [6]
FORCE_SYMBOL $15C3 VIA_port_b
COMMENT $15C5 [2]
FORCE_NO_SYMBOL $15C5
COMMENT_LINE $15C7 light off
COMMENT $15C7 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $15C7 VIA_cntl
COMMENT $15C9 [6] Disable mux
FORCE_SYMBOL $15C9 VIA_port_b
COMMENT $15CB [6] Send X to A/D
FORCE_SYMBOL $15CB VIA_port_a
FORCE_NO_SYMBOL $15CD
COMMENT $15CF [4] enable timer 1
FORCE_SYMBOL $15CF VIA_t1_cnt_hi
COMMENT_LINE $15D1 light on
COMMENT $15D1 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $15D1 VIA_cntl
COMMENT_LINE $15D3 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $15D3 [8] load Y coordinate to A, X coordinate to B
COMMENT $15D5 [4] Send Y to A/D
FORCE_SYMBOL $15D5 VIA_port_a
COMMENT $15D7 [6]
FORCE_SYMBOL $15D7 VIA_port_b
COMMENT $15D9 [2]
FORCE_NO_SYMBOL $15D9
COMMENT_LINE $15DB light off
COMMENT $15DB [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $15DB VIA_cntl
COMMENT $15DD [6] Disable mux
FORCE_SYMBOL $15DD VIA_port_b
COMMENT $15DF [6] Send X to A/D
FORCE_SYMBOL $15DF VIA_port_a
FORCE_NO_SYMBOL $15E1
COMMENT $15E3 [4] enable timer 1
FORCE_SYMBOL $15E3 VIA_t1_cnt_hi
COMMENT_LINE $15E5 light on
COMMENT $15E5 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $15E5 VIA_cntl
COMMENT_LINE $15E7 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $15E7 [8] load Y coordinate to A, X coordinate to B
COMMENT $15E9 [4] Send Y to A/D
FORCE_SYMBOL $15E9 VIA_port_a
COMMENT $15EB [6]
FORCE_SYMBOL $15EB VIA_port_b
COMMENT $15ED [2]
FORCE_NO_SYMBOL $15ED
COMMENT_LINE $15EF light off
COMMENT $15EF [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $15EF VIA_cntl
COMMENT $15F1 [6] Disable mux
FORCE_SYMBOL $15F1 VIA_port_b
COMMENT $15F3 [6] Send X to A/D
FORCE_SYMBOL $15F3 VIA_port_a
FORCE_NO_SYMBOL $15F5
COMMENT $15F7 [4] enable timer 1
FORCE_SYMBOL $15F7 VIA_t1_cnt_hi
COMMENT_LINE $15F9 light on
COMMENT $15F9 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $15F9 VIA_cntl
COMMENT_LINE $15FB pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $15FB [8] load Y coordinate to A, X coordinate to B
COMMENT $15FD [4] Send Y to A/D
FORCE_SYMBOL $15FD VIA_port_a
COMMENT $15FF [6]
FORCE_SYMBOL $15FF VIA_port_b
COMMENT $1601 [2]
FORCE_NO_SYMBOL $1601
COMMENT_LINE $1603 light off
COMMENT $1603 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $1603 VIA_cntl
COMMENT $1605 [6] Disable mux
FORCE_SYMBOL $1605 VIA_port_b
COMMENT $1607 [6] Send X to A/D
FORCE_SYMBOL $1607 VIA_port_a
FORCE_NO_SYMBOL $1609
COMMENT $160B [4] enable timer 1
FORCE_SYMBOL $160B VIA_t1_cnt_hi
COMMENT_LINE $160D light on
COMMENT $160D [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $160D VIA_cntl
COMMENT_LINE $160F pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $160F [8] load Y coordinate to A, X coordinate to B
COMMENT $1611 [4] Send Y to A/D
FORCE_SYMBOL $1611 VIA_port_a
COMMENT $1613 [6]
FORCE_SYMBOL $1613 VIA_port_b
COMMENT $1615 [2]
FORCE_NO_SYMBOL $1615
COMMENT_LINE $1617 light off
COMMENT $1617 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $1617 VIA_cntl
COMMENT $1619 [6] Disable mux
FORCE_SYMBOL $1619 VIA_port_b
COMMENT $161B [6] Send X to A/D
FORCE_SYMBOL $161B VIA_port_a
FORCE_NO_SYMBOL $161D
COMMENT $161F [4] enable timer 1
FORCE_SYMBOL $161F VIA_t1_cnt_hi
COMMENT_LINE $1621 light on
COMMENT $1621 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $1621 VIA_cntl
COMMENT_LINE $1623 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $1623 [8] load Y coordinate to A, X coordinate to B
COMMENT $1625 [4] Send Y to A/D
FORCE_SYMBOL $1625 VIA_port_a
COMMENT $1627 [6]
FORCE_SYMBOL $1627 VIA_port_b
COMMENT $1629 [2]
FORCE_NO_SYMBOL $1629
COMMENT_LINE $162B light off
COMMENT $162B [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $162B VIA_cntl
COMMENT $162D [6] Disable mux
FORCE_SYMBOL $162D VIA_port_b
COMMENT $162F [6] Send X to A/D
FORCE_SYMBOL $162F VIA_port_a
COMMENT_LINE $1631 light on
FORCE_NO_SYMBOL $1631
COMMENT $1633 [4] enable timer 1
FORCE_SYMBOL $1633 VIA_t1_cnt_hi
COMMENT $1635 ZERO disabled, and BLANK disabled
FORCE_SYMBOL $1635 VIA_cntl
COMMENT_LINE $1637 light off
COMMENT_LINE $1637 there must the above mentioned "switch the light off"
COMMENT_LINE $1637 after 22 cycles still be manually done
COMMENT_LINE $1637 (but the 22 cycles might be reused otherwise!)
COMMENT_LINE $1640 ***************************************************************************
FORCE_SYMBOL $1640 sfx_doframe_intern_3
COMMENT_LINE $1643 copy all shadows
COMMENT $1643 number of regs to copy (+1)
FORCE_NO_SYMBOL $1643
COMMENT $1645 music players write here
FORCE_SYMBOL $1645 Vec_Music_Work
COMMENT $1648 shadow of actual PSG
FORCE_SYMBOL $1648 Vec_Snd_Shadow
COMMENT_LINE $1651 no put to psg
COMMENT $1651 ensure shadow has copy
COMMENT_LINE $1653 a = register
COMMENT_LINE $1653 b = value
COMMENT $1653 store register select byte
FORCE_SYMBOL $1653 VIA_port_a
COMMENT $1655 sound BDIR on, BC1 on, mux off _ LATCH
FORCE_NO_SYMBOL $1655
FORCE_SYMBOL $1657 VIA_port_b
COMMENT $1659 sound BDIR off, BC1 off, mux off - INACTIVE
FORCE_NO_SYMBOL $1659
FORCE_SYMBOL $165B VIA_port_b
COMMENT $165D read sound chip status (?)
FORCE_SYMBOL $165D VIA_port_a
COMMENT $165F store data byte
FORCE_SYMBOL $165F VIA_port_a
COMMENT $1661 sound BDIR on, BC1 off, mux off - WRITE
FORCE_NO_SYMBOL $1661
FORCE_SYMBOL $1663 VIA_port_b
COMMENT $1665 sound BDIR off, BC1 off, mux off - INACTIVE
FORCE_NO_SYMBOL $1665
FORCE_SYMBOL $1667 VIA_port_b
FORCE_SYMBOL $166C currentYLenCount
FORCE_SYMBOL $1671 currentYLenCount
FORCE_SYMBOL $1676 nextMusic
FORCE_SYMBOL $1679 currentMusic
FORCE_SYMBOL $167C init_ym_sound
COMMENT_LINE $1680 ***************************************************************************
COMMENT_LINE $1680 destroys D X U
COMMENT_LINE $1680 play the given SFX, but only if nothing else is played (regardless of prio)
FORCE_SYMBOL $1680 currentSFX
COMMENT $1685 load current sfx
FORCE_SYMBOL $1685 currentSFX
COMMENT $1688 if none playing - jump
COMMENT $168A load current prio to a
FORCE_NO_SYMBOL $168A
COMMENT $168C compare to prio of new sfx
FORCE_NO_SYMBOL $168C
COMMENT $168E if old prio is higher than go out
COMMENT $1690 so we store it as current sfx
FORCE_SYMBOL $1690 currentSFX
COMMENT $1693 and the actual sfx data store to our sfx player vars
FORCE_NO_SYMBOL $1693
FORCE_SYMBOL $1695 sfx_pointer_3
COMMENT $1698 tell the player, that it should play!
FORCE_NO_SYMBOL $1698
FORCE_SYMBOL $169A sfx_status_3
COMMENT_LINE $169E ***************************************************************************
FORCE_NO_SYMBOL $16A0
COMMENT $16A2 blank low and zero low
FORCE_SYMBOL $16A2 VIA_cntl
FORCE_NO_SYMBOL $16A4
COMMENT $16A6 recal counter, about 21 Minutes befor roll over
FORCE_SYMBOL $16A6 RecalCounter
FORCE_NO_SYMBOL $16A9
FORCE_SYMBOL $16AB RecalCounter
COMMENT $16AE Wait for timer t2
FORCE_SYMBOL $16AE VIA_int_flags
COMMENT $16B2 Store refresh value
FORCE_NO_SYMBOL $16B2
COMMENT $16B5 into timer t2
FORCE_SYMBOL $16B5 VIA_t2_lo
COMMENT_LINE $16B8 ***************************************************************************
FORCE_SYMBOL $16B8 RecalCounterLow
FORCE_SYMBOL $16BB my_random
FORCE_SYMBOL $16BE my_random
COMMENT_LINE $16C2 ***************************************************************************
COMMENT $16C2 is some kind of attract mode?
FORCE_SYMBOL $16C2 isAttractMode
COMMENT $16C7 if yes, do not query joystick, but look at our recorded data
FORCE_SYMBOL $16C7 attractMovePointer
COMMENT $16CA default > nothing moved
FORCE_NO_SYMBOL $16CA
FORCE_SYMBOL $16CD Vec_Joy_1_X
FORCE_SYMBOL $16D0 last_joy_x
COMMENT $16D5 14 bit of our recorded data is the time stamp
FORCE_NO_SYMBOL $16D5
FORCE_SYMBOL $16D7 RecalCounter
COMMENT $16DF reload data, and check the first 2 bits
FORCE_SYMBOL $16DF attractMovePointer
COMMENT $16E4 if msb is set, than joystick moved in X
FORCE_NO_SYMBOL $16E4
COMMENT $16E6 jump if else (than y)
COMMENT $16EA if MSB -1 is set, than movement as positive (negative - else)
FORCE_NO_SYMBOL $16EA
COMMENT $16EE store it to our joystick result var
FORCE_SYMBOL $16EE Vec_Joy_1_X
COMMENT $16F3 negative movement, store...
FORCE_SYMBOL $16F3 Vec_Joy_1_X
COMMENT $16F6 and out
COMMENT $16F8 was an Y movement, reload data
COMMENT $16FA if MSB -1 is set, than movement as positive (negative - else)
FORCE_NO_SYMBOL $16FA
COMMENT $16FE store it to our joystick result var
FORCE_SYMBOL $16FE Vec_Joy_1_Y
COMMENT $1701 and out
COMMENT $1703 negative movement, store...
FORCE_SYMBOL $1703 Vec_Joy_1_Y
COMMENT $1706 and out
COMMENT_LINE $1708 joytick pot readings are also switched by the (de)muliplexer (analog section)
COMMENT_LINE $1708 with joystick pots the switching is not done in regard of the output (in opposite to "input" switching of integrator logic)
COMMENT_LINE $1708 but with regard to input
COMMENT_LINE $1708 thus, the SEL part of the mux now selects which joystick pot is selected and send to the compare logic.
COMMENT_LINE $1708 mux sel:
COMMENT_LINE $1708 xxxx x00x: port 0 horizontal
COMMENT_LINE $1708 xxxx x01x: port 0 vertical
COMMENT_LINE $1708 xxxx x10x: port 1 horizontal
COMMENT_LINE $1708 xxxx x11x: port 1 vertical
COMMENT_LINE $1708 the result of the pot reading is compared to the
COMMENT_LINE $1708 value present in the dac and according to the comparisson the compare flag of VIA (bit 5 of port b) is set.
COMMENT_LINE $1708 (compare bit is = if contents of dac was "smaller" (signed) than the "pot" read)
COMMENT $1708 mux disabled, mux sel = 01 (vertical pot port 0)
FORCE_NO_SYMBOL $1708
FORCE_SYMBOL $170B VIA_port_b
COMMENT $170D mux enabled, mux sel = 01
FORCE_SYMBOL $170D VIA_port_b
COMMENT $170F a wait loop 32 times a loop (waiting for the pots to "read" values, and feed to compare logic)
FORCE_SYMBOL $170F DIGITAL_JOYTICK_LOOP_MIN
COMMENT $1711 ...
COMMENT $1712 wait...
COMMENT $1714 disable mux
FORCE_SYMBOL $1714 VIA_port_b
COMMENT $1716 load a with test value (positive y)
FORCE_NO_SYMBOL $1716
COMMENT $1719 test value to DAC
FORCE_SYMBOL $1719 VIA_port_a
COMMENT $171B default result value y was pushed UP
FORCE_NO_SYMBOL $171B
COMMENT $171D test comparator
FORCE_SYMBOL $171D VIA_port_b
COMMENT $171F if comparator cleared - joystick was moved up
COMMENT $1721 "load" with negative value
FORCE_SYMBOL $1721 VIA_port_a
COMMENT $1723 also switch the possible result in A
COMMENT $1724 test comparator again
FORCE_SYMBOL $1724 VIA_port_b
COMMENT $1726 if cleared the joystick was moved down
COMMENT $1728 if still not cleared, we clear a as the final vertical test result (no move at all)
COMMENT $1729 remember the result in "our" joystick data
FORCE_SYMBOL $1729 Vec_Joy_1_Y
FORCE_SYMBOL $172E RecalCounterLow
FORCE_SYMBOL $1731 my_random
FORCE_SYMBOL $1734 my_random
COMMENT $1737 if y moved I assume no X move
COMMENT_LINE $1739 now the same for horizontal
COMMENT $1739 mux disabled, mux sel = 00 (horizontal pot port 0)
FORCE_NO_SYMBOL $1739
FORCE_SYMBOL $173C VIA_port_b
COMMENT $173E mux enabled, mux sel = 01
FORCE_SYMBOL $173E VIA_port_b
COMMENT $1740 a wait loop 32 times a loop (waiting for the pots to "read" values, and feed to compare logic)
FORCE_SYMBOL $1740 DIGITAL_JOYTICK_LOOP_MIN
COMMENT $1742 ...
COMMENT $1743 wait...
COMMENT $1745 disable mux
FORCE_SYMBOL $1745 VIA_port_b
COMMENT $1747 load a with test value (positive x)
FORCE_NO_SYMBOL $1747
COMMENT $174A test value to DAC
FORCE_SYMBOL $174A VIA_port_a
COMMENT $174C default result value x was pushed right
FORCE_NO_SYMBOL $174C
COMMENT $174E test comparator
FORCE_SYMBOL $174E VIA_port_b
COMMENT $1750 if comparator cleared - joystick was moved right
COMMENT $1752 "load" with negative value
FORCE_SYMBOL $1752 VIA_port_a
COMMENT $1754 also switch the possible result in A
COMMENT $1755 test comparator again
FORCE_SYMBOL $1755 VIA_port_b
COMMENT $1757 if cleared the joystick was moved left
COMMENT $1759 if still not cleared, we clear a as the final vertical test result (no move at all)
COMMENT $175A remember the result in "our" joystick data
FORCE_SYMBOL $175A Vec_Joy_1_X
FORCE_SYMBOL $175F RecalCounterLow
FORCE_SYMBOL $1762 my_random
FORCE_SYMBOL $1765 my_random
COMMENT_LINE $1769 ***************************************************************************
COMMENT_LINE $1769 optimzed, tweaked not perfect... 'MOVE TO D' makro
COMMENT_LINE $1769 Reset0Ref
COMMENT_LINE $1769 NOT DONE:
COMMENT_LINE $1769 what should be done:
COMMENT_LINE $1769 s = $ff / max(abs(a),abs(b))
COMMENT_LINE $1769 a = a * s
COMMENT_LINE $1769 b = b * s
COMMENT_LINE $1769 scaling = scaling / s
COMMENT_LINE $1769 that would give the most efficient positioning
COMMENT_LINE $1769 bother it takes more time to calculate the above,
COMMENT_LINE $1769 than it saves
COMMENT_LINE $1769 with every positioning via this routine now,
COMMENT_LINE $1769 it takes SCALE_FACTOR_GAME + const (of another 100+) cycles
COMMENT_LINE $1769 to do one simple positioning!!!
COMMENT_LINE $1769 that is probably about 300 cycles per positioning
COMMENT_LINE $1769 this is done about 30-40 times per round
COMMENT_LINE $1769 alone the positioning takes thus about over 10000 cycles
COMMENT_LINE $1769 and we haven't drawn a single line yet!!!
COMMENT $1769 Store Y in D/A register
FORCE_SYMBOL $1769 VIA_port_a
COMMENT $176B Blank low, zero high?
FORCE_NO_SYMBOL $176B
FORCE_SYMBOL $176D VIA_cntl
COMMENT $1770 Enable mux
FORCE_SYMBOL $1770 VIA_port_b
COMMENT $1772 Clear shift regigster
FORCE_SYMBOL $1772 VIA_shift_reg
COMMENT $1774 Disable mux
FORCE_SYMBOL $1774 VIA_port_b
COMMENT $1776 Store X in D/A register
FORCE_SYMBOL $1776 VIA_port_a
COMMENT $1778 enable timer
FORCE_SYMBOL $1778 VIA_t1_cnt_hi
FORCE_NO_SYMBOL $177A
FORCE_SYMBOL $177C VIA_int_flags
COMMENT_LINE $1781 ***************************************************************************
COMMENT $1781 no music is playing ->0
FORCE_SYMBOL $1781 Vec_Music_Flag
COMMENT $1784 shadow regs
FORCE_SYMBOL $1784 Init_Music_Buf
COMMENT_LINE $1787 in the next do sound call
COMMENT_LINE $1787 all regs are cleared automatically
COMMENT $1787 (MAKRO) the 'Init_Music_chk' expects this
FORCE_NO_SYMBOL $1787
COMMENT $178B get active music
FORCE_SYMBOL $178B music_active
COMMENT $178D and init new notes
FORCE_SYMBOL $178D Init_Music_chk
FORCE_SYMBOL $1790 DP_to_D0
COMMENT $1793 ROM function that does the sound playing
FORCE_SYMBOL $1793 Do_Sound
COMMENT_LINE $1796 rts
COMMENT_LINE $1796 ***************************************************************************
COMMENT_LINE $1796 smallCalibration
COMMENT_LINE $1796 RESET_INT
COMMENT_LINE $1796 _ZERO_VECTOR_BEAM
COMMENT_LINE $1796 rts
COMMENT_LINE $1796 ***************************************************************************
COMMENT_LINE $1796 rotation coords, actually X = -sin, Y = cos
COMMENT_LINE $1796 BIOS also has a sin table, but that one is one 1/4 of a full wave
COMMENT_LINE $1796 and it is called so weirdly (Rise/Run)
COMMENT_LINE $1796 this is straight forward and I don't have to check in what quarter I am or whether I am cos or sin...
COMMENT_LINE $1796 thank god we have the space :-)
COMMENT $1796 draw to y, x
COMMENT $1798 draw to y, x
COMMENT $179A draw to y, x
COMMENT $179C draw to y, x
COMMENT $179E draw to y, x
COMMENT $17A0 draw to y, x
COMMENT $17A2 draw to y, x
COMMENT $17A4 draw to y, x
COMMENT $17A6 draw to y, x
COMMENT $17A8 draw to y, x
COMMENT $17AA draw to y, x
COMMENT $17AC draw to y, x
COMMENT $17AE draw to y, x
COMMENT $17B0 draw to y, x
COMMENT $17B2 draw to y, x
COMMENT $17B4 draw to y, x
COMMENT $17B6 draw to y, x
COMMENT $17B8 draw to y, x
COMMENT $17BA draw to y, x
COMMENT $17BC draw to y, x
COMMENT $17BE draw to y, x
COMMENT $17C0 draw to y, x
COMMENT $17C2 draw to y, x
COMMENT $17C4 draw to y, x
COMMENT $17C6 draw to y, x
COMMENT $17C8 draw to y, x
COMMENT $17CA draw to y, x
COMMENT $17CC draw to y, x
COMMENT $17CE draw to y, x
COMMENT $17D0 draw to y, x
COMMENT $17D2 draw to y, x
COMMENT $17D4 draw to y, x
COMMENT $17D6 draw to y, x
COMMENT $17D8 draw to y, x
COMMENT $17DA draw to y, x
COMMENT $17DC draw to y, x
COMMENT $17DE draw to y, x
COMMENT $17E0 draw to y, x
COMMENT $17E2 draw to y, x
COMMENT $17E4 draw to y, x
COMMENT $17E6 draw to y, x
COMMENT $17E8 draw to y, x
COMMENT $17EA draw to y, x
COMMENT $17EC draw to y, x
COMMENT $17EE draw to y, x
COMMENT $17F0 draw to y, x
COMMENT $17F2 draw to y, x
COMMENT $17F4 draw to y, x
COMMENT $17F6 draw to y, x
COMMENT $17F8 draw to y, x
COMMENT $17FA draw to y, x
COMMENT $17FC draw to y, x
COMMENT $17FE draw to y, x
COMMENT $1800 draw to y, x
COMMENT $1802 draw to y, x
COMMENT $1804 draw to y, x
COMMENT $1806 draw to y, x
COMMENT $1808 draw to y, x
COMMENT $180A draw to y, x
COMMENT $180C draw to y, x
COMMENT $180E draw to y, x
COMMENT_LINE $1810 ***************************************************************************
COMMENT_LINE $1810 twinklers = current_brightness+1 ;
COMMENT_LINE $1810 struct   Twinkle
COMMENT_LINE $1810 ds       TWINKEL_Y,1                       ;
COMMENT_LINE $1810 ds       TWINKEL_X,1                       ;
COMMENT_LINE $1810 ds       TWINKLE_ANGLE,1                      ;
COMMENT_LINE $1810 ds       TWINKLE_BRIGHTNESS,1                 ;
COMMENT_LINE $1810 ds       TWINKLE_LENGTH,1                 ; scale
COMMENT_LINE $1810 ds       TWINKLE_COUNTER,1                 ;
COMMENT_LINE $1810 end struct
COMMENT_LINE $1810 d0 needed
COMMENT_LINE $1810 in X twinkler
COMMENT_LINE $1810 moves to position, draws an arm, negates "arm" and moves back to pos
COMMENT_LINE $1810 that three times for a full three armed "twinkler"
COMMENT_LINE $1810 ***************************************************************************
COMMENT $1810 still twinkling?
FORCE_SYMBOL $1810 TWINKLE_COUNTER
COMMENT $1812 no - than we are waiting - jump to done
COMMENT $1814 remember counter (for easier acces to S, one might argue that also saves one cycle - hahaha, wasted by puls, push
FORCE_NO_SYMBOL $1816
FORCE_SYMBOL $181A coords_list
FORCE_SYMBOL $181E Reset0Ref
COMMENT $1821 scale to do positioning
FORCE_SYMBOL $1821 SCALE_FACTOR_GAME
COMMENT $1823 move to time 1 lo, this means scaling
FORCE_SYMBOL $1823 VIA_t1_cnt_lo
FORCE_SYMBOL $1825 TWINKEL_Y
FORCE_SYMBOL $1827 Moveto_d
COMMENT $182A brightness and scale is increased decreased with sin (from coordinates)
FORCE_SYMBOL $182A TWINKLE_BRIGHTNESS
COMMENT $182C only acces sin of coords
FORCE_NO_SYMBOL $182C
COMMENT $1834 scale is only on 16ths of sine value
COMMENT $1835 and set scale
COMMENT $1835 move to time 1 lo, this means scaling
FORCE_SYMBOL $1835 VIA_t1_cnt_lo
COMMENT $1837 only acces sin of coords
FORCE_NO_SYMBOL $1837
COMMENT_LINE $183B _INTENSITY_A ; and set intensity
FORCE_SYMBOL $183B Intensity_a
COMMENT_LINE $183E first "arm"
FORCE_NO_SYMBOL $183E
FORCE_SYMBOL $1842 Draw_Line_d
COMMENT $1845 drawLine_d add 2
COMMENT_LINE $1847 go back to center
FORCE_NO_SYMBOL $1847
FORCE_SYMBOL $184D Moveto_d
COMMENT_LINE $1850 second "arm"
FORCE_NO_SYMBOL $1850
COMMENT $1852 one third
FORCE_NO_SYMBOL $1852
FORCE_NO_SYMBOL $1854
FORCE_NO_SYMBOL $1858
FORCE_SYMBOL $185E Draw_Line_d
COMMENT $1861 drawLine_d add 2
COMMENT_LINE $1863 go back to center
FORCE_SYMBOL $1867 Moveto_d
COMMENT_LINE $186A third "arm"
FORCE_NO_SYMBOL $186A
COMMENT $186C one third
FORCE_NO_SYMBOL $186C
FORCE_NO_SYMBOL $186E
FORCE_NO_SYMBOL $1872
FORCE_SYMBOL $1876 Draw_Line_d
COMMENT $1879 drawLine_d add 2
FORCE_SYMBOL $187B TWINKLE_LENGTH
FORCE_SYMBOL $187D TWINKLE_BRIGHTNESS
COMMENT $187F counter decreased twice, since positions are word pointers
FORCE_SYMBOL $187F TWINKLE_COUNTER
FORCE_SYMBOL $1881 TWINKLE_COUNTER
COMMENT_LINE $1886 ***************************************************************************
COMMENT_LINE $1886 in x twinler struct
COMMENT $1886 should we init this twinkler?
FORCE_SYMBOL $1886 TWINKLE_COUNTER
COMMENT $1888 no than jump
COMMENT $188A wait for next init over?
FORCE_SYMBOL $188A TWINKLE_WAIT
COMMENT $188C no - jump
COMMENT_LINE $188E reset all values
FORCE_NO_SYMBOL $188E
FORCE_SYMBOL $1891 TWINKEL_Y
COMMENT $1893 120 to brightness and scale, pointer to "sine" data actually
FORCE_NO_SYMBOL $1893
FORCE_SYMBOL $1896 TWINKLE_ANGLE
FORCE_SYMBOL $1898 TWINKLE_LENGTH
COMMENT $189A one twinkle round is also 120, since 120 = 360°, that is one full circle of our "arms"
FORCE_SYMBOL $189A TWINKLE_COUNTER
COMMENT $189C find the position of our twinkle in the position table
FORCE_SYMBOL $189C Random
COMMENT $189F 0 - 31
FORCE_NO_SYMBOL $189F
COMMENT $18A1 *2
FORCE_SYMBOL $18A2 twinklerpositions
FORCE_SYMBOL $18A7 TWINKEL_Y
FORCE_SYMBOL $18A9 TWINKEL_X
COMMENT $18AB when that twinkle is finished - how long to restart the next init? -> random
FORCE_SYMBOL $18AB Random
COMMENT $18AE values from 0 - 127
FORCE_SYMBOL $18AF TWINKLE_WAIT
COMMENT_LINE $18B1 ***************************************************************************
COMMENT_LINE $18B2 Possible "twinkle" positions, all on an edge of the "KARL QUAPPE" bitmap
COMMENT_LINE $18F2 ***************************************************************************
COMMENT_LINE $18F2 this routine draws the initial screen
COMMENT_LINE $18F2 with information about the game
COMMENT_LINE $18F2 nothing is expected and nothing is returned
COMMENT_LINE $18F2 leaves dp pointing d0 expected
COMMENT $18F2 since a frog moves - we init all frog vars
FORCE_SYMBOL $18F2 init_new_frog_vars
FORCE_NO_SYMBOL $18F5
FORCE_SYMBOL $18F8 frog_pos
COMMENT $18FB starting pos of frog on init screen
FORCE_NO_SYMBOL $18FB
FORCE_SYMBOL $18FE frog_pos_band
COMMENT $1901 do our twinklings first, call init for all of them,
FORCE_SYMBOL $1901 TWINKLE_COUNT
COMMENT $1903 counter for init
FORCE_SYMBOL $1903 tmp1
COMMENT $1906 RAM position of twinkle data
FORCE_SYMBOL $1906 twinklers
FORCE_NO_SYMBOL $1909
FORCE_SYMBOL $190C TWINKLE_COUNTER
FORCE_SYMBOL $190E TWINKLE_WAIT
COMMENT $1910 first twinklers are 0.5 seconds apart, (next will be random)
FORCE_NO_SYMBOL $1910
COMMENT $1912 next entry
FORCE_SYMBOL $1912 Twinkle
FORCE_SYMBOL $1914 tmp1
COMMENT $1917 loop thru all entries
COMMENT $1919 here the table for our different frog move data is loaded
FORCE_SYMBOL $1919 initMoveTable
COMMENT $191C select move data
FORCE_NO_SYMBOL $191C
COMMENT $191E if zero, than end of table reached - reset table pos
FORCE_SYMBOL $1920 initMoveTable_addresses
FORCE_SYMBOL $1923 initMoveTable
COMMENT $1926 and use the "first entry (this must be != 0)
FORCE_NO_SYMBOL $1926
COMMENT $1928 and save the froge movement pointer to its "used" location
FORCE_SYMBOL $1928 attractMovePointer
COMMENT $192B increase movement table for next "round"
FORCE_NO_SYMBOL $192B
FORCE_SYMBOL $192D initMoveTable
COMMENT $1930 switch to atttract mode, other wise frog movement routine does "in game" stuff as well (jump into a house or so)
FORCE_SYMBOL $1930 isAttractMode
FORCE_SYMBOL $1933 DP_to_D0
FORCE_SYMBOL $1936 RecalCounter
COMMENT $193C get button status once, since only
FORCE_SYMBOL $193C Read_Btns
COMMENT_LINE $193F differences are noticed
FORCE_SYMBOL $193F DP_to_C8
COMMENT $1942 startup intensity
FORCE_NO_SYMBOL $1942
COMMENT $1944 store it to current intensity
FORCE_SYMBOL $1944 init_current_intensity
COMMENT $1946 tmp2 = 0 dec , 1 = inc
FORCE_SYMBOL $1946 tmp2
COMMENT $1948 setup messages to display at the botom - start with message 0
FORCE_SYMBOL $1948 messages
FORCE_SYMBOL $194B tmp1
FORCE_SYMBOL $194D shutup
COMMENT $1950 is music still playing?
FORCE_SYMBOL $1950 Vec_Music_Flag
COMMENT $1953 than jump
COMMENT $1955 load adddress of music structure
FORCE_SYMBOL $1955 yankee
COMMENT $1958 and play the tune again...
COMMENT_LINE $1958 the next instructions initialize a new sound
COMMENT_LINE $1958 load #1
COMMENT_LINE $1958 set this as marker for music start
COMMENT_LINE $1958 CLR      Vec_Music_Flag               ; doesn'T destroy a register
COMMENT_LINE $1958 INC      Vec_Music_Flag               ; to do it that way
FORCE_NO_SYMBOL $1958
FORCE_SYMBOL $195A Vec_Music_Flag
COMMENT $195D load a music structure (piece_of_music)
FORCE_SYMBOL $195D yankee
COMMENT $1960 and store it to my own music active pointer
FORCE_SYMBOL $1960 music_active
COMMENT_LINE $1963 next a do_my_sound and than do sound must be called
COMMENT $1963 well, the startup...
FORCE_SYMBOL $1963 musicOption
COMMENT $1968 (MAKRO) see above
COMMENT $1968 (MAKRO) the 'Init_Music_chk' expects this
FORCE_NO_SYMBOL $1968
COMMENT $196C get active music
FORCE_SYMBOL $196C music_active
COMMENT $196E and init new notes
FORCE_SYMBOL $196E Init_Music_chk
COMMENT $1971 recal counter, about 21 Minutes befor roll over
FORCE_SYMBOL $1971 RecalCounter
FORCE_NO_SYMBOL $1974
FORCE_SYMBOL $1976 RecalCounter
COMMENT $1979 sets dp to d0, and pos at 0, 0
FORCE_SYMBOL $1979 Wait_Recal
COMMENT $197C just for assembler optimization...
COMMENT $197C ROM function that does the sound playing
FORCE_SYMBOL $197C Do_Sound
COMMENT $197F do twinklers first, for all of the do
FORCE_SYMBOL $197F twinklers
COMMENT $1984 check if new twinkle should start, and sets it up
FORCE_SYMBOL $1984 initTwinkler
COMMENT $1987 and do one twinkling step (or increase waiter)
FORCE_SYMBOL $1987 oneTwinkleStep
FORCE_SYMBOL $198C Twinkle
COMMENT $1993 load "timer"
FORCE_SYMBOL $1993 RecalCounter
COMMENT $1996 50 = 1 second, when 50 Hz
FORCE_NO_SYMBOL $1996
COMMENT $199B if timer readed about 10 seconds (all messages were displyed ones)
FORCE_SYMBOL $199B Vec_Music_Flag
COMMENT $199E call the attract mode "game"
FORCE_SYMBOL $199E doAttractMode
FORCE_SYMBOL $19A1 RecalCounter
COMMENT $19A7 and start anew from the beginning of init screen
FORCE_SYMBOL $19A7 init_screen
FORCE_SYMBOL $19AA calibration
COMMENT_LINE $19AD print bitmap
COMMENT $19AD load default text height & width
FORCE_NO_SYMBOL $19AD
COMMENT $19B0 poke it to ram location
FORCE_SYMBOL $19B0 Vec_Text_HW
COMMENT $19B3 Sets the intensity of the
FORCE_SYMBOL $19B3 Intensity_5F
FORCE_NO_SYMBOL $19B6
FORCE_SYMBOL $19B9 FroggerLogo_data
COMMENT $19BC print routine
FORCE_SYMBOL $19BC draw_raster_image
FORCE_SYMBOL $19BF calibration
COMMENT_LINE $19C2 print messages
COMMENT_LINE $19C2 the fade in and out (different directions of intensity increase/decrease are handled in the next
COMMENT_LINE $19C2 couple of lines
COMMENT $19C2 messages fade in and out
FORCE_SYMBOL $19C2 init_current_intensity
COMMENT $19C5 indicator to increase / decrease intensity (1= increase, 0 = decrease)
FORCE_SYMBOL $19C5 tmp2
COMMENT $19CB on intensity of 10 (decreasing) the message is changed to next
FORCE_NO_SYMBOL $19CB
COMMENT $19CD otherwise go on
COMMENT $19CF switch to intensity increase
FORCE_SYMBOL $19CF tmp2
COMMENT $19D2 message pointer + "1"
FORCE_SYMBOL $19D2 tmp1
FORCE_NO_SYMBOL $19D5
FORCE_SYMBOL $19D7 tmp1
FORCE_NO_SYMBOL $19DA
COMMENT $19DE store current message pointer to tmp1
FORCE_SYMBOL $19DE messages
FORCE_SYMBOL $19E1 tmp1
COMMENT $19E7 maximum message brighness
FORCE_NO_SYMBOL $19E7
COMMENT $19EB switch to brightness decrease
FORCE_SYMBOL $19EB tmp2
COMMENT $19EE set the intensity we got currently
FORCE_SYMBOL $19EE init_current_intensity
FORCE_SYMBOL $19F1 Intensity_a
FORCE_NO_SYMBOL $19F4
FORCE_SYMBOL $19F7 Vec_Text_Height
FORCE_NO_SYMBOL $19FA
COMMENT $19FC move to time 1 lo, this means scaling
FORCE_SYMBOL $19FC VIA_t1_cnt_lo
FORCE_SYMBOL $19FE tmp1
COMMENT $1A02 y = -114, x = -107 ; location of message
FORCE_NO_SYMBOL $1A02
FORCE_SYMBOL $1A05 sync_Print_Str_d
FORCE_NO_SYMBOL $1A08
COMMENT $1A0A reset to 0
FORCE_SYMBOL $1A0A VIA_cntl
FORCE_SYMBOL $1A0C calibration
FORCE_SYMBOL $1A0F oneFrog_move_init
COMMENT $1A12 get button status
FORCE_SYMBOL $1A12 Read_Btns
COMMENT $1A15 is a button pressed?
FORCE_NO_SYMBOL $1A15
COMMENT $1A17 no, than stay in init_screen_loop
FORCE_NO_SYMBOL $1A1B
FORCE_NO_SYMBOL $1A1F
COMMENT $1A21 starting a game is actualy only "exiting" the init screen
FORCE_NO_SYMBOL $1A23
FORCE_NO_SYMBOL $1A27
FORCE_NO_SYMBOL $1A2D
FORCE_SYMBOL $1A33 init_screen_loop_1
FORCE_SYMBOL $1A36 highscores_screen
FORCE_SYMBOL $1A39 init_screen_loop_1
FORCE_SYMBOL $1A3C tmp2
FORCE_SYMBOL $1A40 tmp1
FORCE_SYMBOL $1A45 RecalCounter
FORCE_SYMBOL $1A4A option_screen
FORCE_SYMBOL $1A4F RecalCounter
FORCE_SYMBOL $1A54 tmp2
FORCE_SYMBOL $1A58 tmp1
FORCE_SYMBOL $1A5B init_screen_loop_1
FORCE_SYMBOL $1A5E isAttractMode
FORCE_SYMBOL $1A61 Vec_Music_Flag
COMMENT_LINE $1A65 ***************************************************************************
COMMENT_LINE $1A65 check whether current game score (of a "game over" game)
COMMENT_LINE $1A65 is worthy of high score table
COMMENT_LINE $1A65 if so the highscore screen will be "called" in editor mode, and the player
COMMENT_LINE $1A65 can enter his 3 letters
FORCE_SYMBOL $1A65 gameModeOption
FORCE_NO_SYMBOL $1A68
COMMENT $1A6A Training = no HS
COMMENT $1A6C no - noHs
FORCE_SYMBOL $1A6C highScoreReached
COMMENT $1A6F Training = no HS
COMMENT_LINE $1A71 in 'highScorePlace' is our place and
COMMENT_LINE $1A71 in 'highScoreDone' is the hex value of our score
COMMENT_LINE $1A71 in 'highScoreLevel' is our current level (-1)
FORCE_SYMBOL $1A71 highScoreTable
FORCE_SYMBOL $1A74 gameModeOption
FORCE_SYMBOL $1A79 highScoreHardTable
COMMENT $1A7E last hs entry + 1
COMMENT $1A81 last hs entry
COMMENT $1A84 highscore place to compare with - from last to first
FORCE_NO_SYMBOL $1A84
COMMENT $1A86 from previous testings we now (if we achieved highscore - the place of the entry (sounds redundant...)
FORCE_SYMBOL $1A86 highScorePlace
COMMENT $1A89 if place was found - put the current values in there
COMMENT $1A8B otherwise we copy the score form one entry above to this entry, since the high score list "scrolls" down one entry
COMMENT $1A8C 10 (HighScoreEntry) = length of a highscore entry
COMMENT $1A90 copy the selected data downwards
COMMENT $1A92 and do next entry if our place was not reached
COMMENT_LINE $1A94 convert score to ascii
COMMENT $1A94 load score to D
FORCE_SYMBOL $1A94 highScoreDone
COMMENT $1A97 save X
COMMENT $1A99 convert to ascii
FORCE_SYMBOL $1A99 convertDToAscii
COMMENT $1A9E result is in conversion buffer
FORCE_SYMBOL $1A9E conversionBuffer
COMMENT $1AA1 copy conversion buffer ascii data
COMMENT $1AA3 to our current place in the highscore table
FORCE_NO_SYMBOL $1AA3
FORCE_NO_SYMBOL $1AA7
FORCE_NO_SYMBOL $1AAB
COMMENT $1AAD also copy the level we achieved
FORCE_SYMBOL $1AAD highScoreLevel
COMMENT $1AB0 plus one, since the levels are 0 based
FORCE_NO_SYMBOL $1AB1
COMMENT $1AB3 switch to high score editor mode
FORCE_SYMBOL $1AB3 highScoreEditMode
COMMENT $1AB6 and call the high score screen
FORCE_SYMBOL $1AB6 highscores_screen
COMMENT $1AB9 switch editor mode off
FORCE_SYMBOL $1AB9 highScoreEditMode
FORCE_SYMBOL $1ABC gameModeOption
FORCE_SYMBOL $1AC4 highScoreHardcoreBlock
FORCE_SYMBOL $1ACC highScoreCompetitionBlock
FORCE_SYMBOL $1ACF current_eprom_blocksize
FORCE_SYMBOL $1AD2 eeprom_save_highscore
COMMENT_LINE $1AD6 ***************************************************************************
COMMENT_LINE $1AD6 copy HS entry from x to y - without destroying register
COMMENT $1AD8 length of one entry
FORCE_SYMBOL $1AD8 HighScoreEntry
COMMENT_LINE $1AE3 rts
COMMENT_LINE $1AE3 ***************************************************************************
COMMENT $1AE3 set flag that we "play" in attract mode
FORCE_SYMBOL $1AE3 isAttractMode
COMMENT $1AE6 initialize game variables
FORCE_SYMBOL $1AE6 init_vars
COMMENT $1AE9 which attract level do we "play"
FORCE_SYMBOL $1AE9 attractCount
FORCE_SYMBOL $1AEC attractCount
COMMENT $1AEF times two since its a word pointer
COMMENT $1AF0 leval data table
FORCE_SYMBOL $1AF0 attractLevels
COMMENT $1AF3 load calculated entry
COMMENT $1AF5 if not 0 than we got a correct entry
COMMENT $1AF7 attract rollover
FORCE_SYMBOL $1AF7 attractCount
COMMENT $1AFC first byte indicates level number
COMMENT $1AFE store this as current level
FORCE_SYMBOL $1AFE game_level
COMMENT $1B01 store x as current attract level "movement" pointer, accessing "joystick" subroutine read this
FORCE_SYMBOL $1B01 attractMovePointer
COMMENT $1B04 and setup the blinking "press button"
FORCE_NO_SYMBOL $1B04
FORCE_SYMBOL $1B07 buttonBlinker
COMMENT $1B0A enter the main loop at the "attract" enter point, from here on it is a "normal" game
FORCE_SYMBOL $1B0A attractEnter
COMMENT $1B0D once the game finishes - clear attract mode,
FORCE_SYMBOL $1B0D isAttractMode
COMMENT $1B10 and go back to init screen
COMMENT_LINE $1B11 ***************************************************************************
COMMENT_LINE $1B11 this file is part of Karl Quappe, written by Malban in 2016
COMMENT_LINE $1B11 Most parts were written by:
COMMENT_LINE $1B11 2016 Thomas G. Sontowski:
COMMENT_LINE $1B11 based on Alex Herbert's ds2430 driver
COMMENT_LINE $1B11 if 32 byte save is enabled only a dirty "translation" of bigger data is done, much redundancy!
COMMENT_LINE $1B11 ***************************************************************************
COMMENT_LINE $1B11 this file is part of Karl Quappe, written by Malban in 2016
COMMENT_LINE $1B11 DS1W - Dallas Semiconductor 1-Wire Driver
COMMENT_LINE $1B11 Copyright (c) 2002 Alex Herbert
COMMENT_LINE $1B11 Memory Base Addresses
COMMENT_LINE $1B11 PIA Registers
COMMENT_LINE $1B11 Direct Page Macros
COMMENT_LINE $0000 1-Wire Timing constants
COMMENT_LINE $1B11 $032a = 810 cycles = 540us
COMMENT_LINE $1B11 $02d0 = 720 cycles = 480us
COMMENT_LINE $1B11 $78 = 120cycles = 80us
COMMENT_LINE $1B11 Note:
COMMENT_LINE $1B11 For reliability DS1W_RESETDUR and DS1W_TSLOTDUR are = above the
COMMENT_LINE $1B11 minimums specified by the datasheet. To improve performance, values
COMMENT_LINE $1B11 closer to the specified minimums may be used.
COMMENT_LINE $1B11 DS1W_RESETDUR minimum = 480us
COMMENT_LINE $1B11 DS1W_TSLOTDUR minimum = 60us
COMMENT_LINE $1B11 1-Wire ROM commands
COMMENT_LINE $1B11 Subroutines
COMMENT_LINE $1B11 ds1w_open
COMMENT_LINE $1B11 function:
COMMENT_LINE $1B11 Prepares Vectrex I/O hardware (6522) for 1-Wire communication.
COMMENT_LINE $1B11 on entry:
COMMENT_LINE $1B11 dp = $d0
COMMENT_LINE $1B11 on exit:
COMMENT_LINE $1B11 d  = undefined
FORCE_NO_SYMBOL $1B11
COMMENT $1B14 make sure PB7 is set, PB6 is cleared
FORCE_SYMBOL $1B14 CNTRL
COMMENT $1B16 Disable T1 output on PB7 (RAMP)
FORCE_SYMBOL $1B16 ACNTRL
COMMENT_LINE $1B19 ds1w_close
COMMENT_LINE $1B19 function:
COMMENT_LINE $1B19 Restores Vectrex I/O hardware (6522) defaults.
COMMENT_LINE $1B19 on entry:
COMMENT_LINE $1B19 dp = $d0
COMMENT_LINE $1B19 on exit:
COMMENT_LINE $1B19 b  = undefined
FORCE_NO_SYMBOL $1B19
COMMENT $1B1B Enable T1 output on PB7 (RAMP)
FORCE_SYMBOL $1B1B ACNTRL
COMMENT_LINE $1B1E ds1w_reset
COMMENT_LINE $1B1E function:
COMMENT_LINE $1B1E Reset 1-Wire device(s), and detect if device is present.
COMMENT_LINE $1B1E on entry:
COMMENT_LINE $1B1E dp = $d0
COMMENT_LINE $1B1E on exit:
COMMENT_LINE $1B1E a  = 0 if device is present, -1 if not.
COMMENT_LINE $1B1E b  = undefined
COMMENT_LINE $1B1E cc = z=1 and n=0 if device present,
COMMENT_LINE $1B1E z=0 and n=1 if device not present.
COMMENT $1B1E reset pulse duration
FORCE_SYMBOL $1B1E DS1W_RESETDUR
COMMENT $1B21 start timer
FORCE_SYMBOL $1B21 T1LOLC
COMMENT_LINE $1B23 generate reset pulse
FORCE_NO_SYMBOL $1B23
COMMENT $1B25 PB6 direction = output
FORCE_SYMBOL $1B25 DCNTRL
FORCE_NO_SYMBOL $1B27
FORCE_SYMBOL $1B29 IFLAG
COMMENT $1B2B wait for timer
FORCE_NO_SYMBOL $1B2D
COMMENT $1B2F PB6 direction = input
FORCE_SYMBOL $1B2F DCNTRL
COMMENT_LINE $1B31 check for presence pulse
COMMENT $1B31 test PB6
FORCE_SYMBOL $1B31 CNTRL
COMMENT $1B33 PB6 was low too early (emulator?)
COMMENT $1B35 presence pulse detect duration
FORCE_SYMBOL $1B35 DS1W_PRESDUR
COMMENT $1B38 start timer
FORCE_SYMBOL $1B38 T1LOLC
FORCE_NO_SYMBOL $1B3A
COMMENT $1B3C test PB6
FORCE_SYMBOL $1B3C CNTRL
COMMENT $1B40 timeout?
FORCE_SYMBOL $1B40 IFLAG
COMMENT $1B44 PB6 didn't go low (no device attached?)
FORCE_SYMBOL $1B46 IFLAG
COMMENT $1B48 wait for timer
FORCE_SYMBOL $1B4A CNTRL
COMMENT $1B4C PB6 stayed low too long (fault?)
COMMENT $1B4E time slot duration
FORCE_SYMBOL $1B4E DS1W_TSLOTDUR
COMMENT $1B50 load timer latch
FORCE_SYMBOL $1B50 T1LOLC
COMMENT $1B52 return "no error"
COMMENT $1B54 return "device not present"
COMMENT_LINE $1B57 ds1w_txbyte
COMMENT_LINE $1B57 function:
COMMENT_LINE $1B57 Transmit byte to 1-Wire device.
COMMENT_LINE $1B57 on entry:
COMMENT_LINE $1B57 a  = byte to send
COMMENT_LINE $1B57 dp = $d0
COMMENT_LINE $1B57 on exit:
COMMENT_LINE $1B57 d  = undefined
COMMENT $1B57 bits in byte
FORCE_NO_SYMBOL $1B57
COMMENT $1B59 put loop counter 'above' stack
COMMENT $1B5B shift data into carry
COMMENT $1B5E start timer
FORCE_SYMBOL $1B5E T1HOC
COMMENT_LINE $1B60 long pulse low  ~~\________/~~
FORCE_NO_SYMBOL $1B60
COMMENT $1B62 PB6 direction = output
FORCE_SYMBOL $1B62 DCNTRL
FORCE_NO_SYMBOL $1B64
FORCE_SYMBOL $1B66 IFLAG
COMMENT $1B68 wait for end of time slot
FORCE_NO_SYMBOL $1B6A
COMMENT $1B6C PB6 direction = input
FORCE_SYMBOL $1B6C DCNTRL
COMMENT $1B73 start timer
FORCE_SYMBOL $1B73 T1HOC
COMMENT_LINE $1B75 short pulse low  ~~\_/~~~~~~~~~
FORCE_NO_SYMBOL $1B75
COMMENT $1B77 PB6 direction = output
FORCE_SYMBOL $1B77 DCNTRL
FORCE_NO_SYMBOL $1B79
COMMENT $1B7B PB6 direction = input
FORCE_SYMBOL $1B7B DCNTRL
FORCE_NO_SYMBOL $1B7D
FORCE_SYMBOL $1B7F IFLAG
COMMENT $1B81 wait for end of time slot
COMMENT_LINE $1B88 ds1w_rxbyte
COMMENT_LINE $1B88 function:
COMMENT_LINE $1B88 Receive byte from 1-Wire device.
COMMENT_LINE $1B88 on entry:
COMMENT_LINE $1B88 dp = $d0
COMMENT_LINE $1B88 on exit:
COMMENT_LINE $1B88 a  = received byte
COMMENT_LINE $1B88 b  = undefined
COMMENT $1B88 bits in byte
FORCE_NO_SYMBOL $1B88
COMMENT $1B8A put loop counter 'above' stack
COMMENT $1B8C start timer
FORCE_SYMBOL $1B8C T1HOC
COMMENT_LINE $1B8E short pulse low  ~~\_xxxxxx~~~~
FORCE_NO_SYMBOL $1B8E
COMMENT $1B90 PB6 direction = output
FORCE_SYMBOL $1B90 DCNTRL
FORCE_NO_SYMBOL $1B92
COMMENT $1B94 PB6 direction = input
FORCE_SYMBOL $1B94 DCNTRL
COMMENT_LINE $1B96 read response
COMMENT $1B96 timing
COMMENT $1B97 read PB
FORCE_SYMBOL $1B97 CNTRL
COMMENT $1B99 shift PB6...
COMMENT $1B9A ...into carry...
COMMENT $1B9B ...and rotate into result byte
FORCE_NO_SYMBOL $1B9C
FORCE_SYMBOL $1B9E IFLAG
COMMENT $1BA0 wait for end of time slot
COMMENT_LINE $1BA7 this file is part of Karl Quappe, written by Malban in 2016
COMMENT_LINE $1BA7 2016 Thomas G. Sontowski:
COMMENT_LINE $1BA7 based on Alex Herbert's ds2430 driver
COMMENT_LINE $1BA7 DS2431 Commands
COMMENT_LINE $1BA7 DS2430_LOCKAR   equ     $5a     ; Lock Application Register
COMMENT_LINE $1BA7 DS2430_READSR   equ     $66     ; Read Status Register
COMMENT_LINE $1BA7 DS2430_WRITEAR  equ     $99     ; Write bytes to Application Register
COMMENT_LINE $1BA7 DS2430_READAR   equ     $c3     ; Read bytes from Application Register
COMMENT_LINE $1BA7 DS2430_VALKEY   equ     $a5     ; Validation byte for COPYSP and LOCKAR
COMMENT_LINE $1BA7 DS2431 Timings
COMMENT_LINE $1BA7 Subroutines
COMMENT_LINE $1BA7 ds2431_load
COMMENT_LINE $1BA7 function:
COMMENT_LINE $1BA7 load DS2431 EEPROM to RAM
COMMENT_LINE $1BA7 on entry:
COMMENT_LINE $1BA7 x = load address
COMMENT_LINE $1BA7 on exit:
COMMENT_LINE $1BA7 a = 0 if no error,
COMMENT_LINE $1BA7 non-zero if error
COMMENT $1BA7 number of bytes to save (loop counter)
FORCE_SYMBOL $1BA7 current_eprom_blocksize
COMMENT_LINE $1BAA lda     #EEPROM_STORESIZE ; number of bytes to save (loop counter)
COMMENT $1BAA stack used registers
COMMENT $1BB0 open 1-wire port
FORCE_SYMBOL $1BB0 ds1w_open
COMMENT $1BB3 reset device
FORCE_SYMBOL $1BB3 ds1w_reset
COMMENT $1BB6 exit if no device present
COMMENT $1BB8 no need to access rom, non-overdrive version
FORCE_SYMBOL $1BB8 DS1W_SKIPROM
COMMENT $1BBA send command
COMMENT $1BBC read memory
FORCE_SYMBOL $1BBC DS2431_READMEM
COMMENT $1BBE send command
FORCE_SYMBOL $1BC0 current_eprom_blockadr
COMMENT_LINE $1BC3 clra                    ; address of first byte to load
COMMENT $1BC3 send address
COMMENT $1BC5 address of first byte to load
COMMENT $1BC6 send address
COMMENT $1BC8 read byte from scratch pad
COMMENT $1BCA save to ram
COMMENT $1BCC decrement loop counter
FORCE_NO_SYMBOL $1BCC
COMMENT $1BCE until all bytes are read
COMMENT $1BD0 close port
FORCE_SYMBOL $1BD0 ds1w_close
COMMENT $1BD3 restore registers from stack and return
COMMENT_LINE $1BD5 ds2430_save
COMMENT_LINE $1BD5 function:
COMMENT_LINE $1BD5 save RAM to DS2430 EEPROM
COMMENT_LINE $1BD5 on entry:
COMMENT_LINE $1BD5 x = address of data to save
COMMENT_LINE $1BD5 on exit:
COMMENT_LINE $1BD5 a = 0 if no error,
COMMENT_LINE $1BD5 non-zero if error
COMMENT $1BD5 number of bytes to save (loop counter)
FORCE_SYMBOL $1BD5 current_eprom_blocksize
FORCE_SYMBOL $1BD8 current_eprom_blockadr
COMMENT_LINE $1BDB clrb
COMMENT $1BDB stack used registers
COMMENT $1BDD open 1-wire port
FORCE_SYMBOL $1BDD ds1w_open
COMMENT $1BE0 reset device
FORCE_SYMBOL $1BE0 ds1w_reset
COMMENT $1BE3 exit if no device present
COMMENT $1BE5 no need to access rom
FORCE_SYMBOL $1BE5 DS1W_SKIPROM
COMMENT $1BE7 send command
FORCE_SYMBOL $1BE7 ds1w_txbyte
COMMENT $1BEA write bytes to scratch pad
FORCE_SYMBOL $1BEA DS2431_WRITESP
COMMENT $1BEC send command
FORCE_SYMBOL $1BEC ds1w_txbyte
COMMENT $1BEF address
FORCE_NO_SYMBOL $1BEF
COMMENT $1BF1 send address
FORCE_SYMBOL $1BF1 ds1w_txbyte
FORCE_SYMBOL $1BF5 ds1w_txbyte
COMMENT $1BF8 get byte from ram
COMMENT $1BFA send byte
FORCE_SYMBOL $1BFA ds1w_txbyte
COMMENT $1BFD decrement loop counter
FORCE_NO_SYMBOL $1BFD
FORCE_NO_SYMBOL $1BFF
FORCE_NO_SYMBOL $1C01
COMMENT $1C03 until 8 bytes are sent
COMMENT $1C05 reset device
FORCE_SYMBOL $1C05 ds1w_reset
COMMENT $1C08 no need to access rom
FORCE_SYMBOL $1C08 DS1W_SKIPROM
COMMENT $1C0A send command
FORCE_SYMBOL $1C0A ds1w_txbyte
FORCE_SYMBOL $1C0D DS2431_READSP
COMMENT $1C0F send command
FORCE_SYMBOL $1C0F ds1w_txbyte
COMMENT_LINE $1C12 read the authorization code
COMMENT $1C12 read byte from scratch pad
FORCE_SYMBOL $1C12 ds1w_rxbyte
COMMENT $1C15 TA1
COMMENT $1C17 read byte from scratch pad
FORCE_SYMBOL $1C17 ds1w_rxbyte
COMMENT $1C1A TA2
COMMENT $1C1C read byte from scratch pad
FORCE_SYMBOL $1C1C ds1w_rxbyte
COMMENT $1C1F E/S
COMMENT $1C21 reset device
FORCE_SYMBOL $1C21 ds1w_reset
COMMENT $1C24 no need to access rom
FORCE_SYMBOL $1C24 DS1W_SKIPROM
COMMENT $1C26 send command
FORCE_SYMBOL $1C26 ds1w_txbyte
COMMENT $1C29 copy scratch pad to eeprom
FORCE_SYMBOL $1C29 DS2431_COPYSP
COMMENT $1C2B send command
FORCE_SYMBOL $1C2B ds1w_txbyte
COMMENT $1C30 send validation
FORCE_SYMBOL $1C30 ds1w_txbyte
COMMENT $1C35 send validation
FORCE_SYMBOL $1C35 ds1w_txbyte
COMMENT $1C3A send validation
FORCE_SYMBOL $1C3A ds1w_txbyte
COMMENT $1C3D eeprom write (scratch pad copy) duration
FORCE_SYMBOL $1C3D DS2431_COPYDUR
COMMENT $1C40 start timer
FORCE_SYMBOL $1C40 T1LOLC
FORCE_NO_SYMBOL $1C42
FORCE_SYMBOL $1C44 IFLAG
COMMENT $1C46 wait for timer
FORCE_NO_SYMBOL $1C48
FORCE_NO_SYMBOL $1C4C
FORCE_NO_SYMBOL $1C4E
FORCE_NO_SYMBOL $1C50
COMMENT $1C54 close port
FORCE_SYMBOL $1C54 ds1w_close
COMMENT $1C57 restore registers from stack and return
COMMENT_LINE $1C59 ds2431_verify
COMMENT_LINE $1C59 function:
COMMENT_LINE $1C59 compare DS2431 EEPROM to RAM
COMMENT_LINE $1C59 on entry:
COMMENT_LINE $1C59 x = data address
COMMENT_LINE $1C59 on exit:
COMMENT_LINE $1C59 a = 0 if same,
COMMENT_LINE $1C59 non-zero if different
COMMENT $1C59 number of bytes to save (loop counter)
FORCE_SYMBOL $1C59 current_eprom_blocksize
COMMENT_LINE $1C5C lda     #EEPROM_STORESIZE ; number of bytes to verify (loop counter)
COMMENT $1C5C stack used registers
COMMENT $1C5E open 1-wire port
FORCE_SYMBOL $1C5E ds1w_open
COMMENT $1C61 reset device
FORCE_SYMBOL $1C61 ds1w_reset
COMMENT $1C64 exit if no device present
COMMENT $1C66 no need to access rom
FORCE_SYMBOL $1C66 DS1W_SKIPROM
COMMENT $1C68 send command
FORCE_SYMBOL $1C68 ds1w_txbyte
COMMENT $1C6B copy eeprom to scratch pad
FORCE_SYMBOL $1C6B DS2431_READMEM
COMMENT $1C6D send command
FORCE_SYMBOL $1C6D ds1w_txbyte
COMMENT_LINE $1C70 clra                    ; address of first byte to verify
FORCE_SYMBOL $1C70 current_eprom_blockadr
COMMENT $1C73 send address
FORCE_SYMBOL $1C73 ds1w_txbyte
COMMENT $1C76 address of first byte to verify
COMMENT $1C77 send address
FORCE_SYMBOL $1C77 ds1w_txbyte
COMMENT $1C7A read byte from scratch pad
FORCE_SYMBOL $1C7A ds1w_rxbyte
COMMENT $1C7D compare to ram
COMMENT $1C7F exit if not same
COMMENT $1C81 decrement loop counter
FORCE_NO_SYMBOL $1C81
COMMENT $1C83 until all bytes are read
COMMENT $1C85 close port
FORCE_SYMBOL $1C85 ds1w_close
COMMENT $1C88 restore registers from stack and return
COMMENT_LINE $1C8A direct  -1
COMMENT_LINE $1C8A ***************************************************************************
COMMENT_LINE $1C8A ;;;;;;;;;;;;
COMMENT_LINE $1C8A ;;;;;;;;;;;;
FORCE_SYMBOL $1C8A copyDefaults
FORCE_SYMBOL $1C8D ignoreDs2431
FORCE_SYMBOL $1C92 ds2431Present
FORCE_SYMBOL $1C9A current_eprom_blocksize
FORCE_SYMBOL $1C9D optionsBlock
FORCE_SYMBOL $1CA5 current_eprom_blocksize
FORCE_SYMBOL $1CA8 highScoreCompetitionBlock
FORCE_SYMBOL $1CB0 current_eprom_blocksize
FORCE_SYMBOL $1CB3 highScoreHardcoreBlock
FORCE_SYMBOL $1CB8 v4ecartflags
FORCE_SYMBOL $1CBD store_score
FORCE_SYMBOL $1CC1 copyDefaults
COMMENT_LINE $1CC4 ***************************************************************************
FORCE_SYMBOL $1CC4 ignoreDs2431
FORCE_SYMBOL $1CC9 ds2431Present
COMMENT $1CCC open 1-wire port
FORCE_SYMBOL $1CCC ds1w_open
COMMENT $1CCF reset device
FORCE_SYMBOL $1CCF ds1w_reset
COMMENT_LINE $1CD2 tsta
FORCE_SYMBOL $1CD4 ds2431Present
COMMENT $1CD7 close port
FORCE_SYMBOL $1CD7 ds1w_close
COMMENT_LINE $1CDA ***************************************************************************
COMMENT_LINE $1CDA current_eprom_blocksize = blocksize
COMMENT_LINE $1CDA current_eprom_blockadr = block address in eeprom
COMMENT_LINE $1CDA x = address to save
FORCE_SYMBOL $1CDE newEepromRAMStart
FORCE_NO_SYMBOL $1CE1
FORCE_SYMBOL $1CE5 current_eprom_blocksize
FORCE_SYMBOL $1CE9 ignoreDs2431
FORCE_SYMBOL $1CEE v4ecartflags
FORCE_SYMBOL $1CF3 store_score
COMMENT $1CF8 <<8)+(EEPROM_STORESIZE-1) ;
FORCE_SYMBOL $1CF8 EEPROM_CHECKSUM
COMMENT $1CFA create checksum byte
FORCE_NO_SYMBOL $1CFF
COMMENT $1D03 compare ram to eeprom
COMMENT $1D07 if different, then update eeprom
COMMENT_LINE $1D0C ***************************************************************************
COMMENT_LINE $1D0C current_eprom_blocksize = blocksize
COMMENT_LINE $1D0C current_eprom_blockadr = block address in eeprom
COMMENT_LINE $1D0C x = address to load To
FORCE_SYMBOL $1D0C eeprom_tmp
FORCE_SYMBOL $1D0F newEepromRAMStart
FORCE_SYMBOL $1D12 ignoreDs2431
FORCE_SYMBOL $1D17 v4ecartflags
COMMENT_LINE $1D1C COPY_VECROM_TO_RAM
COMMENT $1D1C Source copy the vec4ever switching function into place
FORCE_SYMBOL $1D1C vec4SaveBuffer
COMMENT $1D1F destination
FORCE_SYMBOL $1D1F v4e_saveBlockStart
FORCE_SYMBOL $1D24 Move_Mem_a
COMMENT_LINE $1D27 rts
COMMENT $1D27 load 32 byte eeprom to ram
FORCE_SYMBOL $1D27 ds2431_load
FORCE_SYMBOL $1D2A current_eprom_blocksize
COMMENT $1D2E sum the bytes
COMMENT $1D33 equal to checksum?
FORCE_SYMBOL $1D33 EEPROM_CHECKSUM
COMMENT $1D35 if not, then format the eeprom
FORCE_SYMBOL $1D39 current_eprom_blocksize
FORCE_NO_SYMBOL $1D3C
FORCE_SYMBOL $1D40 eeprom_tmp
COMMENT $1D45 otherwise, return
COMMENT_LINE $1D46 struct   HighScoreEntry
COMMENT_LINE $1D46 ds       NAME,3                       ;
COMMENT_LINE $1D46 ds       LEVEL,1                      ;
COMMENT_LINE $1D46 ds       ASCIISCORE,6                 ;
COMMENT_LINE $1D46 end      struct
COMMENT_LINE $1D46 ***************************************************************************
COMMENT_LINE $1D46 from address in y
COMMENT_LINE $1D46 to address always new eeprom
COMMENT_LINE $1D46 d + x trashed,
COMMENT_LINE $1D46 y at the end of the copying
FORCE_NO_SYMBOL $1D46
FORCE_SYMBOL $1D48 levelDoneTemp
COMMENT_LINE $1D4B handle name 3 chars
FORCE_SYMBOL $1D4B newEepromRAMStart
COMMENT_LINE $1D50 handle level 5 bits
COMMENT $1D50 load level
COMMENT $1D52 store level
COMMENT_LINE $1D54 handle score
COMMENT $1D58 put current score to conversion buffer
FORCE_SYMBOL $1D58 toConversion5
COMMENT $1D5B current score as "number" in D
FORCE_SYMBOL $1D5B convertAsciiToD
FORCE_NO_SYMBOL $1D60
COMMENT $1D62 store score
FORCE_SYMBOL $1D64 levelDoneTemp
COMMENT_LINE $1D69 conversion done
COMMENT_LINE $1D69 bytes in newEepromRAMStart
COMMENT_LINE $1D69 = 3 + 5*5 = 28
COMMENT_LINE $1D6A ***************************************************************************
COMMENT_LINE $1D6A x address to copy to
FORCE_NO_SYMBOL $1D6A
FORCE_SYMBOL $1D6C levelDoneTemp
COMMENT_LINE $1D6F handle name 3 chars
COMMENT_LINE $1D71 ldy      #eepromRAMStart
FORCE_SYMBOL $1D71 newEepromRAMStart
COMMENT_LINE $1D76 handle level 5 bits
COMMENT $1D76 load level
COMMENT $1D78 store level
COMMENT_LINE $1D7A handle score
COMMENT $1D7A get 16bit score
FORCE_SYMBOL $1D7E convertDToAscii
FORCE_SYMBOL $1D83 conversionBuffer
COMMENT $1D86 copy 6 ascii bytes
FORCE_SYMBOL $1D92 levelDoneTemp
COMMENT_LINE $1D98 ***************************************************************************
COMMENT_LINE $1D98 input : y = output string pointer
COMMENT_LINE $1D98 x = input pointer to uint16
COMMENT $1D98 byte 0: 1aaaaabb
FORCE_NO_SYMBOL $1D98
FORCE_NO_SYMBOL $1D9C
COMMENT $1DA4 char 0
COMMENT $1DA6 byte 0: 1aaaaabb
COMMENT $1DA8 byte 1: bbbccccc
FORCE_NO_SYMBOL $1DA8
FORCE_NO_SYMBOL $1DB0
COMMENT $1DB8 char 1
COMMENT $1DBA byte 1: bbbccccc
FORCE_NO_SYMBOL $1DBC
COMMENT $1DC4 char 2
COMMENT_LINE $1DC7 ***************************************************************************
COMMENT_LINE $1DC7 routines from thomas encode/decode
COMMENT_LINE $1DC7 input : y = string pointer
COMMENT_LINE $1DC7 x = output pointer to uint16
COMMENT $1DC7 char 0
COMMENT $1DD1 the flag bit
FORCE_NO_SYMBOL $1DD1
COMMENT $1DD3 byte 0: 1aaaaa00
FORCE_NO_SYMBOL $1DD3
COMMENT $1DD5 char 1
COMMENT $1DE4 byte 0: 1aaaaabb
FORCE_NO_SYMBOL $1DE4
COMMENT $1DE8 byte 1: bbb00000
FORCE_NO_SYMBOL $1DE8
COMMENT $1DEA char 2
COMMENT $1DF2 byte 1: bbbccccc
FORCE_NO_SYMBOL $1DF2
COMMENT_LINE $1DF7 ***************************************************************************
COMMENT_LINE $1DF7 ;;;;;;;;;;;;
COMMENT_LINE $1DF7 ***************************************************************************
COMMENT_LINE $1DF7 ***************************************************************************
COMMENT_LINE $1DF7 Theoretically this can also be called from a "MOVE" - but I was actually to lazy to do and test that
COMMENT_LINE $1DF7 should bring a few cycles - between 12 - 170! (tested ???)
COMMENT_LINE $1DF7 but some sounds in music were off - havent examined it - wasn't worth the trouble!
COMMENT_LINE $1DF7 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $1DF7 in 2016
COMMENT_LINE $1DF7 all stuff contained here is public domain
COMMENT_LINE $1DF7 original vectrex routine were written by Richard Chadd
COMMENT_LINE $1DF7 (optimized version!)
COMMENT_LINE $1DF7 regs used by below implementation
COMMENT_LINE $1DF7 U and D
COMMENT_LINE $1DF7 X is also used, but can be spared - see below comments
COMMENT_LINE $1DF7 only channel 3 is implemented
COMMENT_LINE $1DF7 ;;;;;;;;;;;;;;;
COMMENT_LINE $1DF7 ;;;;;;;;;;;;;;;
COMMENT_LINE $1DF7 set volume off channel 3
COMMENT_LINE $1DF7 set reg1sf0
COMMENT_LINE $1DF7 Set volume
COMMENT $1DF7 reset sfx
FORCE_NO_SYMBOL $1DF7
FORCE_SYMBOL $1DFD sfx_pointer_3
FORCE_SYMBOL $1E00 sfx_status_3
FORCE_SYMBOL $1E03 currentSFX
COMMENT $1E07 check if sfx to play
FORCE_SYMBOL $1E07 sfx_status_3
COMMENT $1E0C get current frame pointer
FORCE_SYMBOL $1E0C sfx_pointer_3
COMMENT $1E11 check first flag byte D0
FORCE_NO_SYMBOL $1E11
COMMENT $1E13 no match - continue to process frame
FORCE_NO_SYMBOL $1E15
COMMENT $1E17 check second flag byte 20
FORCE_NO_SYMBOL $1E17
COMMENT $1E19 match - end of effect found so stop playing
COMMENT $1E1B if bit 5 of B is set
FORCE_NO_SYMBOL $1E1B
COMMENT $1E1D skip as no tone freq data
COMMENT $1E1F alternative to destroying d load any 2 byte reg,
COMMENT $1E21 here I destroy d
COMMENT_LINE $1E24 or if x mus be preserved
COMMENT_LINE $1E24 ldd      ,u++ ; alternative to destroying d load any 2 byte reg,
COMMENT_LINE $1E24 std      SHADOW_BASE+04 ; here I destroy d
COMMENT_LINE $1E24 ldb -3,u ; and load b anew - one instruction to many,
COMMENT $1E24 if bit 6 of B is only set
FORCE_NO_SYMBOL $1E24
COMMENT $1E26 skip as no noise freq data
COMMENT $1E28 get next data byte and copy to noise freq reg
COMMENT $1E2A set tone freq
COMMENT $1E2F get volume from bits 0-3
FORCE_NO_SYMBOL $1E2F
COMMENT $1E31 set tone freq
COMMENT $1E34 in the following reg 7 will be altered - load once
COMMENT $1E37 if bit 4 of B is set disable the tone
FORCE_NO_SYMBOL $1E37
FORCE_NO_SYMBOL $1E3B
COMMENT $1E3D if bit7 of B is set disable noise
FORCE_NO_SYMBOL $1E3D
FORCE_NO_SYMBOL $1E41
COMMENT $1E43 set tone freq
COMMENT $1E46 update frame pointer to next flag byte in Y
FORCE_SYMBOL $1E46 sfx_pointer_3
FORCE_NO_SYMBOL $1E4A
COMMENT $1E4C if bit7 of B is set disable noise
FORCE_NO_SYMBOL $1E4C
FORCE_NO_SYMBOL $1E50
COMMENT $1E52 set tone freq
COMMENT $1E55 update frame pointer to next flag byte in Y
FORCE_SYMBOL $1E55 sfx_pointer_3
FORCE_NO_SYMBOL $1E59
COMMENT $1E5B set tone freq
COMMENT $1E5E update frame pointer to next flag byte in Y
FORCE_SYMBOL $1E5E sfx_pointer_3
COMMENT_LINE $1E62 ***************************************************************************
COMMENT_LINE $1E62 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $1E62 in 2016
COMMENT_LINE $1E62 all stuff contained here is public domain
COMMENT_LINE $1E62 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $1E62 this file contains subroutines declared as 'intermissions', like          ;
COMMENT_LINE $1E62 game over, level done, new life...                                        ;
COMMENT_LINE $1E62 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $1E62 death intermission
COMMENT $1E6A gimmick is always switched of with a death!
FORCE_SYMBOL $1E6A gimmickActive
COMMENT_LINE $1E6D finish last move
COMMENT $1E6D is an "old" jump still ongoing?
FORCE_SYMBOL $1E6D froggerInJump
FORCE_SYMBOL $1E72 current_frog_heading
COMMENT $1E74 than the last left?
FORCE_SYMBOL $1E74 HEADING_LEFT
COMMENT $1E78 than the last right
FORCE_SYMBOL $1E78 HEADING_RIGHT
COMMENT $1E7C than the last up
FORCE_SYMBOL $1E7C HEADING_UP
COMMENT $1E80 than the last down?
FORCE_SYMBOL $1E80 HEADING_DOWN
COMMENT $1E86 load old pos to B
FORCE_SYMBOL $1E86 frog_x
COMMENT $1E88 decrease position with speed faktor
COMMENT $1E8A and store new position
FORCE_SYMBOL $1E8A frog_x
COMMENT $1E8E load old pos to B
FORCE_SYMBOL $1E8E frog_x
COMMENT $1E90 decrease position with speed faktor
COMMENT $1E92 and store new position
FORCE_SYMBOL $1E92 frog_x
COMMENT $1E96 load old pos to B
FORCE_SYMBOL $1E96 frog_y
COMMENT $1E98 decrease position with speed faktor
COMMENT $1E9A and store new position
FORCE_SYMBOL $1E9A frog_y
COMMENT $1E9E load old pos to B
FORCE_SYMBOL $1E9E frog_y
COMMENT $1EA0 decrease position with speed faktor
COMMENT $1EA2 and store new position
FORCE_SYMBOL $1EA2 frog_y
COMMENT $1EA4 any value != 0 will do
FORCE_NO_SYMBOL $1EA4
COMMENT $1EA6 != 0
FORCE_SYMBOL $1EA6 frogDeath
COMMENT $1EA9 != 0
FORCE_SYMBOL $1EA9 intermissionActive
FORCE_SYMBOL $1EAB kind_of_death
FORCE_SYMBOL $1EAD DIE_CAR
FORCE_SYMBOL $1EB2 Karl_DeathLane_Sound
FORCE_SYMBOL $1EB5 play_sfx_x
FORCE_SYMBOL $1EBA DIE_TIME
FORCE_SYMBOL $1EBF Karl_DeathWater_Sound
FORCE_SYMBOL $1EC2 play_sfx_x
COMMENT_LINE $1EC5 prepare first animation step
FORCE_SYMBOL $1EC5 frogDeathObject_0
COMMENT $1EC8 load old pos to B
FORCE_SYMBOL $1EC8 frog_pos
COMMENT $1ECA korrekt the old offset y
FORCE_SYMBOL $1ECA current_frog_offset
COMMENT $1ECC korrekt the old offset x
COMMENT $1ECE y offset
FORCE_NO_SYMBOL $1ECE
COMMENT $1ED0 x offset, of current death animation object
FORCE_NO_SYMBOL $1ED0
COMMENT $1ED2 store it back
FORCE_SYMBOL $1ED2 frog_pos
COMMENT $1ED4 load the current offset
FORCE_NO_SYMBOL $1ED4
COMMENT $1ED6 and remember it
FORCE_SYMBOL $1ED6 current_frog_offset
COMMENT $1ED8 animation delay counter
FORCE_NO_SYMBOL $1ED8
COMMENT $1EDA frogger in jump gets reusead as death animation counter
FORCE_SYMBOL $1EDA froggerInJump
FORCE_SYMBOL $1EDD froggerAnimPointer
FORCE_NO_SYMBOL $1EE0
FORCE_SYMBOL $1EE2 frog_pic
FORCE_NO_SYMBOL $1EE4
FORCE_SYMBOL $1EE8 skipCount_now
FORCE_SYMBOL $1EEB do_csa_sound_startup
FORCE_SYMBOL $1EEE currentMusic
COMMENT_LINE $1EF3 initialize dispatcher for "in move" stuff - this is only the decoder, other stuff is done "directly"
COMMENT $1EF3 first jumper of ym decoder
FORCE_SYMBOL $1EF3 STREAM_PART_1
FORCE_SYMBOL $1EF6 inMovePointer
FORCE_SYMBOL $1EF9 skipCount
FORCE_SYMBOL $1EFC skipCount_now
COMMENT_LINE $1EFF ;;;; DEATH MESSAGE start
FORCE_NO_SYMBOL $1EFF
COMMENT $1F01 move to time 1 lo, this means scaling
FORCE_SYMBOL $1F01 VIA_t1_cnt_lo
FORCE_SYMBOL $1F06 Death_BOX
FORCE_SYMBOL $1F09 drawBox
COMMENT_LINE $1F0C BOX END
FORCE_NO_SYMBOL $1F0C
FORCE_SYMBOL $1F0F Vec_Text_Height
FORCE_NO_SYMBOL $1F12
COMMENT $1F14 move to time 1 lo, this means scaling
FORCE_SYMBOL $1F14 VIA_t1_cnt_lo
FORCE_SYMBOL $1F16 kind_of_death
FORCE_SYMBOL $1F19 cause_strings
FORCE_NO_SYMBOL $1F1E
FORCE_SYMBOL $1F21 sync_Print_Str_d
COMMENT $1F24 Blank low, zero high?
FORCE_NO_SYMBOL $1F24
FORCE_SYMBOL $1F26 VIA_cntl
COMMENT_LINE $1F28 ;;;; DEATH MESSAGE END
COMMENT_LINE $1F28 here display frog death anim
COMMENT_LINE $1F28 *** OUTPUT Frog DEATH
COMMENT $1F28 set game scaling
FORCE_SYMBOL $1F28 SCALE_FACTOR_GAME
COMMENT $1F2A move to time 1 lo, this means scaling
FORCE_SYMBOL $1F2A VIA_t1_cnt_lo
COMMENT $1F2C load current frog position to D
FORCE_SYMBOL $1F2C frog_pos
COMMENT_LINE $1F2F following passage is a move_to_d derivat
COMMENT $1F2F Store Y in D/A register
FORCE_SYMBOL $1F2F VIA_port_a
COMMENT $1F31 Blank low, zero high?
FORCE_NO_SYMBOL $1F31
FORCE_SYMBOL $1F33 VIA_cntl
COMMENT $1F36 Enable mux
FORCE_SYMBOL $1F36 VIA_port_b
COMMENT $1F38 Disable mux
FORCE_SYMBOL $1F38 VIA_port_b
COMMENT $1F3A Store X in D/A register
FORCE_SYMBOL $1F3A VIA_port_a
COMMENT $1F3C enable timer
FORCE_SYMBOL $1F3C VIA_t1_cnt_hi
COMMENT $1F3E load current frog sprite
FORCE_SYMBOL $1F3E frog_pic
FORCE_SYMBOL $1F41 move_wait_draw_vlc_unloop
FORCE_NO_SYMBOL $1F44
COMMENT $1F47 Shift reg mode = 000 free disable, T1 PB7 enabled
FORCE_SYMBOL $1F47 VIA_aux_cntl
COMMENT $1F49 /BLANK low and /ZERO low
FORCE_SYMBOL $1F49 VIA_cntl
COMMENT_LINE $1F4B *** OUT Frog Death done
COMMENT_LINE $1F4B handle animation
COMMENT $1F4B frogger in jump gets reusead as death animation counter
FORCE_SYMBOL $1F4B froggerInJump
FORCE_SYMBOL $1F50 froggerAnimPointer
FORCE_NO_SYMBOL $1F53
COMMENT $1F57 next anim pointer
FORCE_NO_SYMBOL $1F57
COMMENT $1F59 load old pos to D
FORCE_SYMBOL $1F59 frog_y
COMMENT $1F5C load old pos to B
FORCE_SYMBOL $1F5C frog_x
COMMENT $1F5F korrekt the old offset y
FORCE_SYMBOL $1F5F current_frog_offset
COMMENT $1F62 korrekt the old offset x
COMMENT $1F65 y offset
FORCE_NO_SYMBOL $1F65
COMMENT $1F67 x offset, of current death animation object
FORCE_NO_SYMBOL $1F67
COMMENT $1F69 store it back
FORCE_SYMBOL $1F69 frog_pos
COMMENT $1F6C load the current offset
FORCE_NO_SYMBOL $1F6C
COMMENT $1F6E and remember it
FORCE_SYMBOL $1F6E current_frog_offset
COMMENT $1F71 animation delay counter
FORCE_NO_SYMBOL $1F71
COMMENT $1F73 frogger in jump gets reusead as death animation counter
FORCE_SYMBOL $1F73 froggerInJump
FORCE_SYMBOL $1F76 froggerAnimPointer
FORCE_NO_SYMBOL $1F79
FORCE_SYMBOL $1F7B frog_pic
COMMENT_LINE $1F7E here display frog death anim done
COMMENT $1F7E draw_objects, same as on timer countdown
FORCE_SYMBOL $1F7E entry_timer_count_down
FORCE_SYMBOL $1F81 isAttractMode
FORCE_SYMBOL $1F86 displayButton
COMMENT $1F89 and loop until when not zero yet
FORCE_SYMBOL $1F89 death_screen_loop1
FORCE_SYMBOL $1F8C DP_to_C8
COMMENT $1F8F != 0
FORCE_SYMBOL $1F8F frogDeath
COMMENT $1F92 != 0
FORCE_SYMBOL $1F92 intermissionActive
COMMENT $1F94 no bonus collected for this frog
FORCE_SYMBOL $1F94 frog_bonus
COMMENT_LINE $1F96 correct girl carried
COMMENT $1F96 what's the girls status?
FORCE_SYMBOL $1F96 girl_status
COMMENT $1F98 is it displayed
FORCE_SYMBOL $1F98 IS_CARRIED
COMMENT $1F9C is displayed
FORCE_SYMBOL $1F9C girl_status
COMMENT $1F9E is waiting
FORCE_SYMBOL $1F9E girl_status
COMMENT $1FA0 initiate the round counter
FORCE_SYMBOL $1FA0 girl_round_counter_reset
COMMENT $1FA2 store it
FORCE_SYMBOL $1FA2 girl_round_counter
COMMENT $1FA4 no highscore = default
FORCE_SYMBOL $1FA4 highScoreReached
FORCE_SYMBOL $1FA7 no_frogs
FORCE_SYMBOL $1FA9 no_frogs2
FORCE_SYMBOL $1FAB isAttractMode
FORCE_SYMBOL $1FB2 no_frogs
COMMENT_LINE $1FB8 check if death is game over
COMMENT_LINE $1FB8 check if score is highscore relevant
FORCE_SYMBOL $1FB8 gameModeOption
FORCE_NO_SYMBOL $1FBB
COMMENT $1FBD Training = no HS
COMMENT $1FC1 default 1 place!
FORCE_SYMBOL $1FC1 highScorePlace
COMMENT_LINE $1FC4 lazy - build
FORCE_SYMBOL $1FC4 score_digit_5
COMMENT $1FC7 put current score to conversion buffer
FORCE_SYMBOL $1FC7 toConversion5
FORCE_SYMBOL $1FCA scrollOneRight
COMMENT $1FCD put current score to conversion buffer
FORCE_SYMBOL $1FCD addConversion0
COMMENT $1FD0 current score as "number" in D
FORCE_SYMBOL $1FD0 convertAsciiToD
COMMENT $1FD3 remember it
COMMENT $1FD5 if player reached a "saveable" score of 30000 than level edit mode is switched on!
FORCE_NO_SYMBOL $1FD5
FORCE_NO_SYMBOL $1FDB
FORCE_SYMBOL $1FDD levelEditAllowed
FORCE_NO_SYMBOL $1FE0
COMMENT_LINE $1FE2 load top score
FORCE_SYMBOL $1FE5 gameModeOption
COMMENT $1FEF put score to conversion buffer
FORCE_SYMBOL $1FEF toConversion5
COMMENT $1FF2 score as "number" in D
FORCE_SYMBOL $1FF2 convertAsciiToD
FORCE_NO_SYMBOL $1FF5
FORCE_SYMBOL $1FFA highScorePlace
FORCE_NO_SYMBOL $1FFD
COMMENT $1FFF 2. place high score 5 ascii
FORCE_SYMBOL $1FFF HighScoreEntry
COMMENT $2001 put score to conversion buffer
FORCE_SYMBOL $2001 toConversion5
COMMENT $2004 score as "number" in D
FORCE_SYMBOL $2004 convertAsciiToD
FORCE_NO_SYMBOL $2007
FORCE_SYMBOL $200C highScorePlace
FORCE_NO_SYMBOL $200F
COMMENT $2011 3. place high score 5 ascii
COMMENT $2014 put score to conversion buffer
FORCE_SYMBOL $2014 toConversion5
COMMENT $2017 score as "number" in D
FORCE_SYMBOL $2017 convertAsciiToD
FORCE_NO_SYMBOL $201A
FORCE_SYMBOL $201F highScorePlace
FORCE_NO_SYMBOL $2022
COMMENT $2024 4. place high score 5 ascii
COMMENT $2027 put score to conversion buffer
FORCE_SYMBOL $2027 toConversion5
COMMENT $202A score as "number" in D
FORCE_SYMBOL $202A convertAsciiToD
FORCE_NO_SYMBOL $202D
FORCE_SYMBOL $2032 highScorePlace
FORCE_NO_SYMBOL $2035
COMMENT $2037 5. place high score 5 ascii
COMMENT $203A put score to conversion buffer
FORCE_SYMBOL $203A toConversion5
COMMENT $203D score as "number" in D
FORCE_SYMBOL $203D convertAsciiToD
FORCE_NO_SYMBOL $2040
COMMENT_LINE $2045 no highscore found
FORCE_NO_SYMBOL $2045
FORCE_SYMBOL $2047 check2Player
COMMENT_LINE $204B in highScorePlace place we reached (0 based)
COMMENT_LINE $204B in ,s the number score
COMMENT $204B we reached a highscore
FORCE_SYMBOL $204B highScoreReached
FORCE_SYMBOL $204E game_level
FORCE_SYMBOL $2050 highScoreLevel
FORCE_NO_SYMBOL $2053
FORCE_SYMBOL $2055 highScoreDone
COMMENT_LINE $205A ***************************************************************************
FORCE_NO_SYMBOL $205A
FORCE_SYMBOL $205C score_digit_3
FORCE_SYMBOL $205F score_digit_3
FORCE_SYMBOL $2064 score_digit_3
FORCE_SYMBOL $2067 score_digit_4
FORCE_SYMBOL $206A score_digit_4
FORCE_SYMBOL $206F score_digit_4
FORCE_SYMBOL $2072 score_digit_5
COMMENT_LINE $2076 ***************************************************************************
COMMENT_LINE $2076 frog reached home intermission
COMMENT_LINE $2076 MY_QUIT ; be quiet
COMMENT $2076 default
COMMENT $2076 is there a current piece playing?
FORCE_SYMBOL $2076 currentMusic
COMMENT $2079 if not
COMMENT $207B take that piece given and
FORCE_SYMBOL $207B reachedHomeMusicNormal
COMMENT $207E play it now
FORCE_SYMBOL $207E currentMusic
FORCE_SYMBOL $2081 init_ym_sound
COMMENT $2086 otherwise, store it as next possible piece
FORCE_SYMBOL $2086 reachedHomeMusicNormal
FORCE_SYMBOL $2089 nextMusic
FORCE_SYMBOL $208C bonusScore
COMMENT $208F must be zero for Add_Score_a (left to $ff in vector routine)
FORCE_SYMBOL $208F Vec_Misc_Count
FORCE_NO_SYMBOL $2091
FORCE_SYMBOL $2093 tmp1
COMMENT $2095 != 0
FORCE_SYMBOL $2095 intermissionActive
FORCE_SYMBOL $2097 counter
COMMENT $2099 load bonus state
FORCE_SYMBOL $2099 frog_bonus
COMMENT $209B is there a fly bonus
FORCE_SYMBOL $209B FLY_BONUS
COMMENT $209D if no jump
FORCE_SYMBOL $209F tmp1
FORCE_SYMBOL $20A5 bonusScore
COMMENT_LINE $20A7 LDA #200 ; otherwise load 200
COMMENT_LINE $20A7 LDX #no_score_string ; load score address
COMMENT_LINE $20A7 JSR Add_Score_a ; add to score
COMMENT $20A7 default
FORCE_SYMBOL $20A7 reachedHomeMusicFly
FORCE_SYMBOL $20AA tmp1
COMMENT $20AC load bonus state
FORCE_SYMBOL $20AC frog_bonus
COMMENT $20AE is there a girl bonus
FORCE_SYMBOL $20AE GIRL_BONUS
COMMENT $20B0 if no jump
FORCE_SYMBOL $20B2 bonusScore
COMMENT_LINE $20B8 LDA #200 ; otherwise load 200
COMMENT_LINE $20B8 LDX #no_score_string ; load score address
COMMENT_LINE $20B8 JSR Add_Score_a ; add to score
FORCE_NO_SYMBOL $20B8
FORCE_SYMBOL $20BA tmp1
FORCE_SYMBOL $20BE reachedHomeMusicGirl
FORCE_SYMBOL $20C3 reachedHomeHappyMusic
COMMENT $20C6 is there a current piece playing?
FORCE_SYMBOL $20C6 currentMusic
COMMENT $20C8 if not
COMMENT $20CA play it now
FORCE_SYMBOL $20CA currentMusic
FORCE_SYMBOL $20CD init_ym_sound
FORCE_SYMBOL $20D2 nextMusic
FORCE_NO_SYMBOL $20D5
COMMENT $20D7 != 0
FORCE_SYMBOL $20D7 frogDeath
COMMENT $20DA != 0
FORCE_SYMBOL $20DA intermissionActive
FORCE_SYMBOL $20DC tmp2
COMMENT_LINE $20DE ***************************************************************************
COMMENT_LINE $20DE sets the current level "timer" of the home reached
COMMENT_LINE $20DE to the RAM string that is displayed in the "Box" when a home was reached
COMMENT_LINE $20DE 16bit uInt in "my_timer" to 2*8 bit ascii data in "timeLeft"+5
COMMENT_LINE $20DE ***************************************************************************
COMMENT_LINE $20DE start                    jsr      setTimerToString
COMMENT $20DE load the timer value
FORCE_SYMBOL $20DE my_timer
COMMENT $20E1 divide by two
COMMENT_LINE $20E2 value should defenitly be in B
COMMENT $20E2 Initialize BCD result to zero
FORCE_NO_SYMBOL $20E2
COMMENT $20E5 Add in the hundreds
FORCE_NO_SYMBOL $20E5
FORCE_NO_SYMBOL $20E9
FORCE_NO_SYMBOL $20EB
COMMENT $20F1 Add in the tens
FORCE_NO_SYMBOL $20F1
FORCE_NO_SYMBOL $20F5
FORCE_NO_SYMBOL $20F7
COMMENT $20FC Add in the ones
COMMENT $20FE Move it to the D-register
COMMENT $2100 only the high timer counts
COMMENT $2102 High nibble of the byte
COMMENT $2106 Number+'0' = Number as ASCII
FORCE_NO_SYMBOL $2106
COMMENT $210B Low nibble
FORCE_NO_SYMBOL $210B
FORCE_NO_SYMBOL $210D
COMMENT_LINE $2112 end                    jsr      setTimerToString
COMMENT_LINE $2112 ***************************************************************************
COMMENT $2112 load the timer value
FORCE_SYMBOL $2112 my_timer
COMMENT_LINE $2114 here starts the timer count down loop
COMMENT $2114 store the timer value
FORCE_SYMBOL $2114 my_timer
FORCE_NO_SYMBOL $2119
FORCE_SYMBOL $211C my_timer
FORCE_SYMBOL $2124 score_digit_2
FORCE_SYMBOL $2127 score_digit_2
FORCE_SYMBOL $212C score_digit_2
FORCE_SYMBOL $212F score_digit_3
FORCE_SYMBOL $2132 score_digit_3
FORCE_SYMBOL $2137 score_digit_3
FORCE_SYMBOL $213A score_digit_4
FORCE_SYMBOL $213D score_digit_4
FORCE_SYMBOL $2142 score_digit_4
FORCE_SYMBOL $2145 score_digit_5
FORCE_SYMBOL $2148 KarlTimerBonusSound
FORCE_SYMBOL $214B play_sfx_x_if_nothing_else
FORCE_NO_SYMBOL $214E
FORCE_SYMBOL $2152 do_csa_sound_startup
FORCE_SYMBOL $2155 currentMusic
COMMENT_LINE $215A initialize dispatcher for "in move" stuff - this is only the decoder, other stuff is done "directly"
COMMENT $215A first jumper of ym decoder
FORCE_SYMBOL $215A STREAM_PART_1
FORCE_SYMBOL $215D inMovePointer
FORCE_SYMBOL $2160 skipCount
FORCE_SYMBOL $2163 skipCount_now
FORCE_SYMBOL $2166 do_score
FORCE_NO_SYMBOL $2169
COMMENT $216C blank low and zero low
FORCE_SYMBOL $216C VIA_cntl
FORCE_SYMBOL $216E Intensity_a
COMMENT $2171 draw_objects
FORCE_SYMBOL $2171 entry_timer_count_down
FORCE_NO_SYMBOL $2174
COMMENT $2176 blank low and zero low
FORCE_SYMBOL $2176 VIA_cntl
FORCE_SYMBOL $2178 bonusScore
FORCE_SYMBOL $217F n200
FORCE_NO_SYMBOL $2182
FORCE_SYMBOL $2186 n200200
FORCE_SYMBOL $2189 frog_y
FORCE_NO_SYMBOL $218D
FORCE_SYMBOL $2191 frog_y
FORCE_SYMBOL $2196 bonusScore
FORCE_SYMBOL $2199 noBonusDisplay
COMMENT $219C set game scaling
FORCE_SYMBOL $219C SCALE_FACTOR_GAME
COMMENT $219E move to time 1 lo, this means scaling
FORCE_SYMBOL $219E VIA_t1_cnt_lo
COMMENT $21A0 load current frog position to D
FORCE_SYMBOL $21A0 frog_pos
COMMENT_LINE $21A3 slight offset to frog Pos
COMMENT_LINE $21A3 adda #20
FORCE_NO_SYMBOL $21A3
FORCE_SYMBOL $21A5 n200200
FORCE_NO_SYMBOL $21AB
FORCE_SYMBOL $21AD my_move_to_d
COMMENT_LINE $21B0 PRINT_STR_5 zahlen2,zahlen2_end, 18
COMMENT $21B0 Save string pointer
FORCE_SYMBOL $21B0 Vec_Str_Ptr
COMMENT $21B3 Point to start of chargen bitmaps
FORCE_SYMBOL $21B3 zahlen2
COMMENT $21B6 a->AUX: b->ORB: $8x = Disable RAMP, Disable Mux, mux sel = 01 (int offsets)
FORCE_NO_SYMBOL $21B6
COMMENT $21B9 Clear D/A output
FORCE_SYMBOL $21B9 VIA_port_a
COMMENT $21BB Shift reg mode = 110 (shift out under system clock), T1 PB7 disabled, one shot mode
FORCE_SYMBOL $21BB VIA_aux_cntl
COMMENT_LINE $21BD first entry here, ramp is disabled
COMMENT_LINE $21BD if there was a jump from below
COMMENT_LINE $21BD ramp will be enabled by next line
COMMENT $21BD ramp off/on set mux to channel 1
FORCE_SYMBOL $21BD VIA_port_b
COMMENT $21BF Enable mux
FORCE_SYMBOL $21BF VIA_port_b
COMMENT $21C1 both to ORB, both disable ram, mux sel = 0 (y int), a:->enable mux: b:->disable mux
FORCE_NO_SYMBOL $21C1
COMMENT $21C4 Disable mux
FORCE_SYMBOL $21C4 VIA_port_b
COMMENT $21C6 Disable RAMP, set mux to channel 0, disable mux
FORCE_SYMBOL $21C6 VIA_port_b
COMMENT $21C8 Enable mux
FORCE_SYMBOL $21C8 VIA_port_b
COMMENT $21CA disable mux
FORCE_SYMBOL $21CA VIA_port_b
COMMENT_LINE $21CC Note:
COMMENT_LINE $21CC doing another "STB      <VIA_port_b" does not work due to timing issues!
COMMENT $21CC Get text width
COMMENT $21CF Send it to the D/A
FORCE_SYMBOL $21CF VIA_port_a
COMMENT $21D1 [4]enable RAMP, disable mux
FORCE_SYMBOL $21D1 VIA_port_b
COMMENT $21D3 [3]
COMMENT_LINE $21D5 one letter is drawn (one row that is) in 18 cycles
COMMENT_LINE $21D5 13 cycles overhead
COMMENT_LINE $21D5 ramp is thus active for #ofLetters*18 + 13 cycles
COMMENT $21D5 [+5]Get bitmap from chargen table
COMMENT $21D7 [+4]rasterout of char bitmap "row" thru shift out in shift register
FORCE_SYMBOL $21D7 VIA_shift_reg
COMMENT $21D9 [+6]Get next character
COMMENT $21DB [+3]Go back if not terminator
COMMENT $21DD [4]disable RAMP, disable mux
FORCE_SYMBOL $21DD VIA_port_b
COMMENT $21DF Negate text width to D/A
FORCE_SYMBOL $21DF VIA_port_a
COMMENT $21E1 enable ramp, disable mux
FORCE_NO_SYMBOL $21E1
COMMENT $21E3 enable RAMP, disable mux
FORCE_SYMBOL $21E3 VIA_port_b
COMMENT $21E5 [4]Check for last row
COMMENT $21E8 [3]Branch if last row
COMMENT $21EA [5]Point to next chargen row
FORCE_SYMBOL $21EA ZAHLEN_MAX
COMMENT $21ED [6]Get string length
COMMENT $21EF [7]
FORCE_SYMBOL $21EF Vec_Str_Ptr
COMMENT $21F2 [2] - 2
FORCE_NO_SYMBOL $21F2
COMMENT $21F4 [3]Delay a moment
COMMENT_LINE $21F6 I think if the Macro was given the length of the string
COMMENT_LINE $21F6 than another 2 cycles per line can be saved,
COMMENT_LINE $21F6 since we probably could use leay -1,y bne...
COMMENT_LINE $21F6 in the loop, and not only load "A", but also B with textheight!
COMMENT $21F6 [6] Point to start of text string
FORCE_SYMBOL $21F6 Vec_Str_Ptr
COMMENT $21F9 [3]Delay a moment
COMMENT $21FB [2]disable RAMP, disable mux
FORCE_NO_SYMBOL $21FB
COMMENT $21FD [2]
COMMENT $21FE [2]
COMMENT $21FF [3]Delay some more in a loop
COMMENT $2201 disable RAMP, disable mux
FORCE_SYMBOL $2201 VIA_port_b
COMMENT $2203 Get text height
COMMENT $2205 Store text height in D/A [go down -> later]
FORCE_SYMBOL $2205 VIA_port_a
COMMENT $2207 Enable mux
FORCE_SYMBOL $2207 VIA_port_b
FORCE_NO_SYMBOL $2209
COMMENT $220C disable RAMP, disable mux
FORCE_SYMBOL $220C VIA_port_b
COMMENT $220E Clear D/A
FORCE_SYMBOL $220E VIA_port_a
COMMENT $2210 Go back for next scan line
COMMENT $2212 #$98 ;
FORCE_NO_SYMBOL $2212
COMMENT $2214 T1->PB7 enabled
FORCE_SYMBOL $2214 VIA_aux_cntl
FORCE_NO_SYMBOL $2216
COMMENT $2218 22 cycles from switch on ZERO disabled, and BLANK enabled
FORCE_SYMBOL $2218 VIA_cntl
COMMENT_LINE $222C below timer as String display takes 4500 cycles
COMMENT_LINE $222C look very nice - what to "drop"?
COMMENT_LINE $222C ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
FORCE_NO_SYMBOL $222C
COMMENT $222E move to time 1 lo, this means scaling
FORCE_SYMBOL $222E VIA_t1_cnt_lo
FORCE_SYMBOL $2233 Timer_BOX
FORCE_SYMBOL $2236 drawBox
FORCE_NO_SYMBOL $2239
FORCE_SYMBOL $223C Vec_Text_Height
COMMENT $223F move to time 1 lo, this means scaling
FORCE_SYMBOL $223F VIA_t1_cnt_lo
FORCE_SYMBOL $2241 timeLeft
FORCE_NO_SYMBOL $2244
FORCE_SYMBOL $2247 sync_Print_Str_d
COMMENT_LINE $224A ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
FORCE_SYMBOL $224A isAttractMode
FORCE_SYMBOL $224F displayButton
COMMENT $2252 load the timer value
FORCE_SYMBOL $2252 my_timer
COMMENT $2255 count it down by $20
FORCE_NO_SYMBOL $2255
COMMENT $2257 if not minus... go on
FORCE_SYMBOL $225B tmp2
COMMENT_LINE $2262 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
FORCE_SYMBOL $2262 DP_to_C8
FORCE_SYMBOL $2266 bonusScore
COMMENT $2269 != 0
FORCE_SYMBOL $2269 intermissionActive
COMMENT $226C != 0
FORCE_SYMBOL $226C frogDeath
COMMENT $226F no bonus collected for this frog
FORCE_SYMBOL $226F frog_bonus
COMMENT $2272 what's the girls status?
FORCE_SYMBOL $2272 girl_status
COMMENT $2275 is it displayed
FORCE_SYMBOL $2275 IS_CARRIED
COMMENT $2279 is displayed
FORCE_SYMBOL $2279 girl_status
COMMENT $227C is waiting
FORCE_SYMBOL $227C girl_status
COMMENT $227F initiate the round counter
FORCE_SYMBOL $227F girl_round_counter_reset
COMMENT $2282 store it
FORCE_SYMBOL $2282 girl_round_counter
COMMENT_LINE $2286 JMP reinit_level ; last JSR can allways be a jump
COMMENT_LINE $2286 ***************************************************************************
COMMENT $2286 possible if 0 or negative
FORCE_SYMBOL $2286 gimmickPossible
FORCE_NO_SYMBOL $2289
FORCE_SYMBOL $228B levelDoneTemp
COMMENT $228E be quiet
COMMENT $228E no music is playing ->0
FORCE_SYMBOL $228E Vec_Music_Flag
COMMENT $2290 shadow regs
FORCE_SYMBOL $2290 Init_Music_Buf
COMMENT_LINE $2293 in the next do sound call
COMMENT_LINE $2293 all regs are cleared automatically
FORCE_NO_SYMBOL $2293
FORCE_SYMBOL $2295 addHundred
COMMENT $229B load this level to A
FORCE_SYMBOL $229B game_level
COMMENT $229D remember it...
COMMENT_LINE $229F load 'LEVEL DONE' level number
COMMENT $22A1 and store it to game level
FORCE_SYMBOL $22A1 game_level
COMMENT $22A3 set this level up
FORCE_SYMBOL $22A3 setup_level
COMMENT $22A6 and init it
FORCE_SYMBOL $22A6 init_new_frog_vars
COMMENT_LINE $22A9 display till button pressed
COMMENT $22A9 this piece of music
FORCE_SYMBOL $22A9 levelDoneMusic
COMMENT $22AC must be played
FORCE_SYMBOL $22AC currentMusic
COMMENT $22AF NOW
FORCE_SYMBOL $22AF init_ym_sound
FORCE_SYMBOL $22B2 intermissionActive
FORCE_NO_SYMBOL $22B4
FORCE_SYMBOL $22B8 skipCount_now
FORCE_SYMBOL $22BB do_csa_sound_startup
FORCE_SYMBOL $22BE oneYMRound
COMMENT_LINE $22CB below timer as String display takes 4500 cycles
COMMENT_LINE $22CB look very nice - what to "drop"?
COMMENT_LINE $22CB ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $22CB BOX
FORCE_NO_SYMBOL $22CB
COMMENT $22CD move to time 1 lo, this means scaling
FORCE_SYMBOL $22CD VIA_t1_cnt_lo
FORCE_SYMBOL $22D2 Level_BOX_1
FORCE_NO_SYMBOL $22D7
FORCE_SYMBOL $22DA Vec_Text_Height
FORCE_NO_SYMBOL $22DD
COMMENT $22DF move to time 1 lo, this means scaling
FORCE_SYMBOL $22DF VIA_t1_cnt_lo
FORCE_SYMBOL $22E1 level_complete_text
FORCE_NO_SYMBOL $22E4
FORCE_SYMBOL $22E7 sync_Print_Str_d
FORCE_NO_SYMBOL $22EA
COMMENT $22EC Shift reg mode = 000 free disable, T1 PB7 enabled
FORCE_SYMBOL $22EC VIA_aux_cntl
COMMENT $22EE draw this 'level'
FORCE_SYMBOL $22EE entry_level_done
FORCE_SYMBOL $22F1 musicOption
FORCE_SYMBOL $22F6 levelDoneTemp
FORCE_SYMBOL $22FD currentYLenCount
FORCE_NO_SYMBOL $2300
COMMENT $2305 get button status
FORCE_SYMBOL $2305 Read_Btns
COMMENT $2308 is a button pressed?
FORCE_NO_SYMBOL $2308
COMMENT $230A no, than stay in init_screen_loop
COMMENT $230C restore old game level
COMMENT $230E and set it
FORCE_SYMBOL $230E game_level
FORCE_SYMBOL $2311 intermissionActive
COMMENT_LINE $2315 ***************************************************************************
FORCE_NO_SYMBOL $2317
COMMENT $2319 Shift reg mode = 000 free disable, T1 PB7 enabled
FORCE_SYMBOL $2319 VIA_aux_cntl
FORCE_SYMBOL $231E Vec_0Ref_Enable
COMMENT $2321 Get line pattern from table
FORCE_NO_SYMBOL $2322
FORCE_NO_SYMBOL $2324
COMMENT $232A Store pattern
FORCE_SYMBOL $232A Vec_Pattern
FORCE_SYMBOL $232F my_move_to_d
COMMENT $2332 Draw 4 lines
FORCE_NO_SYMBOL $2332
FORCE_SYMBOL $2334 Draw_Pat_VL_a
COMMENT_LINE $2337 rts
COMMENT_LINE $2337 ***************************************************************************
COMMENT_LINE $2337 and some 'small' intermissions...
COMMENT_LINE $2337 just text, nothing fancy
COMMENT_LINE $2337 the following functions could as well be only one with a
COMMENT_LINE $2337 index pointer to the text to be displayed...
COMMENT_LINE $2337 well, we got space enough, haven't we?
COMMENT_LINE $2337 roll_over_intermission:
COMMENT_LINE $2337 direct   $d0
COMMENT_LINE $2337 MY_QUIT                               ; be quiet
COMMENT_LINE $2337 JSR      Read_Btns                    ; get button status
COMMENT_LINE $2337 LDA      #$ff                         ; load a timer, how long the following
COMMENT_LINE $2337 STA      tmp1                         ; text will be displayed
COMMENT_LINE $2337 roll_over_intermission_loop:
COMMENT_LINE $2337 JSR      print_score
COMMENT_LINE $2337 LDD      #LITTLE_TEXT_SIZE            ; load score text size
COMMENT_LINE $2337 STD      Vec_Text_HW                  ; poke it to ram location
COMMENT_LINE $2337 LDU      #roll_over_string            ; string to be printed
COMMENT_LINE $2337 LDD      #(-$10*256)+(lo(-$50))
COMMENT_LINE $2337 JSR      Print_Str_d                  ; Print the string
COMMENT_LINE $2337 DEC      tmp1                         ; decreas timer,
COMMENT_LINE $2337 BEQ      roll_over_intermission_end   ; if zero, than we are done
COMMENT_LINE $2337 TST      Vec_Music_Flag               ; test the music flag
COMMENT_LINE $2337 BNE      roll_over_sound_is_playing   ; if music done, get out of loop
COMMENT_LINE $2337 ;         PLAY_SOUND  ta_ta_ta1
COMMENT_LINE $2337 roll_over_sound_is_playing:
COMMENT_LINE $2337 JSR      Read_Btns                    ; get button status
COMMENT_LINE $2337 CMPA     #$00                         ; is a button pressed?
COMMENT_LINE $2337 BEQ      roll_over_intermission_loop  ; start another round
COMMENT_LINE $2337 roll_over_intermission_end:
COMMENT_LINE $2337 RTS
COMMENT_LINE $2337 ***************************************************************************
COMMENT_LINE $2337 check if 2 player game
COMMENT_LINE $2337 if so switch to other player, in case he is already dead - stay at same player
COMMENT_LINE $2337 decreases no_frogs2 of other player in case he is already dead - each round
FORCE_SYMBOL $2337 no_frogs
FORCE_SYMBOL $233A no_frogs2
FORCE_SYMBOL $233D playerCountOption
FORCE_SYMBOL $2342 currentPlayer
COMMENT_LINE $2347 check if other player is dead
FORCE_SYMBOL $2347 P2_no_frogs
FORCE_SYMBOL $234C no_frogs
FORCE_SYMBOL $2351 startPlayer
FORCE_SYMBOL $2354 P1_start
COMMENT_LINE $235B check if other player is dead
FORCE_SYMBOL $235B P1_no_frogs
FORCE_SYMBOL $2360 no_frogs
FORCE_SYMBOL $2365 startPlayer
FORCE_SYMBOL $2368 P2_start
COMMENT_LINE $236D now load other player
FORCE_SYMBOL $236D currentPlayer
FORCE_NO_SYMBOL $2371
FORCE_SYMBOL $2373 currentPlayer
FORCE_SYMBOL $2378 P1_start
FORCE_SYMBOL $237B loadPlayer
FORCE_SYMBOL $2380 P2_start
FORCE_SYMBOL $2383 loadPlayer
FORCE_SYMBOL $2386 tmp2
FORCE_SYMBOL $2389 no_reinit_level
FORCE_SYMBOL $238D P2_no_frogs
FORCE_SYMBOL $2390 P2_no_frogs
FORCE_SYMBOL $2393 no_frogs2
FORCE_SYMBOL $2397 P1_no_frogs
FORCE_SYMBOL $239A P1_no_frogs
FORCE_SYMBOL $239D no_frogs2
COMMENT_LINE $23A1 ***************************************************************************
COMMENT_LINE $23A1 writes data from current active variables to
COMMENT_LINE $23A1 player variables pointed to by U register
COMMENT_LINE $23A3 ensure befr save that houses are clean from temporary stuff
COMMENT $23A3 is there any croco stuff at all?
FORCE_SYMBOL $23A3 croco_status
COMMENT $23A6 croco is displayed
FORCE_SYMBOL $23A6 IS_DISPLAYED
COMMENT $23AA load current croco offset
FORCE_SYMBOL $23AA croco_house
COMMENT $23AD get address of U and add the offset
FORCE_SYMBOL $23AD home_objects
COMMENT $23B0 in U address of 'random' home
FORCE_NO_SYMBOL $23B2
FORCE_NO_SYMBOL $23B5
COMMENT $23B7 IS WAITING
FORCE_SYMBOL $23B7 croco_status
COMMENT $23BA is there any croco stuff at all?
FORCE_SYMBOL $23BA fly_status
COMMENT $23BD fly is displayed
FORCE_SYMBOL $23BD IS_DISPLAYED
COMMENT $23C1 load current fly offset
FORCE_SYMBOL $23C1 fly_house
COMMENT $23C4 get address of U and add the offset
FORCE_SYMBOL $23C4 home_objects
COMMENT $23C7 in U address of 'random' home
FORCE_NO_SYMBOL $23C9
FORCE_NO_SYMBOL $23CC
COMMENT $23CE is WAITING
FORCE_SYMBOL $23CE fly_status
FORCE_SYMBOL $23D3 score_digit_front
FORCE_SYMBOL $23D8 score_digit_4
FORCE_SYMBOL $23DD score_digit_2
FORCE_SYMBOL $23E2 score_digit_SPACE1
FORCE_SYMBOL $23E7 score_digit_SPACE2
FORCE_SYMBOL $23EC score_digit_back
FORCE_SYMBOL $23F1 no_frogs
FORCE_SYMBOL $23F6 game_level
FORCE_SYMBOL $23FB in_home_counter
FORCE_SYMBOL $2400 home_objects
FORCE_NO_SYMBOL $2403
COMMENT_LINE $240D ***************************************************************************
COMMENT_LINE $240D writes data from player var (pointer U) to current active variables
FORCE_SYMBOL $240F score_digit_front
FORCE_SYMBOL $2414 score_digit_4
FORCE_SYMBOL $2419 score_digit_2
FORCE_SYMBOL $241E score_digit_SPACE1
FORCE_SYMBOL $2423 score_digit_SPACE2
FORCE_SYMBOL $2428 score_digit_back
FORCE_SYMBOL $242D no_frogs
FORCE_SYMBOL $2432 game_level
FORCE_SYMBOL $2437 in_home_counter
FORCE_SYMBOL $243A home_objects
FORCE_NO_SYMBOL $243D
COMMENT_LINE $2446 correct highscore checking
FORCE_SYMBOL $2446 score_digit_5
COMMENT $2449 and store it, for new life at change... (every 10000 points)
FORCE_SYMBOL $2449 high_check
COMMENT_LINE $244D ***************************************************************************
COMMENT $246B no music is played
FORCE_NO_SYMBOL $246B
FORCE_SYMBOL $246E nextMusic
FORCE_SYMBOL $2471 currentMusic
FORCE_SYMBOL $2474 sfx_status_3
COMMENT_LINE $2477 display till button pressed
FORCE_SYMBOL $2477 shutup
FORCE_NO_SYMBOL $247A
FORCE_SYMBOL $247C tmp1
COMMENT $247F recal counter, about 21 Minutes befor roll over
FORCE_SYMBOL $247F RecalCounter
FORCE_NO_SYMBOL $2482
FORCE_SYMBOL $2484 RecalCounter
COMMENT $2487 sets dp to d0, and pos at 0, 0
FORCE_SYMBOL $2487 Wait_Recal
COMMENT $248A just for assembler optimization...
COMMENT_LINE $248A below timer as String display takes 4500 cycles
COMMENT_LINE $248A look very nice - what to "drop"?
COMMENT_LINE $248A ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $248A BOX
FORCE_NO_SYMBOL $248A
COMMENT $248C move to time 1 lo, this means scaling
FORCE_SYMBOL $248C VIA_t1_cnt_lo
FORCE_SYMBOL $2491 Level_BOX
FORCE_SYMBOL $2494 drawBox
FORCE_NO_SYMBOL $2497
FORCE_SYMBOL $249A Vec_Text_Height
FORCE_NO_SYMBOL $249D
COMMENT $249F move to time 1 lo, this means scaling
FORCE_SYMBOL $249F VIA_t1_cnt_lo
FORCE_SYMBOL $24A1 currentPlayer
FORCE_SYMBOL $24A6 playerOne
FORCE_SYMBOL $24AB playerTWO
FORCE_NO_SYMBOL $24AE
FORCE_SYMBOL $24B1 sync_Print_Str_d
FORCE_NO_SYMBOL $24B4
COMMENT $24B6 Shift reg mode = 000 free disable, T1 PB7 enabled
FORCE_SYMBOL $24B6 VIA_aux_cntl
FORCE_SYMBOL $24B8 tmp1
COMMENT $24BD get button status
FORCE_SYMBOL $24BD Read_Btns
COMMENT $24C0 is a button pressed?
FORCE_NO_SYMBOL $24C0
COMMENT $24C2 no, than stay in init_screen_loop
FORCE_NO_SYMBOL $24C4
COMMENT_LINE $24C9 pauseGame
COMMENT_LINE $24C9 andcc #$ff-$40 ; clear firq
COMMENT_LINE $24C9 pshs     d,y,u,cc,dp
COMMENT_LINE $24C9 loopi
COMMENT_LINE $24C9 jsr      do_csa_startup
COMMENT_LINE $24C9 LDD      #NORMAL_TEXT_SIZE            ; load default text height & width
COMMENT_LINE $24C9 STD      Vec_Text_HW                  ; poke it to ram location
COMMENT_LINE $24C9 JSR      Intensity_5F                 ; Sets the intensity of the
COMMENT_LINE $24C9 ldd      #$ff3c
COMMENT_LINE $24C9 std      Vec_Text_Height
COMMENT_LINE $24C9 _SCALE_B
COMMENT_LINE $24C9 ldu      Vec_Str_Ptr
COMMENT_LINE $24C9 ldd      #0
COMMENT_LINE $24C9 jsr      Print_Str_d
COMMENT_LINE $24C9 JSR      Read_Btns                    ; get button status
COMMENT_LINE $24C9 CMPA     #$00                         ; is a button pressed?
COMMENT_LINE $24C9 BEQ     loopi                      ; no, than stay in init_screen_loop
COMMENT_LINE $24C9 puls     d,y,u,cc,dp, pc
COMMENT_LINE $24C9 ***************************************************************************
COMMENT_LINE $24C9 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $24C9 in 2016
COMMENT_LINE $24C9 all stuff contained here is public domain
COMMENT_LINE $24C9 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $24C9 morphing subroutines                                                      ;
COMMENT_LINE $24C9 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $24C9 ***************************************************************************
COMMENT_LINE $24C9 below are all subroutines for morphing
COMMENT_LINE $24C9 (only two) set_up_morphing(), do_one_morph_step()
COMMENT_LINE $24C9 ***************************************************************************
COMMENT_LINE $24C9 this sets up a morph
COMMENT_LINE $24C9 in U a pointer to a morph structure is expected,
COMMENT_LINE $24C9 structure:
COMMENT_LINE $24C9 DW               ; morph from vector list
COMMENT_LINE $24C9 DW               ; morph to vector list
COMMENT_LINE $24C9 DB               ; morph steps
COMMENT_LINE $24C9 DB               ; delay between one morph step
COMMENT_LINE $24C9 DW               ; optional (0 or structure)
COMMENT_LINE $24C9 ; pointer to next morph structure
COMMENT_LINE $24C9 DB               ; startup delay
COMMENT_LINE $24C9 vector list must have (as usual with my routines) the following style
COMMENT_LINE $24C9 count, rel y, rel x, rel y, rel x, ...
COMMENT_LINE $24C9 maximal vectors for morphing is now 63 (127/2)
COMMENT_LINE $24C9 if more are needed than something below cries for a 16 bit change...
COMMENT_LINE $24C9 vector list don't need to have the same length anymore
COMMENT_LINE $24C9 for optimal performance use a power of two step counter (-1)
COMMENT_LINE $24C9 (8, 16, 32, 64 are supported with fast DIV routines)
COMMENT_LINE $24C9 this routine sets up three vector lists (sort of) in RAM
COMMENT_LINE $24C9 current_morph_vectorlist_org
COMMENT_LINE $24C9 current_morph_vectorlist
COMMENT_LINE $24C9 current_morph_vector_diffs
COMMENT_LINE $24C9 current_morph_vectorlist_org
COMMENT_LINE $24C9 is the original startlist, but possibly lengthened to the
COMMENT_LINE $24C9 max vectorlist length of the two passed vectors (filled with 0,0 coordinates)
COMMENT_LINE $24C9 current_morph_vectorlist
COMMENT_LINE $24C9 is the storage area for the next to be drawn vectorlist
COMMENT_LINE $24C9 is = to the original vector list (not max length)
COMMENT_LINE $24C9 current_morph_vector_diffs
COMMENT_LINE $24C9 not a real vector list, this contains the difference between the
COMMENT_LINE $24C9 points of the two passed vector lists
COMMENT_LINE $24C9 used in 'do_one_morph_step' to calculate the next vector
COMMENT_LINE $24C9 further some variables are set, like delay, div routine, and morph_structure...
FORCE_SYMBOL $24C9 DP_to_C8
COMMENT $24CC remember current morph structure
FORCE_SYMBOL $24CC morph_structure
COMMENT_LINE $24CE first clear all current stuff, since we
COMMENT_LINE $24CE don't know how long all vectors will be
COMMENT_LINE $24CE could be optimized to a later fill
COMMENT_LINE $24CE with only the fills we need,
COMMENT_LINE $24CE but at this point vectrex should be fast enough
COMMENT_LINE $24CE so it doesn't matter to waste a bit time here...
COMMENT_LINE $24CE since current_morph_vectorlist_org, current_morph_vectorlist and current_morph_vector_diffs
COMMENT_LINE $24CE are neighbours one Clear_x_d should be enough...
COMMENT $24CE address to clear
FORCE_SYMBOL $24CE current_morph_vectorlist_org
COMMENT $24D1 number of bytes - 1 to clear
COMMENT $24D4 clear sub routine in ROM
FORCE_SYMBOL $24D4 Clear_x_d
COMMENT $24D7 X = pointer to 'from'
FORCE_NO_SYMBOL $24D7
COMMENT $24D9 Y = pointer to 'to'
FORCE_NO_SYMBOL $24D9
COMMENT $24DC load number of vectors
FORCE_NO_SYMBOL $24DC
COMMENT $24DE compare number of vectors
FORCE_NO_SYMBOL $24DE
COMMENT $24E0 which vector list is longer ?
COMMENT $24E2 load number of vectors 'to', the second...
FORCE_NO_SYMBOL $24E2
COMMENT_LINE $24E4 in A is the higher vector count
COMMENT $24E4 set high value in vector lists
FORCE_SYMBOL $24E4 current_morph_vectorlist_org
COMMENT $24E7 add 1
COMMENT $24E8 multiply by two, since every vector has two coordinates
COMMENT $24E9 remember in tmp2
FORCE_SYMBOL $24E9 tmp2
COMMENT_LINE $24EB copy 'from' to original
COMMENT $24EB destination pointer
COMMENT $24EE source pointer
FORCE_NO_SYMBOL $24EE
COMMENT $24F0 load length and step over length byte
COMMENT $24F2 increase 1, since one is missing
COMMENT $24F3 times two, since there are two coordinates
COMMENT $24F4 and copy it
FORCE_SYMBOL $24F4 Move_Mem_a
COMMENT $24F7 load current morph structure
FORCE_SYMBOL $24F7 morph_structure
COMMENT_LINE $24F9 copy 'from' to current
COMMENT $24F9 destination pointer
FORCE_SYMBOL $24F9 current_morph_vectorlist
COMMENT $24FC source pointer
FORCE_NO_SYMBOL $24FC
COMMENT $24FE load length
FORCE_NO_SYMBOL $24FE
COMMENT $2500 increase 1, since one is missing
COMMENT $2501 times two, since there are two coordinates
COMMENT $2502 add 1 since counter is also copied
COMMENT $2503 and copy it
FORCE_SYMBOL $2503 Move_Mem_a
COMMENT $2506 load current morph structure
FORCE_SYMBOL $2506 morph_structure
COMMENT_LINE $2508 copy 'to' to 'buffer' (buffer is now 'current_morph_vector_diffs')
COMMENT_LINE $2508 destination pointer
COMMENT $2508 no +1 here, since in diffs only the offsets are relevant anyway
FORCE_SYMBOL $2508 current_morph_vector_diffs
COMMENT $250B source pointer
FORCE_NO_SYMBOL $250B
COMMENT $250D load length and step over length byte
COMMENT $250F increase 1, since one is missing
COMMENT $2510 times two, since there are two coordinates
COMMENT $2511 and copy it
FORCE_SYMBOL $2511 Move_Mem_a
COMMENT $2514 load current morph structure
FORCE_SYMBOL $2514 morph_structure
COMMENT $2516 load morph steps to A
FORCE_NO_SYMBOL $2516
COMMENT $2518 plus one
COMMENT $2519 and save it this is variable
FORCE_SYMBOL $2519 morph_counter
COMMENT $251B and again not variable
FORCE_SYMBOL $251B morph_steps
COMMENT $251D load morph delay A
FORCE_NO_SYMBOL $251D
COMMENT $251F and save it
FORCE_SYMBOL $251F morph_delay
COMMENT $2521 and mark the whole thing as active
FORCE_SYMBOL $2521 MORPHING_WORKING
COMMENT $2523 and store it
FORCE_SYMBOL $2523 morph_status
COMMENT_LINE $2525 now we must calculate the current_morph_vector_diffs
COMMENT_LINE $2525 we must determine the difference between the two sets of coordinates
COMMENT_LINE $2525 use tmp2 as loop counter
COMMENT_LINE $2525 number of vectors to process * 2
COMMENT $2528 Y = pointer to 'to' (buffer)
FORCE_SYMBOL $2528 current_morph_vector_diffs
COMMENT_LINE $252C and Y = pointer to vector diffs
COMMENT $252C load the second's vector coordinate
FORCE_NO_SYMBOL $252C
COMMENT $252E neg it, since we actually want a 'a=a-b' style
COMMENT_LINE $252F what we do is
COMMENT_LINE $252F invert b and do a b=-b+a
COMMENT $252F and add the source coordinate
COMMENT $2531 store is (back) to vector diffs
COMMENT $2533 decrease vector counter by 1
FORCE_SYMBOL $2533 tmp2
COMMENT $2535 and continue with next vector if not done
FORCE_SYMBOL $2537 DP_to_D0
COMMENT $253A all done now, return
COMMENT_LINE $253B ***************************************************************************
COMMENT_LINE $253B uses tmp1 and tmp2
COMMENT_LINE $253B destroys everything
COMMENT_LINE $253B what it does:
COMMENT_LINE $253B current_morph_vectorlist is = to a (possibly) newly calculated vector
COMMENT_LINE $253B but hardcoded
COMMENT_LINE $253B 16 steps,
COMMENT_LINE $253B not using JSR for DIV
COMMENT_LINE $253B saves 1000 cycles on intro screen!!!
COMMENT $253B load the status
FORCE_SYMBOL $253B morph_status
COMMENT $253E and look what there is to do
FORCE_SYMBOL $253E MORPHING_WORKING
COMMENT $2540 morphing now?
COMMENT $2542 or complete?
FORCE_SYMBOL $2542 MORPHING_COMPLETE
COMMENT $2544 should a new morph be initialized?
COMMENT_LINE $2546 here we come with MORPHING_DONE
COMMENT $2546 load the current morph structure
FORCE_SYMBOL $2546 morph_structure
COMMENT $2549 look if there is a next structure
FORCE_NO_SYMBOL $2549
COMMENT $254B no? than go out
COMMENT $254D yes? than initialize it
FORCE_SYMBOL $254D set_up_morphing
COMMENT $2550 go back
COMMENT $2551 load completeness flag to A
FORCE_SYMBOL $2551 MORPHING_COMPLETE
COMMENT $2553 and store it
FORCE_SYMBOL $2553 morph_status
COMMENT $2556 go back
COMMENT $2557 decrease delay value
FORCE_SYMBOL $2557 morph_delay
COMMENT $255A only morph when zero
COMMENT $255C otherise go back
COMMENT $255D in the current morph structure
FORCE_SYMBOL $255D morph_structure
COMMENT $2560 look for the next delay value
FORCE_NO_SYMBOL $2560
COMMENT $2562 and set it
FORCE_SYMBOL $2562 morph_delay
COMMENT $2565 load counter of morph steps
FORCE_SYMBOL $2565 morph_counter
COMMENT $2568 are we done ?
COMMENT $256A no, than calculate offset to number of steps
FORCE_SYMBOL $256A morph_steps
COMMENT $256D is it the beginning?
COMMENT_LINE $256F no, than we go on
COMMENT $256F pointer to original vectorlist
FORCE_SYMBOL $256F current_morph_vectorlist_org
COMMENT_LINE $2572 (RAM), but the (maybe) longer version
COMMENT $2572 load length of vectorlist and increment X
COMMENT $2574 only needed the first time we are in here...
FORCE_SYMBOL $2574 current_morph_vectorlist
COMMENT_LINE $2577 A current number of vectors in (RAM) vectorlist
COMMENT $2577 since it misses allways one, add one
COMMENT $2578 multiply by two, since every vector has
COMMENT_LINE $2579 start and end point
COMMENT $2579 use tmp2 as loop counter see below
FORCE_SYMBOL $2579 tmp2
COMMENT $257C U = pointer to vector diffs (RAM)
FORCE_SYMBOL $257C current_morph_vector_diffs
COMMENT $257F target memory pointer (RAM)
COMMENT_LINE $2583 plus one, since we don't need the vector counter
COMMENT $2583 load number of steps to B
FORCE_SYMBOL $2583 morph_steps
COMMENT $2586 invert the morph counter
FORCE_SYMBOL $2586 morph_counter
COMMENT $2589 store..., so we don't have to calculate in the loop
FORCE_SYMBOL $2589 morph_tmp
COMMENT $258C clear signess... (that's positiv)
FORCE_SYMBOL $258C morph_sign
COMMENT $258F load the difference between the 'to' coordinates to A
COMMENT $2591 check if negative sign
COMMENT $2593 mark as negative
FORCE_SYMBOL $2593 morph_sign
COMMENT $2596 and make positiv
COMMENT $2597 initiated above..., this is the
FORCE_SYMBOL $2597 morph_tmp
COMMENT_LINE $259A 'morph step' of number of morph_steps we are makeing
COMMENT $259A multiply, B should be smaller
COMMENT_LINE $259B than A (B is cycle relevant)
FORCE_SYMBOL $25A3 divide_tmp
FORCE_SYMBOL $25A6 divide_tmp
COMMENT $25A9 is it signed?
FORCE_SYMBOL $25A9 morph_sign
COMMENT $25AC no, than go on
COMMENT $25AE otherwise restore the 'minus'
COMMENT $25AF and reset sign memory
FORCE_SYMBOL $25AF morph_sign
COMMENT $25B2 negate the div value
COMMENT_LINE $25B3 this is again a formal a=a-b
COMMENT_LINE $25B3 what we do is
COMMENT_LINE $25B3 invert b and do a b=-b+a
COMMENT $25B3 add the resulting difference to original coordinate
COMMENT $25B5 and store it to the current vectorlist
COMMENT $25B7 decrement the vectorlist loop counter by one
FORCE_SYMBOL $25B7 tmp2
COMMENT $25BA and if not done,.. repeat
COMMENT_LINE $25BC on first entry vectorlist is allready set
COMMENT $25BC decrement morph step counter
FORCE_SYMBOL $25BC morph_counter
COMMENT $25BF and go back
COMMENT $25C0 load current morph structure
FORCE_SYMBOL $25C0 morph_structure
COMMENT_LINE $25C3 copy 'to' to current_morph_vectorlist
COMMENT $25C3 destination pointer
FORCE_SYMBOL $25C3 current_morph_vectorlist
COMMENT $25C6 source pointer
FORCE_NO_SYMBOL $25C6
COMMENT $25C8 load length
FORCE_NO_SYMBOL $25C8
COMMENT $25CA increase 1, since one is missing
COMMENT $25CB times two, since there are two coordinates
COMMENT $25CC increase 1, since now we also copy the counter
COMMENT $25CD and copy it
FORCE_SYMBOL $25CD Move_Mem_a
COMMENT $25D0 no we are done with morphing...
FORCE_SYMBOL $25D0 MORPHING_DONE
COMMENT $25D2 and store it
FORCE_SYMBOL $25D2 morph_status
COMMENT $25D5 go back...
COMMENT_LINE $25D6 ***************************************************************************
COMMENT_LINE $25D6 end of morph routine section
COMMENT_LINE $25D6 ***************************************************************************
COMMENT_LINE $25D6 ***************************************************************************
COMMENT_LINE $25D6 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $25D6 in 2016
COMMENT_LINE $25D6 all stuff contained here is public domain
COMMENT_LINE $25D6 expects width strength to be = to the default bios location Vec_Text_Width
COMMENT_LINE $25D6 expects height strength to be = to the default bios location Vec_Text_Height
COMMENT_LINE $25D6 address of raster data is expected in U
COMMENT_LINE $25D6 print is done to current screen location
COMMENT_LINE $25D6 uses bios ram-locations  Vec_Counter_1,  Vec_Counter_2,  Vec_Counter_3
COMMENT_LINE $25D6 as temporary storages
COMMENT_LINE $25D6 zero delay is needed for zeroing to work correctly
COMMENT_LINE $25D6 depends on the distance of the current integrator position to actual zero point
COMMENT_LINE $25D6 experiment with my vectri:
COMMENT_LINE $25D6 ZERO ing the integrators takes time. Measures at my vectrex show e.g.:
COMMENT_LINE $25D6 If you move the beam with a to x = -127 and y = -127 at diffferent scale values, the time to reach zero:
COMMENT_LINE $25D6 - scale $ff -> zero 110 cycles
COMMENT_LINE $25D6 - scale $7f -> zero 75 cycles
COMMENT_LINE $25D6 - scale $40 -> zero 57 cycles
COMMENT_LINE $25D6 - scale $20 -> zero 53 cycles
COMMENT_LINE $25D6 put move position on stack put it so, that we can load "d" directly from stack
COMMENT $25D8 load line counter
COMMENT $25DA height counter +width counter +
FORCE_SYMBOL $25DA Vec_Counter_1
COMMENT $25DD width counter (work)
FORCE_SYMBOL $25DD Vec_Counter_3
COMMENT_LINE $25E0 setup VIA raster routine
COMMENT_LINE $25E0 setup rampin with auxControl
COMMENT_LINE $25E0 zero
COMMENT $25E0 zero the integrators
COMMENT $25E3 store zeroing values to cntl
FORCE_SYMBOL $25E3 VIA_cntl
COMMENT_LINE $25E5 ldb      #ZERO_DELAY                  ; and wait for zeroing to be actually done
COMMENT_LINE $25E5 reset integrators
COMMENT $25E5 reset integrator offset
FORCE_SYMBOL $25E5 VIA_port_a
COMMENT_LINE $25E7 wait that zeroing surely has the desired effect!
COMMENT $25E7 while waiting, zero offsets
FORCE_SYMBOL $25E7 VIA_port_b
COMMENT_LINE $25E9 decb
COMMENT_LINE $25E9 bne      zeroLoop
FORCE_SYMBOL $25E9 VIA_port_b
COMMENT_LINE $25EB unzero is done by moveto_d
FORCE_SYMBOL $25EB SCALE_MOVE
FORCE_SYMBOL $25ED VIA_t1_cnt_lo
FORCE_NO_SYMBOL $25EF
COMMENT_LINE $25F1 ;;;;; move to d as direct code start
COMMENT $25F1 Store Y in D/A register
FORCE_SYMBOL $25F1 VIA_port_a
COMMENT $25F3 Blank low, zero high?
FORCE_NO_SYMBOL $25F3
FORCE_SYMBOL $25F5 VIA_cntl
COMMENT $25F8 Enable mux
FORCE_SYMBOL $25F8 VIA_port_b
COMMENT $25FA Clear shift regigster
FORCE_SYMBOL $25FA VIA_shift_reg
COMMENT $25FC Disable mux
FORCE_SYMBOL $25FC VIA_port_b
COMMENT $25FE Store X in D/A register
FORCE_SYMBOL $25FE VIA_port_a
COMMENT $2600 enable timer
FORCE_SYMBOL $2600 VIA_t1_cnt_hi
COMMENT $2602 reload line width
FORCE_SYMBOL $2602 Vec_Counter_2
FORCE_SYMBOL $2605 Vec_Counter_3
COMMENT $2608 optimized correct adder for next scan line
COMMENT $260A done befor wait loop of move to d
FORCE_NO_SYMBOL $260A
FORCE_NO_SYMBOL $260C
COMMENT $260E mux disabled, mux sel = y int
FORCE_SYMBOL $2611 VIA_int_flags
COMMENT_LINE $2615 ;;;;; move to d as direct code end
COMMENT_LINE $2615 ensure y int does nothing
COMMENT $2615 to via b
FORCE_SYMBOL $2615 VIA_port_b
COMMENT $2617 ensure dac is 0
FORCE_SYMBOL $2617 VIA_port_a
COMMENT $2619 enable mux
FORCE_SYMBOL $2619 VIA_port_b
COMMENT_LINE $261B nop ; delay
COMMENT $261B disable mux
FORCE_SYMBOL $261B VIA_port_b
COMMENT $261D a = $18,
FORCE_NO_SYMBOL $261D
COMMENT $261F $18: T1 OneSHotMode WITHOUT Ramp control, Shift out under System clock
FORCE_SYMBOL $261F VIA_aux_cntl
COMMENT $2621 get width
FORCE_SYMBOL $2621 Vec_Text_Width
COMMENT $2624 Send it to the D/A
FORCE_SYMBOL $2624 VIA_port_a
COMMENT $2626 a = $01
FORCE_NO_SYMBOL $2626
COMMENT $2628 Enable RAMP, disable mux
FORCE_SYMBOL $2628 VIA_port_b
COMMENT_LINE $262A output is ongoing! (RAMP is enabled)
COMMENT $262A [5]
FORCE_SYMBOL $262A Vec_Counter_3
COMMENT $262D [2] wait
COMMENT $262E [2] wait
COMMENT $262F [6] get bitmap (shiftreg-data) from raster table
COMMENT $2631 [4] This loop needs to have exactly 18 cycles (8*2+2)
FORCE_SYMBOL $2631 VIA_shift_reg
COMMENT_LINE $2633 one complete shiftreg output takes 16 cycles (8*2) + 2 cycles since VIA needs some rest
COMMENT $2633 [3]
COMMENT $2635 [2]
COMMENT $2636 [3] go back if not done for line
COMMENT $2638 [2] delay 2 to finish last shiftout
COMMENT $2639 [4] b is 0 now, switch of shift
FORCE_SYMBOL $2639 VIA_shift_reg
COMMENT_LINE $263B don't bother about ramp and dac, in the next round all will be resetted
COMMENT $263B EXIT routine
FORCE_NO_SYMBOL $263B
COMMENT $263D T1->PB7 enabled
FORCE_SYMBOL $263D VIA_aux_cntl
COMMENT $263F check for last row
FORCE_SYMBOL $263F Vec_Counter_1
COMMENT $2642 branch if not last row
COMMENT $2644 all done, correct stack
COMMENT_LINE $2646 rts
COMMENT_LINE $2646 ***************************************************************************
COMMENT_LINE $2646 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $2646 in 2016
COMMENT_LINE $2646 all stuff contained here is public domain
COMMENT_LINE $2646 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $2646 this file contains macros that are used to print the score while in game  ;
COMMENT_LINE $2646 It is special in the way that it uses an own 5 line FONT                  ;
COMMENT_LINE $2646 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $2646 High score in Karl Quappe - 3 parts
COMMENT_LINE $2646 1) HighScore while playing
COMMENT_LINE $2646 2) Highscore in HighscoreTable
COMMENT_LINE $2646 3) Highscore on Eprom
COMMENT_LINE $2646 1) While playing - is kept  in 5 seperate bytes
COMMENT_LINE $2646 score_digit_1 - score_digit_5
COMMENT_LINE $2646 each of these digits has a range from 0-9
COMMENT_LINE $2646 digit 5 (MSB) has a range from 0-16
COMMENT_LINE $2646 each digit is printed with a special font, 0-9 representing 0-9 and 10-16 representing 10-16 (in one character)
COMMENT_LINE $2646 so the highest score displayable is: 16 999 0 (last character is always a "0")
COMMENT_LINE $2646 2) Highscore table consists of 6 ascii characters representing the score in ascii nothing special here
COMMENT_LINE $2646 3) Highscore on the eprom is kept as a 16bit unsigned int (0-65535)
COMMENT_LINE $2646 upon conversion the score is shifted one position to the right (divided by 10), since the last position is always a 0
COMMENT_LINE $2646 Thus on the eprom a score up to 655350 can be stored.
COMMENT_LINE $2646 ergo: in game highscore is correct displayed up to a score of 169990
COMMENT_LINE $2646 highscore recording and displaying in HS table is correct up to a score of 655350
COMMENT_LINE $2646 after that the score starts from 0 again
COMMENT_LINE $2646 ***************************************************************************
FORCE_SYMBOL $2646 gameModeOption
FORCE_SYMBOL $2649 current_highscore_gameMode
FORCE_SYMBOL $264C isAttractMode
COMMENT $264F save recal counter, since
FORCE_SYMBOL $264F RecalCounter
FORCE_SYMBOL $2654 isAttractMode
FORCE_SYMBOL $2657 DP_to_D0
COMMENT_LINE $265A setup high score editing stuff, like cursor pos and blinking
FORCE_SYMBOL $265A currentHSEditPlace
FORCE_SYMBOL $265D currentHSEditBlinkState
COMMENT $2660 all letters in editor start with A-position
FORCE_SYMBOL $2662 hsEditLetter1
FORCE_SYMBOL $2665 hsEditLetter2
FORCE_SYMBOL $2668 hsEditLetter3
FORCE_SYMBOL $266B shutup
COMMENT $266E recal counter is used as blinking "counter"
FORCE_SYMBOL $266E RecalCounter
COMMENT $2674 get button status once, since only
FORCE_SYMBOL $2674 Read_Btns
COMMENT_LINE $2677 differences are noticed
COMMENT $2677 is music still playing?
FORCE_SYMBOL $2677 Vec_Music_Flag
COMMENT $267A than jump
COMMENT $267C load adddress of music structure
FORCE_SYMBOL $267C yankee
COMMENT $267F and play the tune again...
COMMENT_LINE $267F the next instructions initialize a new sound
COMMENT_LINE $267F load #1
COMMENT_LINE $267F set this as marker for music start
COMMENT_LINE $267F CLR      Vec_Music_Flag               ; doesn'T destroy a register
COMMENT_LINE $267F INC      Vec_Music_Flag               ; to do it that way
FORCE_NO_SYMBOL $267F
FORCE_SYMBOL $2681 Vec_Music_Flag
COMMENT $2684 load a music structure (piece_of_music)
FORCE_SYMBOL $2684 yankee
COMMENT $2687 and store it to my own music active pointer
FORCE_SYMBOL $2687 music_active
COMMENT_LINE $268A next a do_my_sound and than do sound must be called
COMMENT $268A well, the startup...
FORCE_SYMBOL $268A musicOption
COMMENT $268F (MAKRO) see above
COMMENT $268F (MAKRO) the 'Init_Music_chk' expects this
FORCE_NO_SYMBOL $268F
COMMENT $2693 get active music
FORCE_SYMBOL $2693 music_active
COMMENT $2695 and init new notes
FORCE_SYMBOL $2695 Init_Music_chk
COMMENT $2698 recal counter, about 21 Minutes befor roll over
FORCE_SYMBOL $2698 RecalCounter
FORCE_NO_SYMBOL $269B
FORCE_SYMBOL $269D RecalCounter
COMMENT $26A0 sets dp to d0, and pos at 0, 0
FORCE_SYMBOL $26A0 Wait_Recal
COMMENT $26A3 just for assembler optimization...
COMMENT $26A3 ROM function that does the sound playing
FORCE_SYMBOL $26A3 Do_Sound
COMMENT $26A6 load default text height & width
FORCE_SYMBOL $26A6 NORMAL_TEXT_SIZE
COMMENT $26A9 poke it to ram location
FORCE_SYMBOL $26A9 Vec_Text_HW
COMMENT $26AC Sets the intensity of the
FORCE_SYMBOL $26AC Intensity_5F
COMMENT_LINE $26AF ldd      #$ff3c
FORCE_NO_SYMBOL $26AF
FORCE_SYMBOL $26B2 Vec_Text_Height
FORCE_NO_SYMBOL $26B5
COMMENT $26B7 move to time 1 lo, this means scaling
FORCE_SYMBOL $26B7 VIA_t1_cnt_lo
COMMENT $26B9 max, since -2 in each step
FORCE_NO_SYMBOL $26B9
COMMENT $26BC high score title
FORCE_SYMBOL $26BC highscore_string
FORCE_SYMBOL $26BF sync_Print_Str_d_fixed
FORCE_SYMBOL $26C2 current_highscore_gameMode
FORCE_NO_SYMBOL $26C5
FORCE_SYMBOL $26C9 hardcore_string
FORCE_SYMBOL $26CC highScoreHardTable
COMMENT $26CF max, since -2 in each step
FORCE_NO_SYMBOL $26CF
FORCE_SYMBOL $26D4 competition_string
FORCE_SYMBOL $26D7 highScoreTable
COMMENT $26DA max, since -2 in each step
FORCE_NO_SYMBOL $26DA
FORCE_SYMBOL $26DF sync_Print_Str_d_fixed
FORCE_NO_SYMBOL $26E4
FORCE_SYMBOL $26E6 tmp2
FORCE_NO_SYMBOL $26E9
COMMENT $26EE counter of highscores handled
FORCE_SYMBOL $26EE mul_tmp2
COMMENT $26F1 build one highscore line (X is scoretable entry parameter)
FORCE_SYMBOL $26F1 buildHighScoreTmp
COMMENT_LINE $26F4 change string to appear edited!
FORCE_SYMBOL $26F4 highScoreEditMode
COMMENT $26F9 Sets the intensity of the
FORCE_SYMBOL $26F9 Intensity_5F
FORCE_SYMBOL $26FC highScorePlace
FORCE_SYMBOL $26FF mul_tmp2
COMMENT $2704 Sets the intensity of the
FORCE_SYMBOL $2704 Intensity_7F
COMMENT_LINE $2707 the current score string is the one we are editing currently
COMMENT_LINE $2707 that high score takes its "name" letters from the special editor positions
COMMENT_LINE $2707 the following code replaces in the tmp line the 3 letters,
COMMENT_LINE $2707 in relation to the blink state also exchanges a letter with an underscore
FORCE_NO_SYMBOL $270A
FORCE_SYMBOL $270E currentHSEditBlinkState
FORCE_NO_SYMBOL $2712
FORCE_SYMBOL $2714 currentHSEditBlinkState
FORCE_SYMBOL $2717 highScoreTmpBuffer
FORCE_SYMBOL $271A hsEditLetter1
FORCE_NO_SYMBOL $271D
FORCE_SYMBOL $271F hsEditLetter2
FORCE_NO_SYMBOL $2722
FORCE_SYMBOL $2724 hsEditLetter3
FORCE_NO_SYMBOL $2727
FORCE_SYMBOL $2729 currentHSEditBlinkState
COMMENT_LINE $272E here place cursor instead of Letter
FORCE_SYMBOL $2730 currentHSEditPlace
COMMENT_LINE $2735 each line of the high score is printed out, regardless of editing
FORCE_SYMBOL $2735 mul_tmp2
FORCE_SYMBOL $2738 HighScoreEntry
FORCE_NO_SYMBOL $273A
COMMENT $273C move to time 1 lo, this means scaling
FORCE_SYMBOL $273C VIA_t1_cnt_lo
FORCE_SYMBOL $273E highScoreTmpBuffer
FORCE_NO_SYMBOL $2741
COMMENT $2743 save x pointer
FORCE_SYMBOL $2745 sync_Print_Str_d_fixed
FORCE_NO_SYMBOL $274A
COMMENT $274C next highscore entry is 30 "pixels" down
FORCE_NO_SYMBOL $274C
FORCE_NO_SYMBOL $274E
FORCE_SYMBOL $2750 tmp2
FORCE_SYMBOL $2757 query_joystick
COMMENT $275A if in edit mode - do question the joystick... and stuff
FORCE_SYMBOL $275A highScoreEditMode
COMMENT_LINE $275D hey dissi "bre ak once"
COMMENT $275D otherwise stay here and "return" to main screen on button press
COMMENT $275F only jump if last joy pos was zero (needed for testing later)
FORCE_SYMBOL $275F last_joy_x
COMMENT $2762 load joystick 1 position X to A
FORCE_SYMBOL $2762 Vec_Joy_1_X
COMMENT $2765 store this joystick position
FORCE_SYMBOL $2765 last_joy_x
FORCE_SYMBOL $276D current_highscore_gameMode
FORCE_NO_SYMBOL $2770
FORCE_NO_SYMBOL $2774
FORCE_SYMBOL $2776 current_highscore_gameMode
FORCE_SYMBOL $277B current_highscore_gameMode
COMMENT $277E get button status
FORCE_SYMBOL $277E Read_Btns
COMMENT $2781 is a button pressed?
FORCE_NO_SYMBOL $2781
COMMENT $2783 no, than stay in init_screen_loop
COMMENT $2787 restore counter
FORCE_SYMBOL $2789 RecalCounter
FORCE_SYMBOL $278C isAttractMode
COMMENT_LINE $2790 ***************************************************************************
COMMENT_LINE $2790 get joystick
COMMENT_LINE $2790 left right change cursor pos
COMMENT_LINE $2790 up down, change letters
COMMENT_LINE $2790 any button finish editing
COMMENT $2790 get button status
FORCE_SYMBOL $2790 Read_Btns
COMMENT $2793 is a button pressed?
FORCE_NO_SYMBOL $2793
COMMENT $2795 no, than stay in init_screen_loop
COMMENT_LINE $2797 X POS TESTS
COMMENT $2797 only jump if last joy pos was zero (needed for testing later)
FORCE_SYMBOL $2797 last_joy_x
COMMENT $279A load joystick 1 position X to A
FORCE_SYMBOL $279A Vec_Joy_1_X
COMMENT $279D store this joystick position
FORCE_SYMBOL $279D last_joy_x
COMMENT $27A2 joystick moved to left
COMMENT $27A4 test the old joystick position
COMMENT $27A5 was center
COMMENT_LINE $27A7 move right, letterpos =  letterpos +1
FORCE_SYMBOL $27A7 currentHSEditPlace
FORCE_SYMBOL $27AA currentHSEditPlace
FORCE_NO_SYMBOL $27AD
FORCE_SYMBOL $27B1 currentHSEditPlace
COMMENT $27B6 test the old joystick position
COMMENT $27B7 was center
FORCE_SYMBOL $27B9 currentHSEditPlace
FORCE_NO_SYMBOL $27BE
FORCE_SYMBOL $27C0 currentHSEditPlace
COMMENT_LINE $27C5 Y POS TESTS
COMMENT $27C5 only jump if last joy pos was zero (needed for testing later)
FORCE_SYMBOL $27C5 last_joy_y
COMMENT $27C8 load joystick 1 position X to A
FORCE_SYMBOL $27C8 Vec_Joy_1_Y
COMMENT $27CB store this joystick position
FORCE_SYMBOL $27CB last_joy_y
COMMENT $27D0 joystick moved to left
COMMENT $27D2 test the old joystick position
COMMENT $27D3 was center
COMMENT_LINE $27D5 move up, letter =  letter -1
FORCE_SYMBOL $27D5 currentHSEditPlace
FORCE_SYMBOL $27D8 hsEditLetter1
COMMENT $27E8 test the old joystick position
COMMENT $27E9 was center
FORCE_SYMBOL $27EB currentHSEditPlace
FORCE_SYMBOL $27EE hsEditLetter1
FORCE_SYMBOL $27FC highscores_screen_loop_1
COMMENT_LINE $27FF write letters to HS and exit
FORCE_SYMBOL $27FF current_highscore_gameMode
FORCE_NO_SYMBOL $2802
FORCE_SYMBOL $2806 highScoreHardTable
FORCE_SYMBOL $280B highScoreTable
COMMENT_LINE $280E LDU #highScoreTable
FORCE_SYMBOL $280E highScorePlace
FORCE_SYMBOL $2813 HighScoreEntry
FORCE_SYMBOL $2818 hsEditLetter1
FORCE_NO_SYMBOL $281B
FORCE_SYMBOL $281D hsEditLetter2
FORCE_NO_SYMBOL $2820
FORCE_SYMBOL $2822 hsEditLetter3
FORCE_NO_SYMBOL $2825
FORCE_SYMBOL $2829 RecalCounter
FORCE_SYMBOL $282C isAttractMode
COMMENT_LINE $2830 ***************************************************************************
COMMENT_LINE $283B score table entry in x
COMMENT_LINE $283B destroys D, y
COMMENT_LINE $283B this builds one "highscore" line, that can be printed in the highscore screen
FORCE_SYMBOL $283B highScoreTmpBuffer
COMMENT $283F name
FORCE_NO_SYMBOL $283F
COMMENT $2843 name
FORCE_NO_SYMBOL $2843
COMMENT $284B and level
FORCE_NO_SYMBOL $284B
FORCE_NO_SYMBOL $284D
FORCE_NO_SYMBOL $2855
COMMENT $2859 space
COMMENT $2863 space
FORCE_NO_SYMBOL $2865
COMMENT $2867 2 byte of score
FORCE_NO_SYMBOL $2869
COMMENT $286B 2 byte of score
FORCE_NO_SYMBOL $286D
COMMENT $286F 2 byte of score
FORCE_NO_SYMBOL $2871
COMMENT $2873 score done
COMMENT_LINE $2876 ***************************************************************************
COMMENT_LINE $2876 ***************************************************************************
COMMENT_LINE $2876 divide 16 bit number in D by 16 bit number in tmp1, result must fit in 8 bit, result in b
COMMENT_LINE $2876 UNSIGNED
FORCE_SYMBOL $2876 divide_tmp
FORCE_SYMBOL $2879 tmp1
FORCE_SYMBOL $2885 divide_tmp
FORCE_SYMBOL $288A divide_tmp
FORCE_SYMBOL $2890 divide_tmp
FORCE_SYMBOL $2893 tmp1
FORCE_SYMBOL $2898 divide_tmp
COMMENT_LINE $289C ***************************************************************************
COMMENT_LINE $289C destroys tmp1 tmp2, alters X
FORCE_SYMBOL $289E tmp2
FORCE_SYMBOL $28A1 tmp1
FORCE_SYMBOL $28A6 tmp2
FORCE_SYMBOL $28AB tmp1
FORCE_SYMBOL $28AE tmp2
COMMENT_LINE $28B7 rts
COMMENT_LINE $28B7 ***************************************************************************
COMMENT_LINE $28B7 SLOW but straight forward, no need for speed!
COMMENT_LINE $28B7 input number in D
COMMENT_LINE $28B7 output number * 10 as ascii in conversionBuffer (with $80)
COMMENT_LINE $28B7 max result -> 655350
COMMENT_LINE $28B7 destroys u,x,y,d, tmp1 (16bit), tmp2 (16bit), divide_tmp
FORCE_SYMBOL $28B7 conversionBuffer
FORCE_NO_SYMBOL $28BD
FORCE_SYMBOL $28C0 tmp1
FORCE_NO_SYMBOL $28C9
FORCE_NO_SYMBOL $28CD
FORCE_SYMBOL $28D0 tmp1
FORCE_NO_SYMBOL $28D9
FORCE_NO_SYMBOL $28DD
FORCE_SYMBOL $28E0 tmp1
FORCE_NO_SYMBOL $28E9
FORCE_NO_SYMBOL $28ED
FORCE_SYMBOL $28F0 tmp1
FORCE_NO_SYMBOL $28F9
FORCE_NO_SYMBOL $28FD
FORCE_SYMBOL $2900 tmp1
FORCE_NO_SYMBOL $290A
FORCE_NO_SYMBOL $290F
COMMENT_LINE $2913 rts
COMMENT_LINE $2913 ***************************************************************************
COMMENT_LINE $2913 loads the 5 ascii score pointed by x to
COMMENT_LINE $2913 the 6 bcd score conversion buffer
COMMENT_LINE $2913 destroys d
FORCE_SYMBOL $2913 conversionBuffer
FORCE_NO_SYMBOL $2917
FORCE_NO_SYMBOL $2919
FORCE_NO_SYMBOL $291B
FORCE_NO_SYMBOL $291D
FORCE_NO_SYMBOL $291F
FORCE_NO_SYMBOL $2921
FORCE_NO_SYMBOL $2923
FORCE_NO_SYMBOL $2925
COMMENT_LINE $2928 ***************************************************************************
COMMENT_LINE $2928 add to all values in conversion buffer a '0'
COMMENT_LINE $2928 destroys d, x
FORCE_NO_SYMBOL $2928
FORCE_SYMBOL $292A conversionBuffer
FORCE_NO_SYMBOL $292F
COMMENT_LINE $2937 ***************************************************************************
COMMENT_LINE $2937 destroys d
FORCE_NO_SYMBOL $2939
COMMENT_LINE $294A ***************************************************************************
COMMENT_LINE $294A destroys d
FORCE_NO_SYMBOL $294C
COMMENT_LINE $295D scrolls position of score one to the right
COMMENT_LINE $295D up to a max score of 199990 -> 19999
COMMENT_LINE $295D "bcd" values expected in conversion buffer
FORCE_SYMBOL $295D conversionBuffer
FORCE_NO_SYMBOL $2961
FORCE_NO_SYMBOL $2963
FORCE_NO_SYMBOL $2965
FORCE_NO_SYMBOL $2967
FORCE_NO_SYMBOL $2969
FORCE_NO_SYMBOL $296D
FORCE_NO_SYMBOL $296F
FORCE_NO_SYMBOL $2971
FORCE_NO_SYMBOL $2973
FORCE_NO_SYMBOL $2976
FORCE_NO_SYMBOL $2978
COMMENT_LINE $297B ***************************************************************************
COMMENT_LINE $297B SLOW but straight forward, no need for speed!
COMMENT_LINE $297B input asccii in conversionBuffer 6 bytes + $80
COMMENT_LINE $297B last zero is discarded!
COMMENT_LINE $297B max input 655350
COMMENT_LINE $297B destroys x,y,d, tmp1 (16bit), tmp2 (16bit)
FORCE_SYMBOL $297B conversionBuffer
FORCE_NO_SYMBOL $2981
FORCE_NO_SYMBOL $2984
FORCE_NO_SYMBOL $2988
FORCE_NO_SYMBOL $298D
FORCE_NO_SYMBOL $2991
FORCE_NO_SYMBOL $2996
FORCE_NO_SYMBOL $299A
FORCE_NO_SYMBOL $299F
FORCE_NO_SYMBOL $29A3
FORCE_NO_SYMBOL $29A8
FORCE_NO_SYMBOL $29AC
COMMENT_LINE $29B4 ***************************************************************************
FORCE_SYMBOL $29B4 tmp1
FORCE_SYMBOL $29BD tmp2
FORCE_SYMBOL $29C0 tmp2
FORCE_SYMBOL $29C3 tmp1
COMMENT_LINE $29CD ***************************************************************************
COMMENT_LINE $29CD ***************************************************************************
COMMENT_LINE $2A6B ***************************************************************************
COMMENT_LINE $2A6B include vector sprite definitions
COMMENT_LINE $2A6B ***************************************************************************
COMMENT_LINE $2A79 ***************************************************************************
COMMENT_LINE $2A79 db level
COMMENT_LINE $2A79 following repeat
COMMENT_LINE $2A79 dw time - 0 means attract over
COMMENT_LINE $2A79 db y,x (joystick queries)
COMMENT $2A7A DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2A7C DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2A7E DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2A80 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2A82 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2A84 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2A86 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2A88 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2A8A DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2A8C DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2A8E DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2A90 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2A92 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2A94 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2A96 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2A98 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2A9A DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2A9C DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2A9E DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AA0 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AA2 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AA4 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AA6 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AA8 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AAA DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AAC DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AAE DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AB0 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AB2 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AB4 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AB6 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AB8 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2ABA DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2ABC DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2ABE DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AC0 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AC2 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2AC6 ***************************************************************************
COMMENT_LINE $2AC6 db level
COMMENT_LINE $2AC6 following repeat
COMMENT_LINE $2AC6 dw time - 0 means attract over
COMMENT_LINE $2AC6 db y,x (joystick queries)
COMMENT $2AC7 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AC9 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2ACB DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2ACD DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2ACF DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AD1 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AD3 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AD5 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AD7 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AD9 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2ADB DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2ADD DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2ADF DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AE1 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AE3 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AE5 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AE7 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AE9 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AEB DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AED DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AEF DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AF1 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AF3 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AF5 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AF7 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AF9 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AFB DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AFD DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AFF DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B01 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B03 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B05 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B07 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B09 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B0B DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B0D DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B0F DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B11 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B13 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B15 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B17 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B19 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B1B DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B1D dw       $45A0                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B1D dw       $45E6                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B1D dw       $45F6                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B1D dw       $8604                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B1D dw       $8611                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B1D dw       $861D                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B1D dw       $8628                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B1D dw       $464F                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B1D dw       $C664                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B1D dw       $C678                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B1D dw       $C686                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B1D dw       $C691                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B1D dw       $C69B                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B1D dw       $46A8                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B1D dw       $46B2                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B1D dw       $46D3                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B1D dw       $46E5                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B1D dw       $46F2                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B1D dw       $4705                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B1D dw       $475B                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B1D dw       $4798                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B1D dw       $C850                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B1D dw       $48A5                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B1D dw       $88D5                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B1D dw       $48E6                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B1D dw       $C8EE                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B1D dw       $4900                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B1D dw       $8910                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B1D dw       $4922                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B1D dw       $C92D                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B1D dw       $C939                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B1D dw       $4943                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B1D dw       $494C                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B1D dw       $4962                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B1D dw       $4975                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B1D dw       $4988                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B1D dw       $499F                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B1D dw       $49EF                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B1D dw       $4A1C                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B1F ***************************************************************************
COMMENT_LINE $2B1F db level
COMMENT_LINE $2B1F following repeat
COMMENT_LINE $2B1F dw time - 0 means attract over
COMMENT_LINE $2B1F db y,x (joystick queries)
COMMENT $2B20 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B22 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B24 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B26 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B28 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B2A DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B2C DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B2E DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B30 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B32 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B34 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B36 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B38 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B3A DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B3C DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B3E DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B40 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B42 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B44 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B46 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B48 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B4A DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B4C DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B4E DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B50 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B52 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B54 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B56 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B58 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B5A DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B5C DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B5E DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B60 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B62 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B64 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B66 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B68 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B6A DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B6C DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B6E DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B70 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B72 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B74 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B76 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B7A ***************************************************************************
COMMENT_LINE $2B7A db level
COMMENT_LINE $2B7A following repeat
COMMENT_LINE $2B7A dw time - 0 means attract over
COMMENT_LINE $2B7A db y,x (joystick queries)
COMMENT $2B7B DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B7D DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B7F DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B81 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B83 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B85 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B87 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B89 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B8B DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B8D DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B8F DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B91 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B93 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B95 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B97 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B99 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B9B DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B9D DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B9F DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BA1 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BA3 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BA5 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BA7 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BA9 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BAB DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BAD DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BAF DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BB1 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BB3 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BB5 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BB7 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BB9 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BBB DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BBD DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BBF DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BC1 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BC3 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BC5 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BC7 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BC9 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BCB DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BCD DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BCF DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BD1 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BD3 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BD5 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BD7 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BD9 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BDB DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BDD DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BDF DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BE1 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BE3 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BE5 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BE7 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BE9 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BEB DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BED DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BEF DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BF1 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BF3 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BF5 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BF7 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BF9 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BFB DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BFD DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2C01 ***************************************************************************
COMMENT_LINE $2C01 db level
COMMENT_LINE $2C01 following repeat
COMMENT_LINE $2C01 dw time - 0 means attract over
COMMENT_LINE $2C01 db y,x (joystick queries)
COMMENT $2C02 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C04 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C06 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C08 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C0A DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C0C DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C0E DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C10 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C12 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C14 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C16 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C18 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C1A DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C1C DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C1E DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C20 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C22 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C24 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C26 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C28 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C2A DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C2C DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C2E DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C30 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C32 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C34 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C36 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C38 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C3A DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C3C DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C3E DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C40 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C42 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C44 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C46 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C48 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C4A DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C4C DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C4E DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C50 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C52 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C54 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C56 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C58 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C5A DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C5C DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C5E DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C60 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C62 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C64 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C66 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C68 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C6A DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2C6E ***************************************************************************
COMMENT_LINE $2C6E db level
COMMENT_LINE $2C6E following repeat
COMMENT_LINE $2C6E dw time - 0 means attract over
COMMENT_LINE $2C6E db y,x (joystick queries)
COMMENT $2C6F DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C71 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C73 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C75 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C77 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C79 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C7B DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C7D DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C7F DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C81 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C83 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C85 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C87 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C89 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C8B DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C8D DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C8F DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C91 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C93 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C95 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C97 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C99 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C9B DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C9D DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C9F DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CA1 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CA3 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CA5 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CA7 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CA9 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CAB DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CAD DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CAF DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CB1 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CB3 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CB5 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CB7 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CB9 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CBB DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CBD DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CBF DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CC1 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CC3 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CC5 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CC7 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CC9 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CCB DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CCD DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CCF DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CD1 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CD3 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CD5 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CD7 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CD9 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CDB DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CDD DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CDF DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CE1 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CE3 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2CE7 one data = of screen movings in title
COMMENT $2CE7 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CE9 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CEB DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CED DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CEF DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CF1 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CF3 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CF5 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CF7 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CF9 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CFB DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CFD DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CFF DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D01 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D03 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D05 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D07 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D09 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D0B DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D0D DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2D11 one data = of screen movings in title
COMMENT $2D11 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D13 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D15 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D17 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D19 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D1B DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D1D DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D1F DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D21 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D23 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D25 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D27 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D29 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D2B DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D2D DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D2F DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D31 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D33 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D35 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D37 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D39 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D3B DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D3D DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D3F DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D41 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D43 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D45 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D47 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D49 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D4B DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D4D DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D4F DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2D53 one data = of screen movings in title
COMMENT $2D53 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D55 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D57 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D59 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D5B DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D5D DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D5F DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D61 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D63 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D65 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D67 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D69 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D6B DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D6D DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D6F DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D71 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D73 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D75 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D77 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D79 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D7B DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D7D DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D7F DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D81 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D8D zero terminate
COMMENT $2D8F DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D91 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D93 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D95 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D97 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D99 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D9B DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D9D DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D9F DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2DA1 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2DA3 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2DA5 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2DA7 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2DA9 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2DAB DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2DAD DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2DAF DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2DB1 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2DB3 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2DB5 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2DB7 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2DB9 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2DBB DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2DBD DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2DBF DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2DC1 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2DC3 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2DC5 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2DC9 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $2DC9 in 2016
COMMENT_LINE $2DC9 all stuff contained here is public domain
COMMENT_LINE $2DC9 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $2DC9 this file contains all definitions for morphing objects used throughout   ;
COMMENT_LINE $2DC9 vectrex frogger                                                           ;
COMMENT_LINE $2DC9 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $2E48 only one morphing at a time supported for now!!!
COMMENT $2E48 morph from
COMMENT $2E4A morph to
COMMENT $2E4C morph steps
COMMENT $2E4D delay between one morph step
COMMENT $2E4E optional (0 or structure)
COMMENT_LINE $2E50 pointer to next morph structure
COMMENT $2E50 startup delay
COMMENT $2E51 morph from
COMMENT $2E53 morph to
COMMENT $2E55 morph steps
COMMENT $2E56 delay between one morph step
COMMENT $2E57 optional (0 or structure)
COMMENT_LINE $2E59 pointer to next morph structure
COMMENT $2E59 startup delay
COMMENT $2E5A morph from
COMMENT $2E5C morph to
COMMENT $2E5E morph steps
COMMENT $2E5F delay between one morph step
COMMENT $2E60 optional (0 or structure)
COMMENT_LINE $2E62 pointer to next morph structure
COMMENT $2E62 startup delay
COMMENT $2E63 morph from
COMMENT $2E65 morph to
COMMENT $2E67 morph steps
COMMENT $2E68 delay between one morph step
COMMENT $2E69 optional (0 or structure)
COMMENT_LINE $2E6B pointer to next morph structure
COMMENT $2E6B startup delay
COMMENT $2E6C morph from
COMMENT $2E6E morph to
COMMENT $2E70 morph steps
COMMENT $2E71 delay between one morph step
COMMENT $2E72 optional (0 or structure)
COMMENT_LINE $2E74 pointer to next morph structure
COMMENT $2E74 startup delay
COMMENT $2E75 morph from
COMMENT $2E77 morph to
COMMENT $2E79 morph steps
COMMENT $2E7A delay between one morph step
COMMENT $2E7B optional (0 or structure)
COMMENT_LINE $2E7D pointer to next morph structure
COMMENT $2E7D startup delay
COMMENT_LINE $2E7E ***************************************************************************
COMMENT_LINE $2E7E this file is part of Karl Quappe, written by Malban
COMMENT_LINE $2E7E in 2016
COMMENT_LINE $2E7E all stuff contained here is public domain
COMMENT_LINE $2E7E ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $2E7E this file contains the vector list for the home of frogger                ;
COMMENT_LINE $2E7E ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $2E7E 21 vectors are drawn
COMMENT $2E89 _ _ _ _ _
COMMENT $2E8B __I I_I I_I I_I I_I I__
COMMENT_LINE $2EA9 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $2EA9 in 2016
COMMENT_LINE $2EA9 all stuff contained here is public domain
COMMENT_LINE $2EA9 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $2EA9 this file contains 'sprite' definition data for all frogs (non morphing)  ;
COMMENT_LINE $2EA9 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $2EA9 These are manual values, that respresent the
COMMENT_LINE $2EA9 visual offset the current frog sprite has in relation to its
COMMENT_LINE $2EA9 position
COMMENT_LINE $2EA9 the offset is neccesary, since not all vectorlists of the sprite
COMMENT_LINE $2EA9 start at the same "grid position"
COMMENT $2EA9 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2EAA offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2EAB offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2EAC offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2EAD offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2EAE offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2EAF -1 ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2EB0 offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2EC1 DB +$17 ; number of lines to draw
COMMENT $2EC3 draw to y, x
COMMENT $2EC5 draw to y, x
COMMENT $2EC7 draw to y, x
COMMENT $2EC9 draw to y, x
COMMENT $2ECB draw to y, x
COMMENT $2ECD draw to y, x
COMMENT $2ECF draw to y, x
COMMENT $2ED1 draw to y, x
COMMENT $2ED3 draw to y, x
COMMENT $2ED5 draw to y, x
COMMENT $2ED7 draw to y, x
COMMENT $2ED9 draw to y, x
COMMENT $2EDB draw to y, x
COMMENT $2EDD draw to y, x
COMMENT $2EDF draw to y, x
COMMENT $2EE1 draw to y, x
COMMENT $2EE3 draw to y, x
COMMENT $2EE5 draw to y, x
COMMENT $2EE7 draw to y, x
COMMENT_LINE $2EE9 DB +$17 ; number of lines to draw
COMMENT $2EEB draw to y, x
COMMENT $2EED draw to y, x
COMMENT $2EEF draw to y, x
COMMENT $2EF1 draw to y, x
COMMENT $2EF3 draw to y, x
COMMENT $2EF5 draw to y, x
COMMENT $2EF7 draw to y, x
COMMENT $2EF9 draw to y, x
COMMENT $2EFB draw to y, x
COMMENT $2EFD draw to y, x
COMMENT $2EFF draw to y, x
COMMENT $2F01 draw to y, x
COMMENT $2F03 draw to y, x
COMMENT $2F05 draw to y, x
COMMENT $2F07 draw to y, x
COMMENT $2F09 draw to y, x
COMMENT $2F0B draw to y, x
COMMENT $2F0D draw to y, x
COMMENT $2F0F draw to y, x
COMMENT_LINE $2F11 DB +$17 ; number of lines to draw
COMMENT $2F13 draw to y, x
COMMENT $2F15 draw to y, x
COMMENT $2F17 draw to y, x
COMMENT $2F19 draw to y, x
COMMENT $2F1B draw to y, x
COMMENT $2F1D draw to y, x
COMMENT $2F1F draw to y, x
COMMENT $2F21 draw to y, x
COMMENT $2F23 draw to y, x
COMMENT $2F25 draw to y, x
COMMENT $2F27 draw to y, x
COMMENT $2F29 draw to y, x
COMMENT $2F2B draw to y, x
COMMENT $2F2D draw to y, x
COMMENT $2F2F draw to y, x
COMMENT $2F31 draw to y, x
COMMENT $2F33 draw to y, x
COMMENT $2F35 draw to y, x
COMMENT $2F37 draw to y, x
COMMENT_LINE $2F39 DB +$17 ; number of lines to draw
COMMENT $2F3B draw to y, x
COMMENT $2F3D draw to y, x
COMMENT $2F3F draw to y, x
COMMENT $2F41 draw to y, x
COMMENT $2F43 draw to y, x
COMMENT $2F45 draw to y, x
COMMENT $2F47 draw to y, x
COMMENT $2F49 draw to y, x
COMMENT $2F4B draw to y, x
COMMENT $2F4D draw to y, x
COMMENT $2F4F draw to y, x
COMMENT $2F51 draw to y, x
COMMENT $2F53 draw to y, x
COMMENT $2F55 draw to y, x
COMMENT $2F57 draw to y, x
COMMENT $2F59 draw to y, x
COMMENT $2F5B draw to y, x
COMMENT $2F5D draw to y, x
COMMENT $2F5F draw to y, x
COMMENT_LINE $2F61 DB +$17 ; number of lines to draw
COMMENT $2F63 draw to y, x
COMMENT $2F65 draw to y, x
COMMENT $2F67 draw to y, x
COMMENT $2F69 draw to y, x
COMMENT $2F6B draw to y, x
COMMENT $2F6D draw to y, x
COMMENT $2F6F draw to y, x
COMMENT $2F71 draw to y, x
COMMENT $2F73 draw to y, x
COMMENT $2F75 draw to y, x
COMMENT $2F77 draw to y, x
COMMENT $2F79 draw to y, x
COMMENT $2F7B draw to y, x
COMMENT $2F7D draw to y, x
COMMENT $2F7F draw to y, x
COMMENT $2F81 draw to y, x
COMMENT $2F83 draw to y, x
COMMENT $2F85 draw to y, x
COMMENT $2F87 draw to y, x
COMMENT_LINE $2F89 DB +$17 ; number of lines to draw
COMMENT $2F8B draw to y, x
COMMENT $2F8D draw to y, x
COMMENT $2F8F draw to y, x
COMMENT $2F91 draw to y, x
COMMENT $2F93 draw to y, x
COMMENT $2F95 draw to y, x
COMMENT $2F97 draw to y, x
COMMENT $2F99 draw to y, x
COMMENT $2F9B draw to y, x
COMMENT $2F9D draw to y, x
COMMENT $2F9F draw to y, x
COMMENT $2FA1 draw to y, x
COMMENT $2FA3 draw to y, x
COMMENT $2FA5 draw to y, x
COMMENT $2FA7 draw to y, x
COMMENT $2FA9 draw to y, x
COMMENT $2FAB draw to y, x
COMMENT $2FAD draw to y, x
COMMENT $2FAF draw to y, x
COMMENT_LINE $2FC1 DB +$17 ; number of lines to draw
COMMENT $2FC3 draw to y, x
COMMENT $2FC5 draw to y, x
COMMENT $2FC7 draw to y, x
COMMENT $2FC9 draw to y, x
COMMENT $2FCB draw to y, x
COMMENT $2FCD draw to y, x
COMMENT $2FCF draw to y, x
COMMENT $2FD1 draw to y, x
COMMENT $2FD3 draw to y, x
COMMENT $2FD5 draw to y, x
COMMENT $2FD7 draw to y, x
COMMENT $2FD9 draw to y, x
COMMENT $2FDB draw to y, x
COMMENT $2FDD draw to y, x
COMMENT $2FDF draw to y, x
COMMENT $2FE1 draw to y, x
COMMENT $2FE3 draw to y, x
COMMENT $2FE5 draw to y, x
COMMENT $2FE7 draw to y, x
COMMENT_LINE $2FE9 DB +$17 ; number of lines to draw
COMMENT $2FEB draw to y, x
COMMENT $2FED draw to y, x
COMMENT $2FEF draw to y, x
COMMENT $2FF1 draw to y, x
COMMENT $2FF3 draw to y, x
COMMENT $2FF5 draw to y, x
COMMENT $2FF7 draw to y, x
COMMENT $2FF9 draw to y, x
COMMENT $2FFB draw to y, x
COMMENT $2FFD draw to y, x
COMMENT $2FFF draw to y, x
COMMENT $3001 draw to y, x
COMMENT $3003 draw to y, x
COMMENT $3005 draw to y, x
COMMENT $3007 draw to y, x
COMMENT $3009 draw to y, x
COMMENT $300B draw to y, x
COMMENT $300D draw to y, x
COMMENT $300F draw to y, x
COMMENT_LINE $3011 DB +$17 ; number of lines to draw
COMMENT $3013 draw to y, x
COMMENT $3015 draw to y, x
COMMENT $3017 draw to y, x
COMMENT $3019 draw to y, x
COMMENT $301B draw to y, x
COMMENT $301D draw to y, x
COMMENT $301F draw to y, x
COMMENT $3021 draw to y, x
COMMENT $3023 draw to y, x
COMMENT $3025 draw to y, x
COMMENT $3027 draw to y, x
COMMENT $3029 draw to y, x
COMMENT $302B draw to y, x
COMMENT $302D draw to y, x
COMMENT $302F draw to y, x
COMMENT $3031 draw to y, x
COMMENT $3033 draw to y, x
COMMENT $3035 draw to y, x
COMMENT $3037 draw to y, x
COMMENT_LINE $3039 DB +$17 ; number of lines to draw
COMMENT $303B draw to y, x
COMMENT $303D draw to y, x
COMMENT $303F draw to y, x
COMMENT $3041 draw to y, x
COMMENT $3043 draw to y, x
COMMENT $3045 draw to y, x
COMMENT $3047 draw to y, x
COMMENT $3049 draw to y, x
COMMENT $304B draw to y, x
COMMENT $304D draw to y, x
COMMENT $304F draw to y, x
COMMENT $3051 draw to y, x
COMMENT $3053 draw to y, x
COMMENT $3055 draw to y, x
COMMENT $3057 draw to y, x
COMMENT $3059 draw to y, x
COMMENT $305B draw to y, x
COMMENT $305D draw to y, x
COMMENT $305F draw to y, x
COMMENT_LINE $3061 DB +$17 ; number of lines to draw
COMMENT $3063 draw to y, x
COMMENT $3065 draw to y, x
COMMENT $3067 draw to y, x
COMMENT $3069 draw to y, x
COMMENT $306B draw to y, x
COMMENT $306D draw to y, x
COMMENT $306F draw to y, x
COMMENT $3071 draw to y, x
COMMENT $3073 draw to y, x
COMMENT $3075 draw to y, x
COMMENT $3077 draw to y, x
COMMENT $3079 draw to y, x
COMMENT $307B draw to y, x
COMMENT $307D draw to y, x
COMMENT $307F draw to y, x
COMMENT $3081 draw to y, x
COMMENT $3083 draw to y, x
COMMENT $3085 draw to y, x
COMMENT $3087 draw to y, x
COMMENT_LINE $3089 DB +$17 ; number of lines to draw
COMMENT $308B draw to y, x
COMMENT $308D draw to y, x
COMMENT $308F draw to y, x
COMMENT $3091 draw to y, x
COMMENT $3093 draw to y, x
COMMENT $3095 draw to y, x
COMMENT $3097 draw to y, x
COMMENT $3099 draw to y, x
COMMENT $309B draw to y, x
COMMENT $309D draw to y, x
COMMENT $309F draw to y, x
COMMENT $30A1 draw to y, x
COMMENT $30A3 draw to y, x
COMMENT $30A5 draw to y, x
COMMENT $30A7 draw to y, x
COMMENT $30A9 draw to y, x
COMMENT $30AB draw to y, x
COMMENT $30AD draw to y, x
COMMENT $30AF draw to y, x
COMMENT_LINE $30C1 DB +$17 ; number of lines to draw
COMMENT $30C3 draw to y, x
COMMENT $30C5 draw to y, x
COMMENT $30C7 draw to y, x
COMMENT $30C9 draw to y, x
COMMENT $30CB draw to y, x
COMMENT $30CD draw to y, x
COMMENT $30CF draw to y, x
COMMENT $30D1 draw to y, x
COMMENT $30D3 draw to y, x
COMMENT $30D5 draw to y, x
COMMENT $30D7 draw to y, x
COMMENT $30D9 draw to y, x
COMMENT $30DB draw to y, x
COMMENT $30DD draw to y, x
COMMENT $30DF draw to y, x
COMMENT $30E1 draw to y, x
COMMENT $30E3 draw to y, x
COMMENT $30E5 draw to y, x
COMMENT $30E7 draw to y, x
COMMENT_LINE $30E9 DB +$17 ; number of lines to draw
COMMENT $30EB draw to y, x
COMMENT $30ED draw to y, x
COMMENT $30EF draw to y, x
COMMENT $30F1 draw to y, x
COMMENT $30F3 draw to y, x
COMMENT $30F5 draw to y, x
COMMENT $30F7 draw to y, x
COMMENT $30F9 draw to y, x
COMMENT $30FB draw to y, x
COMMENT $30FD draw to y, x
COMMENT $30FF draw to y, x
COMMENT $3101 draw to y, x
COMMENT $3103 draw to y, x
COMMENT $3105 draw to y, x
COMMENT $3107 draw to y, x
COMMENT $3109 draw to y, x
COMMENT $310B draw to y, x
COMMENT $310D draw to y, x
COMMENT $310F draw to y, x
COMMENT_LINE $3111 DB +$17 ; number of lines to draw
COMMENT $3113 draw to y, x
COMMENT $3115 draw to y, x
COMMENT $3117 draw to y, x
COMMENT $3119 draw to y, x
COMMENT $311B draw to y, x
COMMENT $311D draw to y, x
COMMENT $311F draw to y, x
COMMENT $3121 draw to y, x
COMMENT $3123 draw to y, x
COMMENT $3125 draw to y, x
COMMENT $3127 draw to y, x
COMMENT $3129 draw to y, x
COMMENT $312B draw to y, x
COMMENT $312D draw to y, x
COMMENT $312F draw to y, x
COMMENT $3131 draw to y, x
COMMENT $3133 draw to y, x
COMMENT $3135 draw to y, x
COMMENT $3137 draw to y, x
COMMENT_LINE $3139 DB +$17 ; number of lines to draw
COMMENT $313B draw to y, x
COMMENT $313D draw to y, x
COMMENT $313F draw to y, x
COMMENT $3141 draw to y, x
COMMENT $3143 draw to y, x
COMMENT $3145 draw to y, x
COMMENT $3147 draw to y, x
COMMENT $3149 draw to y, x
COMMENT $314B draw to y, x
COMMENT $314D draw to y, x
COMMENT $314F draw to y, x
COMMENT $3151 draw to y, x
COMMENT $3153 draw to y, x
COMMENT $3155 draw to y, x
COMMENT $3157 draw to y, x
COMMENT $3159 draw to y, x
COMMENT $315B draw to y, x
COMMENT $315D draw to y, x
COMMENT $315F draw to y, x
COMMENT_LINE $3161 DB +$17 ; number of lines to draw
COMMENT $3163 draw to y, x
COMMENT $3165 draw to y, x
COMMENT $3167 draw to y, x
COMMENT $3169 draw to y, x
COMMENT $316B draw to y, x
COMMENT $316D draw to y, x
COMMENT $316F draw to y, x
COMMENT $3171 draw to y, x
COMMENT $3173 draw to y, x
COMMENT $3175 draw to y, x
COMMENT $3177 draw to y, x
COMMENT $3179 draw to y, x
COMMENT $317B draw to y, x
COMMENT $317D draw to y, x
COMMENT $317F draw to y, x
COMMENT $3181 draw to y, x
COMMENT $3183 draw to y, x
COMMENT $3185 draw to y, x
COMMENT $3187 draw to y, x
COMMENT_LINE $3189 DB +$17 ; number of lines to draw
COMMENT $318B draw to y, x
COMMENT $318D draw to y, x
COMMENT $318F draw to y, x
COMMENT $3191 draw to y, x
COMMENT $3193 draw to y, x
COMMENT $3195 draw to y, x
COMMENT $3197 draw to y, x
COMMENT $3199 draw to y, x
COMMENT $319B draw to y, x
COMMENT $319D draw to y, x
COMMENT $319F draw to y, x
COMMENT $31A1 draw to y, x
COMMENT $31A3 draw to y, x
COMMENT $31A5 draw to y, x
COMMENT $31A7 draw to y, x
COMMENT $31A9 draw to y, x
COMMENT $31AB draw to y, x
COMMENT $31AD draw to y, x
COMMENT $31AF draw to y, x
COMMENT_LINE $31C1 DB +$17 ; number of lines to draw
COMMENT $31C3 draw to y, x
COMMENT $31C5 draw to y, x
COMMENT $31C7 draw to y, x
COMMENT $31C9 draw to y, x
COMMENT $31CB draw to y, x
COMMENT $31CD draw to y, x
COMMENT $31CF draw to y, x
COMMENT $31D1 draw to y, x
COMMENT $31D3 draw to y, x
COMMENT $31D5 draw to y, x
COMMENT $31D7 draw to y, x
COMMENT $31D9 draw to y, x
COMMENT $31DB draw to y, x
COMMENT $31DD draw to y, x
COMMENT $31DF draw to y, x
COMMENT $31E1 draw to y, x
COMMENT $31E3 draw to y, x
COMMENT $31E5 draw to y, x
COMMENT $31E7 draw to y, x
COMMENT_LINE $31E9 DB +$17 ; number of lines to draw
COMMENT $31EB draw to y, x
COMMENT $31ED draw to y, x
COMMENT $31EF draw to y, x
COMMENT $31F1 draw to y, x
COMMENT $31F3 draw to y, x
COMMENT $31F5 draw to y, x
COMMENT $31F7 draw to y, x
COMMENT $31F9 draw to y, x
COMMENT $31FB draw to y, x
COMMENT $31FD draw to y, x
COMMENT $31FF draw to y, x
COMMENT $3201 draw to y, x
COMMENT $3203 draw to y, x
COMMENT $3205 draw to y, x
COMMENT $3207 draw to y, x
COMMENT $3209 draw to y, x
COMMENT $320B draw to y, x
COMMENT $320D draw to y, x
COMMENT $320F draw to y, x
COMMENT_LINE $3211 DB +$17 ; number of lines to draw
COMMENT $3213 draw to y, x
COMMENT $3215 draw to y, x
COMMENT $3217 draw to y, x
COMMENT $3219 draw to y, x
COMMENT $321B draw to y, x
COMMENT $321D draw to y, x
COMMENT $321F draw to y, x
COMMENT $3221 draw to y, x
COMMENT $3223 draw to y, x
COMMENT $3225 draw to y, x
COMMENT $3227 draw to y, x
COMMENT $3229 draw to y, x
COMMENT $322B draw to y, x
COMMENT $322D draw to y, x
COMMENT $322F draw to y, x
COMMENT $3231 draw to y, x
COMMENT $3233 draw to y, x
COMMENT $3235 draw to y, x
COMMENT $3237 draw to y, x
COMMENT_LINE $3239 DB +$17 ; number of lines to draw
COMMENT $323B draw to y, x
COMMENT $323D draw to y, x
COMMENT $323F draw to y, x
COMMENT $3241 draw to y, x
COMMENT $3243 draw to y, x
COMMENT $3245 draw to y, x
COMMENT $3247 draw to y, x
COMMENT $3249 draw to y, x
COMMENT $324B draw to y, x
COMMENT $324D draw to y, x
COMMENT $324F draw to y, x
COMMENT $3251 draw to y, x
COMMENT $3253 draw to y, x
COMMENT $3255 draw to y, x
COMMENT $3257 draw to y, x
COMMENT $3259 draw to y, x
COMMENT $325B draw to y, x
COMMENT $325D draw to y, x
COMMENT $325F draw to y, x
COMMENT_LINE $3261 DB +$17 ; number of lines to draw
COMMENT $3263 draw to y, x
COMMENT $3265 draw to y, x
COMMENT $3267 draw to y, x
COMMENT $3269 draw to y, x
COMMENT $326B draw to y, x
COMMENT $326D draw to y, x
COMMENT $326F draw to y, x
COMMENT $3271 draw to y, x
COMMENT $3273 draw to y, x
COMMENT $3275 draw to y, x
COMMENT $3277 draw to y, x
COMMENT $3279 draw to y, x
COMMENT $327B draw to y, x
COMMENT $327D draw to y, x
COMMENT $327F draw to y, x
COMMENT $3281 draw to y, x
COMMENT $3283 draw to y, x
COMMENT $3285 draw to y, x
COMMENT $3287 draw to y, x
COMMENT_LINE $3289 DB +$17 ; number of lines to draw
COMMENT $328B draw to y, x
COMMENT $328D draw to y, x
COMMENT $328F draw to y, x
COMMENT $3291 draw to y, x
COMMENT $3293 draw to y, x
COMMENT $3295 draw to y, x
COMMENT $3297 draw to y, x
COMMENT $3299 draw to y, x
COMMENT $329B draw to y, x
COMMENT $329D draw to y, x
COMMENT $329F draw to y, x
COMMENT $32A1 draw to y, x
COMMENT $32A3 draw to y, x
COMMENT $32A5 draw to y, x
COMMENT $32A7 draw to y, x
COMMENT $32A9 draw to y, x
COMMENT $32AB draw to y, x
COMMENT $32AD draw to y, x
COMMENT $32AF draw to y, x
COMMENT_LINE $32B1 DB 7
COMMENT $32C3 speed + direction
COMMENT $32C4 graphic definition
COMMENT $32C6 length in SCALE_FACTOR_GAME
COMMENT $32C7 anim delay value
COMMENT $32C8 pointer to next anim object
COMMENT $32CA offsets y in 'SCALE_FACTOR_GAME'
COMMENT $32CB offsets x in 'SCALE_FACTOR_GAME'
COMMENT $32CC brightness
COMMENT $32CD special flag
COMMENT_LINE $32CE DB 7
COMMENT $32E0 speed + direction
COMMENT $32E1 graphic definition
COMMENT $32E3 length in SCALE_FACTOR_GAME
COMMENT $32E4 anim delay value
COMMENT $32E5 pointer to next anim object
COMMENT $32E7 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $32E8 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $32E9 brightness
COMMENT $32EA special flag
COMMENT $32FD speed + direction
COMMENT $32FE graphic definition
COMMENT $3300 length in SCALE_FACTOR_GAME
COMMENT $3301 anim delay value
COMMENT $3302 pointer to next anim object
COMMENT $3304 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3305 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3306 brightness
COMMENT $3307 special flag
COMMENT $3308 speed + direction
COMMENT $3309 graphic definition
COMMENT $330B length in SCALE_FACTOR_GAME
COMMENT $330C anim delay value
COMMENT $330D pointer to next anim object
COMMENT $330F offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3310 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3311 brightness
COMMENT $3312 special flag
COMMENT $3315 draw to y, x
COMMENT $3317 draw to y, x
COMMENT $3319 draw to y, x
COMMENT $331B draw to y, x
COMMENT $331D draw to y, x
COMMENT $331F draw to y, x
COMMENT $3321 draw to y, x
COMMENT $3323 draw to y, x
COMMENT $3325 draw to y, x
COMMENT $3327 draw to y, x
COMMENT $3329 draw to y, x
COMMENT $332B draw to y, x
COMMENT $332D draw to y, x
COMMENT $332F draw to y, x
COMMENT $3331 draw to y, x
COMMENT $3333 draw to y, x
COMMENT $3337 draw to y, x
COMMENT $3339 draw to y, x
COMMENT $333B draw to y, x
COMMENT $333D draw to y, x
COMMENT $333F draw to y, x
COMMENT $3341 draw to y, x
COMMENT $3343 draw to y, x
COMMENT $3345 draw to y, x
COMMENT $3347 draw to y, x
COMMENT $3349 draw to y, x
COMMENT $334B draw to y, x
COMMENT $334D draw to y, x
COMMENT $334F draw to y, x
COMMENT $3351 draw to y, x
COMMENT $3353 draw to y, x
COMMENT $3355 draw to y, x
COMMENT $3359 draw to y, x
COMMENT $335B draw to y, x
COMMENT $335D draw to y, x
COMMENT $335F draw to y, x
COMMENT $3361 draw to y, x
COMMENT $3363 draw to y, x
COMMENT $3365 draw to y, x
COMMENT $3367 draw to y, x
COMMENT $3369 draw to y, x
COMMENT $336B draw to y, x
COMMENT $336D draw to y, x
COMMENT $336F draw to y, x
COMMENT $3371 draw to y, x
COMMENT $3373 draw to y, x
COMMENT $3375 draw to y, x
COMMENT $3377 draw to y, x
COMMENT $337B draw to y, x
COMMENT $337D draw to y, x
COMMENT $337F draw to y, x
COMMENT $3381 draw to y, x
COMMENT $3383 draw to y, x
COMMENT $3385 draw to y, x
COMMENT $3387 draw to y, x
COMMENT $3389 draw to y, x
COMMENT $338B draw to y, x
COMMENT $338D draw to y, x
COMMENT $338F draw to y, x
COMMENT $3391 draw to y, x
COMMENT $3393 draw to y, x
COMMENT $3395 draw to y, x
COMMENT $3397 draw to y, x
COMMENT $3399 draw to y, x
COMMENT $339D draw to y, x
COMMENT $339F draw to y, x
COMMENT $33A1 draw to y, x
COMMENT $33A3 draw to y, x
COMMENT $33A5 draw to y, x
COMMENT $33A7 draw to y, x
COMMENT $33A9 draw to y, x
COMMENT $33AB draw to y, x
COMMENT $33AD draw to y, x
COMMENT $33AF draw to y, x
COMMENT $33B1 draw to y, x
COMMENT $33B3 draw to y, x
COMMENT $33B5 draw to y, x
COMMENT $33B7 draw to y, x
COMMENT $33B9 draw to y, x
COMMENT $33BB draw to y, x
COMMENT $33BF draw to y, x
COMMENT $33C1 draw to y, x
COMMENT $33C3 draw to y, x
COMMENT $33C5 draw to y, x
COMMENT $33C7 draw to y, x
COMMENT $33C9 draw to y, x
COMMENT $33CB draw to y, x
COMMENT $33CD draw to y, x
COMMENT $33CF draw to y, x
COMMENT $33D1 draw to y, x
COMMENT $33D3 draw to y, x
COMMENT $33D5 draw to y, x
COMMENT $33D7 draw to y, x
COMMENT $33D9 draw to y, x
COMMENT $33DB draw to y, x
COMMENT $33DD draw to y, x
COMMENT $33E1 draw to y, x
COMMENT $33E3 draw to y, x
COMMENT $33E5 draw to y, x
COMMENT $33E7 draw to y, x
COMMENT $33E9 draw to y, x
COMMENT $33EB draw to y, x
COMMENT $33ED draw to y, x
COMMENT $33EF draw to y, x
COMMENT $33F1 draw to y, x
COMMENT $33F3 draw to y, x
COMMENT $33F5 draw to y, x
COMMENT $33F7 draw to y, x
COMMENT $33F9 draw to y, x
COMMENT $33FB draw to y, x
COMMENT $33FD draw to y, x
COMMENT $33FF draw to y, x
COMMENT $3403 draw to y, x
COMMENT $3405 draw to y, x
COMMENT $3407 draw to y, x
COMMENT $3409 draw to y, x
COMMENT $340B draw to y, x
COMMENT $340D draw to y, x
COMMENT $340F draw to y, x
COMMENT $3411 draw to y, x
COMMENT $3413 draw to y, x
COMMENT $3415 draw to y, x
COMMENT $3417 draw to y, x
COMMENT $3419 draw to y, x
COMMENT $341B draw to y, x
COMMENT $341D draw to y, x
COMMENT $341F draw to y, x
COMMENT $3421 draw to y, x
COMMENT $3425 draw to y, x
COMMENT $3427 draw to y, x
COMMENT $3429 draw to y, x
COMMENT $342B draw to y, x
COMMENT $342D draw to y, x
COMMENT $342F draw to y, x
COMMENT $3431 draw to y, x
COMMENT $3433 draw to y, x
COMMENT $3435 draw to y, x
COMMENT $3437 draw to y, x
COMMENT $3439 draw to y, x
COMMENT $343B draw to y, x
COMMENT $343D draw to y, x
COMMENT $343F draw to y, x
COMMENT $3441 draw to y, x
COMMENT $3443 draw to y, x
COMMENT $3447 draw to y, x
COMMENT $3449 draw to y, x
COMMENT $344B draw to y, x
COMMENT $344D draw to y, x
COMMENT $344F draw to y, x
COMMENT $3451 draw to y, x
COMMENT $3453 draw to y, x
COMMENT $3455 draw to y, x
COMMENT $3457 draw to y, x
COMMENT $3459 draw to y, x
COMMENT $345B draw to y, x
COMMENT $345D draw to y, x
COMMENT $345F draw to y, x
COMMENT $3461 draw to y, x
COMMENT $3463 draw to y, x
COMMENT $3465 draw to y, x
COMMENT $3467 speed + direction
COMMENT $3468 graphic definition
COMMENT $346A length in SCALE_FACTOR_GAME
COMMENT $346B anim delay value
COMMENT $346C pointer to next anim object
COMMENT $346E offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $346F offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $3470 brightness
COMMENT $3471 special flag
COMMENT $3472 speed + direction
COMMENT $3473 graphic definition
COMMENT $3475 length in SCALE_FACTOR_GAME
COMMENT $3476 anim delay value
COMMENT $3477 pointer to next anim object
COMMENT $3479 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $347A offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $347B brightness
COMMENT $347C special flag
COMMENT $347D speed + direction
COMMENT $347E graphic definition
COMMENT $3480 length in SCALE_FACTOR_GAME
COMMENT $3481 anim delay value
COMMENT $3482 pointer to next anim object
COMMENT $3484 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $3485 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $3486 brightness
COMMENT $3487 special flag
COMMENT $3488 speed + direction
COMMENT $3489 graphic definition
COMMENT $348B length in SCALE_FACTOR_GAME
COMMENT $348C anim delay value
COMMENT $348D pointer to next anim object
COMMENT $348F offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $3490 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $3491 brightness
COMMENT $3492 special flag
COMMENT $3493 speed + direction
COMMENT $3494 graphic definition
COMMENT $3496 length in SCALE_FACTOR_GAME
COMMENT $3497 anim delay value
COMMENT $3498 pointer to next anim object
COMMENT $349A offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $349B offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $349C brightness
COMMENT $349D special flag
COMMENT $349E speed + direction
COMMENT $349F graphic definition
COMMENT $34A1 length in SCALE_FACTOR_GAME
COMMENT $34A2 anim delay value
COMMENT $34A3 pointer to next anim object
COMMENT $34A5 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $34A6 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $34A7 brightness
COMMENT $34A8 special flag
COMMENT $34A9 speed + direction
COMMENT $34AA graphic definition
COMMENT $34AC length in SCALE_FACTOR_GAME
COMMENT $34AD anim delay value
COMMENT $34AE pointer to next anim object
COMMENT $34B0 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $34B1 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $34B2 brightness
COMMENT $34B3 special flag
COMMENT $34B4 speed + direction
COMMENT $34B5 graphic definition
COMMENT $34B7 length in SCALE_FACTOR_GAME
COMMENT $34B8 anim delay value
COMMENT $34B9 pointer to next anim object
COMMENT $34BB offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $34BC offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $34BD brightness
COMMENT $34BE special flag
COMMENT $34BF speed + direction
COMMENT $34C0 graphic definition
COMMENT $34C2 length in SCALE_FACTOR_GAME
COMMENT $34C3 anim delay value
COMMENT $34C4 pointer to next anim object
COMMENT $34C6 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $34C7 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $34C8 brightness
COMMENT $34C9 special flag
COMMENT $34CA speed + direction
COMMENT $34CB graphic definition
COMMENT $34CD length in SCALE_FACTOR_GAME
COMMENT $34CE anim delay value
COMMENT $34CF pointer to next anim object
COMMENT $34D1 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $34D2 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $34D3 brightness
COMMENT $34D4 special flag
COMMENT $34D5 graphic definition
COMMENT $34D7 anim delay value
COMMENT $34D8 pointer to next anim object
COMMENT $34DA offsets y in 'SCALE_FACTOR_GAME'
COMMENT $34DB offsets x in 'SCALE_FACTOR_GAME'
COMMENT $34DC graphic definition
COMMENT $34DE anim delay value
COMMENT $34DF pointer to next anim object
COMMENT $34E1 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $34E2 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $34E3 graphic definition
COMMENT $34E5 anim delay value
COMMENT $34E6 pointer to next anim object
COMMENT $34E8 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $34E9 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $34EA graphic definition
COMMENT $34EC anim delay value
COMMENT $34ED pointer to next anim object
COMMENT $34EF offsets y in 'SCALE_FACTOR_GAME'
COMMENT $34F0 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $34F1 graphic definition
COMMENT $34F3 anim delay value
COMMENT $34F4 pointer to next anim object
COMMENT $34F6 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $34F7 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $34F8 graphic definition
COMMENT $34FA anim delay value
COMMENT $34FB pointer to next anim object
COMMENT $34FD offsets y in 'SCALE_FACTOR_GAME'
COMMENT $34FE offsets x in 'SCALE_FACTOR_GAME'
COMMENT $34FF graphic definition
COMMENT $3501 anim delay value
COMMENT $3502 pointer to next anim object
COMMENT $3504 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3505 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3506 graphic definition
COMMENT $3508 anim delay value
COMMENT $3509 pointer to next anim object
COMMENT $350B offsets y in 'SCALE_FACTOR_GAME'
COMMENT $350C offsets x in 'SCALE_FACTOR_GAME'
COMMENT $350D graphic definition
COMMENT $350F anim delay value
COMMENT $3510 pointer to next anim object
COMMENT $3512 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3513 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3514 graphic definition
COMMENT $3516 anim delay value
COMMENT $3517 pointer to next anim object
COMMENT $3519 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $351A offsets x in 'SCALE_FACTOR_GAME'
COMMENT $351B graphic definition
COMMENT $351D anim delay value
COMMENT $351E pointer to next anim object
COMMENT $3520 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3521 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3522 graphic definition
COMMENT $3524 anim delay value
COMMENT $3525 pointer to next anim object
COMMENT $3527 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3528 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3529 graphic definition
COMMENT $352B anim delay value
COMMENT $352C pointer to next anim object
COMMENT $352E offsets y in 'SCALE_FACTOR_GAME'
COMMENT $352F offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3530 graphic definition
COMMENT $3532 anim delay value
COMMENT $3533 pointer to next anim object
COMMENT $3535 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3536 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3537 graphic definition
COMMENT $3539 anim delay value
COMMENT $353A pointer to next anim object
COMMENT $353C offsets y in 'SCALE_FACTOR_GAME'
COMMENT $353D offsets x in 'SCALE_FACTOR_GAME'
COMMENT $353E graphic definition
COMMENT $3540 anim delay value
COMMENT $3541 pointer to next anim object
COMMENT $3543 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3544 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3545 graphic definition
COMMENT $3547 anim delay value
COMMENT $3548 pointer to next anim object
COMMENT $354A offsets y in 'SCALE_FACTOR_GAME'
COMMENT $354B offsets x in 'SCALE_FACTOR_GAME'
COMMENT $354C graphic definition
COMMENT $354E anim delay value
COMMENT $354F pointer to next anim object
COMMENT $3551 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3552 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3555 draw to y, x
COMMENT $3557 draw to y, x
COMMENT $3559 draw to y, x
COMMENT $355B draw to y, x
COMMENT $355D draw to y, x
COMMENT $355F draw to y, x
COMMENT $3561 draw to y, x
COMMENT $3563 draw to y, x
COMMENT $3565 draw to y, x
COMMENT $3567 draw to y, x
COMMENT $3569 draw to y, x
COMMENT $356B draw to y, x
COMMENT $356D draw to y, x
COMMENT $356F draw to y, x
COMMENT $3571 draw to y, x
COMMENT $3573 draw to y, x
COMMENT $3575 draw to y, x
COMMENT $3577 draw to y, x
COMMENT $3579 draw to y, x
COMMENT $357D draw to y, x
COMMENT $357F draw to y, x
COMMENT $3581 draw to y, x
COMMENT $3583 draw to y, x
COMMENT $3585 draw to y, x
COMMENT $3587 draw to y, x
COMMENT $3589 draw to y, x
COMMENT $358B draw to y, x
COMMENT $358D draw to y, x
COMMENT $358F draw to y, x
COMMENT $3591 draw to y, x
COMMENT $3593 draw to y, x
COMMENT $3595 draw to y, x
COMMENT $3597 draw to y, x
COMMENT $3599 draw to y, x
COMMENT $359B draw to y, x
COMMENT $359D draw to y, x
COMMENT $359F draw to y, x
COMMENT $35A1 draw to y, x
COMMENT $35A5 draw to y, x
COMMENT $35A7 draw to y, x
COMMENT $35A9 draw to y, x
COMMENT $35AB draw to y, x
COMMENT $35AD draw to y, x
COMMENT $35AF draw to y, x
COMMENT $35B1 draw to y, x
COMMENT $35B3 draw to y, x
COMMENT $35B5 draw to y, x
COMMENT $35B7 draw to y, x
COMMENT $35B9 draw to y, x
COMMENT $35BB draw to y, x
COMMENT $35BD draw to y, x
COMMENT $35BF draw to y, x
COMMENT $35C3 draw to y, x
COMMENT $35C5 draw to y, x
COMMENT $35C7 draw to y, x
COMMENT $35C9 draw to y, x
COMMENT $35CB draw to y, x
COMMENT $35CD draw to y, x
COMMENT $35CF draw to y, x
COMMENT $35D1 draw to y, x
COMMENT $35D3 draw to y, x
COMMENT $35D7 draw to y, x
COMMENT $35D9 draw to y, x
COMMENT $35DB draw to y, x
COMMENT $35DD draw to y, x
COMMENT $35E1 draw to y, x
COMMENT $35E3 draw to y, x
COMMENT $35E5 draw to y, x
COMMENT $35E7 draw to y, x
COMMENT $35EB draw to y, x
COMMENT $35ED draw to y, x
COMMENT $35EF draw to y, x
COMMENT $35F1 draw to y, x
COMMENT $35F5 draw to y, x
COMMENT $35F7 draw to y, x
COMMENT $35F9 draw to y, x
COMMENT $35FB draw to y, x
COMMENT $35FD draw to y, x
COMMENT $35FF draw to y, x
COMMENT $3601 draw to y, x
COMMENT $3603 draw to y, x
COMMENT $3605 draw to y, x
COMMENT $3607 draw to y, x
COMMENT $3609 draw to y, x
COMMENT $360B draw to y, x
COMMENT $360D draw to y, x
COMMENT $360F draw to y, x
COMMENT $3611 draw to y, x
COMMENT $3613 draw to y, x
COMMENT $3615 draw to y, x
COMMENT $3617 draw to y, x
COMMENT $3619 draw to y, x
COMMENT $361D draw to y, x
COMMENT $361F draw to y, x
COMMENT $3621 draw to y, x
COMMENT $3623 draw to y, x
COMMENT $3625 draw to y, x
COMMENT $3627 draw to y, x
COMMENT $3629 draw to y, x
COMMENT $362B draw to y, x
COMMENT $362D draw to y, x
COMMENT $362F draw to y, x
COMMENT $3631 draw to y, x
COMMENT $3633 draw to y, x
COMMENT $3635 draw to y, x
COMMENT $3637 draw to y, x
COMMENT $3639 draw to y, x
COMMENT $363B draw to y, x
COMMENT $363D draw to y, x
COMMENT $363F draw to y, x
COMMENT $3641 draw to y, x
COMMENT $3645 draw to y, x
COMMENT $3647 draw to y, x
COMMENT $3649 draw to y, x
COMMENT $364B draw to y, x
COMMENT $364D draw to y, x
COMMENT $364F draw to y, x
COMMENT $3651 draw to y, x
COMMENT $3653 draw to y, x
COMMENT $3655 draw to y, x
COMMENT $3657 draw to y, x
COMMENT $3659 draw to y, x
COMMENT $365B draw to y, x
COMMENT $365D draw to y, x
COMMENT $365F draw to y, x
COMMENT $3661 draw to y, x
COMMENT $3663 draw to y, x
COMMENT $3665 draw to y, x
COMMENT $3667 draw to y, x
COMMENT $3669 draw to y, x
COMMENT $366B draw to y, x
COMMENT $366F draw to y, x
COMMENT $3671 draw to y, x
COMMENT $3673 draw to y, x
COMMENT $3675 draw to y, x
COMMENT $3677 draw to y, x
COMMENT $3679 draw to y, x
COMMENT $367B draw to y, x
COMMENT $367D draw to y, x
COMMENT $367F draw to y, x
COMMENT $3681 draw to y, x
COMMENT $3683 draw to y, x
COMMENT $3685 draw to y, x
COMMENT $3687 draw to y, x
COMMENT $3689 draw to y, x
COMMENT $368B draw to y, x
COMMENT $368D draw to y, x
COMMENT $368F draw to y, x
COMMENT $3691 draw to y, x
COMMENT $3693 draw to y, x
COMMENT $3695 draw to y, x
COMMENT_LINE $3697 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $3697 in 2016
COMMENT_LINE $3697 all stuff contained here is public domain
COMMENT_LINE $3697 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $3697 this file contains 'sprite' definition data for letters (level done)      ;
COMMENT_LINE $3697 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $369F speed + direction
COMMENT $36A0 graphic definition
COMMENT $36A2 length in SCALE_FACTOR_GAME
COMMENT $36A3 anim delay value
COMMENT $36A4 pointer to next anim object
COMMENT $36A6 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $36A7 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $36B8 speed + direction
COMMENT $36B9 graphic definition
COMMENT $36BB length in SCALE_FACTOR_GAME
COMMENT $36BC anim delay value
COMMENT $36BD pointer to next anim object
COMMENT $36BF offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $36C0 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $36CB speed + direction
COMMENT $36CC graphic definition
COMMENT $36CE length in SCALE_FACTOR_GAME
COMMENT $36CF anim delay value
COMMENT $36D0 pointer to next anim object
COMMENT $36D2 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $36D3 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $36EA speed + direction
COMMENT $36EB graphic definition
COMMENT $36ED length in SCALE_FACTOR_GAME
COMMENT $36EE anim delay value
COMMENT $36EF pointer to next anim object
COMMENT $36F1 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $36F2 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $370D speed + direction
COMMENT $370E graphic definition
COMMENT $3710 length in SCALE_FACTOR_GAME
COMMENT $3711 anim delay value
COMMENT $3712 pointer to next anim object
COMMENT $3714 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $3715 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $3726 speed + direction
COMMENT $3727 graphic definition
COMMENT $3729 length in SCALE_FACTOR_GAME
COMMENT $372A anim delay value
COMMENT $372B pointer to next anim object
COMMENT $372D offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $372E offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT_LINE $372F this file is part of Karl Quappe, written by Malban
COMMENT_LINE $372F in 2016
COMMENT_LINE $372F all stuff contained here is public domain
COMMENT_LINE $372F Following are the 3 gimmick definitions
COMMENT_LINE $372F Gimmick - a sprite is displayed in places "just for fun"
COMMENT_LINE $372F there is a Pacman, a ghost and a little worm crawling
COMMENT_LINE $372F To show a gimmick following must be true:
COMMENT_LINE $372F not in intermission, not in attract mode, not in training mode
COMMENT_LINE $372F not on the first level
COMMENT_LINE $372F at most one house is occupied
COMMENT_LINE $372F timer must be below 20ticks
COMMENT_LINE $372F frogger must be heading down
COMMENT_LINE $372F only once per level
COMMENT_LINE $372F player independend - the enable flag is resetted upon a level complete,
COMMENT_LINE $372F if one player saw a gimmick the next gimmick is only enabled by viewing a "level done" screen
COMMENT $3731 draw to y, x
COMMENT $3733 draw to y, x
COMMENT $3735 draw to y, x
COMMENT $3737 draw to y, x
COMMENT $3739 draw to y, x
COMMENT $373B draw to y, x
COMMENT $373D draw to y, x
COMMENT $373F draw to y, x
COMMENT $3741 draw to y, x
COMMENT $3745 draw to y, x
COMMENT $3747 draw to y, x
COMMENT $3749 draw to y, x
COMMENT $374B draw to y, x
COMMENT $374D draw to y, x
COMMENT $374F draw to y, x
COMMENT $3751 draw to y, x
COMMENT $3753 draw to y, x
COMMENT $3755 draw to y, x
COMMENT $3759 draw to y, x
COMMENT $375B draw to y, x
COMMENT $375D draw to y, x
COMMENT $375F draw to y, x
COMMENT $3761 draw to y, x
COMMENT $3763 draw to y, x
COMMENT $3765 draw to y, x
COMMENT $3767 draw to y, x
COMMENT $3769 draw to y, x
COMMENT $376D draw to y, x
COMMENT $376F draw to y, x
COMMENT $3771 draw to y, x
COMMENT $3773 draw to y, x
COMMENT $3775 draw to y, x
COMMENT $3777 draw to y, x
COMMENT $3779 draw to y, x
COMMENT $377B draw to y, x
COMMENT $377D draw to y, x
COMMENT $377F speed + direction
COMMENT $3780 graphic definition
COMMENT $3782 length in SCALE_FACTOR_GAME
COMMENT $3783 anim delay value
COMMENT $3784 pointer to next anim object
COMMENT $3786 offsets y
COMMENT $3787 offsets x
COMMENT $3788 speed + direction
COMMENT $3789 graphic definition
COMMENT $378B length in SCALE_FACTOR_GAME
COMMENT $378C anim delay value
COMMENT $378D pointer to next anim object
COMMENT $378F offsets y
COMMENT $3790 offsets x
COMMENT $3791 speed + direction
COMMENT $3792 graphic definition
COMMENT $3794 length in SCALE_FACTOR_GAME
COMMENT $3795 anim delay value
COMMENT $3796 pointer to next anim object
COMMENT $3798 offsets y
COMMENT $3799 offsets x
COMMENT $379A speed + direction
COMMENT $379B graphic definition
COMMENT $379D length in SCALE_FACTOR_GAME
COMMENT $379E anim delay value
COMMENT $379F pointer to next anim object
COMMENT $37A1 offsets y
COMMENT $37A2 offsets x
COMMENT $37A3 speed + direction
COMMENT $37A4 graphic definition
COMMENT $37A6 length in SCALE_FACTOR_GAME
COMMENT $37A7 anim delay value
COMMENT $37A8 pointer to next anim object
COMMENT $37AA offsets y
COMMENT $37AB offsets x
COMMENT $37AC speed + direction
COMMENT $37AD graphic definition
COMMENT $37AF length in SCALE_FACTOR_GAME
COMMENT $37B0 anim delay value
COMMENT $37B1 pointer to next anim object
COMMENT $37B3 offsets y
COMMENT $37B4 offsets x
COMMENT_LINE $37B5 ***************************************************************************************
COMMENT $37B7 draw to y, x
COMMENT $37B9 draw to y, x
COMMENT $37BB draw to y, x
COMMENT $37BD draw to y, x
COMMENT $37BF draw to y, x
COMMENT $37C1 draw to y, x
COMMENT $37C3 draw to y, x
COMMENT $37C5 draw to y, x
COMMENT $37C7 draw to y, x
COMMENT $37C9 draw to y, x
COMMENT $37CD draw to y, x
COMMENT $37CF draw to y, x
COMMENT $37D1 draw to y, x
COMMENT $37D3 draw to y, x
COMMENT $37D5 draw to y, x
COMMENT $37D7 draw to y, x
COMMENT $37D9 draw to y, x
COMMENT $37DB draw to y, x
COMMENT $37DD draw to y, x
COMMENT $37DF draw to y, x
COMMENT $37E3 draw to y, x
COMMENT $37E5 draw to y, x
COMMENT $37E7 draw to y, x
COMMENT $37E9 draw to y, x
COMMENT $37EB draw to y, x
COMMENT $37ED draw to y, x
COMMENT $37EF draw to y, x
COMMENT $37F1 draw to y, x
COMMENT $37F3 draw to y, x
COMMENT $37F5 draw to y, x
COMMENT $37F7 speed + direction
COMMENT $37F8 graphic definition
COMMENT $37FA length in SCALE_FACTOR_GAME
COMMENT $37FB anim delay value
COMMENT $37FC pointer to next anim object
COMMENT $37FE offsets y
COMMENT $37FF offsets x
COMMENT $3800 speed + direction
COMMENT $3801 graphic definition
COMMENT $3803 length in SCALE_FACTOR_GAME
COMMENT $3804 anim delay value
COMMENT $3805 pointer to next anim object
COMMENT $3807 offsets y
COMMENT $3808 offsets x
COMMENT $3809 speed + direction
COMMENT $380A graphic definition
COMMENT $380C length in SCALE_FACTOR_GAME
COMMENT $380D anim delay value
COMMENT $380E pointer to next anim object
COMMENT $3810 offsets y
COMMENT $3811 offsets x
COMMENT $3812 speed + direction
COMMENT $3813 graphic definition
COMMENT $3815 length in SCALE_FACTOR_GAME
COMMENT $3816 anim delay value
COMMENT $3817 pointer to next anim object
COMMENT $3819 offsets y
COMMENT $381A offsets x
COMMENT $381D draw to y, x
COMMENT $381F draw to y, x
COMMENT $3821 draw to y, x
COMMENT $3825 draw to y, x
COMMENT $3827 draw to y, x
COMMENT $3829 draw to y, x
COMMENT $382B draw to y, x
COMMENT $382D draw to y, x
COMMENT $3831 draw to y, x
COMMENT $3833 draw to y, x
COMMENT $3835 draw to y, x
COMMENT $3837 draw to y, x
COMMENT $3839 draw to y, x
COMMENT $383B draw to y, x
COMMENT $383F draw to y, x
COMMENT $3841 draw to y, x
COMMENT $3843 draw to y, x
COMMENT $3845 draw to y, x
COMMENT $3847 draw to y, x
COMMENT $3849 draw to y, x
COMMENT $384D draw to y, x
COMMENT $384F draw to y, x
COMMENT $3851 draw to y, x
COMMENT $3853 draw to y, x
COMMENT $3855 draw to y, x
COMMENT $3857 draw to y, x
COMMENT $385B draw to y, x
COMMENT $385D draw to y, x
COMMENT $385F draw to y, x
COMMENT $3861 draw to y, x
COMMENT $3863 draw to y, x
COMMENT $3867 draw to y, x
COMMENT $3869 draw to y, x
COMMENT $386B draw to y, x
COMMENT $386D draw to y, x
COMMENT $386F draw to y, x
COMMENT $3871 speed + direction
COMMENT $3872 graphic definition
COMMENT $3874 length in SCALE_FACTOR_GAME
COMMENT $3875 anim delay value
COMMENT $3876 pointer to next anim object
COMMENT $3878 offsets y
COMMENT $3879 offsets x
COMMENT $387A speed + direction
COMMENT $387B graphic definition
COMMENT $387D length in SCALE_FACTOR_GAME
COMMENT $387E anim delay value
COMMENT $387F pointer to next anim object
COMMENT $3881 offsets y
COMMENT $3882 offsets x
COMMENT $3883 speed + direction
COMMENT $3884 graphic definition
COMMENT $3886 length in SCALE_FACTOR_GAME
COMMENT $3887 anim delay value
COMMENT $3888 pointer to next anim object
COMMENT $388A offsets y
COMMENT $388B offsets x
COMMENT $388C speed + direction
COMMENT $388D graphic definition
COMMENT $388F length in SCALE_FACTOR_GAME
COMMENT $3890 anim delay value
COMMENT $3891 pointer to next anim object
COMMENT $3893 offsets y
COMMENT $3894 offsets x
COMMENT $3895 speed + direction
COMMENT $3896 graphic definition
COMMENT $3898 length in SCALE_FACTOR_GAME
COMMENT $3899 anim delay value
COMMENT $389A pointer to next anim object
COMMENT $389C offsets y
COMMENT $389D offsets x
COMMENT $389E speed + direction
COMMENT $389F graphic definition
COMMENT $38A1 length in SCALE_FACTOR_GAME
COMMENT $38A2 anim delay value
COMMENT $38A3 pointer to next anim object
COMMENT $38A5 offsets y
COMMENT $38A6 offsets x
COMMENT $38A7 speed + direction
COMMENT $38A8 graphic definition
COMMENT $38AA length in SCALE_FACTOR_GAME
COMMENT $38AB anim delay value
COMMENT $38AC pointer to next anim object
COMMENT $38AE offsets y
COMMENT $38AF offsets x
COMMENT_LINE $38B0 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $38B0 in 2016
COMMENT_LINE $38B0 all stuff contained here is public domain
COMMENT_LINE $38B0 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $38B0 this file contains contains includes for all graphic definitions          ;
COMMENT_LINE $38B0 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $38B0 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $38B0 in 2016
COMMENT_LINE $38B0 all stuff contained here is public domain
COMMENT_LINE $38B0 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $38B0 this file contains 'sprite' definition data for the fly                   ;
COMMENT_LINE $38B0 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $38B0 fly1 is not moving
COMMENT_LINE $38B2 DB       -4*SPRITE_BLOW_UP, 4*SPRITE_BLOW_UP
COMMENT $38C8 speed + direction
COMMENT $38C9 graphic definition
COMMENT $38CB length in SCALE_FACTOR_GAME
COMMENT $38CC anim delay value
COMMENT $38CD pointer to next anim object
COMMENT $38CF offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $38D0 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $38D2 special flag
COMMENT $38E9 speed + direction
COMMENT $38EA graphic definition
COMMENT $38EC length in SCALE_FACTOR_GAME
COMMENT $38ED anim delay value
COMMENT $38EE pointer to next anim object
COMMENT $38F0 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $38F1 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $38F3 special flag
COMMENT $390A speed + direction
COMMENT $390B graphic definition
COMMENT $390D length in SCALE_FACTOR_GAME
COMMENT $390E anim delay value
COMMENT $390F pointer to next anim object
COMMENT $3911 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $3912 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $3914 special flag
COMMENT $3915 speed + direction
COMMENT $3916 graphic definition
COMMENT $3918 length in SCALE_FACTOR_GAME
COMMENT $3919 anim delay value
COMMENT $391A pointer to next anim object
COMMENT $391C offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $391D offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $391F special flag
COMMENT_LINE $3920 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $3920 in 2016
COMMENT_LINE $3920 all stuff contained here is public domain
COMMENT_LINE $3920 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $3920 this file contains 'sprite' definition data for all cars                  ;
COMMENT_LINE $3920 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $3920 for collision checking: SPRITES MUST HAVE THE LEFTMOST POINT AS STARTVECTOR (*)
COMMENT_LINE $3920 car1 is moving left with a speed of -1
COMMENT_LINE $3920 for collision checking: SPRITES MUST HAVE THE LEFTMOST POINT AS STARTVECTOR (*)
COMMENT_LINE $3920 car3 is moving right with a speed of 1
COMMENT_LINE $3920 sprite definition
COMMENT $3922 draw to y, x
COMMENT $3924 draw to y, x
COMMENT $3926 draw to y, x
COMMENT $3928 draw to y, x
COMMENT $392A draw to y, x
COMMENT $392C draw to y, x
COMMENT $392E draw to y, x
COMMENT $3930 draw to y, x
COMMENT $3932 draw to y, x
COMMENT $3934 draw to y, x
COMMENT $3936 draw to y, x
COMMENT $3938 draw to y, x
COMMENT $393A draw to y, x
COMMENT $393C draw to y, x
COMMENT $393E draw to y, x
COMMENT $3940 draw to y, x
COMMENT $3942 draw to y, x
COMMENT $3944 draw to y, x
COMMENT $3946 draw to y, x
COMMENT $3948 draw to y, x
COMMENT $394A draw to y, x
COMMENT $394C draw to y, x
COMMENT $394E speed + direction
COMMENT $394F graphic definition
COMMENT $3951 length in SCALE_FACTOR_GAME
COMMENT $3952 anim delay value
COMMENT $3953 pointer to next anim object
COMMENT $3955 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3956 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3957 halfspeed value
COMMENT $3958 special flag
COMMENT $3959 speed + direction
COMMENT $395A graphic definition
COMMENT $395C length in SCALE_FACTOR_GAME
COMMENT $395D anim delay value
COMMENT $395E pointer to next anim object
COMMENT $3960 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3961 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3962 halfspeed value
COMMENT $3963 special flag
COMMENT_LINE $3964 sprite definition
COMMENT $3966 draw to y, x
COMMENT $3968 draw to y, x
COMMENT $396A draw to y, x
COMMENT $396C draw to y, x
COMMENT $396E draw to y, x
COMMENT $3970 draw to y, x
COMMENT $3972 draw to y, x
COMMENT $3974 draw to y, x
COMMENT $3976 draw to y, x
COMMENT $3978 draw to y, x
COMMENT $397A draw to y, x
COMMENT $397C draw to y, x
COMMENT $397E draw to y, x
COMMENT $3980 draw to y, x
COMMENT $3982 draw to y, x
COMMENT $3984 draw to y, x
COMMENT $3986 draw to y, x
COMMENT $3988 draw to y, x
COMMENT $398A draw to y, x
COMMENT $398C draw to y, x
COMMENT $398E draw to y, x
COMMENT $3990 draw to y, x
COMMENT $3992 speed + direction
COMMENT $3993 graphic definition
COMMENT $3995 length in SCALE_FACTOR_GAME
COMMENT $3996 anim delay value
COMMENT $3997 pointer to next anim object
COMMENT $3999 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $399A offsets x in 'SCALE_FACTOR_GAME'
COMMENT $399B halfspeed value
COMMENT $399C special flag
COMMENT $399D speed + direction
COMMENT $399E graphic definition
COMMENT $39A0 length in SCALE_FACTOR_GAME
COMMENT $39A1 anim delay value
COMMENT $39A2 pointer to next anim object
COMMENT $39A4 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $39A5 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $39A6 halfspeed value
COMMENT $39A7 special flag
COMMENT_LINE $39A8 sprite definition
COMMENT $39AA draw to y, x
COMMENT $39AC draw to y, x
COMMENT $39AE draw to y, x
COMMENT $39B0 draw to y, x
COMMENT $39B2 draw to y, x
COMMENT $39B4 draw to y, x
COMMENT $39B6 draw to y, x
COMMENT $39B8 draw to y, x
COMMENT $39BA draw to y, x
COMMENT $39BC draw to y, x
COMMENT $39BE draw to y, x
COMMENT $39C0 draw to y, x
COMMENT $39C2 draw to y, x
COMMENT $39C4 draw to y, x
COMMENT $39C6 draw to y, x
COMMENT $39C8 draw to y, x
COMMENT $39CA draw to y, x
COMMENT $39CC draw to y, x
COMMENT $39CE draw to y, x
COMMENT $39D0 draw to y, x
COMMENT $39D2 draw to y, x
COMMENT $39D4 draw to y, x
COMMENT $39D6 speed + direction
COMMENT $39D7 graphic definition
COMMENT $39D9 length in SCALE_FACTOR_GAME
COMMENT $39DA anim delay value
COMMENT $39DB pointer to next anim object
COMMENT $39DD offsets y in 'SCALE_FACTOR_GAME'
COMMENT $39DE offsets x in 'SCALE_FACTOR_GAME'
COMMENT $39DF halfspeed value
COMMENT $39E0 special flag
COMMENT $39E1 speed + direction
COMMENT $39E2 graphic definition
COMMENT $39E4 length in SCALE_FACTOR_GAME
COMMENT $39E5 anim delay value
COMMENT $39E6 pointer to next anim object
COMMENT $39E8 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $39E9 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $39EA halfspeed value
COMMENT $39EB special flag
COMMENT_LINE $39EC sprite definition
COMMENT $39EE draw to y, x
COMMENT $39F0 draw to y, x
COMMENT $39F2 draw to y, x
COMMENT $39F4 draw to y, x
COMMENT $39F6 draw to y, x
COMMENT $39F8 draw to y, x
COMMENT $39FA draw to y, x
COMMENT $39FC draw to y, x
COMMENT $39FE draw to y, x
COMMENT $3A00 draw to y, x
COMMENT $3A02 draw to y, x
COMMENT $3A04 draw to y, x
COMMENT $3A06 draw to y, x
COMMENT $3A08 draw to y, x
COMMENT $3A0A draw to y, x
COMMENT $3A0C draw to y, x
COMMENT $3A0E draw to y, x
COMMENT $3A10 draw to y, x
COMMENT $3A12 draw to y, x
COMMENT $3A14 draw to y, x
COMMENT $3A16 draw to y, x
COMMENT $3A18 draw to y, x
COMMENT $3A1A speed + direction
COMMENT $3A1B graphic definition
COMMENT $3A1D length in SCALE_FACTOR_GAME
COMMENT $3A1E anim delay value
COMMENT $3A1F pointer to next anim object
COMMENT $3A21 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3A22 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3A23 halfspeed value
COMMENT $3A24 special flag
COMMENT $3A25 speed + direction
COMMENT $3A26 graphic definition
COMMENT $3A28 length in SCALE_FACTOR_GAME
COMMENT $3A29 anim delay value
COMMENT $3A2A pointer to next anim object
COMMENT $3A2C offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3A2D offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3A2E halfspeed value
COMMENT $3A2F special flag
COMMENT_LINE $3A30 ;; back
COMMENT $3A32 draw to y, x
COMMENT $3A34 draw to y, x
COMMENT $3A36 draw to y, x
COMMENT $3A38 draw to y, x
COMMENT $3A3A draw to y, x
COMMENT $3A3C draw to y, x
COMMENT $3A3E draw to y, x
COMMENT $3A40 draw to y, x
COMMENT $3A42 draw to y, x
COMMENT $3A44 draw to y, x
COMMENT $3A46 draw to y, x
COMMENT $3A48 draw to y, x
COMMENT $3A4A draw to y, x
COMMENT $3A4C draw to y, x
COMMENT $3A4E draw to y, x
COMMENT $3A50 draw to y, x
COMMENT $3A52 draw to y, x
COMMENT $3A54 draw to y, x
COMMENT $3A56 draw to y, x
COMMENT $3A58 draw to y, x
COMMENT $3A5A draw to y, x
COMMENT $3A5C draw to y, x
COMMENT $3A5E speed + direction
COMMENT $3A5F graphic definition
COMMENT $3A61 length in SCALE_FACTOR_GAME
COMMENT $3A62 anim delay value
COMMENT $3A63 pointer to next anim object
COMMENT $3A65 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3A66 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3A67 halfspeed value
COMMENT $3A68 special flag
COMMENT $3A69 speed + direction
COMMENT $3A6A graphic definition
COMMENT $3A6C length in SCALE_FACTOR_GAME
COMMENT $3A6D anim delay value
COMMENT $3A6E pointer to next anim object
COMMENT $3A70 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3A71 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3A72 halfspeed value
COMMENT $3A73 special flag
COMMENT_LINE $3A74 sprite definition
COMMENT $3A76 draw to y, x
COMMENT $3A78 draw to y, x
COMMENT $3A7A draw to y, x
COMMENT $3A7C draw to y, x
COMMENT $3A7E draw to y, x
COMMENT $3A80 draw to y, x
COMMENT $3A82 draw to y, x
COMMENT $3A84 draw to y, x
COMMENT $3A86 draw to y, x
COMMENT $3A88 draw to y, x
COMMENT $3A8A draw to y, x
COMMENT $3A8C draw to y, x
COMMENT $3A8E draw to y, x
COMMENT $3A90 draw to y, x
COMMENT $3A92 draw to y, x
COMMENT $3A94 draw to y, x
COMMENT $3A96 draw to y, x
COMMENT $3A98 draw to y, x
COMMENT $3A9A draw to y, x
COMMENT $3A9C draw to y, x
COMMENT $3A9E draw to y, x
COMMENT $3AA0 draw to y, x
COMMENT $3AA2 speed + direction
COMMENT $3AA3 graphic definition
COMMENT $3AA5 length in SCALE_FACTOR_GAME
COMMENT $3AA6 anim delay value
COMMENT $3AA7 pointer to next anim object
COMMENT $3AA9 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3AAA offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3AAB halfspeed value
COMMENT $3AAC special flag
COMMENT $3AAD speed + direction
COMMENT $3AAE graphic definition
COMMENT $3AB0 length in SCALE_FACTOR_GAME
COMMENT $3AB1 anim delay value
COMMENT $3AB2 pointer to next anim object
COMMENT $3AB4 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3AB5 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3AB6 halfspeed value
COMMENT $3AB7 special flag
COMMENT_LINE $3AB8 sprite definition
COMMENT $3ABA draw to y, x
COMMENT $3ABC draw to y, x
COMMENT $3ABE draw to y, x
COMMENT $3AC0 draw to y, x
COMMENT $3AC2 draw to y, x
COMMENT $3AC4 draw to y, x
COMMENT $3AC6 draw to y, x
COMMENT $3AC8 draw to y, x
COMMENT $3ACA draw to y, x
COMMENT $3ACC draw to y, x
COMMENT $3ACE draw to y, x
COMMENT $3AD0 draw to y, x
COMMENT $3AD2 draw to y, x
COMMENT $3AD4 draw to y, x
COMMENT $3AD6 draw to y, x
COMMENT $3AD8 draw to y, x
COMMENT $3ADA draw to y, x
COMMENT $3ADC draw to y, x
COMMENT $3ADE draw to y, x
COMMENT $3AE0 draw to y, x
COMMENT $3AE2 draw to y, x
COMMENT $3AE4 draw to y, x
COMMENT $3AE6 speed + direction
COMMENT $3AE7 graphic definition
COMMENT $3AE9 length in SCALE_FACTOR_GAME
COMMENT $3AEA anim delay value
COMMENT $3AEB pointer to next anim object
COMMENT $3AED offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3AEE offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3AEF halfspeed value
COMMENT $3AF0 special flag
COMMENT $3AF1 speed + direction
COMMENT $3AF2 graphic definition
COMMENT $3AF4 length in SCALE_FACTOR_GAME
COMMENT $3AF5 anim delay value
COMMENT $3AF6 pointer to next anim object
COMMENT $3AF8 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3AF9 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3AFA halfspeed value
COMMENT $3AFB special flag
COMMENT_LINE $3AFC sprite definition
COMMENT $3AFE draw to y, x
COMMENT $3B00 draw to y, x
COMMENT $3B02 draw to y, x
COMMENT $3B04 draw to y, x
COMMENT $3B06 draw to y, x
COMMENT $3B08 draw to y, x
COMMENT $3B0A draw to y, x
COMMENT $3B0C draw to y, x
COMMENT $3B0E draw to y, x
COMMENT $3B10 draw to y, x
COMMENT $3B12 draw to y, x
COMMENT $3B14 draw to y, x
COMMENT $3B16 draw to y, x
COMMENT $3B18 draw to y, x
COMMENT $3B1A draw to y, x
COMMENT $3B1C draw to y, x
COMMENT $3B1E draw to y, x
COMMENT $3B20 draw to y, x
COMMENT $3B22 draw to y, x
COMMENT $3B24 draw to y, x
COMMENT $3B26 draw to y, x
COMMENT $3B28 draw to y, x
COMMENT $3B2A speed + direction
COMMENT $3B2B graphic definition
COMMENT $3B2D length in SCALE_FACTOR_GAME
COMMENT $3B2E anim delay value
COMMENT $3B2F pointer to next anim object
COMMENT $3B31 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3B32 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3B33 halfspeed value
COMMENT $3B34 special flag
COMMENT $3B35 speed + direction
COMMENT $3B36 graphic definition
COMMENT $3B38 length in SCALE_FACTOR_GAME
COMMENT $3B39 anim delay value
COMMENT $3B3A pointer to next anim object
COMMENT $3B3C offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3B3D offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3B3E halfspeed value
COMMENT $3B3F special flag
COMMENT_LINE $3B40 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $3B40 in 2016
COMMENT_LINE $3B40 all stuff contained here is public domain
COMMENT_LINE $3B40 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $3B40 this file contains 'sprite' definition data for all cars                  ;
COMMENT_LINE $3B40 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $3B40 for collision checking: SPRITES MUST HAVE THE LEFTMOST POINT AS STARTVECTOR (*)
COMMENT_LINE $3B40 car1 is moving left with a speed of -1
COMMENT_LINE $3B40 for collision checking: SPRITES MUST HAVE THE LEFTMOST POINT AS STARTVECTOR (*)
COMMENT_LINE $3B40 car3 is moving right with a speed of 1
COMMENT_LINE $3B40 sprite definition
COMMENT $3B42 draw to y, x
COMMENT $3B44 draw to y, x
COMMENT $3B46 draw to y, x
COMMENT $3B48 draw to y, x
COMMENT $3B4A draw to y, x
COMMENT $3B4C draw to y, x
COMMENT $3B4E draw to y, x
COMMENT $3B50 draw to y, x
COMMENT $3B52 draw to y, x
COMMENT $3B54 draw to y, x
COMMENT $3B56 draw to y, x
COMMENT $3B58 draw to y, x
COMMENT $3B5A draw to y, x
COMMENT $3B5C draw to y, x
COMMENT $3B5E draw to y, x
COMMENT $3B60 draw to y, x
COMMENT $3B62 draw to y, x
COMMENT $3B64 speed + direction
COMMENT $3B65 graphic definition
COMMENT $3B67 length in SCALE_FACTOR_GAME
COMMENT $3B68 anim delay value
COMMENT $3B69 pointer to next anim object
COMMENT $3B6B offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3B6C offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3B6D halfspeed value
COMMENT $3B6E special flag
COMMENT $3B6F speed + direction
COMMENT $3B70 graphic definition
COMMENT $3B72 length in SCALE_FACTOR_GAME
COMMENT $3B73 anim delay value
COMMENT $3B74 pointer to next anim object
COMMENT $3B76 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3B77 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3B78 halfspeed value
COMMENT $3B79 special flag
COMMENT_LINE $3B7A sprite definition
COMMENT $3B7C draw to y, x
COMMENT $3B7E draw to y, x
COMMENT $3B80 draw to y, x
COMMENT $3B82 draw to y, x
COMMENT $3B84 draw to y, x
COMMENT $3B86 draw to y, x
COMMENT $3B88 draw to y, x
COMMENT $3B8A draw to y, x
COMMENT $3B8C draw to y, x
COMMENT $3B8E draw to y, x
COMMENT $3B90 draw to y, x
COMMENT $3B92 draw to y, x
COMMENT $3B94 draw to y, x
COMMENT $3B96 draw to y, x
COMMENT $3B98 draw to y, x
COMMENT $3B9A draw to y, x
COMMENT $3B9C draw to y, x
COMMENT $3B9E speed + direction
COMMENT $3B9F graphic definition
COMMENT $3BA1 length in SCALE_FACTOR_GAME
COMMENT $3BA2 anim delay value
COMMENT $3BA3 pointer to next anim object
COMMENT $3BA5 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3BA6 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3BA7 halfspeed value
COMMENT $3BA8 special flag
COMMENT $3BA9 speed + direction
COMMENT $3BAA graphic definition
COMMENT $3BAC length in SCALE_FACTOR_GAME
COMMENT $3BAD anim delay value
COMMENT $3BAE pointer to next anim object
COMMENT $3BB0 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3BB1 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3BB2 halfspeed value
COMMENT $3BB3 special flag
COMMENT_LINE $3BB4 sprite definition
COMMENT $3BB6 draw to y, x
COMMENT $3BB8 draw to y, x
COMMENT $3BBA draw to y, x
COMMENT $3BBC draw to y, x
COMMENT $3BBE draw to y, x
COMMENT $3BC0 draw to y, x
COMMENT $3BC2 draw to y, x
COMMENT $3BC4 draw to y, x
COMMENT $3BC6 draw to y, x
COMMENT $3BC8 draw to y, x
COMMENT $3BCA draw to y, x
COMMENT $3BCC draw to y, x
COMMENT $3BCE draw to y, x
COMMENT $3BD0 draw to y, x
COMMENT $3BD2 draw to y, x
COMMENT $3BD4 draw to y, x
COMMENT $3BD6 draw to y, x
COMMENT $3BD8 speed + direction
COMMENT $3BD9 graphic definition
COMMENT $3BDB length in SCALE_FACTOR_GAME
COMMENT $3BDC anim delay value
COMMENT $3BDD pointer to next anim object
COMMENT $3BDF offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3BE0 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3BE1 halfspeed value
COMMENT $3BE2 special flag
COMMENT $3BE3 speed + direction
COMMENT $3BE4 graphic definition
COMMENT $3BE6 length in SCALE_FACTOR_GAME
COMMENT $3BE7 anim delay value
COMMENT $3BE8 pointer to next anim object
COMMENT $3BEA offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3BEB offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3BEC halfspeed value
COMMENT $3BED special flag
COMMENT $3BEE speed + direction
COMMENT $3BEF graphic definition
COMMENT $3BF1 length in SCALE_FACTOR_GAME
COMMENT $3BF2 anim delay value
COMMENT $3BF3 pointer to next anim object
COMMENT $3BF5 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3BF6 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3BF7 halfspeed value
COMMENT $3BF8 special flag
COMMENT $3BF9 speed + direction
COMMENT $3BFA graphic definition
COMMENT $3BFC length in SCALE_FACTOR_GAME
COMMENT $3BFD anim delay value
COMMENT $3BFE pointer to next anim object
COMMENT $3C00 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3C01 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3C02 halfspeed value
COMMENT $3C03 special flag
COMMENT_LINE $3C04 ; back from here
COMMENT $3C06 draw to y, x
COMMENT $3C08 draw to y, x
COMMENT $3C0A draw to y, x
COMMENT $3C0C draw to y, x
COMMENT $3C0E draw to y, x
COMMENT $3C10 draw to y, x
COMMENT $3C12 draw to y, x
COMMENT $3C14 draw to y, x
COMMENT $3C16 draw to y, x
COMMENT $3C18 draw to y, x
COMMENT $3C1A draw to y, x
COMMENT $3C1C draw to y, x
COMMENT $3C1E draw to y, x
COMMENT $3C20 draw to y, x
COMMENT $3C22 draw to y, x
COMMENT $3C24 draw to y, x
COMMENT $3C26 draw to y, x
COMMENT $3C28 speed + direction
COMMENT $3C29 graphic definition
COMMENT $3C2B length in SCALE_FACTOR_GAME
COMMENT $3C2C anim delay value
COMMENT $3C2D pointer to next anim object
COMMENT $3C2F offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3C30 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3C31 halfspeed value
COMMENT $3C32 special flag
COMMENT $3C33 speed + direction
COMMENT $3C34 graphic definition
COMMENT $3C36 length in SCALE_FACTOR_GAME
COMMENT $3C37 anim delay value
COMMENT $3C38 pointer to next anim object
COMMENT $3C3A offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3C3B offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3C3C halfspeed value
COMMENT $3C3D special flag
COMMENT_LINE $3C3E sprite definition
COMMENT $3C40 draw to y, x
COMMENT $3C42 draw to y, x
COMMENT $3C44 draw to y, x
COMMENT $3C46 draw to y, x
COMMENT $3C48 draw to y, x
COMMENT $3C4A draw to y, x
COMMENT $3C4C draw to y, x
COMMENT $3C4E draw to y, x
COMMENT $3C50 draw to y, x
COMMENT $3C52 draw to y, x
COMMENT $3C54 draw to y, x
COMMENT $3C56 draw to y, x
COMMENT $3C58 draw to y, x
COMMENT $3C5A draw to y, x
COMMENT $3C5C draw to y, x
COMMENT $3C5E draw to y, x
COMMENT $3C60 draw to y, x
COMMENT $3C62 speed + direction
COMMENT $3C63 graphic definition
COMMENT $3C65 length in SCALE_FACTOR_GAME
COMMENT $3C66 anim delay value
COMMENT $3C67 pointer to next anim object
COMMENT $3C69 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3C6A offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3C6B halfspeed value
COMMENT $3C6C special flag
COMMENT $3C6D speed + direction
COMMENT $3C6E graphic definition
COMMENT $3C70 length in SCALE_FACTOR_GAME
COMMENT $3C71 anim delay value
COMMENT $3C72 pointer to next anim object
COMMENT $3C74 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3C75 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3C76 halfspeed value
COMMENT $3C77 special flag
COMMENT_LINE $3C78 sprite definition
COMMENT $3C7A draw to y, x
COMMENT $3C7C draw to y, x
COMMENT $3C7E draw to y, x
COMMENT $3C80 draw to y, x
COMMENT $3C82 draw to y, x
COMMENT $3C84 draw to y, x
COMMENT $3C86 draw to y, x
COMMENT $3C88 draw to y, x
COMMENT $3C8A draw to y, x
COMMENT $3C8C draw to y, x
COMMENT $3C8E draw to y, x
COMMENT $3C90 draw to y, x
COMMENT $3C92 draw to y, x
COMMENT $3C94 draw to y, x
COMMENT $3C96 draw to y, x
COMMENT $3C98 draw to y, x
COMMENT $3C9A draw to y, x
COMMENT $3C9C speed + direction
COMMENT $3C9D graphic definition
COMMENT $3C9F length in SCALE_FACTOR_GAME
COMMENT $3CA0 anim delay value
COMMENT $3CA1 pointer to next anim object
COMMENT $3CA3 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3CA4 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3CA5 halfspeed value
COMMENT $3CA6 special flag
COMMENT $3CA7 speed + direction
COMMENT $3CA8 graphic definition
COMMENT $3CAA length in SCALE_FACTOR_GAME
COMMENT $3CAB anim delay value
COMMENT $3CAC pointer to next anim object
COMMENT $3CAE offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3CAF offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3CB0 halfspeed value
COMMENT $3CB1 special flag
COMMENT $3CB2 speed + direction
COMMENT $3CB3 graphic definition
COMMENT $3CB5 length in SCALE_FACTOR_GAME
COMMENT $3CB6 anim delay value
COMMENT $3CB7 pointer to next anim object
COMMENT $3CB9 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3CBA offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3CBB halfspeed value
COMMENT $3CBC special flag
COMMENT $3CBD speed + direction
COMMENT $3CBE graphic definition
COMMENT $3CC0 length in SCALE_FACTOR_GAME
COMMENT $3CC1 anim delay value
COMMENT $3CC2 pointer to next anim object
COMMENT $3CC4 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3CC5 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3CC6 halfspeed value
COMMENT $3CC7 special flag
COMMENT_LINE $3CC8 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $3CC8 in 2016
COMMENT_LINE $3CC8 all stuff contained here is public domain
COMMENT_LINE $3CC8 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $3CC8 this file contains the 'sprite' definition for a truck                    ;
COMMENT_LINE $3CC8 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $3CCA draw to y, x
COMMENT $3CCC draw to y, x
COMMENT $3CCE draw to y, x
COMMENT $3CD0 draw to y, x
COMMENT $3CD2 draw to y, x
COMMENT $3CD4 draw to y, x
COMMENT $3CD6 draw to y, x
COMMENT $3CD8 draw to y, x
COMMENT $3CDA draw to y, x
COMMENT $3CDC draw to y, x
COMMENT $3CDE draw to y, x
COMMENT $3CE0 draw to y, x
COMMENT $3CE2 draw to y, x
COMMENT $3CE4 draw to y, x
COMMENT $3CE6 draw to y, x
COMMENT $3CE8 draw to y, x
COMMENT $3CEA draw to y, x
COMMENT $3CEC draw to y, x
COMMENT $3CEE speed + direction
COMMENT $3CEF graphic definition
COMMENT $3CF1 length in SCALE_FACTOR_GAME
COMMENT $3CF2 anim delay value
COMMENT $3CF3 pointer to next anim object
COMMENT $3CF5 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3CF6 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3CF8 special flag
COMMENT $3CFB draw to y, x
COMMENT $3CFD draw to y, x
COMMENT $3CFF draw to y, x
COMMENT $3D01 draw to y, x
COMMENT $3D03 draw to y, x
COMMENT $3D05 draw to y, x
COMMENT $3D07 draw to y, x
COMMENT $3D09 draw to y, x
COMMENT $3D0B draw to y, x
COMMENT $3D0D draw to y, x
COMMENT $3D0F draw to y, x
COMMENT $3D11 draw to y, x
COMMENT $3D13 draw to y, x
COMMENT $3D15 draw to y, x
COMMENT $3D17 draw to y, x
COMMENT $3D19 draw to y, x
COMMENT $3D1B draw to y, x
COMMENT $3D1D draw to y, x
COMMENT $3D1F speed + direction
COMMENT $3D20 graphic definition
COMMENT $3D22 length in SCALE_FACTOR_GAME
COMMENT $3D23 anim delay value
COMMENT $3D24 pointer to next anim object
COMMENT $3D26 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3D27 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3D29 special flag
COMMENT $3D2C draw to y, x
COMMENT $3D2E draw to y, x
COMMENT $3D30 draw to y, x
COMMENT $3D32 draw to y, x
COMMENT $3D34 draw to y, x
COMMENT $3D36 draw to y, x
COMMENT $3D38 draw to y, x
COMMENT $3D3A draw to y, x
COMMENT $3D3C draw to y, x
COMMENT $3D3E draw to y, x
COMMENT $3D40 draw to y, x
COMMENT $3D42 draw to y, x
COMMENT $3D44 draw to y, x
COMMENT $3D46 draw to y, x
COMMENT $3D48 draw to y, x
COMMENT $3D4A draw to y, x
COMMENT $3D4C draw to y, x
COMMENT $3D4E draw to y, x
COMMENT $3D50 speed + direction
COMMENT $3D51 graphic definition
COMMENT $3D53 length in SCALE_FACTOR_GAME
COMMENT $3D54 anim delay value
COMMENT $3D55 pointer to next anim object
COMMENT $3D57 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3D58 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3D5A special flag
COMMENT $3D5B speed + direction
COMMENT $3D5C graphic definition
COMMENT $3D5E length in SCALE_FACTOR_GAME
COMMENT $3D5F anim delay value
COMMENT $3D60 pointer to next anim object
COMMENT $3D62 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3D63 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3D65 special flag
COMMENT $3D66 speed + direction
COMMENT $3D67 graphic definition
COMMENT $3D69 length in SCALE_FACTOR_GAME
COMMENT $3D6A anim delay value
COMMENT $3D6B pointer to next anim object
COMMENT $3D6D offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3D6E offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3D70 special flag
COMMENT $3D71 speed + direction
COMMENT $3D72 graphic definition
COMMENT $3D74 length in SCALE_FACTOR_GAME
COMMENT $3D75 anim delay value
COMMENT $3D76 pointer to next anim object
COMMENT $3D78 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3D79 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3D7B special flag
COMMENT_LINE $3D7C this file is part of Karl Quappe, written by Malban
COMMENT_LINE $3D7C in 2016
COMMENT_LINE $3D7C all stuff contained here is public domain
COMMENT_LINE $3D7C ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $3D7C this file contains 'sprite' definition data for the van                  ;
COMMENT_LINE $3D7C ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $3D7C for collision checking: SPRITES MUST HAVE THE LEFTMOST POINT AS STARTVECTOR (*)
COMMENT_LINE $3D7C van1 is moving to the left with a speed of -1
COMMENT_LINE $3D7C sprite definition
COMMENT $3D7E draw to y, x
COMMENT $3D80 draw to y, x
COMMENT $3D82 draw to y, x
COMMENT $3D84 draw to y, x
COMMENT $3D86 draw to y, x
COMMENT $3D88 draw to y, x
COMMENT $3D8A draw to y, x
COMMENT $3D8C draw to y, x
COMMENT $3D8E draw to y, x
COMMENT $3D90 draw to y, x
COMMENT $3D92 draw to y, x
COMMENT $3D94 draw to y, x
COMMENT $3D96 draw to y, x
COMMENT $3D98 draw to y, x
COMMENT $3D9A draw to y, x
COMMENT $3D9C draw to y, x
COMMENT $3D9E draw to y, x
COMMENT $3DA0 speed + direction
COMMENT $3DA1 graphic definition
COMMENT $3DA3 length in SCALE_FACTOR_GAME
COMMENT $3DA4 anim delay value
COMMENT $3DA5 pointer to next anim object
COMMENT $3DA7 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3DA8 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3DA9 halfspeed value
COMMENT $3DAA special flag
COMMENT $3DAB speed + direction
COMMENT $3DAC graphic definition
COMMENT $3DAE length in SCALE_FACTOR_GAME
COMMENT $3DAF anim delay value
COMMENT $3DB0 pointer to next anim object
COMMENT $3DB2 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3DB3 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3DB4 halfspeed value
COMMENT $3DB5 special flag
COMMENT $3DB6 speed + direction
COMMENT $3DB7 graphic definition
COMMENT $3DB9 length in SCALE_FACTOR_GAME
COMMENT $3DBA anim delay value
COMMENT $3DBB pointer to next anim object
COMMENT $3DBD offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3DBE offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3DBF halfspeed value
COMMENT $3DC0 special flag
COMMENT_LINE $3DC1 sprite definition
COMMENT $3DC3 draw to y, x
COMMENT $3DC5 draw to y, x
COMMENT $3DC7 draw to y, x
COMMENT $3DC9 draw to y, x
COMMENT $3DCB draw to y, x
COMMENT $3DCD draw to y, x
COMMENT $3DCF draw to y, x
COMMENT $3DD1 draw to y, x
COMMENT $3DD3 draw to y, x
COMMENT $3DD5 draw to y, x
COMMENT $3DD7 draw to y, x
COMMENT $3DD9 draw to y, x
COMMENT $3DDB draw to y, x
COMMENT $3DDD draw to y, x
COMMENT $3DDF draw to y, x
COMMENT $3DE1 draw to y, x
COMMENT $3DE3 draw to y, x
COMMENT $3DE5 speed + direction
COMMENT $3DE6 graphic definition
COMMENT $3DE8 length in SCALE_FACTOR_GAME
COMMENT $3DE9 anim delay value
COMMENT $3DEA pointer to next anim object
COMMENT $3DEC offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3DED offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3DEE halfspeed value
COMMENT $3DEF special flag
COMMENT $3DF0 speed + direction
COMMENT $3DF1 graphic definition
COMMENT $3DF3 length in SCALE_FACTOR_GAME
COMMENT $3DF4 anim delay value
COMMENT $3DF5 pointer to next anim object
COMMENT $3DF7 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3DF8 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3DF9 halfspeed value
COMMENT $3DFA special flag
COMMENT $3DFB speed + direction
COMMENT $3DFC graphic definition
COMMENT $3DFE length in SCALE_FACTOR_GAME
COMMENT $3DFF anim delay value
COMMENT $3E00 pointer to next anim object
COMMENT $3E02 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3E03 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3E04 halfspeed value
COMMENT $3E05 special flag
COMMENT $3E08 draw to y, x
COMMENT $3E0A draw to y, x
COMMENT $3E0C draw to y, x
COMMENT $3E0E draw to y, x
COMMENT $3E10 draw to y, x
COMMENT $3E12 draw to y, x
COMMENT $3E14 draw to y, x
COMMENT $3E16 draw to y, x
COMMENT $3E18 draw to y, x
COMMENT $3E1A draw to y, x
COMMENT $3E1C draw to y, x
COMMENT $3E1E draw to y, x
COMMENT $3E20 draw to y, x
COMMENT $3E22 draw to y, x
COMMENT $3E24 draw to y, x
COMMENT $3E26 draw to y, x
COMMENT $3E28 draw to y, x
COMMENT $3E2A speed + direction
COMMENT $3E2B graphic definition
COMMENT $3E2D length in SCALE_FACTOR_GAME
COMMENT $3E2E anim delay value
COMMENT $3E2F pointer to next anim object
COMMENT $3E31 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3E32 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3E33 halfspeed value
COMMENT $3E34 special flag
COMMENT $3E35 speed + direction
COMMENT $3E36 graphic definition
COMMENT $3E38 length in SCALE_FACTOR_GAME
COMMENT $3E39 anim delay value
COMMENT $3E3A pointer to next anim object
COMMENT $3E3C offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3E3D offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3E3E halfspeed value
COMMENT $3E3F special flag
COMMENT $3E40 speed + direction
COMMENT $3E41 graphic definition
COMMENT $3E43 length in SCALE_FACTOR_GAME
COMMENT $3E44 anim delay value
COMMENT $3E45 pointer to next anim object
COMMENT $3E47 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3E48 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3E49 halfspeed value
COMMENT $3E4A special flag
COMMENT $3E4B speed + direction
COMMENT $3E4C graphic definition
COMMENT $3E4E length in SCALE_FACTOR_GAME
COMMENT $3E4F anim delay value
COMMENT $3E50 pointer to next anim object
COMMENT $3E52 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3E53 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3E54 halfspeed value
COMMENT $3E55 special flag
COMMENT $3E56 speed + direction
COMMENT $3E57 graphic definition
COMMENT $3E59 length in SCALE_FACTOR_GAME
COMMENT $3E5A anim delay value
COMMENT $3E5B pointer to next anim object
COMMENT $3E5D offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3E5E offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3E5F halfspeed value
COMMENT $3E60 special flag
COMMENT $3E61 speed + direction
COMMENT $3E62 graphic definition
COMMENT $3E64 length in SCALE_FACTOR_GAME
COMMENT $3E65 anim delay value
COMMENT $3E66 pointer to next anim object
COMMENT $3E68 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3E69 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3E6A halfspeed value
COMMENT $3E6B special flag
COMMENT_LINE $3E6C this file is part of Karl Quappe, written by Malban
COMMENT_LINE $3E6C in 2016
COMMENT_LINE $3E6C all stuff contained here is public domain
COMMENT_LINE $3E6C ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $3E6C this file contains 'sprite' definition data for a motorcycle              ;
COMMENT_LINE $3E6C ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $3E6C for collision checking: SPRITES MUST HAVE THE LEFTMOST POINT AS STARTVECTOR (*)
COMMENT_LINE $3E6C moped1 is moving to the left with a speed of -1
COMMENT $3E6E draw to y, x
COMMENT $3E70 draw to y, x
COMMENT $3E72 draw to y, x
COMMENT $3E74 draw to y, x
COMMENT $3E76 draw to y, x
COMMENT $3E78 draw to y, x
COMMENT $3E7A draw to y, x
COMMENT $3E7C draw to y, x
COMMENT $3E7E draw to y, x
COMMENT $3E80 draw to y, x
COMMENT $3E82 draw to y, x
COMMENT $3E84 draw to y, x
COMMENT $3E86 draw to y, x
COMMENT $3E88 draw to y, x
COMMENT $3E8A draw to y, x
COMMENT $3E8C draw to y, x
COMMENT $3E8E draw to y, x
COMMENT $3E90 speed + direction
COMMENT $3E91 graphic definition
COMMENT $3E93 length in SCALE_FACTOR_GAME
COMMENT $3E94 anim delay value
COMMENT $3E95 pointer to next anim object
COMMENT $3E97 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3E98 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3E99 halfspeed value
COMMENT $3E9A special flag
COMMENT $3E9D draw to y, x
COMMENT $3E9F draw to y, x
COMMENT $3EA1 draw to y, x
COMMENT $3EA3 draw to y, x
COMMENT $3EA5 draw to y, x
COMMENT $3EA7 draw to y, x
COMMENT $3EA9 draw to y, x
COMMENT $3EAB draw to y, x
COMMENT $3EAD draw to y, x
COMMENT $3EAF draw to y, x
COMMENT $3EB1 draw to y, x
COMMENT $3EB3 draw to y, x
COMMENT $3EB5 draw to y, x
COMMENT $3EB7 draw to y, x
COMMENT $3EB9 draw to y, x
COMMENT $3EBB draw to y, x
COMMENT $3EBD draw to y, x
COMMENT $3EBF draw to y, x
COMMENT $3EC1 speed + direction
COMMENT $3EC2 graphic definition
COMMENT $3EC4 length in SCALE_FACTOR_GAME
COMMENT $3EC5 anim delay value
COMMENT $3EC6 pointer to next anim object
COMMENT $3EC8 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3EC9 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3ECA halfspeed value
COMMENT $3ECB special flag
COMMENT $3ECE draw to y, x
COMMENT $3ED0 draw to y, x
COMMENT $3ED2 draw to y, x
COMMENT $3ED4 draw to y, x
COMMENT $3ED6 draw to y, x
COMMENT $3ED8 draw to y, x
COMMENT $3EDA draw to y, x
COMMENT $3EDC draw to y, x
COMMENT $3EDE draw to y, x
COMMENT $3EE0 draw to y, x
COMMENT $3EE2 draw to y, x
COMMENT $3EE4 draw to y, x
COMMENT $3EE6 draw to y, x
COMMENT $3EE8 draw to y, x
COMMENT $3EEA draw to y, x
COMMENT $3EEC draw to y, x
COMMENT $3EEE draw to y, x
COMMENT $3EF0 draw to y, x
COMMENT $3EF2 speed + direction
COMMENT $3EF3 graphic definition
COMMENT $3EF5 length in SCALE_FACTOR_GAME
COMMENT $3EF6 anim delay value
COMMENT $3EF7 pointer to next anim object
COMMENT $3EF9 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3EFA offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3EFB halfspeed value
COMMENT $3EFC special flag
COMMENT $3EFF draw to y, x
COMMENT $3F01 draw to y, x
COMMENT $3F03 draw to y, x
COMMENT $3F05 draw to y, x
COMMENT $3F07 draw to y, x
COMMENT $3F09 draw to y, x
COMMENT $3F0B draw to y, x
COMMENT $3F0D draw to y, x
COMMENT $3F0F draw to y, x
COMMENT $3F11 draw to y, x
COMMENT $3F13 draw to y, x
COMMENT $3F15 draw to y, x
COMMENT $3F17 draw to y, x
COMMENT $3F19 draw to y, x
COMMENT $3F1B draw to y, x
COMMENT $3F1D draw to y, x
COMMENT $3F1F draw to y, x
COMMENT $3F21 draw to y, x
COMMENT $3F23 draw to y, x
COMMENT $3F25 speed + direction
COMMENT $3F26 graphic definition
COMMENT $3F28 length in SCALE_FACTOR_GAME
COMMENT $3F29 anim delay value
COMMENT $3F2A pointer to next anim object
COMMENT $3F2C offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3F2D offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3F2E halfspeed value
COMMENT $3F2F special flag
COMMENT $3F30 speed + direction
COMMENT $3F31 graphic definition
COMMENT $3F33 length in SCALE_FACTOR_GAME
COMMENT $3F34 anim delay value
COMMENT $3F35 pointer to next anim object
COMMENT $3F37 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3F38 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3F39 halfspeed value
COMMENT $3F3A special flag
COMMENT $3F3B speed + direction
COMMENT $3F3C graphic definition
COMMENT $3F3E length in SCALE_FACTOR_GAME
COMMENT $3F3F anim delay value
COMMENT $3F40 pointer to next anim object
COMMENT $3F42 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3F43 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3F44 halfspeed value
COMMENT $3F45 special flag
COMMENT $3F46 speed + direction
COMMENT $3F47 graphic definition
COMMENT $3F49 length in SCALE_FACTOR_GAME
COMMENT $3F4A anim delay value
COMMENT $3F4B pointer to next anim object
COMMENT $3F4D offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3F4E offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3F4F halfspeed value
COMMENT $3F50 special flag
COMMENT $3F51 speed + direction
COMMENT $3F52 graphic definition
COMMENT $3F54 length in SCALE_FACTOR_GAME
COMMENT $3F55 anim delay value
COMMENT $3F56 pointer to next anim object
COMMENT $3F58 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3F59 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3F5A halfspeed value
COMMENT $3F5B special flag
COMMENT_LINE $3F5C this file is part of vectrex frogger, written by Malban
COMMENT_LINE $3F5C in March-April 1998
COMMENT_LINE $3F5C all stuff contained here is public domain
COMMENT_LINE $3F5C ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $3F5C this file contains 'sprite' definition data for logs                      ;
COMMENT_LINE $3F5C ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $3F5C for collision checking: SPRITES MUST HAVE THE LEFTMOST POINT AS STARTVECTOR (*)
COMMENT_LINE $3F5C log1 is moving right with a speed of 1
COMMENT_LINE $3F5C log2 is moving left with a speed of -1
COMMENT $3F5E draw to y, x
COMMENT $3F60 draw to y, x
COMMENT $3F62 draw to y, x
COMMENT $3F64 draw to y, x
COMMENT $3F66 draw to y, x
COMMENT $3F68 draw to y, x
COMMENT $3F6A draw to y, x
COMMENT $3F6C draw to y, x
COMMENT $3F6E draw to y, x
COMMENT $3F70 draw to y, x
COMMENT $3F72 draw to y, x
COMMENT $3F74 draw to y, x
COMMENT $3F76 draw to y, x
COMMENT $3F78 draw to y, x
COMMENT $3F7C draw to y, x
COMMENT $3F7E draw to y, x
COMMENT $3F80 draw to y, x
COMMENT $3F82 draw to y, x
COMMENT $3F84 draw to y, x
COMMENT $3F86 draw to y, x
COMMENT $3F88 draw to y, x
COMMENT $3F8A draw to y, x
COMMENT $3F8C draw to y, x
COMMENT $3F8E draw to y, x
COMMENT $3F90 draw to y, x
COMMENT $3F92 draw to y, x
COMMENT $3F94 draw to y, x
COMMENT $3F96 draw to y, x
COMMENT $3F9A draw to y, x
COMMENT $3F9C draw to y, x
COMMENT $3F9E draw to y, x
COMMENT $3FA0 draw to y, x
COMMENT $3FA2 draw to y, x
COMMENT $3FA4 draw to y, x
COMMENT $3FA6 draw to y, x
COMMENT $3FA8 draw to y, x
COMMENT $3FAA draw to y, x
COMMENT $3FAC draw to y, x
COMMENT $3FAE draw to y, x
COMMENT $3FB0 draw to y, x
COMMENT $3FB2 draw to y, x
COMMENT $3FB4 draw to y, x
COMMENT $3FB8 draw to y, x
COMMENT $3FBA draw to y, x
COMMENT $3FBC draw to y, x
COMMENT $3FBE draw to y, x
COMMENT $3FC0 draw to y, x
COMMENT $3FC2 draw to y, x
COMMENT $3FC4 draw to y, x
COMMENT $3FC6 draw to y, x
COMMENT $3FC8 draw to y, x
COMMENT $3FCA draw to y, x
COMMENT $3FCC draw to y, x
COMMENT $3FCE draw to y, x
COMMENT $3FD0 draw to y, x
COMMENT $3FD2 draw to y, x
COMMENT $3FD4 speed + direction
COMMENT $3FD5 graphic definition
COMMENT $3FD7 length in SCALE_FACTOR_GAME
COMMENT $3FD8 anim delay value
COMMENT $3FD9 pointer to next anim object
COMMENT $3FDB offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3FDC offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3FDD halfspeed value
COMMENT $3FDE special flag
COMMENT $3FE1 draw to y, x
COMMENT $3FE3 draw to y, x
COMMENT $3FE5 draw to y, x
COMMENT $3FE7 draw to y, x
COMMENT $3FE9 draw to y, x
COMMENT $3FEB draw to y, x
COMMENT $3FED draw to y, x
COMMENT $3FEF draw to y, x
COMMENT $3FF1 draw to y, x
COMMENT $3FF3 draw to y, x
COMMENT $3FF5 draw to y, x
COMMENT $3FF7 draw to y, x
COMMENT $3FF9 draw to y, x
COMMENT $3FFB draw to y, x
COMMENT $3FFD speed + direction
COMMENT $3FFE graphic definition
COMMENT $4000 length in SCALE_FACTOR_GAME
COMMENT $4001 anim delay value
COMMENT $4002 pointer to next anim object
COMMENT $4004 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4005 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4006 halfspeed value
COMMENT $4007 special flag
COMMENT $400A draw to y, x
COMMENT $400C draw to y, x
COMMENT $400E draw to y, x
COMMENT $4010 draw to y, x
COMMENT $4012 draw to y, x
COMMENT $4014 draw to y, x
COMMENT $4016 draw to y, x
COMMENT $4018 draw to y, x
COMMENT $401A draw to y, x
COMMENT $401C draw to y, x
COMMENT $401E draw to y, x
COMMENT $4020 draw to y, x
COMMENT $4022 draw to y, x
COMMENT $4024 draw to y, x
COMMENT $4026 speed + direction
COMMENT $4027 graphic definition
COMMENT $4029 length in SCALE_FACTOR_GAME
COMMENT $402A anim delay value
COMMENT $402B pointer to next anim object
COMMENT $402D offsets y in 'SCALE_FACTOR_GAME'
COMMENT $402E offsets x in 'SCALE_FACTOR_GAME'
COMMENT $402F halfspeed value
COMMENT $4030 special flag
COMMENT $4031 speed + direction
COMMENT $4032 graphic definition
COMMENT $4034 length in SCALE_FACTOR_GAME
COMMENT $4035 anim delay value
COMMENT $4036 pointer to next anim object
COMMENT $4038 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4039 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $403A halfspeed value
COMMENT $403B special flag
COMMENT $403C speed + direction
COMMENT $403D graphic definition
COMMENT $403F length in SCALE_FACTOR_GAME
COMMENT $4040 anim delay value
COMMENT $4041 pointer to next anim object
COMMENT $4043 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4044 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4045 halfspeed value
COMMENT $4046 special flag
COMMENT $4047 speed + direction
COMMENT $4048 graphic definition
COMMENT $404A length in SCALE_FACTOR_GAME
COMMENT $404B anim delay value
COMMENT $404C pointer to next anim object
COMMENT $404E offsets y in 'SCALE_FACTOR_GAME'
COMMENT $404F offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4050 halfspeed value
COMMENT $4051 special flag
COMMENT $4052 speed + direction
COMMENT $4053 graphic definition
COMMENT $4055 length in SCALE_FACTOR_GAME
COMMENT $4056 anim delay value
COMMENT $4057 pointer to next anim object
COMMENT $4059 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $405A offsets x in 'SCALE_FACTOR_GAME'
COMMENT $405B halfspeed value
COMMENT $405C special flag
COMMENT $405D speed + direction
COMMENT $405E graphic definition
COMMENT $4060 length in SCALE_FACTOR_GAME
COMMENT $4061 anim delay value
COMMENT $4062 pointer to next anim object
COMMENT $4064 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4065 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4066 halfspeed value
COMMENT $4067 special flag
COMMENT $4068 speed + direction
COMMENT $4069 graphic definition
COMMENT $406B length in SCALE_FACTOR_GAME
COMMENT $406C anim delay value
COMMENT $406D pointer to next anim object
COMMENT $406F offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4070 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4071 halfspeed value
COMMENT $4072 special flag
COMMENT $4073 speed + direction
COMMENT $4074 graphic definition
COMMENT $4076 length in SCALE_FACTOR_GAME
COMMENT $4077 anim delay value
COMMENT $4078 pointer to next anim object
COMMENT $407A offsets y in 'SCALE_FACTOR_GAME'
COMMENT $407B offsets x in 'SCALE_FACTOR_GAME'
COMMENT $407C halfspeed value
COMMENT $407D special flag
COMMENT $407E speed + direction
COMMENT $407F graphic definition
COMMENT $4081 length in SCALE_FACTOR_GAME
COMMENT $4082 anim delay value
COMMENT $4083 pointer to next anim object
COMMENT $4085 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4086 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4087 halfspeed value
COMMENT $4088 special flag
COMMENT $4089 speed + direction
COMMENT $408A graphic definition
COMMENT $408C length in SCALE_FACTOR_GAME
COMMENT $408D anim delay value
COMMENT $408E pointer to next anim object
COMMENT $4090 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4091 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4092 halfspeed value
COMMENT $4093 special flag
COMMENT $4094 speed + direction
COMMENT $4095 graphic definition
COMMENT $4097 length in SCALE_FACTOR_GAME
COMMENT $4098 anim delay value
COMMENT $4099 pointer to next anim object
COMMENT $409B offsets y in 'SCALE_FACTOR_GAME'
COMMENT $409C offsets x in 'SCALE_FACTOR_GAME'
COMMENT $409D halfspeed value
COMMENT $409E special flag
COMMENT $409F speed + direction
COMMENT $40A0 graphic definition
COMMENT $40A2 length in SCALE_FACTOR_GAME
COMMENT $40A3 anim delay value
COMMENT $40A4 pointer to next anim object
COMMENT $40A6 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $40A7 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $40A8 halfspeed value
COMMENT $40A9 special flag
COMMENT $40AA speed + direction
COMMENT $40AB graphic definition
COMMENT $40AD length in SCALE_FACTOR_GAME
COMMENT $40AE anim delay value
COMMENT $40AF pointer to next anim object
COMMENT $40B1 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $40B2 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $40B3 halfspeed value
COMMENT $40B4 special flag
COMMENT $40B5 speed + direction
COMMENT $40B6 graphic definition
COMMENT $40B8 length in SCALE_FACTOR_GAME
COMMENT $40B9 anim delay value
COMMENT $40BA pointer to next anim object
COMMENT $40BC offsets y in 'SCALE_FACTOR_GAME'
COMMENT $40BD offsets x in 'SCALE_FACTOR_GAME'
COMMENT $40BE halfspeed value
COMMENT $40BF special flag
COMMENT_LINE $40C0 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $40C0 in 2016
COMMENT_LINE $40C0 all stuff contained here is public domain
COMMENT_LINE $40C0 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $40C0 this file contains 'sprite' definition data for logs                      ;
COMMENT_LINE $40C0 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $40C0 for collision checking: SPRITES MUST HAVE THE LEFTMOST POINT AS STARTVECTOR (*)
COMMENT_LINE $40C0 log1 is moving right with a speed of 1
COMMENT_LINE $40C0 log2 is moving left with a speed of -1
COMMENT $40C2 draw to y, x
COMMENT $40C4 draw to y, x
COMMENT $40C6 draw to y, x
COMMENT $40C8 draw to y, x
COMMENT $40CA draw to y, x
COMMENT $40CC draw to y, x
COMMENT $40CE draw to y, x
COMMENT $40D0 draw to y, x
COMMENT $40D2 draw to y, x
COMMENT $40D4 draw to y, x
COMMENT $40D6 draw to y, x
COMMENT $40D8 draw to y, x
COMMENT $40DA speed + direction
COMMENT $40DB graphic definition
COMMENT $40DD length in SCALE_FACTOR_GAME
COMMENT $40DE anim delay value
COMMENT $40DF pointer to next anim object
COMMENT $40E1 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $40E2 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $40E4 special flag
COMMENT $40E7 draw to y, x
COMMENT $40E9 draw to y, x
COMMENT $40EB draw to y, x
COMMENT $40ED draw to y, x
COMMENT $40EF draw to y, x
COMMENT $40F1 draw to y, x
COMMENT $40F3 draw to y, x
COMMENT $40F5 draw to y, x
COMMENT $40F7 draw to y, x
COMMENT $40F9 draw to y, x
COMMENT $40FB draw to y, x
COMMENT $40FD draw to y, x
COMMENT $40FF speed + direction
COMMENT $4100 graphic definition
COMMENT $4102 length in SCALE_FACTOR_GAME
COMMENT $4103 anim delay value
COMMENT $4104 pointer to next anim object
COMMENT $4106 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4107 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4109 special flag
COMMENT $410C draw to y, x
COMMENT $410E draw to y, x
COMMENT $4110 draw to y, x
COMMENT $4112 draw to y, x
COMMENT $4114 draw to y, x
COMMENT $4116 draw to y, x
COMMENT $4118 draw to y, x
COMMENT $411A draw to y, x
COMMENT $411C draw to y, x
COMMENT $411E draw to y, x
COMMENT $4120 draw to y, x
COMMENT $4122 draw to y, x
COMMENT $4124 speed + direction
COMMENT $4125 graphic definition
COMMENT $4127 length in SCALE_FACTOR_GAME
COMMENT $4128 anim delay value
COMMENT $4129 pointer to next anim object
COMMENT $412B offsets y in 'SCALE_FACTOR_GAME'
COMMENT $412C offsets x in 'SCALE_FACTOR_GAME'
COMMENT $412E special flag
COMMENT $412F speed + direction
COMMENT $4130 graphic definition
COMMENT $4132 length in SCALE_FACTOR_GAME
COMMENT $4133 anim delay value
COMMENT $4134 pointer to next anim object
COMMENT $4136 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4137 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4139 special flag
COMMENT $413C draw to y, x
COMMENT $413E draw to y, x
COMMENT $4140 draw to y, x
COMMENT $4142 draw to y, x
COMMENT $4144 draw to y, x
COMMENT $4146 draw to y, x
COMMENT $4148 draw to y, x
COMMENT $414A draw to y, x
COMMENT $414C draw to y, x
COMMENT $414E draw to y, x
COMMENT $4150 draw to y, x
COMMENT $4152 speed + direction
COMMENT $4153 graphic definition
COMMENT $4155 length in SCALE_FACTOR_GAME
COMMENT $4156 anim delay value
COMMENT $4157 pointer to next anim object
COMMENT $4159 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $415A offsets x in 'SCALE_FACTOR_GAME'
COMMENT $415C special flag
COMMENT $415F draw to y, x
COMMENT $4161 draw to y, x
COMMENT $4163 draw to y, x
COMMENT $4165 draw to y, x
COMMENT $4167 draw to y, x
COMMENT $4169 draw to y, x
COMMENT $416B draw to y, x
COMMENT $416D draw to y, x
COMMENT $416F draw to y, x
COMMENT $4171 draw to y, x
COMMENT $4173 draw to y, x
COMMENT $4175 speed + direction
COMMENT $4176 graphic definition
COMMENT $4178 length in SCALE_FACTOR_GAME
COMMENT $4179 anim delay value
COMMENT $417A pointer to next anim object
COMMENT $417C offsets y in 'SCALE_FACTOR_GAME'
COMMENT $417D offsets x in 'SCALE_FACTOR_GAME'
COMMENT $417F special flag
COMMENT $4182 draw to y, x
COMMENT $4184 draw to y, x
COMMENT $4186 draw to y, x
COMMENT $4188 draw to y, x
COMMENT $418A draw to y, x
COMMENT $418C draw to y, x
COMMENT $418E draw to y, x
COMMENT $4190 draw to y, x
COMMENT $4192 draw to y, x
COMMENT $4194 draw to y, x
COMMENT $4196 draw to y, x
COMMENT $4198 speed + direction
COMMENT $4199 graphic definition
COMMENT $419B length in SCALE_FACTOR_GAME
COMMENT $419C anim delay value
COMMENT $419D pointer to next anim object
COMMENT $419F offsets y in 'SCALE_FACTOR_GAME'
COMMENT $41A0 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $41A2 special flag
COMMENT $41A3 speed + direction
COMMENT $41A4 graphic definition
COMMENT $41A6 length in SCALE_FACTOR_GAME
COMMENT $41A7 anim delay value
COMMENT $41A8 pointer to next anim object
COMMENT $41AA offsets y in 'SCALE_FACTOR_GAME'
COMMENT $41AB offsets x in 'SCALE_FACTOR_GAME'
COMMENT $41AD special flag
COMMENT $41AE speed + direction
COMMENT $41AF graphic definition
COMMENT $41B1 length in SCALE_FACTOR_GAME
COMMENT $41B2 anim delay value
COMMENT $41B3 pointer to next anim object
COMMENT $41B5 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $41B6 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $41B8 special flag
COMMENT $41B9 speed + direction
COMMENT $41BA graphic definition
COMMENT $41BC length in SCALE_FACTOR_GAME
COMMENT $41BD anim delay value
COMMENT $41BE pointer to next anim object
COMMENT $41C0 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $41C1 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $41C3 special flag
COMMENT $41C4 speed + direction
COMMENT $41C5 graphic definition
COMMENT $41C7 length in SCALE_FACTOR_GAME
COMMENT $41C8 anim delay value
COMMENT $41C9 pointer to next anim object
COMMENT $41CB offsets y in 'SCALE_FACTOR_GAME'
COMMENT $41CC offsets x in 'SCALE_FACTOR_GAME'
COMMENT $41CE special flag
COMMENT $41CF speed + direction
COMMENT $41D0 graphic definition
COMMENT $41D2 length in SCALE_FACTOR_GAME
COMMENT $41D3 anim delay value
COMMENT $41D4 pointer to next anim object
COMMENT $41D6 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $41D7 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $41D9 special flag
COMMENT $41DA speed + direction
COMMENT $41DB graphic definition
COMMENT $41DD length in SCALE_FACTOR_GAME
COMMENT $41DE anim delay value
COMMENT $41DF pointer to next anim object
COMMENT $41E1 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $41E2 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $41E4 special flag
COMMENT $41E5 speed + direction
COMMENT $41E6 graphic definition
COMMENT $41E8 length in SCALE_FACTOR_GAME
COMMENT $41E9 anim delay value
COMMENT $41EA pointer to next anim object
COMMENT $41EC offsets y in 'SCALE_FACTOR_GAME'
COMMENT $41ED offsets x in 'SCALE_FACTOR_GAME'
COMMENT $41EF special flag
COMMENT $41F0 speed + direction
COMMENT $41F1 graphic definition
COMMENT $41F3 length in SCALE_FACTOR_GAME
COMMENT $41F4 anim delay value
COMMENT $41F5 pointer to next anim object
COMMENT $41F7 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $41F8 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $41FA special flag
COMMENT $41FB speed + direction
COMMENT $41FC graphic definition
COMMENT $41FE length in SCALE_FACTOR_GAME
COMMENT $41FF anim delay value
COMMENT $4200 pointer to next anim object
COMMENT $4202 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4203 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4205 special flag
COMMENT_LINE $4206 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $4206 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $4206 in 2016
COMMENT_LINE $4206 all stuff contained here is public domain
COMMENT_LINE $4206 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $4206 this file contains all 'sprite' definitions for turtles used in           ;
COMMENT_LINE $4206 vectrex frogger (excluding the '0')                                       ;
COMMENT_LINE $4206 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $4206 for collision checking: SPRITES MUST HAVE THE LEFTMOST POINT AS STARTVECTOR (*)
COMMENT_LINE $4206 turtle1 is moving to the right with a speed of 1
COMMENT_LINE $4206 turtle2 is moving to the left with a speed of -1
COMMENT_LINE $4206 turtle3 is moving to the right with a speed of 2
COMMENT_LINE $4206 turtle4 is moving to the left with a speed of -2
COMMENT $421E speed + direction
COMMENT $421F graphic definition
COMMENT $4221 length in SCALE_FACTOR_GAME
COMMENT $4222 anim delay value
COMMENT $4223 pointer to next anim object
COMMENT $4225 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4226 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4227 halfspeed value
COMMENT $4228 special flag
COMMENT $4245 speed + direction
COMMENT $4246 graphic definition
COMMENT $4248 length in SCALE_FACTOR_GAME
COMMENT $4249 anim delay value
COMMENT $424A pointer to next anim object
COMMENT $424C offsets y in 'SCALE_FACTOR_GAME'
COMMENT $424D offsets x in 'SCALE_FACTOR_GAME'
COMMENT $424E halfspeed value
COMMENT $424F special flag
COMMENT $426C speed + direction
COMMENT $426D graphic definition
COMMENT $426F length in SCALE_FACTOR_GAME
COMMENT $4270 anim delay value
COMMENT $4271 pointer to next anim object
COMMENT $4273 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4274 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4275 halfspeed value
COMMENT $4276 special flag
COMMENT $428F speed + direction
COMMENT $4290 graphic definition
COMMENT $4292 length in SCALE_FACTOR_GAME
COMMENT $4293 anim delay value
COMMENT $4294 pointer to next anim object
COMMENT $4296 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4297 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4298 halfspeed value
COMMENT $4299 special flag
COMMENT $42B6 speed + direction
COMMENT $42B7 graphic definition
COMMENT $42B9 length in SCALE_FACTOR_GAME
COMMENT $42BA anim delay value
COMMENT $42BB pointer to next anim object
COMMENT $42BD offsets y in 'SCALE_FACTOR_GAME'
COMMENT $42BE offsets x in 'SCALE_FACTOR_GAME'
COMMENT $42BF halfspeed value
COMMENT $42C0 special flag
COMMENT $42DD speed + direction
COMMENT $42DE graphic definition
COMMENT $42E0 length in SCALE_FACTOR_GAME
COMMENT $42E1 anim delay value
COMMENT $42E2 pointer to next anim object
COMMENT $42E4 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $42E5 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $42E6 halfspeed value
COMMENT $42E7 special flag
COMMENT $42E8 speed + direction
COMMENT $42E9 graphic definition
COMMENT $42EB length in SCALE_FACTOR_GAME
COMMENT $42EC anim delay value
COMMENT $42ED pointer to next anim object
COMMENT $42EF offsets y in 'SCALE_FACTOR_GAME'
COMMENT $42F0 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $42F1 halfspeed value
COMMENT $42F2 special flag
COMMENT $42F3 speed + direction
COMMENT $42F4 graphic definition
COMMENT $42F6 length in SCALE_FACTOR_GAME
COMMENT $42F7 anim delay value
COMMENT $42F8 pointer to next anim object
COMMENT $42FA offsets y in 'SCALE_FACTOR_GAME'
COMMENT $42FB offsets x in 'SCALE_FACTOR_GAME'
COMMENT $42FC halfspeed value
COMMENT $42FD special flag
COMMENT $42FE speed + direction
COMMENT $42FF graphic definition
COMMENT $4301 length in SCALE_FACTOR_GAME
COMMENT $4302 anim delay value
COMMENT $4303 pointer to next anim object
COMMENT $4305 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4306 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4307 halfspeed value
COMMENT $4308 special flag
COMMENT $4309 speed + direction
COMMENT $430A graphic definition
COMMENT $430C length in SCALE_FACTOR_GAME
COMMENT $430D anim delay value
COMMENT $430E pointer to next anim object
COMMENT $4310 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4311 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4312 halfspeed value
COMMENT $4313 special flag
COMMENT $4314 speed + direction
COMMENT $4315 graphic definition
COMMENT $4317 length in SCALE_FACTOR_GAME
COMMENT $4318 anim delay value
COMMENT $4319 pointer to next anim object
COMMENT $431B offsets y in 'SCALE_FACTOR_GAME'
COMMENT $431C offsets x in 'SCALE_FACTOR_GAME'
COMMENT $431D halfspeed value
COMMENT $431E special flag
COMMENT $431F speed + direction
COMMENT $4320 graphic definition
COMMENT $4322 length in SCALE_FACTOR_GAME
COMMENT $4323 anim delay value
COMMENT $4324 pointer to next anim object
COMMENT $4326 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4327 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4328 halfspeed value
COMMENT $4329 special flag
COMMENT $432A speed + direction
COMMENT $432B graphic definition
COMMENT $432D length in SCALE_FACTOR_GAME
COMMENT $432E anim delay value
COMMENT $432F pointer to next anim object
COMMENT $4331 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4332 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4333 halfspeed value
COMMENT $4334 special flag
COMMENT $4335 alternate object for diving
COMMENT $4337 speed + direction
COMMENT $4338 graphic definition
COMMENT $433A length in SCALE_FACTOR_GAME
COMMENT $433B anim delay value
COMMENT $433C pointer to next anim object
COMMENT $433E offsets y in 'SCALE_FACTOR_GAME'
COMMENT $433F offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4340 halfspeed value
COMMENT $4341 special flag
COMMENT $4342 alternate object for diving
COMMENT $4344 speed + direction
COMMENT $4345 graphic definition
COMMENT $4347 length in SCALE_FACTOR_GAME
COMMENT $4348 anim delay value
COMMENT $4349 pointer to next anim object
COMMENT $434B offsets y in 'SCALE_FACTOR_GAME'
COMMENT $434C offsets x in 'SCALE_FACTOR_GAME'
COMMENT $434D halfspeed value
COMMENT $434E special flag
COMMENT $434F alternate object for diving
COMMENT $4351 speed + direction
COMMENT $4352 graphic definition
COMMENT $4354 length in SCALE_FACTOR_GAME
COMMENT $4355 anim delay value
COMMENT $4356 pointer to next anim object
COMMENT $4358 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4359 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $435A halfspeed value
COMMENT $435B special flag
COMMENT $435C alternate object for diving
COMMENT $435E speed + direction
COMMENT $435F graphic definition
COMMENT $4361 length in SCALE_FACTOR_GAME
COMMENT $4362 anim delay value
COMMENT $4363 pointer to next anim object
COMMENT $4365 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4366 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4367 halfspeed value
COMMENT $4368 special flag
COMMENT $4369 alternate object for diving
COMMENT $436B speed + direction
COMMENT $436C graphic definition
COMMENT $436E length in SCALE_FACTOR_GAME
COMMENT $436F anim delay value
COMMENT $4370 pointer to next anim object
COMMENT $4372 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4373 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4374 halfspeed value
COMMENT $4375 special flag
COMMENT $4376 alternate object for diving
COMMENT $4378 speed + direction
COMMENT $4379 graphic definition
COMMENT $437B length in SCALE_FACTOR_GAME
COMMENT $437C anim delay value
COMMENT $437D pointer to next anim object
COMMENT $437F offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4380 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4381 halfspeed value
COMMENT $4382 special flag
COMMENT $4383 alternate object for diving
COMMENT $4385 speed + direction
COMMENT $4386 graphic definition
COMMENT $4388 length in SCALE_FACTOR_GAME
COMMENT $4389 anim delay value
COMMENT $438A pointer to next anim object
COMMENT $438C offsets y in 'SCALE_FACTOR_GAME'
COMMENT $438D offsets x in 'SCALE_FACTOR_GAME'
COMMENT $438E halfspeed value
COMMENT $438F special flag
COMMENT $4390 alternate object for diving
COMMENT $4392 speed + direction
COMMENT $4393 graphic definition
COMMENT $4395 length in SCALE_FACTOR_GAME
COMMENT $4396 anim delay value
COMMENT $4397 pointer to next anim object
COMMENT $4399 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $439A offsets x in 'SCALE_FACTOR_GAME'
COMMENT $439B halfspeed value
COMMENT $439C special flag
COMMENT $439D alternate object for diving
COMMENT $439F speed + direction
COMMENT $43A0 graphic definition
COMMENT $43A2 length in SCALE_FACTOR_GAME
COMMENT $43A3 anim delay value
COMMENT $43A4 pointer to next anim object
COMMENT $43A6 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $43A7 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $43A8 halfspeed value
COMMENT $43A9 special flag
COMMENT $43AA alternate object for diving
COMMENT $43AC speed + direction
COMMENT $43AD graphic definition
COMMENT $43AF length in SCALE_FACTOR_GAME
COMMENT $43B0 anim delay value
COMMENT $43B1 pointer to next anim object
COMMENT $43B3 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $43B4 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $43B5 halfspeed value
COMMENT $43B6 special flag
COMMENT $43B7 alternate object for diving
COMMENT $43B9 speed + direction
COMMENT $43BA graphic definition
COMMENT $43BC length in SCALE_FACTOR_GAME
COMMENT $43BD anim delay value
COMMENT $43BE pointer to next anim object
COMMENT $43C0 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $43C1 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $43C2 halfspeed value
COMMENT $43C3 special flag
COMMENT $43C4 alternate object for diving
COMMENT_LINE $43C6 sprite definition
COMMENT_LINE $43DA sprite definition
COMMENT_LINE $43EE sprite definition
COMMENT_LINE $43FC sprite definition
COMMENT_LINE $441A sprite definition
COMMENT_LINE $442E sprite definition
COMMENT $4438 speed + direction
COMMENT $4439 graphic definition
COMMENT $443B length in SCALE_FACTOR_GAME
COMMENT $443C anim delay value
COMMENT $443D pointer to next anim object
COMMENT $443F offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4440 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4441 halfspeed value
COMMENT $4442 special flag
COMMENT $4443 alternate object for diving
COMMENT $4445 speed + direction
COMMENT $4446 graphic definition
COMMENT $4448 length in SCALE_FACTOR_GAME
COMMENT $4449 anim delay value
COMMENT $444A pointer to next anim object
COMMENT $444C offsets y in 'SCALE_FACTOR_GAME'
COMMENT $444D offsets x in 'SCALE_FACTOR_GAME'
COMMENT $444E halfspeed value
COMMENT $444F special flag
COMMENT $4450 alternate object for diving
COMMENT $4452 speed + direction
COMMENT $4453 graphic definition
COMMENT $4455 length in SCALE_FACTOR_GAME
COMMENT $4456 anim delay value
COMMENT $4457 pointer to next anim object
COMMENT $4459 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $445A offsets x in 'SCALE_FACTOR_GAME'
COMMENT $445B halfspeed value
COMMENT $445C special flag
COMMENT $445D alternate object for diving
COMMENT $445F speed + direction
COMMENT $4460 graphic definition
COMMENT $4462 length in SCALE_FACTOR_GAME
COMMENT $4463 anim delay value
COMMENT $4464 pointer to next anim object
COMMENT $4466 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4467 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4468 halfspeed value
COMMENT $4469 special flag
COMMENT $446A alternate object for diving
COMMENT $446C speed + direction
COMMENT $446D graphic definition
COMMENT $446F length in SCALE_FACTOR_GAME
COMMENT $4470 anim delay value
COMMENT $4471 pointer to next anim object
COMMENT $4473 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4474 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4475 halfspeed value
COMMENT $4476 special flag
COMMENT $4477 alternate object for diving
COMMENT $4479 speed + direction
COMMENT $447A graphic definition
COMMENT $447C length in SCALE_FACTOR_GAME
COMMENT $447D anim delay value
COMMENT $447E pointer to next anim object
COMMENT $4480 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4481 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4482 halfspeed value
COMMENT $4483 special flag
COMMENT $4484 alternate object for diving
COMMENT $4486 speed + direction
COMMENT $4487 graphic definition
COMMENT $4489 length in SCALE_FACTOR_GAME
COMMENT $448A anim delay value
COMMENT $448B pointer to next anim object
COMMENT $448D offsets y in 'SCALE_FACTOR_GAME'
COMMENT $448E offsets x in 'SCALE_FACTOR_GAME'
COMMENT $448F halfspeed value
COMMENT $4490 special flag
COMMENT $4491 alternate object for diving
COMMENT $4493 speed + direction
COMMENT $4494 graphic definition
COMMENT $4496 length in SCALE_FACTOR_GAME
COMMENT $4497 anim delay value
COMMENT $4498 pointer to next anim object
COMMENT $449A offsets y in 'SCALE_FACTOR_GAME'
COMMENT $449B offsets x in 'SCALE_FACTOR_GAME'
COMMENT $449C halfspeed value
COMMENT $449D special flag
COMMENT $449E alternate object for diving
COMMENT $44A0 speed + direction
COMMENT $44A1 graphic definition
COMMENT $44A3 length in SCALE_FACTOR_GAME
COMMENT $44A4 anim delay value
COMMENT $44A5 pointer to next anim object
COMMENT $44A7 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $44A8 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $44A9 halfspeed value
COMMENT $44AA special flag
COMMENT $44AB alternate object for diving
COMMENT $44AD speed + direction
COMMENT $44AE graphic definition
COMMENT $44B0 length in SCALE_FACTOR_GAME
COMMENT $44B1 anim delay value
COMMENT $44B2 pointer to next anim object
COMMENT $44B4 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $44B5 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $44B6 halfspeed value
COMMENT $44B7 special flag
COMMENT $44B8 alternate object for diving
COMMENT $44BA speed + direction
COMMENT $44BB graphic definition
COMMENT $44BD length in SCALE_FACTOR_GAME
COMMENT $44BE anim delay value
COMMENT $44BF pointer to next anim object
COMMENT $44C1 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $44C2 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $44C3 halfspeed value
COMMENT $44C4 special flag
COMMENT $44C5 alternate object for diving
COMMENT $44C7 speed + direction
COMMENT $44C8 graphic definition
COMMENT $44CA length in SCALE_FACTOR_GAME
COMMENT $44CB anim delay value
COMMENT $44CC pointer to next anim object
COMMENT $44CE offsets y in 'SCALE_FACTOR_GAME'
COMMENT $44CF offsets x in 'SCALE_FACTOR_GAME'
COMMENT $44D0 halfspeed value
COMMENT $44D1 special flag
COMMENT $44D2 alternate object for diving
COMMENT $44D4 speed + direction
COMMENT $44D5 graphic definition
COMMENT $44D7 length in SCALE_FACTOR_GAME
COMMENT $44D8 anim delay value
COMMENT $44D9 pointer to next anim object
COMMENT $44DB offsets y in 'SCALE_FACTOR_GAME'
COMMENT $44DC offsets x in 'SCALE_FACTOR_GAME'
COMMENT $44DD halfspeed value
COMMENT $44DE special flag
COMMENT $44DF alternate object for diving
COMMENT $44E1 speed + direction
COMMENT $44E2 graphic definition
COMMENT $44E4 length in SCALE_FACTOR_GAME
COMMENT $44E5 anim delay value
COMMENT $44E6 pointer to next anim object
COMMENT $44E8 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $44E9 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $44EA halfspeed value
COMMENT $44EB special flag
COMMENT $44EC alternate object for diving
COMMENT $44EE speed + direction
COMMENT $44EF graphic definition
COMMENT $44F1 length in SCALE_FACTOR_GAME
COMMENT $44F2 anim delay value
COMMENT $44F3 pointer to next anim object
COMMENT $44F5 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $44F6 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $44F7 halfspeed value
COMMENT $44F8 special flag
COMMENT $44F9 alternate object for diving
COMMENT $44FB speed + direction
COMMENT $44FC graphic definition
COMMENT $44FE length in SCALE_FACTOR_GAME
COMMENT $44FF anim delay value
COMMENT $4500 pointer to next anim object
COMMENT $4502 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4503 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4504 halfspeed value
COMMENT $4505 special flag
COMMENT $4506 alternate object for diving
COMMENT $4508 speed + direction
COMMENT $4509 graphic definition
COMMENT $450B length in SCALE_FACTOR_GAME
COMMENT $450C anim delay value
COMMENT $450D pointer to next anim object
COMMENT $450F offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4510 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4511 halfspeed value
COMMENT $4512 special flag
COMMENT $4513 alternate object for diving
COMMENT $4515 speed + direction
COMMENT $4516 graphic definition
COMMENT $4518 length in SCALE_FACTOR_GAME
COMMENT $4519 anim delay value
COMMENT $451A pointer to next anim object
COMMENT $451C offsets y in 'SCALE_FACTOR_GAME'
COMMENT $451D offsets x in 'SCALE_FACTOR_GAME'
COMMENT $451E halfspeed value
COMMENT $451F special flag
COMMENT $4520 alternate object for diving
COMMENT $4522 speed + direction
COMMENT $4523 graphic definition
COMMENT $4525 length in SCALE_FACTOR_GAME
COMMENT $4526 anim delay value
COMMENT $4527 pointer to next anim object
COMMENT $4529 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $452A offsets x in 'SCALE_FACTOR_GAME'
COMMENT $452B halfspeed value
COMMENT $452C special flag
COMMENT $452D alternate object for diving
COMMENT $452F speed + direction
COMMENT $4530 graphic definition
COMMENT $4532 length in SCALE_FACTOR_GAME
COMMENT $4533 anim delay value
COMMENT $4534 pointer to next anim object
COMMENT $4536 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4537 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4538 halfspeed value
COMMENT $4539 special flag
COMMENT $453A alternate object for diving
COMMENT_LINE $453C sprite definition
COMMENT_LINE $4550 sprite definition
COMMENT_LINE $4564 sprite definition
COMMENT_LINE $4582 sprite definition
COMMENT_LINE $4596 sprite definition
COMMENT $45A0 speed + direction
COMMENT $45A1 graphic definition
COMMENT $45A3 length in SCALE_FACTOR_GAME
COMMENT $45A4 anim delay value
COMMENT $45A5 pointer to next anim object
COMMENT $45A7 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $45A8 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $45A9 halfspeed value
COMMENT $45AA special flag
COMMENT $45AB alternate object for diving
COMMENT $45AD speed + direction
COMMENT $45AE graphic definition
COMMENT $45B0 length in SCALE_FACTOR_GAME
COMMENT $45B1 anim delay value
COMMENT $45B2 pointer to next anim object
COMMENT $45B4 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $45B5 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $45B6 halfspeed value
COMMENT $45B7 special flag
COMMENT $45B8 alternate object for diving
COMMENT $45BA speed + direction
COMMENT $45BB graphic definition
COMMENT $45BD length in SCALE_FACTOR_GAME
COMMENT $45BE anim delay value
COMMENT $45BF pointer to next anim object
COMMENT $45C1 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $45C2 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $45C3 halfspeed value
COMMENT $45C4 special flag
COMMENT $45C5 alternate object for diving
COMMENT $45C7 speed + direction
COMMENT $45C8 graphic definition
COMMENT $45CA length in SCALE_FACTOR_GAME
COMMENT $45CB anim delay value
COMMENT $45CC pointer to next anim object
COMMENT $45CE offsets y in 'SCALE_FACTOR_GAME'
COMMENT $45CF offsets x in 'SCALE_FACTOR_GAME'
COMMENT $45D0 halfspeed value
COMMENT $45D1 special flag
COMMENT $45D2 alternate object for diving
COMMENT $45D4 speed + direction
COMMENT $45D5 graphic definition
COMMENT $45D7 length in SCALE_FACTOR_GAME
COMMENT $45D8 anim delay value
COMMENT $45D9 pointer to next anim object
COMMENT $45DB offsets y in 'SCALE_FACTOR_GAME'
COMMENT $45DC offsets x in 'SCALE_FACTOR_GAME'
COMMENT $45DD halfspeed value
COMMENT $45DE special flag
COMMENT $45DF alternate object for diving
COMMENT $45E1 speed + direction
COMMENT $45E2 graphic definition
COMMENT $45E4 length in SCALE_FACTOR_GAME
COMMENT $45E5 anim delay value
COMMENT $45E6 pointer to next anim object
COMMENT $45E8 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $45E9 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $45EA halfspeed value
COMMENT $45EB special flag
COMMENT $45EC alternate object for diving
COMMENT $45EE speed + direction
COMMENT $45EF graphic definition
COMMENT $45F1 length in SCALE_FACTOR_GAME
COMMENT $45F2 anim delay value
COMMENT $45F3 pointer to next anim object
COMMENT $45F5 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $45F6 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $45F7 halfspeed value
COMMENT $45F8 special flag
COMMENT $45F9 alternate object for diving
COMMENT $45FB speed + direction
COMMENT $45FC graphic definition
COMMENT $45FE length in SCALE_FACTOR_GAME
COMMENT $45FF anim delay value
COMMENT $4600 pointer to next anim object
COMMENT $4602 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4603 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4604 halfspeed value
COMMENT $4605 special flag
COMMENT $4606 alternate object for diving
COMMENT $4608 speed + direction
COMMENT $4609 graphic definition
COMMENT $460B length in SCALE_FACTOR_GAME
COMMENT $460C anim delay value
COMMENT $460D pointer to next anim object
COMMENT $460F offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4610 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4611 halfspeed value
COMMENT $4612 special flag
COMMENT $4613 alternate object for diving
COMMENT $4615 speed + direction
COMMENT $4616 graphic definition
COMMENT $4618 length in SCALE_FACTOR_GAME
COMMENT $4619 anim delay value
COMMENT $461A pointer to next anim object
COMMENT $461C offsets y in 'SCALE_FACTOR_GAME'
COMMENT $461D offsets x in 'SCALE_FACTOR_GAME'
COMMENT $461E halfspeed value
COMMENT $461F special flag
COMMENT $4620 alternate object for diving
COMMENT $4622 speed + direction
COMMENT $4623 graphic definition
COMMENT $4625 length in SCALE_FACTOR_GAME
COMMENT $4626 anim delay value
COMMENT $4627 pointer to next anim object
COMMENT $4629 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $462A offsets x in 'SCALE_FACTOR_GAME'
COMMENT $462B halfspeed value
COMMENT $462C special flag
COMMENT $462D alternate object for diving
COMMENT $462F speed + direction
COMMENT $4630 graphic definition
COMMENT $4632 length in SCALE_FACTOR_GAME
COMMENT $4633 anim delay value
COMMENT $4634 pointer to next anim object
COMMENT $4636 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4637 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4638 halfspeed value
COMMENT $4639 special flag
COMMENT $463A alternate object for diving
COMMENT $463C speed + direction
COMMENT $463D graphic definition
COMMENT $463F length in SCALE_FACTOR_GAME
COMMENT $4640 anim delay value
COMMENT $4641 pointer to next anim object
COMMENT $4643 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4644 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4645 halfspeed value
COMMENT $4646 special flag
COMMENT $4647 alternate object for diving
COMMENT $4649 speed + direction
COMMENT $464A graphic definition
COMMENT $464C length in SCALE_FACTOR_GAME
COMMENT $464D anim delay value
COMMENT $464E pointer to next anim object
COMMENT $4650 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4651 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4652 halfspeed value
COMMENT $4653 special flag
COMMENT $4654 alternate object for diving
COMMENT $4656 speed + direction
COMMENT $4657 graphic definition
COMMENT $4659 length in SCALE_FACTOR_GAME
COMMENT $465A anim delay value
COMMENT $465B pointer to next anim object
COMMENT $465D offsets y in 'SCALE_FACTOR_GAME'
COMMENT $465E offsets x in 'SCALE_FACTOR_GAME'
COMMENT $465F halfspeed value
COMMENT $4660 special flag
COMMENT $4661 alternate object for diving
COMMENT $4663 speed + direction
COMMENT $4664 graphic definition
COMMENT $4666 length in SCALE_FACTOR_GAME
COMMENT $4667 anim delay value
COMMENT $4668 pointer to next anim object
COMMENT $466A offsets y in 'SCALE_FACTOR_GAME'
COMMENT $466B offsets x in 'SCALE_FACTOR_GAME'
COMMENT $466C halfspeed value
COMMENT $466D special flag
COMMENT $466E alternate object for diving
COMMENT $4670 speed + direction
COMMENT $4671 graphic definition
COMMENT $4673 length in SCALE_FACTOR_GAME
COMMENT $4674 anim delay value
COMMENT $4675 pointer to next anim object
COMMENT $4677 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4678 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4679 halfspeed value
COMMENT $467A special flag
COMMENT $467B alternate object for diving
COMMENT $467D speed + direction
COMMENT $467E graphic definition
COMMENT $4680 length in SCALE_FACTOR_GAME
COMMENT $4681 anim delay value
COMMENT $4682 pointer to next anim object
COMMENT $4684 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4685 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4686 halfspeed value
COMMENT $4687 special flag
COMMENT $4688 alternate object for diving
COMMENT $468A speed + direction
COMMENT $468B graphic definition
COMMENT $468D length in SCALE_FACTOR_GAME
COMMENT $468E anim delay value
COMMENT $468F pointer to next anim object
COMMENT $4691 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4692 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4693 halfspeed value
COMMENT $4694 special flag
COMMENT $4695 alternate object for diving
COMMENT $4697 speed + direction
COMMENT $4698 graphic definition
COMMENT $469A length in SCALE_FACTOR_GAME
COMMENT $469B anim delay value
COMMENT $469C pointer to next anim object
COMMENT $469E offsets y in 'SCALE_FACTOR_GAME'
COMMENT $469F offsets x in 'SCALE_FACTOR_GAME'
COMMENT $46A0 halfspeed value
COMMENT $46A1 special flag
COMMENT $46A2 alternate object for diving
COMMENT_LINE $46A4 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $46A4 in 2016
COMMENT_LINE $46A4 all stuff contained here is public domain
COMMENT_LINE $46A4 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $46A4 this file contains 'sprite' definition data for snakes                    ;
COMMENT_LINE $46A4 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $46A4 for collision checking: SPRITES MUST HAVE THE LEFTMOST POINT AS STARTVECTOR (*)
COMMENT_LINE $46A4 snake1 is moving to the right with a speed of 1
COMMENT_LINE $46A4 snake2 is moving to the right with a speed of 2
COMMENT_LINE $46A4 snake3 is moving to the left with a speed of -1
COMMENT_LINE $46A4 snake4 is moving to the left with a speed of -2
COMMENT $46A6 draw to y, x
COMMENT $46A8 draw to y, x
COMMENT $46AA draw to y, x
COMMENT $46AC draw to y, x
COMMENT $46AE draw to y, x
COMMENT $46B0 draw to y, x
COMMENT $46B2 draw to y, x
COMMENT $46B4 draw to y, x
COMMENT $46B6 draw to y, x
COMMENT $46B8 draw to y, x
COMMENT $46BA draw to y, x
COMMENT $46BC speed + direction
COMMENT $46BD graphic definition
COMMENT $46BF length in SCALE_FACTOR_GAME
COMMENT $46C0 anim delay value
COMMENT $46C1 pointer to next anim object
COMMENT $46C3 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $46C4 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $46C5 halfspeed value
COMMENT $46C6 special flag
COMMENT $46C9 draw to y, x
COMMENT $46CB draw to y, x
COMMENT $46CD draw to y, x
COMMENT $46CF draw to y, x
COMMENT $46D1 draw to y, x
COMMENT $46D3 draw to y, x
COMMENT $46D5 draw to y, x
COMMENT $46D7 draw to y, x
COMMENT $46D9 draw to y, x
COMMENT $46DB draw to y, x
COMMENT $46DD draw to y, x
COMMENT $46DF speed + direction
COMMENT $46E0 graphic definition
COMMENT $46E2 length in SCALE_FACTOR_GAME
COMMENT $46E3 anim delay value
COMMENT $46E4 pointer to next anim object
COMMENT $46E6 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $46E7 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $46E8 halfspeed value
COMMENT $46E9 special flag
COMMENT $46EC draw to y, x
COMMENT $46EE draw to y, x
COMMENT $46F0 draw to y, x
COMMENT $46F2 draw to y, x
COMMENT $46F4 draw to y, x
COMMENT $46F6 draw to y, x
COMMENT $46F8 draw to y, x
COMMENT $46FA draw to y, x
COMMENT $46FC draw to y, x
COMMENT $46FE draw to y, x
COMMENT $4700 draw to y, x
COMMENT $4702 speed + direction
COMMENT $4703 graphic definition
COMMENT $4705 length in SCALE_FACTOR_GAME
COMMENT $4706 anim delay value
COMMENT $4707 pointer to next anim object
COMMENT $4709 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $470A offsets x in 'SCALE_FACTOR_GAME'
COMMENT $470B halfspeed value
COMMENT $470C special flag
COMMENT $470F draw to y, x
COMMENT $4711 draw to y, x
COMMENT $4713 draw to y, x
COMMENT $4715 draw to y, x
COMMENT $4717 draw to y, x
COMMENT $4719 draw to y, x
COMMENT $471B draw to y, x
COMMENT $471D draw to y, x
COMMENT $471F draw to y, x
COMMENT $4721 draw to y, x
COMMENT $4723 draw to y, x
COMMENT $4725 speed + direction
COMMENT $4726 graphic definition
COMMENT $4728 length in SCALE_FACTOR_GAME
COMMENT $4729 anim delay value
COMMENT $472A pointer to next anim object
COMMENT $472C offsets y in 'SCALE_FACTOR_GAME'
COMMENT $472D offsets x in 'SCALE_FACTOR_GAME'
COMMENT $472E halfspeed value
COMMENT $472F special flag
COMMENT $4732 draw to y, x
COMMENT $4734 draw to y, x
COMMENT $4736 draw to y, x
COMMENT $4738 draw to y, x
COMMENT $473A draw to y, x
COMMENT $473C draw to y, x
COMMENT $473E draw to y, x
COMMENT $4740 draw to y, x
COMMENT $4742 draw to y, x
COMMENT $4744 draw to y, x
COMMENT $4746 draw to y, x
COMMENT $4748 speed + direction
COMMENT $4749 graphic definition
COMMENT $474B length in SCALE_FACTOR_GAME
COMMENT $474C anim delay value
COMMENT $474D pointer to next anim object
COMMENT $474F offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4750 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4751 halfspeed value
COMMENT $4752 special flag
COMMENT $4753 speed + direction
COMMENT $4754 graphic definition
COMMENT $4756 length in SCALE_FACTOR_GAME
COMMENT $4757 anim delay value
COMMENT $4758 pointer to next anim object
COMMENT $475A offsets y in 'SCALE_FACTOR_GAME'
COMMENT $475B offsets x in 'SCALE_FACTOR_GAME'
COMMENT $475C halfspeed value
COMMENT $475D special flag
COMMENT $475E speed + direction
COMMENT $475F graphic definition
COMMENT $4761 length in SCALE_FACTOR_GAME
COMMENT $4762 anim delay value
COMMENT $4763 pointer to next anim object
COMMENT $4765 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4766 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4767 halfspeed value
COMMENT $4768 special flag
COMMENT $4769 speed + direction
COMMENT $476A graphic definition
COMMENT $476C length in SCALE_FACTOR_GAME
COMMENT $476D anim delay value
COMMENT $476E pointer to next anim object
COMMENT $4770 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4771 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4772 halfspeed value
COMMENT $4773 special flag
COMMENT $4774 speed + direction
COMMENT $4775 graphic definition
COMMENT $4777 length in SCALE_FACTOR_GAME
COMMENT $4778 anim delay value
COMMENT $4779 pointer to next anim object
COMMENT $477B offsets y in 'SCALE_FACTOR_GAME'
COMMENT $477C offsets x in 'SCALE_FACTOR_GAME'
COMMENT $477D halfspeed value
COMMENT $477E special flag
COMMENT $477F speed + direction
COMMENT $4780 graphic definition
COMMENT $4782 length in SCALE_FACTOR_GAME
COMMENT $4783 anim delay value
COMMENT $4784 pointer to next anim object
COMMENT $4786 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4787 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4788 halfspeed value
COMMENT $4789 special flag
COMMENT $478A speed + direction
COMMENT $478B graphic definition
COMMENT $478D length in SCALE_FACTOR_GAME
COMMENT $478E anim delay value
COMMENT $478F pointer to next anim object
COMMENT $4791 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4792 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4793 halfspeed value
COMMENT $4794 special flag
COMMENT $4795 speed + direction
COMMENT $4796 graphic definition
COMMENT $4798 length in SCALE_FACTOR_GAME
COMMENT $4799 anim delay value
COMMENT $479A pointer to next anim object
COMMENT $479C offsets y in 'SCALE_FACTOR_GAME'
COMMENT $479D offsets x in 'SCALE_FACTOR_GAME'
COMMENT $479E halfspeed value
COMMENT $479F special flag
COMMENT $47A0 speed + direction
COMMENT $47A1 graphic definition
COMMENT $47A3 length in SCALE_FACTOR_GAME
COMMENT $47A4 anim delay value
COMMENT $47A5 pointer to next anim object
COMMENT $47A7 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $47A8 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $47A9 halfspeed value
COMMENT $47AA special flag
COMMENT $47AB speed + direction
COMMENT $47AC graphic definition
COMMENT $47AE length in SCALE_FACTOR_GAME
COMMENT $47AF anim delay value
COMMENT $47B0 pointer to next anim object
COMMENT $47B2 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $47B3 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $47B4 halfspeed value
COMMENT $47B5 special flag
COMMENT $47B6 speed + direction
COMMENT $47B7 graphic definition
COMMENT $47B9 length in SCALE_FACTOR_GAME
COMMENT $47BA anim delay value
COMMENT $47BB pointer to next anim object
COMMENT $47BD offsets y in 'SCALE_FACTOR_GAME'
COMMENT $47BE offsets x in 'SCALE_FACTOR_GAME'
COMMENT $47BF halfspeed value
COMMENT $47C0 special flag
COMMENT $47C1 speed + direction
COMMENT $47C2 graphic definition
COMMENT $47C4 length in SCALE_FACTOR_GAME
COMMENT $47C5 anim delay value
COMMENT $47C6 pointer to next anim object
COMMENT $47C8 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $47C9 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $47CA halfspeed value
COMMENT $47CB special flag
COMMENT $47CE draw to y, x
COMMENT $47D0 draw to y, x
COMMENT $47D2 draw to y, x
COMMENT $47D4 draw to y, x
COMMENT $47D6 draw to y, x
COMMENT $47D8 draw to y, x
COMMENT $47DA draw to y, x
COMMENT $47DC draw to y, x
COMMENT $47DE draw to y, x
COMMENT $47E0 draw to y, x
COMMENT $47E2 draw to y, x
COMMENT $47E4 speed + direction
COMMENT $47E5 graphic definition
COMMENT $47E7 length in SCALE_FACTOR_GAME
COMMENT $47E8 anim delay value
COMMENT $47E9 pointer to next anim object
COMMENT $47EB offsets y in 'SCALE_FACTOR_GAME'
COMMENT $47EC offsets x in 'SCALE_FACTOR_GAME'
COMMENT $47ED halfspeed value
COMMENT $47EE special flag
COMMENT $47F1 draw to y, x
COMMENT $47F3 draw to y, x
COMMENT $47F5 draw to y, x
COMMENT $47F7 draw to y, x
COMMENT $47F9 draw to y, x
COMMENT $47FB draw to y, x
COMMENT $47FD draw to y, x
COMMENT $47FF draw to y, x
COMMENT $4801 draw to y, x
COMMENT $4803 draw to y, x
COMMENT $4805 draw to y, x
COMMENT $4807 speed + direction
COMMENT $4808 graphic definition
COMMENT $480A length in SCALE_FACTOR_GAME
COMMENT $480B anim delay value
COMMENT $480C pointer to next anim object
COMMENT $480E offsets y in 'SCALE_FACTOR_GAME'
COMMENT $480F offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4810 halfspeed value
COMMENT $4811 special flag
COMMENT $4814 draw to y, x
COMMENT $4816 draw to y, x
COMMENT $4818 draw to y, x
COMMENT $481A draw to y, x
COMMENT $481C draw to y, x
COMMENT $481E draw to y, x
COMMENT $4820 draw to y, x
COMMENT $4822 draw to y, x
COMMENT $4824 draw to y, x
COMMENT $4826 draw to y, x
COMMENT $4828 draw to y, x
COMMENT $482A speed + direction
COMMENT $482B graphic definition
COMMENT $482D length in SCALE_FACTOR_GAME
COMMENT $482E anim delay value
COMMENT $482F pointer to next anim object
COMMENT $4831 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4832 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4833 halfspeed value
COMMENT $4834 special flag
COMMENT $4837 draw to y, x
COMMENT $4839 draw to y, x
COMMENT $483B draw to y, x
COMMENT $483D draw to y, x
COMMENT $483F draw to y, x
COMMENT $4841 draw to y, x
COMMENT $4843 draw to y, x
COMMENT $4845 draw to y, x
COMMENT $4847 draw to y, x
COMMENT $4849 draw to y, x
COMMENT $484B draw to y, x
COMMENT $484D speed + direction
COMMENT $484E graphic definition
COMMENT $4850 length in SCALE_FACTOR_GAME
COMMENT $4851 anim delay value
COMMENT $4852 pointer to next anim object
COMMENT $4854 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4855 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4856 halfspeed value
COMMENT $4857 special flag
COMMENT $485A draw to y, x
COMMENT $485C draw to y, x
COMMENT $485E draw to y, x
COMMENT $4860 draw to y, x
COMMENT $4862 draw to y, x
COMMENT $4864 draw to y, x
COMMENT $4866 draw to y, x
COMMENT $4868 draw to y, x
COMMENT $486A draw to y, x
COMMENT $486C draw to y, x
COMMENT $486E draw to y, x
COMMENT $4870 speed + direction
COMMENT $4871 graphic definition
COMMENT $4873 length in SCALE_FACTOR_GAME
COMMENT $4874 anim delay value
COMMENT $4875 pointer to next anim object
COMMENT $4877 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4878 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4879 halfspeed value
COMMENT $487A special flag
COMMENT $487B speed + direction
COMMENT $487C graphic definition
COMMENT $487E length in SCALE_FACTOR_GAME
COMMENT $487F anim delay value
COMMENT $4880 pointer to next anim object
COMMENT $4882 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4883 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4884 halfspeed value
COMMENT $4885 special flag
COMMENT $4886 speed + direction
COMMENT $4887 graphic definition
COMMENT $4889 length in SCALE_FACTOR_GAME
COMMENT $488A anim delay value
COMMENT $488B pointer to next anim object
COMMENT $488D offsets y in 'SCALE_FACTOR_GAME'
COMMENT $488E offsets x in 'SCALE_FACTOR_GAME'
COMMENT $488F halfspeed value
COMMENT $4890 special flag
COMMENT $4891 speed + direction
COMMENT $4892 graphic definition
COMMENT $4894 length in SCALE_FACTOR_GAME
COMMENT $4895 anim delay value
COMMENT $4896 pointer to next anim object
COMMENT $4898 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4899 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $489A halfspeed value
COMMENT $489B special flag
COMMENT $489C speed + direction
COMMENT $489D graphic definition
COMMENT $489F length in SCALE_FACTOR_GAME
COMMENT $48A0 anim delay value
COMMENT $48A1 pointer to next anim object
COMMENT $48A3 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $48A4 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $48A5 halfspeed value
COMMENT $48A6 special flag
COMMENT $48A7 speed + direction
COMMENT $48A8 graphic definition
COMMENT $48AA length in SCALE_FACTOR_GAME
COMMENT $48AB anim delay value
COMMENT $48AC pointer to next anim object
COMMENT $48AE offsets y in 'SCALE_FACTOR_GAME'
COMMENT $48AF offsets x in 'SCALE_FACTOR_GAME'
COMMENT $48B0 halfspeed value
COMMENT $48B1 special flag
COMMENT $48B2 speed + direction
COMMENT $48B3 graphic definition
COMMENT $48B5 length in SCALE_FACTOR_GAME
COMMENT $48B6 anim delay value
COMMENT $48B7 pointer to next anim object
COMMENT $48B9 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $48BA offsets x in 'SCALE_FACTOR_GAME'
COMMENT $48BB halfspeed value
COMMENT $48BC special flag
COMMENT $48BD speed + direction
COMMENT $48BE graphic definition
COMMENT $48C0 length in SCALE_FACTOR_GAME
COMMENT $48C1 anim delay value
COMMENT $48C2 pointer to next anim object
COMMENT $48C4 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $48C5 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $48C6 halfspeed value
COMMENT $48C7 special flag
COMMENT $48C8 speed + direction
COMMENT $48C9 graphic definition
COMMENT $48CB length in SCALE_FACTOR_GAME
COMMENT $48CC anim delay value
COMMENT $48CD pointer to next anim object
COMMENT $48CF offsets y in 'SCALE_FACTOR_GAME'
COMMENT $48D0 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $48D1 halfspeed value
COMMENT $48D2 special flag
COMMENT $48D3 speed + direction
COMMENT $48D4 graphic definition
COMMENT $48D6 length in SCALE_FACTOR_GAME
COMMENT $48D7 anim delay value
COMMENT $48D8 pointer to next anim object
COMMENT $48DA offsets y in 'SCALE_FACTOR_GAME'
COMMENT $48DB offsets x in 'SCALE_FACTOR_GAME'
COMMENT $48DC halfspeed value
COMMENT $48DD special flag
COMMENT $48DE speed + direction
COMMENT $48DF graphic definition
COMMENT $48E1 length in SCALE_FACTOR_GAME
COMMENT $48E2 anim delay value
COMMENT $48E3 pointer to next anim object
COMMENT $48E5 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $48E6 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $48E7 halfspeed value
COMMENT $48E8 special flag
COMMENT $48E9 speed + direction
COMMENT $48EA graphic definition
COMMENT $48EC length in SCALE_FACTOR_GAME
COMMENT $48ED anim delay value
COMMENT $48EE pointer to next anim object
COMMENT $48F0 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $48F1 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $48F2 halfspeed value
COMMENT $48F3 special flag
COMMENT_LINE $48F4 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $48F4 in 2016
COMMENT_LINE $48F4 all stuff contained here is public domain
COMMENT_LINE $48F4 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $48F4 this file contains 'sprite' definition data for crocodiles                ;
COMMENT_LINE $48F4 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $48F6 draw to y, x
COMMENT $48F8 draw to y, x
COMMENT $48FA draw to y, x
COMMENT $48FC draw to y, x
COMMENT $48FE draw to y, x
COMMENT $4900 draw to y, x
COMMENT $4902 draw to y, x
COMMENT $4904 draw to y, x
COMMENT $4906 draw to y, x
COMMENT $4908 draw to y, x
COMMENT $490A draw to y, x
COMMENT $490C draw to y, x
COMMENT $490E draw to y, x
COMMENT $4910 draw to y, x
COMMENT $4912 speed + direction
COMMENT $4913 graphic definition
COMMENT $4915 length in SCALE_FACTOR_GAME
COMMENT $4916 anim delay value
COMMENT $4917 pointer to next anim object
COMMENT $4919 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $491A offsets x in 'SCALE_FACTOR_GAME'
COMMENT $491B halfspeed value
COMMENT $491C special flag
COMMENT $491F draw to y, x
COMMENT $4921 draw to y, x
COMMENT $4923 draw to y, x
COMMENT $4925 draw to y, x
COMMENT $4927 draw to y, x
COMMENT $4929 draw to y, x
COMMENT $492B draw to y, x
COMMENT $492D draw to y, x
COMMENT $492F draw to y, x
COMMENT $4931 draw to y, x
COMMENT $4933 draw to y, x
COMMENT $4935 draw to y, x
COMMENT $4937 draw to y, x
COMMENT $4939 draw to y, x
COMMENT $493B speed + direction
COMMENT $493C graphic definition
COMMENT $493E length in SCALE_FACTOR_GAME
COMMENT $493F anim delay value
COMMENT $4940 pointer to next anim object
COMMENT $4942 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4943 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4944 halfspeed value
COMMENT $4945 special flag
COMMENT $4948 draw to y, x
COMMENT $494A draw to y, x
COMMENT $494C draw to y, x
COMMENT $494E draw to y, x
COMMENT $4950 draw to y, x
COMMENT $4952 draw to y, x
COMMENT $4954 draw to y, x
COMMENT $4956 draw to y, x
COMMENT $4958 draw to y, x
COMMENT $495A draw to y, x
COMMENT $495C draw to y, x
COMMENT $495E draw to y, x
COMMENT $4960 speed + direction
COMMENT $4961 graphic definition
COMMENT $4963 length in SCALE_FACTOR_GAME
COMMENT $4964 anim delay value
COMMENT $4965 pointer to next anim object
COMMENT $4967 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4968 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4969 halfspeed value
COMMENT $496A special flag
COMMENT $496D draw to y, x
COMMENT $496F draw to y, x
COMMENT $4971 draw to y, x
COMMENT $4973 draw to y, x
COMMENT $4975 draw to y, x
COMMENT $4977 draw to y, x
COMMENT $4979 draw to y, x
COMMENT $497B draw to y, x
COMMENT $497D draw to y, x
COMMENT $497F draw to y, x
COMMENT $4981 draw to y, x
COMMENT $4983 draw to y, x
COMMENT $4985 draw to y, x
COMMENT $4987 draw to y, x
COMMENT $4989 speed + direction
COMMENT $498A graphic definition
COMMENT $498C length in SCALE_FACTOR_GAME
COMMENT $498D anim delay value
COMMENT $498E pointer to next anim object
COMMENT $4990 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4991 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4992 halfspeed value
COMMENT $4993 special flag
COMMENT $4994 speed + direction
COMMENT $4995 graphic definition
COMMENT $4997 length in SCALE_FACTOR_GAME
COMMENT $4998 anim delay value
COMMENT $4999 pointer to next anim object
COMMENT $499B offsets y in 'SCALE_FACTOR_GAME'
COMMENT $499C offsets x in 'SCALE_FACTOR_GAME'
COMMENT $499D halfspeed value
COMMENT $499E special flag
COMMENT $499F speed + direction
COMMENT $49A0 graphic definition
COMMENT $49A2 length in SCALE_FACTOR_GAME
COMMENT $49A3 anim delay value
COMMENT $49A4 pointer to next anim object
COMMENT $49A6 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $49A7 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $49A8 halfspeed value
COMMENT $49A9 special flag
COMMENT $49AA speed + direction
COMMENT $49AB graphic definition
COMMENT $49AD length in SCALE_FACTOR_GAME
COMMENT $49AE anim delay value
COMMENT $49AF pointer to next anim object
COMMENT $49B1 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $49B2 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $49B3 halfspeed value
COMMENT $49B4 special flag
COMMENT $49B5 speed + direction
COMMENT $49B6 graphic definition
COMMENT $49B8 length in SCALE_FACTOR_GAME
COMMENT $49B9 anim delay value
COMMENT $49BA pointer to next anim object
COMMENT $49BC offsets y in 'SCALE_FACTOR_GAME'
COMMENT $49BD offsets x in 'SCALE_FACTOR_GAME'
COMMENT $49BE halfspeed value
COMMENT $49BF special flag
COMMENT $49DC speed + direction
COMMENT $49DD graphic definition
COMMENT $49DF length in SCALE_FACTOR_GAME
COMMENT $49E0 anim delay value
COMMENT $49E1 pointer to next anim object
COMMENT $49E3 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $49E4 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $49E5 halfspeed value
COMMENT $49E6 special flag
COMMENT $4A09 speed + direction
COMMENT $4A0A graphic definition
COMMENT $4A0C length in SCALE_FACTOR_GAME
COMMENT $4A0D anim delay value
COMMENT $4A0E pointer to next anim object
COMMENT $4A10 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $4A11 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $4A12 halfspeed value
COMMENT $4A13 special flag
COMMENT $4A3A speed + direction
COMMENT $4A3B graphic definition
COMMENT $4A3D length in SCALE_FACTOR_GAME
COMMENT $4A3E anim delay value
COMMENT $4A3F pointer to next anim object
COMMENT $4A41 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $4A42 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $4A43 halfspeed value
COMMENT $4A44 special flag
COMMENT $4A6B speed + direction
COMMENT $4A6C graphic definition
COMMENT $4A6E length in SCALE_FACTOR_GAME
COMMENT $4A6F anim delay value
COMMENT $4A70 pointer to next anim object
COMMENT $4A72 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $4A73 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $4A74 halfspeed value
COMMENT $4A75 special flag
COMMENT $4A9C speed + direction
COMMENT $4A9D graphic definition
COMMENT $4A9F length in SCALE_FACTOR_GAME
COMMENT $4AA0 anim delay value
COMMENT $4AA1 pointer to next anim object
COMMENT $4AA3 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $4AA4 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $4AA5 halfspeed value
COMMENT $4AA6 special flag
COMMENT $4AA7 speed + direction
COMMENT $4AA8 graphic definition
COMMENT $4AAA length in SCALE_FACTOR_GAME
COMMENT $4AAB anim delay value
COMMENT $4AAC pointer to next anim object
COMMENT $4AAE offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $4AAF offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $4AB0 halfspeed value
COMMENT $4AB1 special flag
COMMENT_LINE $4AB2 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $4AB2 in 2016
COMMENT_LINE $4AB2 all stuff contained here is public domain
COMMENT_LINE $4AB2 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $4AB2 this file contains 'sprite' definition data for otter                     ;
COMMENT_LINE $4AB2 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $4AB4 draw to y, x
COMMENT $4AB6 draw to y, x
COMMENT $4AB8 draw to y, x
COMMENT $4ABA draw to y, x
COMMENT $4ABC draw to y, x
COMMENT $4ABE draw to y, x
COMMENT $4AC0 draw to y, x
COMMENT $4AC2 draw to y, x
COMMENT $4AC4 draw to y, x
COMMENT $4AC6 draw to y, x
COMMENT $4AC8 speed + direction
COMMENT $4AC9 graphic definition
COMMENT $4ACB length in SCALE_FACTOR_GAME
COMMENT $4ACC anim delay value
COMMENT $4ACD pointer to next anim object
COMMENT $4ACF offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $4AD0 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $4AD1 halfspeed value
COMMENT $4AD2 special flag
COMMENT $4AD5 draw to y, x
COMMENT $4AD7 draw to y, x
COMMENT $4AD9 draw to y, x
COMMENT $4ADB draw to y, x
COMMENT $4ADD draw to y, x
COMMENT $4ADF draw to y, x
COMMENT $4AE1 draw to y, x
COMMENT $4AE3 draw to y, x
COMMENT $4AE5 draw to y, x
COMMENT $4AE7 draw to y, x
COMMENT $4AE9 speed + direction
COMMENT $4AEA graphic definition
COMMENT $4AEC length in SCALE_FACTOR_GAME
COMMENT $4AED anim delay value
COMMENT $4AEE pointer to next anim object
COMMENT $4AF0 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $4AF1 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $4AF2 halfspeed value
COMMENT $4AF3 special flag
COMMENT_LINE $4AF4 ***************************************************************************
COMMENT_LINE $4AF4 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $4AF4 in 2016
COMMENT_LINE $4AF4 all stuff contained here is public domain
COMMENT_LINE $4AF4 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $4AF4 this file contains all level definitions (16 levels) and the object table ;
COMMENT_LINE $4AF4 of sprites which can be used for levels                                   ;
COMMENT_LINE $4AF4 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $4AF4 Note:
COMMENT_LINE $4AF4 The levels are optimized as they are. All levels can even under worst case
COMMENT_LINE $4AF4 conditions be played with 50Hz display.
COMMENT_LINE $4AF4 They all take less than 30000 cycles to draw.
COMMENT_LINE $4AF4 If you make other levels, please be sure that each level takes
COMMENT_LINE $4AF4 less than 30000 cycles to be drawn. It's easy to go above, since 30 sprites
COMMENT_LINE $4AF4 can be drawn at maximum (not counting otter, log snakes, girls and
COMMENT_LINE $4AF4 home sprites). Be carfull, display will 'WOBBLE'!
COMMENT_LINE $4AF4 actually these levels could probably be 'packed' than we would probably
COMMENT_LINE $4AF4 have space for 30-40-50??? levels...
COMMENT_LINE $4AF4 1
COMMENT_LINE $4AF4 well, it is not all THAT interesting to make levels...
COMMENT_LINE $4AF4 ****************************************************************************
COMMENT_LINE $4AF4 some objects are not used...
COMMENT_LINE $4AF4 if you make new objects... comment them here...
COMMENT_LINE $4AF4 for how to make objects look at any object include file
COMMENT $4AF4 moving left -1 '01'
COMMENT $4AF6 moving left -1 '02'
COMMENT $4AF8 moving right 1 '03'
COMMENT $4AFA moving left -1 '04'
COMMENT $4AFC moving right 1 '05'
COMMENT $4AFE moving left -1 '06'
COMMENT $4B00 moving right 1 '07'
COMMENT $4B02 moving right 1 '08'
COMMENT $4B04 moving right 2 '09'
COMMENT $4B06 moving left -1 '10'
COMMENT $4B08 moving left -2 '11'
COMMENT $4B0A moving left -1 '12'
COMMENT $4B0C moving right 2 '13'
COMMENT $4B0E moving left -2 '14'
COMMENT $4B10 moving left -1 '15' left of big
COMMENT $4B12 moving left -1 '16' right of big
COMMENT $4B14 moving left -1 '17'
COMMENT $4B16 moving left -1 '18'
COMMENT $4B18 moving left -1 '19'
COMMENT $4B1A moving left -1 '20'
COMMENT $4B1C moving left -1 '21'
COMMENT $4B1E moving left -1 '22'
COMMENT $4B20 moving right 1 '23'
COMMENT $4B22 moving left -1 '24'
COMMENT $4B24 moving left -1 '25'
COMMENT $4B26 moving left -2 '26'
COMMENT $4B28 moving right 1 '27'
COMMENT $4B2A moving left -1 '28'
COMMENT $4B2C moving right 2 '29'
COMMENT $4B2E moving left -2 '30'
COMMENT $4B30 moving right 2 '31'
COMMENT $4B32 log6a_object ; moving right 1 '32' right of big
COMMENT $4B34 moving left -1 '33'
COMMENT $4B36 moving right 1 '34'
COMMENT $4B38 moving right 2 '35'
COMMENT $4B3A moving right 2 '36'
COMMENT $4B3C moving left -2 '37'
COMMENT $4B3E moving left -2 '38' left of big
COMMENT $4B40 moving left -2 '39' right of big
COMMENT $4B42 log11a_object ; moving right 2 '40' left of big
COMMENT $4B44 moving right 3 '41' right of big
COMMENT $4B46 moving left -2 '42'
COMMENT $4B48 moving left -3 '43'
COMMENT $4B4A moving right 1 '44'
COMMENT $4B4C moving right 2 '45'
COMMENT $4B4E moving left -1 '46'
COMMENT $4B50 moving left -2 '47'
COMMENT_LINE $4B52 per level 11 bands (5 river + middle band + 5 street)
COMMENT_LINE $4B52 7 objects per band MAX
COMMENT_LINE $4B52 30 objects absolut MAX
COMMENT_LINE $4B52 not more than 6 dive objects (changing after dive timer)
COMMENT_LINE $4B52 objects not in adjacents positions
COMMENT_LINE $4B52 ...........................................................................
COMMENT $4B52 per band 12 pos, river
COMMENT $4B5E per band 12 pos, river
COMMENT $4B6A per band 12 pos, river
COMMENT $4B76 per band 12 pos, river
COMMENT $4B82 per band 12 pos, river
COMMENT $4B8E middle band
COMMENT $4B9A per band 12 pos, street
COMMENT $4BA6 per band 12 pos, street
COMMENT $4BB2 per band 12 pos, street
COMMENT $4BBE per band 12 pos, street
COMMENT $4BCA per band 12 pos, street
COMMENT $4BD6 fly timer, after how many ticks
COMMENT $4BD7 crocodile will appear and disappear
COMMENT $4BD8 mole timer $ 10
COMMENT $4BD9 snake on log after what rounds
COMMENT $4BDA female 1 every round
COMMENT $4BDB must be dividable by 2, 120 max!
COMMENT $4BDC turtle dive timer, $ff = not diving turtle
COMMENT_LINE $4BDD ...........................................................................
COMMENT $4BDD per band 12 pos, river
COMMENT $4BE9 per band 12 pos, river
COMMENT $4BF5 per band 12 pos, river
COMMENT $4C01 per band 12 pos, river
COMMENT $4C0D per band 12 pos, river
COMMENT $4C19 middle band
COMMENT $4C25 per band 12 pos, street
COMMENT $4C31 per band 12 pos, street
COMMENT $4C3D per band 12 pos, street
COMMENT $4C49 per band 12 pos, street
COMMENT $4C55 per band 12 pos, street
COMMENT $4C61 fly timer, after how many ticks
COMMENT $4C62 crocodile will appear and disappear
COMMENT $4C63 mole
COMMENT $4C64 snake on log
COMMENT $4C65 female
COMMENT $4C66 timer muss durch 2 teilbar sein
COMMENT_LINE $4C67 120 max!
COMMENT $4C67 turtle dive timer at least 6 $a is ok!!!
COMMENT_LINE $4C68 ...........................................................................
COMMENT $4C68 per band 12 pos, river
COMMENT $4C74 per band 12 pos, river
COMMENT $4C80 per band 12 pos, river
COMMENT $4C8C per band 12 pos, river
COMMENT $4C98 per band 12 pos, river
COMMENT $4CA4 middle band
COMMENT $4CB0 per band 12 pos, street
COMMENT $4CBC per band 12 pos, street
COMMENT $4CC8 per band 12 pos, street
COMMENT $4CD4 per band 12 pos, street
COMMENT $4CE0 per band 12 pos, street
COMMENT $4CEC fly timer, after how many ticks
COMMENT $4CED crocodile will appear and disappear
COMMENT $4CEE mole
COMMENT $4CEF snake on log
COMMENT $4CF0 female
COMMENT $4CF1 timer muss durch 2 teilbar sein, 120 max!
COMMENT $4CF2 turtle dive timer
COMMENT_LINE $4CF3 ...........................................................................
COMMENT $4CF3 per band 12 pos, river
COMMENT $4CFF per band 12 pos, river
COMMENT $4D0B per band 12 pos, river
COMMENT $4D17 per band 12 pos, river
COMMENT $4D23 per band 12 pos, river
COMMENT $4D2F middle band
COMMENT $4D3B per band 12 pos, street
COMMENT $4D47 per band 12 pos, street
COMMENT $4D53 per band 12 pos, street
COMMENT $4D5F per band 12 pos, street
COMMENT $4D6B per band 12 pos, street
COMMENT $4D77 fly timer, after how many ticks
COMMENT $4D78 crocodile will appear and disappear
COMMENT $4D79 mole
COMMENT $4D7A snake on log
COMMENT $4D7B female
COMMENT $4D7C timer muss durch 2 teilbar sein, 120 max!
COMMENT $4D7D turtle dive timer, $ff = not diving turtle
COMMENT_LINE $4D7E ...........................................................................
COMMENT $4D7E per band 12 pos, river
COMMENT $4D8A per band 12 pos, river
COMMENT $4D96 per band 12 pos, river
COMMENT $4DA2 per band 12 pos, river
COMMENT $4DAE per band 12 pos, river
COMMENT $4DBA middle band
COMMENT $4DC6 per band 12 pos, street
COMMENT $4DD2 per band 12 pos, street
COMMENT $4DDE per band 12 pos, street
COMMENT $4DEA per band 12 pos, street
COMMENT $4DF6 per band 12 pos, street
COMMENT $4E02 fly timer, after how many ticks
COMMENT $4E03 crocodile will appear and disappear
COMMENT $4E04 mole
COMMENT $4E05 snake on log
COMMENT $4E06 female
COMMENT $4E07 timer muss durch 2 teilbar sein, 120 max!
COMMENT $4E08 turtle dive timer
COMMENT_LINE $4E09 ...........................................................................
COMMENT $4E09 per band 12 pos, river
COMMENT $4E15 per band 12 pos, river
COMMENT $4E21 per band 12 pos, river
COMMENT $4E2D per band 12 pos, river
COMMENT $4E39 per band 12 pos, river
COMMENT $4E45 middle band
COMMENT $4E51 per band 12 pos, street
COMMENT $4E5D per band 12 pos, street
COMMENT $4E69 per band 12 pos, street
COMMENT $4E75 per band 12 pos, street
COMMENT $4E81 per band 12 pos, street
COMMENT $4E8D fly timer, after how many ticks
COMMENT $4E8E crocodile will appear and disappear
COMMENT $4E8F mole
COMMENT $4E90 snake on log
COMMENT $4E91 female
COMMENT $4E92 timer muss durch 2 teilbar sein, 120 max!
COMMENT $4E93 turtle dive timer, $ff = not diving turtle
COMMENT_LINE $4E94 ...........................................................................
COMMENT $4E94 per band 12 pos, river
COMMENT $4EA0 per band 12 pos, river
COMMENT $4EAC per band 12 pos, river
COMMENT $4EB8 per band 12 pos, river
COMMENT $4EC4 per band 12 pos, river
COMMENT $4ED0 middle band
COMMENT $4EDC per band 12 pos, street
COMMENT $4EE8 per band 12 pos, street
COMMENT $4EF4 per band 12 pos, street
COMMENT $4F00 per band 12 pos, street
COMMENT $4F0C per band 12 pos, street
COMMENT $4F18 fly timer, after how many ticks
COMMENT $4F19 crocodile will appear and disappear
COMMENT $4F1A mole
COMMENT $4F1B snake on log
COMMENT $4F1C female
COMMENT $4F1D 120                          ; timer muss durch 2 teilbar sein, 120 max!
COMMENT $4F1E turtle dive timer, $ff = not diving turtle
COMMENT_LINE $4F1F ...........................................................................
COMMENT $4F1F per band 12 pos, river
COMMENT $4F2B per band 12 pos, river
COMMENT $4F37 per band 12 pos, river
COMMENT $4F43 per band 12 pos, river
COMMENT $4F4F per band 12 pos, river
COMMENT $4F5B middle band
COMMENT $4F67 per band 12 pos, street
COMMENT $4F73 per band 12 pos, street
COMMENT $4F7F per band 12 pos, street
COMMENT $4F8B per band 12 pos, street
COMMENT $4F97 per band 12 pos, street
COMMENT $4FA3 fly timer, after how many ticks
COMMENT $4FA4 crocodile will appear and disappear
COMMENT $4FA5 mole
COMMENT $4FA6 snake on log
COMMENT $4FA7 female
COMMENT $4FA8 120                          ; timer muss durch 2 teilbar sein, 120 max!
COMMENT $4FA9 turtle dive timer
COMMENT_LINE $4FAA ...........................................................................
COMMENT $4FAA per band 12 pos, river
COMMENT $4FB6 per band 12 pos, river
COMMENT $4FC2 per band 12 pos, river
COMMENT $4FCE per band 12 pos, river
COMMENT $4FDA per band 12 pos, river
COMMENT $4FE6 middle band
COMMENT $4FF2 per band 12 pos, street
COMMENT $4FFE per band 12 pos, street
COMMENT $500A per band 12 pos, street
COMMENT $5016 per band 12 pos, street
COMMENT $5022 per band 12 pos, street
COMMENT $502E fly timer, after how many ticks
COMMENT $502F crocodile will appear and disappear
COMMENT $5030 mole
COMMENT $5031 snake on log
COMMENT $5032 female
COMMENT $5033 timer muss durch 2 teilbar sein, 120 max!
COMMENT $5034 turtle dive timer
COMMENT_LINE $5035 ...........................................................................
COMMENT $5035 per band 12 pos, river
COMMENT $5041 per band 12 pos, river
COMMENT $504D per band 12 pos, river
COMMENT $5059 per band 12 pos, river
COMMENT $5065 per band 12 pos, river
COMMENT $5071 middle band
COMMENT $507D per band 12 pos, street
COMMENT $5089 per band 12 pos, street
COMMENT $5095 per band 12 pos, street
COMMENT $50A1 per band 12 pos, street
COMMENT $50AD per band 12 pos, street
COMMENT $50B9 fly timer, after how many ticks
COMMENT $50BA crocodile will appear and disappear
COMMENT $50BB mole
COMMENT $50BC snake on log
COMMENT $50BD female
COMMENT $50BE 120                          ; timer muss durch 2 teilbar sein, 120 max!
COMMENT $50BF turtle dive timer, $ff = not diving turtle
COMMENT_LINE $50C0 ...........................................................................
COMMENT $50C0 per band 12 pos, river
COMMENT $50CC per band 12 pos, river
COMMENT $50D8 per band 12 pos, river
COMMENT $50E4 per band 12 pos, river
COMMENT $50F0 per band 12 pos, river
COMMENT $50FC middle band
COMMENT $5108 per band 12 pos, street
COMMENT $5114 per band 12 pos, street
COMMENT $5120 per band 12 pos, street
COMMENT $512C per band 12 pos, street
COMMENT $5138 per band 12 pos, street
COMMENT $5144 fly timer, after how many ticks
COMMENT $5145 crocodile will appear and disappear
COMMENT $5146 mole
COMMENT $5147 snake on log
COMMENT $5148 female
COMMENT $5149 120                          ; timer muss durch 2 teilbar sein, 120 max!
COMMENT $514A turtle dive timer, $ff = not diving turtle
COMMENT_LINE $514B ...........................................................................
COMMENT $514B per band 12 pos, river
COMMENT $5157 per band 12 pos, river
COMMENT $5163 per band 12 pos, river
COMMENT $516F per band 12 pos, river
COMMENT $517B per band 12 pos, river
COMMENT $5187 middle band
COMMENT $5193 per band 12 pos, street
COMMENT $519F per band 12 pos, street
COMMENT $51AB per band 12 pos, street
COMMENT $51B7 per band 12 pos, street
COMMENT $51C3 per band 12 pos, street
COMMENT $51CF fly timer, after how many ticks
COMMENT $51D0 crocodile will appear and disappear
COMMENT $51D1 mole
COMMENT $51D2 snake on log
COMMENT $51D3 female
COMMENT $51D4 100                          ; timer muss durch 2 teilbar sein, 120 max!
COMMENT $51D5 turtle dive timer, $ff = not diving turtle
COMMENT_LINE $51D6 ...........................................................................
COMMENT $51D6 per band 12 pos, river
COMMENT $51E2 per band 12 pos, river
COMMENT $51EE per band 12 pos, river
COMMENT $51FA per band 12 pos, river
COMMENT $5206 per band 12 pos, river
COMMENT $5212 middle band
COMMENT $521E per band 12 pos, street
COMMENT $522A per band 12 pos, street
COMMENT $5236 per band 12 pos, street
COMMENT $5242 per band 12 pos, street
COMMENT $524E per band 12 pos, street
COMMENT $525A fly timer, after how many ticks
COMMENT $525B crocodile will appear and disappear
COMMENT $525C mole
COMMENT $525D snake on log
COMMENT $525E female
COMMENT $525F 100                          ; timer muss durch 2 teilbar sein, 120 max!
COMMENT $5260 turtle dive timer
COMMENT_LINE $5261 ...........................................................................
COMMENT $5261 per band 12 pos, river
COMMENT $526D per band 12 pos, river
COMMENT $5279 per band 12 pos, river
COMMENT $5285 per band 12 pos, river
COMMENT $5291 per band 12 pos, river
COMMENT $529D middle band
COMMENT $52A9 per band 12 pos, street
COMMENT $52B5 per band 12 pos, street
COMMENT $52C1 per band 12 pos, street
COMMENT $52CD per band 12 pos, street
COMMENT $52D9 per band 12 pos, street
COMMENT $52E5 fly timer, after how many ticks
COMMENT $52E6 crocodile will appear and disappear
COMMENT $52E7 mole
COMMENT $52E8 snake on log
COMMENT $52E9 female
COMMENT $52EA 100                          ; timer muss durch 2 teilbar sein, 120 max!
COMMENT $52EB turtle dive timer
COMMENT_LINE $52EC ...........................................................................
COMMENT $52EC per band 12 pos, river
COMMENT $52F8 per band 12 pos, river
COMMENT $5304 per band 12 pos, river
COMMENT $5310 per band 12 pos, river
COMMENT $531C per band 12 pos, river
COMMENT $5328 middle band
COMMENT $5334 per band 12 pos, street
COMMENT $5340 per band 12 pos, street
COMMENT $534C per band 12 pos, street
COMMENT $5358 per band 12 pos, street
COMMENT $5364 per band 12 pos, street
COMMENT $5370 fly timer, after how many ticks
COMMENT $5371 crocodile will appear and disappear
COMMENT $5372 mole
COMMENT $5373 snake on log
COMMENT $5374 female
COMMENT $5375 120                          ; timer muss durch 2 teilbar sein, 120 max!
COMMENT $5376 turtle dive timer
COMMENT_LINE $5377 ...........................................................................
COMMENT $5377 per band 12 pos, river
COMMENT $5383 per band 12 pos, river
COMMENT $538F per band 12 pos, river
COMMENT $539B per band 12 pos, river
COMMENT $53A7 per band 12 pos, river
COMMENT $53B3 middle band
COMMENT $53BF per band 12 pos, street
COMMENT $53CB per band 12 pos, street
COMMENT $53D7 per band 12 pos, street
COMMENT $53E3 per band 12 pos, street
COMMENT $53EF per band 12 pos, street
COMMENT $53FB fly timer, after how many ticks
COMMENT $53FC crocodile will appear and disappear
COMMENT $53FD mole
COMMENT $53FE snake on log
COMMENT $53FF female
COMMENT $5400 120                          ; timer muss durch 2 teilbar sein, 120 max!
COMMENT $5401 turtle dive timer
COMMENT_LINE $5402 ...........................................................................
COMMENT_LINE $5402 DB       00,00,00,00,00,00,00,00,00,00,00,00 ; per band 12 pos, river
COMMENT_LINE $5402 DB       00,00,00,00,00,00,00,00,00,00,00,00 ; per band 12 pos, river
COMMENT_LINE $5402 DB       00,00,00,00,00,00,00,00,00,00,00,00 ; per band 12 pos, river
COMMENT_LINE $5402 DB       00,00,00,00,00,00,00,00,00,00,00,00 ; per band 12 pos, river
COMMENT $5402 per band 12 pos, river
COMMENT_LINE $540E DB       00,00,00,00,00,00,00,00,00,00,00,00 ; middle band
COMMENT_LINE $540E DB       00,00,00,00,00,00,00,00,00,00,00,00 ; per band 12 pos, street
COMMENT_LINE $540E DB       00,00,00,00,00,00,00,00,00,00,00,00 ; per band 12 pos, street
COMMENT_LINE $540E DB       00,00,00,00,00,00,00,00,00,00,00,00 ; per band 12 pos, street
COMMENT_LINE $540E DB       00,00,00,00,00,00,00,00,00,00,00,00 ; per band 12 pos, street
COMMENT_LINE $540E DB       00,00,00,00,00,00,00,00,00,00,00,00 ; per band 12 pos, street
COMMENT_LINE $540E DB       0                            ; fly
COMMENT_LINE $540E DB       0                            ; crocodile
COMMENT_LINE $540E DB       0                            ; mole
COMMENT_LINE $540E DB       0                            ; snake on log
COMMENT_LINE $540E DB       0                            ; female
COMMENT_LINE $540E DB       0                            ; timer
COMMENT_LINE $540E DB       $ff                          ; turtle dive timer
COMMENT_LINE $540E ...........................................................................
COMMENT_LINE $540E ***************************************************************************
COMMENT_LINE $540E this file is part of Karl Quappe, written by Malban
COMMENT_LINE $540E in 2016
COMMENT_LINE $540E all stuff contained here is public domain
COMMENT_LINE $540E 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 SPACE M
COMMENT_LINE $546D C !"#$%&´()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_
COMMENT_LINE $565E zero delay is needed for zeroing to work correctly
COMMENT_LINE $565E depends on the distance of the current integrator position to actual zero point
COMMENT_LINE $565E experiment with my vectri:
COMMENT_LINE $565E ZERO ing the integrators takes time. Measures at my vectrex show e.g.:
COMMENT_LINE $565E If you move the beam with a to x = -127 and y = -127 at diffferent scale values, the time to reach zero:
COMMENT_LINE $565E - scale $ff -> zero 110 cycles
COMMENT_LINE $565E - scale $7f -> zero 75 cycles
COMMENT_LINE $565E - scale $40 -> zero 57 cycles
COMMENT_LINE $565E - scale $20 -> zero 53 cycles
COMMENT_LINE $565E put move position on stack put it so, that we can load "d" directly from stack
COMMENT $5660 Save string pointer
FORCE_SYMBOL $5660 Vec_Str_Ptr
COMMENT_LINE $5663 clra
COMMENT_LINE $5663 sta      <VIA_port_a                  ; reset integrator offset
COMMENT_LINE $5663 sta      <VIA_port_b                  ; while waiting, zero offsets
COMMENT_LINE $5663 inca
COMMENT_LINE $5663 sta      <VIA_port_b                  ; while waiting, zero offsets
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $5663 Point to start of chargen bitmaps
FORCE_SYMBOL $5663 FONT_START_A
COMMENT_LINE $5666 zero
COMMENT $5666 zero the integrators
COMMENT $5669 store zeroing values to cntl
FORCE_SYMBOL $5669 VIA_cntl
COMMENT $566B and wait for zeroing to be actually done
FORCE_SYMBOL $566B ZERO_DELAY_P
COMMENT_LINE $566D reset integrators
COMMENT_LINE $566D ;;;        clr      <VIA_port_a                  ; reset integrator offset
COMMENT_LINE $566D lda      #%10000010
COMMENT_LINE $566D wait that zeroing surely has the desired effect!
FORCE_SYMBOL $566D VIA_port_a
FORCE_SYMBOL $566F VIA_port_b
FORCE_SYMBOL $5671 VIA_port_b
COMMENT_LINE $5673 ;;;        sta      <VIA_port_b                  ; while waiting, zero offsets
COMMENT_LINE $5676 ;;;         inc      <VIA_port_b
FORCE_NO_SYMBOL $5676
COMMENT_LINE $5678 ;;;;;;
COMMENT_LINE $5678 optimzed, tweaked not perfect... 'MOVE TO D' makro
COMMENT_LINE $5678 Reset0Ref
COMMENT_LINE $5678 NOT DONE:
COMMENT_LINE $5678 what should be done:
COMMENT_LINE $5678 s = $ff / max(abs(a),abs(b))
COMMENT_LINE $5678 a = a * s
COMMENT_LINE $5678 b = b * s
COMMENT_LINE $5678 scaling = scaling / s
COMMENT_LINE $5678 that would give the most efficient positioning
COMMENT_LINE $5678 bother it takes more time to calculate the above,
COMMENT_LINE $5678 than it saves
COMMENT_LINE $5678 with every positioning via this routine now,
COMMENT_LINE $5678 it takes SCALE_FACTOR_GAME + const (of another 100+) cycles
COMMENT_LINE $5678 to do one simple positioning!!!
COMMENT_LINE $5678 that is probably about 300 cycles per positioning
COMMENT_LINE $5678 this is done about 30-40 times per round
COMMENT_LINE $5678 alone the positioning takes thus about over 10000 cycles
COMMENT_LINE $5678 and we haven't drawn a single line yet!!!
COMMENT $5678 Store Y in D/A register
FORCE_SYMBOL $5678 VIA_port_a
COMMENT $567A Blank low, zero high?
FORCE_NO_SYMBOL $567A
FORCE_SYMBOL $567C VIA_cntl
COMMENT $567F Enable mux
FORCE_SYMBOL $567F VIA_port_b
COMMENT $5681 Clear shift regigster
FORCE_SYMBOL $5681 VIA_shift_reg
COMMENT $5683 Disable mux
FORCE_SYMBOL $5683 VIA_port_b
COMMENT $5685 Store X in D/A register
FORCE_SYMBOL $5685 VIA_port_a
COMMENT $5687 enable timer
FORCE_SYMBOL $5687 VIA_t1_cnt_hi
FORCE_NO_SYMBOL $5689
FORCE_SYMBOL $568B VIA_int_flags
COMMENT_LINE $568F ;;;;;;
COMMENT $568F a→AUX: b→ORB: $8x = Disable RAMP, Disable Mux, mux sel = 01 (int offsets)
FORCE_NO_SYMBOL $568F
COMMENT $5692 Clear D/A output
FORCE_SYMBOL $5692 VIA_port_a
COMMENT $5694 Shift reg mode = 110 (shift out under system clock), T1 PB7 disabled, one shot mode
FORCE_SYMBOL $5694 VIA_aux_cntl
COMMENT_LINE $5696 first entry here, ramp is disabled
COMMENT_LINE $5696 if there was a jump from below
COMMENT_LINE $5696 ramp will be enabled by next line
COMMENT $5696 ramp off/on set mux to channel 1
FORCE_SYMBOL $5696 VIA_port_b
COMMENT $5698 Enable mux
FORCE_SYMBOL $5698 VIA_port_b
COMMENT $569A both to ORB, both disable ram, mux sel = 0 (y int), a:→enable mux: b:→disable mux
FORCE_NO_SYMBOL $569A
COMMENT_LINE $569D NOP                                   ;Wait a moment
COMMENT $569D Disable mux
FORCE_SYMBOL $569D VIA_port_b
COMMENT $569F Disable RAMP, set mux to channel 0, disable mux
FORCE_SYMBOL $569F VIA_port_b
COMMENT $56A1 Enable mux
FORCE_SYMBOL $56A1 VIA_port_b
COMMENT_LINE $56A3 TST      $C800                        ;I think this is a delay only
COMMENT $56A3 disable mux
FORCE_SYMBOL $56A3 VIA_port_b
COMMENT $56A5 Get text width
FORCE_SYMBOL $56A5 Vec_Text_Width
COMMENT $56A8 Send it to the D/A
FORCE_SYMBOL $56A8 VIA_port_a
COMMENT $56AA both to ORB, both ENABLE RAMP, a:→ disable mux, b:→ enable mux
FORCE_NO_SYMBOL $56AA
COMMENT $56AD Point to start of text string
FORCE_SYMBOL $56AD Vec_Str_Ptr
COMMENT $56B0 [4]enable RAMP, disable mux
FORCE_SYMBOL $56B0 VIA_port_b
COMMENT $56B2 [3]
COMMENT_LINE $56B4 one letter is drawn (one row that is) in 18 cycles
COMMENT_LINE $56B4 13 cycles overhead
COMMENT_LINE $56B4 ramp is thus active for #ofLetters*18 + 13 cycles
COMMENT $56B4 [+5]Get bitmap from chargen table
COMMENT $56B6 [+4]rasterout of char bitmap "row" thru shift out in shift register
FORCE_SYMBOL $56B6 VIA_shift_reg
COMMENT $56B8 [+6]Get next character
COMMENT $56BA [+3]Go back if not terminator
COMMENT $56BC [2]disable mux, disable ramp
FORCE_NO_SYMBOL $56BC
COMMENT $56BE [4]disable RAMP, disable mux
FORCE_SYMBOL $56BE VIA_port_b
COMMENT $56C0 [4]Check for last row
FORCE_SYMBOL $56C0 FONT_END
COMMENT $56C3 [3]Branch if last row
COMMENT $56C5 [3]Point to next chargen row
FORCE_SYMBOL $56C5 FONT_LENGTH
FORCE_NO_SYMBOL $56C8
COMMENT $56CA T1→PB7 enabled
FORCE_SYMBOL $56CA VIA_aux_cntl
FORCE_SYMBOL $56CC Vec_Text_Height
FORCE_NO_SYMBOL $56CF
FORCE_NO_SYMBOL $56D1
COMMENT_LINE $56D3 dec      0,s
COMMENT $56D3 Go back for next scan line
FORCE_NO_SYMBOL $56D5
COMMENT_LINE $56D8 clra
FORCE_SYMBOL $56D8 VIA_shift_reg
COMMENT_LINE $56DA LDA      #$98
COMMENT $56DA T1→PB7 enabled
FORCE_SYMBOL $56DA VIA_aux_cntl
COMMENT $56DC all done, correct stack
COMMENT_LINE $56DE rts
COMMENT_LINE $56DE this file is part of Karl Quappe, written by Malban
COMMENT_LINE $56DE in 2016
COMMENT_LINE $56DE all stuff contained here is public domain
COMMENT_LINE $56DE ;***************************************************************************
COMMENT_LINE $56DE this routine draws the initial screen
COMMENT_LINE $56DE with information about the game
COMMENT_LINE $56DE nothing is expected and nothing is returned
COMMENT_LINE $56DE leaves dp pointing d0 expected
COMMENT_LINE $5747 first x $80 terminated string
COMMENT_LINE $5747 second u $80 terminated string
COMMENT_LINE $5747 result in stringBufferTemp
COMMENT_LINE $5747 leaves with u = #stringBufferTemp
FORCE_SYMBOL $5747 stringBufferTemp
FORCE_SYMBOL $5759 stringBufferTemp
FORCE_SYMBOL $575D hs_reset_tmp
FORCE_SYMBOL $5760 isAttractMode
FORCE_SYMBOL $5763 shutup
COMMENT_LINE $5766 MY_QUIT
COMMENT_LINE $5766 DO_MY_SOUND
COMMENT_LINE $5766 JSR      DP_to_D0
COMMENT_LINE $5766 JSR      Do_Sound                     ; ROM function that does the sound playing
COMMENT_LINE $5766 direct   $D0
FORCE_SYMBOL $5766 BACK_OPTION
FORCE_SYMBOL $5768 currentSelectedOption
COMMENT $576B get button status once, since only
FORCE_SYMBOL $576B Read_Btns
COMMENT_LINE $576E differences are noticed
FORCE_SYMBOL $576E do_csa_startup
COMMENT $5771 just for assembler optimization...
FORCE_SYMBOL $5771 query_joystick
COMMENT $5774 load joystick 1 position X to A
FORCE_SYMBOL $5774 Vec_Joy_1_X
COMMENT $5777 only jump if last joy pos was zero
FORCE_SYMBOL $5777 last_joy_x
COMMENT $577A store this joystick position
FORCE_SYMBOL $577A last_joy_x
COMMENT $577F test the old joystick position
COMMENT $5780 was center
FORCE_SYMBOL $5784 currentSelectedOption
FORCE_SYMBOL $5787 LEVEL_OPTION
FORCE_SYMBOL $578D RESET_OPTION
COMMENT $5793 load joystick 1 position X to A
FORCE_SYMBOL $5793 Vec_Joy_1_Y
COMMENT $5796 only jump if last joy pos was zero
FORCE_SYMBOL $5796 last_joy_y
COMMENT $5799 store this joystick position
FORCE_SYMBOL $5799 last_joy_y
COMMENT $579C no joystick input available
COMMENT $579E joystick moved to down
COMMENT $57A0 test the old joystick position
COMMENT $57A1 was center
FORCE_SYMBOL $57A3 currentSelectedOption
COMMENT $57A6 following code only allows selection of level, when prerequisits are right
FORCE_SYMBOL $57A6 PLAYER_OPTION
FORCE_SYMBOL $57AA currentSelectedOption
FORCE_SYMBOL $57AD RESET_OPTION
FORCE_SYMBOL $57B1 levelEditAllowed
FORCE_SYMBOL $57B6 gameModeOption
FORCE_NO_SYMBOL $57B9
FORCE_SYMBOL $57BF currentSelectedOption
COMMENT $57C2 can't select training in 2 player
FORCE_SYMBOL $57C2 playerCountOption
FORCE_SYMBOL $57C7 currentSelectedOption
FORCE_SYMBOL $57CA MODE_OPTION
FORCE_SYMBOL $57CE currentSelectedOption
COMMENT $57D3 test the old joystick position
COMMENT $57D4 was center
COMMENT $57D6 following code only allows selection of level, when prerequisits are right
FORCE_SYMBOL $57D6 currentSelectedOption
FORCE_SYMBOL $57D9 BACK_OPTION
FORCE_SYMBOL $57DD currentSelectedOption
FORCE_SYMBOL $57E0 MUSIC_OPTION
FORCE_SYMBOL $57E4 levelEditAllowed
FORCE_SYMBOL $57E9 gameModeOption
FORCE_NO_SYMBOL $57EC
FORCE_SYMBOL $57F2 currentSelectedOption
FORCE_SYMBOL $57F5 playerCountOption
FORCE_SYMBOL $57FA currentSelectedOption
FORCE_SYMBOL $57FD MODE_OPTION
FORCE_SYMBOL $5801 currentSelectedOption
FORCE_NO_SYMBOL $5804
COMMENT $5806 move to time 1 lo, this means scaling
FORCE_SYMBOL $5806 VIA_t1_cnt_lo
COMMENT $5808 set it
FORCE_SYMBOL $5808 Intensity_a
FORCE_NO_SYMBOL $580B
FORCE_SYMBOL $580E Vec_Text_Height
FORCE_NO_SYMBOL $5811
FORCE_SYMBOL $5814 options_string
FORCE_SYMBOL $5817 sync_Print_Str_d_fixed
FORCE_NO_SYMBOL $581A
COMMENT $581C move to time 1 lo, this means scaling
FORCE_SYMBOL $581C VIA_t1_cnt_lo
FORCE_SYMBOL $581E currentSelectedOption
FORCE_SYMBOL $5821 PLAYER_OPTION
FORCE_SYMBOL $5823 checkIntensity
FORCE_SYMBOL $5826 no_players_string_0
FORCE_SYMBOL $5829 playerCountOption
FORCE_SYMBOL $582E no_players_string_1
FORCE_SYMBOL $5833 no_players_string_2
FORCE_SYMBOL $5836 concatStrings
FORCE_NO_SYMBOL $5839
FORCE_SYMBOL $583C sync_Print_Str_d_fixed
COMMENT_LINE $583F ;;;;;;;
FORCE_SYMBOL $583F playerCountOption
FORCE_NO_SYMBOL $5844
FORCE_SYMBOL $5846 Intensity_a
FORCE_SYMBOL $584B currentSelectedOption
FORCE_SYMBOL $584E MODE_OPTION
FORCE_SYMBOL $5850 checkIntensity
FORCE_SYMBOL $5853 mode_string_0
FORCE_SYMBOL $5856 gameModeOption
FORCE_SYMBOL $585B mode_string_1
FORCE_NO_SYMBOL $5860
FORCE_SYMBOL $5864 mode_string_2
FORCE_SYMBOL $5869 mode_string_3
FORCE_SYMBOL $586C concatStrings
FORCE_NO_SYMBOL $586F
FORCE_SYMBOL $5872 sync_Print_Str_d_fixed
COMMENT_LINE $5875 ;;;;;;;
FORCE_SYMBOL $5875 currentSelectedOption
FORCE_SYMBOL $5878 MUSIC_OPTION
FORCE_SYMBOL $587A checkIntensity
FORCE_SYMBOL $587D music_string_0
FORCE_SYMBOL $5880 musicOption
FORCE_SYMBOL $5885 music_string_1
FORCE_SYMBOL $588A music_string_2
FORCE_SYMBOL $588D concatStrings
FORCE_NO_SYMBOL $5890
FORCE_SYMBOL $5893 sync_Print_Str_d_fixed
COMMENT_LINE $5896 ;;;;;;;
FORCE_SYMBOL $5896 levelEditAllowed
FORCE_SYMBOL $589B gameModeOption
FORCE_NO_SYMBOL $589E
FORCE_NO_SYMBOL $58A2
FORCE_SYMBOL $58A4 Intensity_a
FORCE_SYMBOL $58A9 currentSelectedOption
FORCE_SYMBOL $58AC LEVEL_OPTION
FORCE_SYMBOL $58AE checkIntensity
FORCE_NO_SYMBOL $58B1
FORCE_SYMBOL $58B4 levelString
FORCE_SYMBOL $58B7 sync_Print_Str_d_fixed
COMMENT_LINE $58BA ;;;;;;;
FORCE_SYMBOL $58BA currentSelectedOption
FORCE_SYMBOL $58BD RESET_OPTION
FORCE_SYMBOL $58BF checkIntensity
FORCE_SYMBOL $58C2 resetHS_0
FORCE_SYMBOL $58C5 hs_reset_tmp
FORCE_SYMBOL $58CA resetHS_1
FORCE_SYMBOL $58CF resetHS_2
FORCE_SYMBOL $58D2 concatStrings
FORCE_NO_SYMBOL $58D5
FORCE_SYMBOL $58D8 sync_Print_Str_d_fixed
COMMENT_LINE $58DB ;;;;;;;
FORCE_SYMBOL $58DB currentSelectedOption
FORCE_SYMBOL $58DE BACK_OPTION
FORCE_SYMBOL $58E0 checkIntensity
FORCE_NO_SYMBOL $58E3
FORCE_SYMBOL $58E6 backMainMenu
FORCE_SYMBOL $58E9 sync_Print_Str_d_fixed
FORCE_SYMBOL $58ED VIA_shift_reg
COMMENT $58EF get button status
FORCE_SYMBOL $58EF Read_Btns
COMMENT $58F2 is a button pressed?
FORCE_NO_SYMBOL $58F2
COMMENT $58F4 no, than stay in init_screen_loop
FORCE_SYMBOL $58F8 currentSelectedOption
FORCE_SYMBOL $58FB BACK_OPTION
FORCE_SYMBOL $58FF PLAYER_OPTION
FORCE_SYMBOL $5903 playerCountOption
FORCE_NO_SYMBOL $5907
FORCE_SYMBOL $5909 playerCountOption
COMMENT $590E training only in 1 player mode
FORCE_SYMBOL $590E gameModeOption
FORCE_SYMBOL $5911 joystickHandleDone
FORCE_SYMBOL $5914 MODE_OPTION
FORCE_SYMBOL $5918 gameModeOption
FORCE_NO_SYMBOL $591C
FORCE_SYMBOL $5921 gameModeOption
FORCE_SYMBOL $5924 joystickHandleDone
FORCE_SYMBOL $5927 MUSIC_OPTION
FORCE_SYMBOL $592B musicOption
FORCE_NO_SYMBOL $592F
FORCE_SYMBOL $5931 musicOption
FORCE_SYMBOL $5934 joystickHandleDone
FORCE_SYMBOL $5937 RESET_OPTION
FORCE_SYMBOL $593B hs_reset_tmp
FORCE_SYMBOL $593E resetEprom
FORCE_SYMBOL $5947 joystickHandleDone
COMMENT $594A check if there is any v4e at all?
FORCE_SYMBOL $594A v4ecartflags
COMMENT $594D if not (positive) jump
FORCE_NO_SYMBOL $594F
FORCE_NO_SYMBOL $5958
FORCE_NO_SYMBOL $595F
COMMENT $5967 one based
FORCE_SYMBOL $5967 levelFromOptions
FORCE_SYMBOL $596D current_eprom_blocksize
FORCE_SYMBOL $5970 optionsBlock
FORCE_SYMBOL $5973 eeprom_save_options
FORCE_SYMBOL $5976 isAttractMode
COMMENT_LINE $597A ;***************************************************************************
FORCE_SYMBOL $597C DEFAULT_INTENSITY
FORCE_SYMBOL $597E Intensity_a
COMMENT_LINE $5981 _INTENSITY_A
COMMENT_LINE $5981 rts
COMMENT_LINE $5981 according to button
COMMENT_LINE $5981 level string one up/ down
COMMENT $5981 " 1"
FORCE_SYMBOL $5984 last_joy_x
COMMENT_LINE $5989 increaseLevel
COMMENT $598D cant increase
FORCE_SYMBOL $599E joystickHandleDone
COMMENT $59A5 cant decrease
FORCE_NO_SYMBOL $59BA
FORCE_SYMBOL $59BC intensityValues
COMMENT_LINE $59C3 ;***************************************************************************
COMMENT_LINE $59D3 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $59D3 in 2016
COMMENT_LINE $59D3 all stuff contained here is public domain
COMMENT_LINE $59D3 ***************************************************************************
COMMENT_LINE $59D3 this routine calculates the new positions
COMMENT_LINE $59D3 nothing is returned
COMMENT_LINE $59D3 leaves with dp pointing to c8
FORCE_NO_SYMBOL $59D3
COMMENT $59D7 is an "old" jump still ongoing?
FORCE_SYMBOL $59D7 froggerInJump
FORCE_SYMBOL $59DC froggerInJump
FORCE_SYMBOL $59DF current_frog_heading
COMMENT $59E1 than the last left?
FORCE_SYMBOL $59E1 HEADING_LEFT
COMMENT $59E7 than the last right
FORCE_SYMBOL $59E7 HEADING_RIGHT
COMMENT $59EB than the last up
FORCE_SYMBOL $59EB HEADING_UP
COMMENT $59F1 than the last down?
FORCE_SYMBOL $59F1 HEADING_DOWN
COMMENT_LINE $59F7 if we come here some error occured, ignoring it and querying new move...
COMMENT $59F7 only jump if last joy pos was zero (needed for testing later)
FORCE_SYMBOL $59F7 last_joy_x
COMMENT $59F9 load joystick 1 position X to A
FORCE_SYMBOL $59F9 Vec_Joy_1_X
COMMENT $59FB store this joystick position
FORCE_SYMBOL $59FB last_joy_x
COMMENT $59FD no x joystick input available
COMMENT $5A01 joystick moved to left
COMMENT $5A03 test the old joystick position
COMMENT $5A04 was center
COMMENT_LINE $5A08 he y dissi "print JOYSTICK_READ timeHi= $RecalCounterHi timeLow= $RecalCounterLow , X= $Vec_Joy_1_X"
COMMENT $5A08 load old pos to B
FORCE_SYMBOL $5A08 frog_x_band
COMMENT $5A0A is it at maximum right position?
FORCE_NO_SYMBOL $5A0A
COMMENT $5A0C if so, do nothing
FORCE_SYMBOL $5A10 Karl_Jump_Sound
FORCE_SYMBOL $5A13 play_sfx_x
COMMENT_LINE $5A16 PLAY_SFX Karl_Live_Got_Sound
COMMENT $5A16 animation counter of one jump, so many jump steps are taken, befor
FORCE_NO_SYMBOL $5A16
COMMENT $5A18 befor another move can be made
FORCE_SYMBOL $5A18 froggerInJump
COMMENT_LINE $5A1B do from here
COMMENT_LINE $5A1B remember x offset in frog.i
COMMENT_LINE $5A1B must also work for girl
COMMENT $5A1B for internal checking
FORCE_SYMBOL $5A1B frog_x_band
FORCE_SYMBOL $5A1D HEADING_RIGHT
COMMENT $5A1F new heading == old heading?
FORCE_SYMBOL $5A1F current_frog_heading
COMMENT $5A21 if yes -> we are done
COMMENT $5A23 store it
FORCE_SYMBOL $5A23 current_frog_heading
FORCE_SYMBOL $5A25 frog_pos
COMMENT $5A27 korrekt the old offset y
FORCE_SYMBOL $5A27 current_frog_offset
COMMENT $5A29 korrekt the old offset x
COMMENT $5A2B korrekt the new offset y
FORCE_SYMBOL $5A2B frogger_right_offset
COMMENT $5A2E korrekt the new offset x
COMMENT $5A31 store it back
FORCE_SYMBOL $5A31 frog_pos
COMMENT $5A33 load the current offset
FORCE_SYMBOL $5A33 frogger_right_offset
COMMENT $5A36 and remember it
FORCE_SYMBOL $5A36 current_frog_offset
COMMENT $5A38 use the vector list for
FORCE_SYMBOL $5A38 froggerRightAnim
FORCE_SYMBOL $5A3B froggerAnimPointer
FORCE_SYMBOL $5A3E froggerInJump
COMMENT $5A44 right pointing frog
FORCE_SYMBOL $5A44 frog_pic
COMMENT $5A46 load old pos to B
FORCE_SYMBOL $5A46 frog_x
COMMENT $5A48 decrease position with speed faktor
COMMENT $5A4A and store new position
FORCE_SYMBOL $5A4A frog_x
FORCE_SYMBOL $5A4C positioning_done
COMMENT $5A4F test the old joystick position
COMMENT $5A50 was center
COMMENT_LINE $5A54 he y dissi "print JOYSTICK_READ timeHi= $RecalCounterHi timeLow= $RecalCounterLow , X= $Vec_Joy_1_X"
COMMENT $5A54 load old pos to B
FORCE_SYMBOL $5A54 frog_x_band
COMMENT $5A56 if so, do nothing
FORCE_SYMBOL $5A5A Karl_Jump_Sound
FORCE_SYMBOL $5A5D play_sfx_x
COMMENT_LINE $5A60 init new jump anim sequence
COMMENT $5A60 animation counter of one jump, so many jump steps are taken, befor
FORCE_NO_SYMBOL $5A60
COMMENT $5A62 befor another move can be made
FORCE_SYMBOL $5A62 froggerInJump
COMMENT $5A65 for internal checking
FORCE_SYMBOL $5A65 frog_x_band
COMMENT $5A67 than the last?
FORCE_SYMBOL $5A67 HEADING_LEFT
FORCE_SYMBOL $5A69 current_frog_heading
COMMENT $5A6B if yes -> we are done
COMMENT $5A6D and store it
FORCE_SYMBOL $5A6D current_frog_heading
FORCE_SYMBOL $5A6F frog_pos
COMMENT $5A71 korrekt the old offset y
FORCE_SYMBOL $5A71 current_frog_offset
COMMENT $5A73 korrekt the old offset x
COMMENT $5A75 korrekt the new offset y
FORCE_SYMBOL $5A75 frogger_left_offset
COMMENT $5A78 korrekt the new offset x
COMMENT $5A7B store it back
FORCE_SYMBOL $5A7B frog_pos
COMMENT $5A7D load the current offset
FORCE_SYMBOL $5A7D frogger_left_offset
COMMENT $5A80 and store it
FORCE_SYMBOL $5A80 current_frog_offset
COMMENT $5A82 use the vector list for
FORCE_SYMBOL $5A82 froggerLeftAnim
FORCE_SYMBOL $5A85 froggerInJump
FORCE_SYMBOL $5A89 froggerAnimPointer
COMMENT $5A8E left pointing frog
FORCE_SYMBOL $5A8E frog_pic
COMMENT $5A90 load old pos to B
FORCE_SYMBOL $5A90 frog_x
COMMENT $5A92 decrease position with speed faktor
COMMENT $5A94 and store new position
FORCE_SYMBOL $5A94 frog_x
COMMENT $5A96 if so, do nothing
FORCE_SYMBOL $5A96 positioning_done
COMMENT_LINE $5A99 than checking for changed y pos
COMMENT $5A99 load joystick 1 position X to A
FORCE_SYMBOL $5A99 Vec_Joy_1_Y
COMMENT $5A9B only jump if last joy pos was zero
FORCE_SYMBOL $5A9B last_joy_y
COMMENT $5A9D store this joystick position
FORCE_SYMBOL $5A9D last_joy_y
COMMENT $5A9F no joystick input available
COMMENT $5AA3 joystick moved to down
COMMENT $5AA5 test the old joystick position
COMMENT $5AA6 was center
COMMENT_LINE $5AAA he y dissi "print JOYSTICK_READ timeHi= $RecalCounterHi timeLow= $RecalCounterLow , Y= $Vec_Joy_1_Y"
COMMENT $5AAA load old pos to B
FORCE_SYMBOL $5AAA frog_y_band
COMMENT $5AAC if so, do nothing
FORCE_SYMBOL $5AB0 Karl_Jump_Sound
FORCE_SYMBOL $5AB3 play_sfx_x
COMMENT $5AB6 animation counter of one jump, so many jump steps are taken, befor
FORCE_NO_SYMBOL $5AB6
COMMENT $5AB8 befor another move can be made
FORCE_SYMBOL $5AB8 froggerInJump
COMMENT_LINE $5ABB INC level_score
FORCE_SYMBOL $5ABE score_digit_2
FORCE_SYMBOL $5AC1 score_digit_2
FORCE_SYMBOL $5AC6 score_digit_2
FORCE_SYMBOL $5AC9 score_digit_3
FORCE_SYMBOL $5ACC score_digit_3
FORCE_SYMBOL $5AD1 score_digit_3
FORCE_SYMBOL $5AD4 score_digit_4
FORCE_SYMBOL $5AD7 score_digit_4
FORCE_SYMBOL $5ADC score_digit_4
FORCE_SYMBOL $5ADF score_digit_5
COMMENT $5AE2 for internal checking
FORCE_SYMBOL $5AE2 frog_y_band
COMMENT $5AE4 than the last?
FORCE_SYMBOL $5AE4 HEADING_UP
COMMENT $5AE6 is the heading now the same
FORCE_SYMBOL $5AE6 current_frog_heading
COMMENT $5AE8 if yes -> we are done
COMMENT $5AEA store new heading
FORCE_SYMBOL $5AEA current_frog_heading
FORCE_SYMBOL $5AEC frog_pos
COMMENT $5AEE korrekt the old offset y
FORCE_SYMBOL $5AEE current_frog_offset
COMMENT $5AF0 korrekt the old offset x
COMMENT $5AF2 korrekt the new offset y
FORCE_SYMBOL $5AF2 frogger_up_offset
COMMENT $5AF5 korrekt the new offset x
COMMENT $5AF8 store it back
FORCE_SYMBOL $5AF8 frog_pos
COMMENT $5AFA remember the current offset
FORCE_SYMBOL $5AFA frogger_up_offset
FORCE_SYMBOL $5AFD current_frog_offset
COMMENT $5AFF use the vector list for
FORCE_SYMBOL $5AFF froggerUpAnim
FORCE_SYMBOL $5B02 froggerInJump
FORCE_SYMBOL $5B06 froggerAnimPointer
COMMENT $5B0B left pointing frog
FORCE_SYMBOL $5B0B frog_pic
COMMENT $5B0D load old pos to B
FORCE_SYMBOL $5B0D frog_y
COMMENT $5B0F decrease position with speed faktor
COMMENT $5B11 and store new position
FORCE_SYMBOL $5B11 frog_y
COMMENT $5B13 and exit joystick position routine
COMMENT $5B15 test the old joystick position
COMMENT $5B16 was center
COMMENT_LINE $5B18 he y dissi "print JOYSTICK_READ timeHi= $RecalCounterHi timeLow= $RecalCounterLow , Y= $Vec_Joy_1_Y"
COMMENT $5B18 load old pos to B
FORCE_SYMBOL $5B18 frog_y_band
COMMENT $5B1A is it at maximum down position?
FORCE_NO_SYMBOL $5B1A
COMMENT $5B1C if so, do nothing
FORCE_SYMBOL $5B1E Karl_Jump_Sound
FORCE_SYMBOL $5B21 play_sfx_x
COMMENT $5B24 animation counter of one jump, so many jump steps are taken, befor
FORCE_NO_SYMBOL $5B24
COMMENT $5B26 befor another move can be made
FORCE_SYMBOL $5B26 froggerInJump
FORCE_SYMBOL $5B2C score_digit_2
FORCE_SYMBOL $5B2F score_digit_2
FORCE_SYMBOL $5B34 score_digit_2
FORCE_SYMBOL $5B37 score_digit_3
FORCE_SYMBOL $5B3A score_digit_3
FORCE_SYMBOL $5B3F score_digit_3
FORCE_SYMBOL $5B42 score_digit_4
FORCE_SYMBOL $5B45 score_digit_4
FORCE_SYMBOL $5B4A score_digit_4
FORCE_SYMBOL $5B4D score_digit_5
FORCE_SYMBOL $5B50 score_digit_5
FORCE_SYMBOL $5B55 score_digit_5
COMMENT_LINE $5B58 DEC level_score
COMMENT $5B58 for internal checking
FORCE_SYMBOL $5B58 frog_y_band
COMMENT $5B5A than the last?
FORCE_SYMBOL $5B5A HEADING_DOWN
COMMENT $5B5C is the heading now the same
FORCE_SYMBOL $5B5C current_frog_heading
COMMENT $5B5E if yes -> we are done
COMMENT $5B60 store new heading
FORCE_SYMBOL $5B60 current_frog_heading
FORCE_SYMBOL $5B62 frog_pos
COMMENT $5B64 korrekt the old offset y
FORCE_SYMBOL $5B64 current_frog_offset
COMMENT $5B66 korrekt the old offset x
COMMENT $5B68 korrekt the new offset y
FORCE_SYMBOL $5B68 frogger_down_offset
COMMENT $5B6B korrekt the new offset x
COMMENT $5B6E store it back
FORCE_SYMBOL $5B6E frog_pos
COMMENT $5B70 remember the current offset
FORCE_SYMBOL $5B70 frogger_down_offset
FORCE_SYMBOL $5B73 current_frog_offset
COMMENT $5B75 use the vector list for
FORCE_SYMBOL $5B75 froggerDownAnim
FORCE_SYMBOL $5B78 froggerInJump
FORCE_SYMBOL $5B7C froggerAnimPointer
COMMENT $5B81 left pointing frog
FORCE_SYMBOL $5B81 frog_pic
COMMENT $5B83 load old pos to B
FORCE_SYMBOL $5B83 frog_y
COMMENT $5B85 decrease position with speed faktor
COMMENT $5B87 and store new position
FORCE_SYMBOL $5B87 frog_y
COMMENT $5B89 load band information
FORCE_SYMBOL $5B89 frog_y_band
COMMENT $5B8B a short jump saves a few cycles
COMMENT_LINE $5B8E ******************************************************************
COMMENT_LINE $5B8E here check for homereach must be put and new frog started
COMMENT $5B8E default death for this
FORCE_SYMBOL $5B8E DIE_WALL_JUMP
COMMENT $5B91 band is DIE_WALL_JUMP
FORCE_SYMBOL $5B91 kind_of_death
COMMENT $5B93 load frog position
FORCE_SYMBOL $5B93 frog_x
COMMENT $5B95 are we left of home
FORCE_SYMBOL $5B95 HOME1_POS_LEFT
COMMENT $5B97 yep, than die DIE_WALL_JUMP
COMMENT $5B9B or are we right, than
FORCE_SYMBOL $5B9B HOME1_POS_RIGHT
COMMENT $5B9D goto next test
COMMENT $5B9F load home address to X
FORCE_SYMBOL $5B9F home_entry_1
COMMENT $5BA2 load home object to U
FORCE_SYMBOL $5BA2 home_entry_1
COMMENT $5BA5 if none, than OK
COMMENT $5BA7 if there is something,... further checking
COMMENT $5BA9 are we left of home
FORCE_SYMBOL $5BA9 HOME2_POS_LEFT
COMMENT $5BAB yep, than die DIE_WALL_JUMP
COMMENT $5BAF or are we right, than
FORCE_SYMBOL $5BAF HOME2_POS_RIGHT
COMMENT $5BB1 goto next test
COMMENT $5BB3 load home address to X
FORCE_SYMBOL $5BB3 home_entry_2
COMMENT $5BB6 load home object to U
FORCE_SYMBOL $5BB6 home_entry_2
COMMENT $5BB9 if none, than OK
COMMENT $5BBB if there is something,... further checking
COMMENT $5BBD are we left of home
FORCE_SYMBOL $5BBD HOME3_POS_LEFT
COMMENT $5BBF yep, than die DIE_WALL_JUMP
COMMENT $5BC3 or are we right, than
FORCE_SYMBOL $5BC3 HOME3_POS_RIGHT
COMMENT $5BC5 goto next test
COMMENT $5BC7 load home address to X
FORCE_SYMBOL $5BC7 home_entry_3
COMMENT $5BCA load home object to U
FORCE_SYMBOL $5BCA home_entry_3
COMMENT $5BCD if none, than OK
COMMENT $5BCF if there is something,... further checking
COMMENT $5BD1 are we left of home
FORCE_SYMBOL $5BD1 HOME4_POS_LEFT
COMMENT $5BD3 yep, than die DIE_WALL_JUMP
COMMENT $5BD7 or are we right, than
FORCE_SYMBOL $5BD7 HOME4_POS_RIGHT
COMMENT $5BD9 goto next test
COMMENT $5BDB load home address to X
FORCE_SYMBOL $5BDB home_entry_4
COMMENT $5BDE load home object to U
FORCE_SYMBOL $5BDE home_entry_4
COMMENT $5BE1 if none, than OK
COMMENT $5BE3 if there is something,... further checking
COMMENT $5BE5 are we left of home
FORCE_SYMBOL $5BE5 HOME5_POS_LEFT
COMMENT $5BE7 yep, than die DIE_WALL_JUMP
COMMENT $5BEB or are we right, than
FORCE_SYMBOL $5BEB HOME5_POS_RIGHT
COMMENT $5BED goto die DIE_WALL_JUMP
COMMENT $5BF1 load home address to X
FORCE_SYMBOL $5BF1 home_entry_5
COMMENT $5BF4 load home object to U
FORCE_SYMBOL $5BF4 home_entry_5
COMMENT $5BF7 if none, than OK
COMMENT_LINE $5BF9 X pointer to home object position
COMMENT_LINE $5BF9 U pointer to home object
COMMENT_LINE $5BF9 here test ob frog, croco or fly in home
COMMENT $5BF9 load the object special to A
FORCE_NO_SYMBOL $5BF9
COMMENT $5BFB check if fly...
FORCE_SYMBOL $5BFB SPECIAL_HOME_FLY
COMMENT $5BFD no?. bother, than dead :-(
COMMENT_LINE $5BFF yep, this is a fly object, reinitiate fly...
COMMENT $5BFF reload the fly timer
FORCE_SYMBOL $5BFF fly_timer_start
COMMENT $5C01 and store it
FORCE_SYMBOL $5C01 fly_timer
COMMENT $5C03 is WAITING
FORCE_SYMBOL $5C03 fly_status
COMMENT $5C05 load fly bonus for extro
FORCE_SYMBOL $5C05 FLY_BONUS
COMMENT $5C07 add old bonus to it
FORCE_SYMBOL $5C07 frog_bonus
COMMENT $5C09 and store it back...
FORCE_SYMBOL $5C09 frog_bonus
COMMENT $5C0B and do 'frog reached home'
COMMENT $5C0D is only half a crocodile seen?
FORCE_SYMBOL $5C0D SPECIAL_CROCO_HALF
COMMENT $5C0F no, than jump
COMMENT $5C11 reload the croco timer
FORCE_SYMBOL $5C11 croco_timer_start
COMMENT $5C13 and store it
FORCE_SYMBOL $5C13 croco_timer
COMMENT $5C15 is WAITING
FORCE_SYMBOL $5C15 croco_status
COMMENT $5C17 and do 'frog reached home', phhht
COMMENT $5C19 if a full crocodile is in house
FORCE_SYMBOL $5C19 SPECIAL_CROCO_FULL
COMMENT $5C1B no?, than jump
COMMENT $5C1D otherwise frogger is dead
FORCE_SYMBOL $5C1D die_croco
COMMENT $5C20 default death
FORCE_SYMBOL $5C20 DIE_HOME_FULL
COMMENT $5C23 frogger jumped to occupied home
FORCE_SYMBOL $5C23 die_set
COMMENT_LINE $5C26 ***************************************************************************
COMMENT_LINE $5C26 X pointer to home object position
COMMENT_LINE $5C26 0
COMMENT $5C26 load object for frog is in home
FORCE_SYMBOL $5C26 frog1a_in_home_object
COMMENT $5C29 and set it as new home object
FORCE_NO_SYMBOL $5C29
COMMENT $5C2B load animation counter of object
COMMENT $5C2E and store it to object in RAM
FORCE_NO_SYMBOL $5C2E
FORCE_SYMBOL $5C30 KarlHomeJump_Sound
FORCE_SYMBOL $5C33 play_sfx_x
COMMENT $5C36 gimick possible with 0 or 1 house occupied
FORCE_NO_SYMBOL $5C36
FORCE_SYMBOL $5C38 in_home_counter
FORCE_NO_SYMBOL $5C3C
FORCE_SYMBOL $5C3E gimmickPossible
COMMENT $5C41 decrease home counter
FORCE_SYMBOL $5C41 in_home_counter
COMMENT $5C43 if not zero, than not all homes are full
COMMENT $5C45 do a frog in home intermission
FORCE_SYMBOL $5C45 frog_in_home
COMMENT $5C48 do a level done intermission
FORCE_SYMBOL $5C48 level_complete
COMMENT $5C4B increase level counter
FORCE_SYMBOL $5C4B game_level
COMMENT $5C4E load number of none level
COMMENT $5C50 compare to game_level
FORCE_SYMBOL $5C50 game_level
COMMENT $5C53 if equal a roll_over has occured
FORCE_SYMBOL $5C55 did_rollOver
COMMENT $5C58 clear level (start at 0 again)
FORCE_SYMBOL $5C58 game_level
COMMENT_LINE $5C5B TODO if space left - roll Over intermission!
COMMENT_LINE $5C5B JSR      roll_over_intermission       ; and do a roll_over intermission
COMMENT $5C5B this piece of music
FORCE_SYMBOL $5C5B gameStartMusic
COMMENT $5C5E must be played
FORCE_SYMBOL $5C5E currentMusic
COMMENT $5C61 NOW
COMMENT $5C63 for set up level...
FORCE_SYMBOL $5C63 DP_to_C8
COMMENT $5C66 set up a new level
FORCE_SYMBOL $5C66 setup_level
FORCE_SYMBOL $5C69 init_new_frog_vars
FORCE_NO_SYMBOL $5C6C
FORCE_NO_SYMBOL $5C6E
COMMENT $5C73 do a frog in home intermission
FORCE_SYMBOL $5C73 frog_in_home
COMMENT_LINE $5C78 ***************************************************************************
COMMENT_LINE $5C78 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $5C78 in 2016
COMMENT_LINE $5C78 all stuff contained here is public domain
COMMENT_LINE $5C78 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $5C78 in 2016
COMMENT_LINE $5C78 all stuff contained here is public domain
COMMENT_LINE $5C78 code
COMMENT_LINE $5C78 following code is not allowed to make assumptions concerning DP
COMMENT_LINE $5C78 ***************************************************************************
COMMENT_LINE $5C78 if zero flag is = after macro the bit was 0
COMMENT_LINE $5C78 if zero is clear after macro the bit was 1
COMMENT_LINE $5C78 sets carry according to next bit
COMMENT_LINE $5C78 ***************************************************************************
COMMENT_LINE $5C78 general get 1 bit version
COMMENT_LINE $0000 load a new byte
COMMENT $0000 [6]
COMMENT $0000 [6]
COMMENT $0000 [6] = 18
COMMENT_LINE $0000 remember we use one bit now!
COMMENT_LINE $0000 is the bit at the current position set?
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 three versions to get several bits in a row
COMMENT_LINE $0000 count variable is than kept
COMMENT_LINE $0000 in register b for faster access
COMMENT_LINE $0000 saves anoter 120 cycles to do split macros!
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $0000 [6]
COMMENT $0000 [6]
COMMENT $0000 [6] = 18
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $0000 [6]
COMMENT $0000 [6]
COMMENT $0000 [6] = 18
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $0000 [6]
COMMENT $0000 [6]
COMMENT $0000 [6] = 18
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 expects nothing
COMMENT_LINE $0000 expect in U start of data
COMMENT_LINE $0000 expects d0 set
COMMENT_LINE $0000 ***************************************************************************
FORCE_SYMBOL $5C78 nextDataPos
FORCE_SYMBOL $5C7D nextDataPos
FORCE_SYMBOL $5C80 musicOption
FORCE_NO_SYMBOL $5C85
FORCE_SYMBOL $5C88 currentMusic
FORCE_SYMBOL $5C8B currentYLenCount
FORCE_SYMBOL $5C8E nextMusic
FORCE_SYMBOL $5C92 currentMusic
FORCE_NO_SYMBOL $5C97
FORCE_SYMBOL $5C99 nextMusic
FORCE_NO_SYMBOL $5C9C
FORCE_SYMBOL $5CA0 currentYLenCount
FORCE_SYMBOL $5CA3 nextDataPos
FORCE_SYMBOL $5CA6 startDataPos
FORCE_SYMBOL $5CAB nextDataPos
FORCE_NO_SYMBOL $5CAE
FORCE_SYMBOL $5CB0 currentDataBitPos
FORCE_SYMBOL $5CB3 currentDataByte
FORCE_SYMBOL $5CB6 FIRST7
COMMENT_LINE $5CB8 ldu      #(Vec_Music_Work + register)
COMMENT_LINE $5CB8 sta      ,u
COMMENT $5CBB ensure difference between shadow and virtual reg, so the new reg 7 gets copied
FORCE_NO_SYMBOL $5CBB
COMMENT_LINE $5CBF ***************************************************************************
FORCE_SYMBOL $5CBF currentMusic
COMMENT_LINE $5CC4 initialize dispatcher for "in move" stuff - this is only the decoder, other stuff is done "directly"
COMMENT $5CC4 first jumper of ym decoder
FORCE_SYMBOL $5CC4 STREAM_PART_1
FORCE_SYMBOL $5CC7 inMovePointer
FORCE_SYMBOL $5CCA inMovePointer
FORCE_SYMBOL $5CCE inMovePointer
FORCE_SYMBOL $5CD2 inMovePointer
FORCE_SYMBOL $5CD6 inMovePointer
FORCE_SYMBOL $5CDA inMovePointer
FORCE_SYMBOL $5CDE inMovePointer
FORCE_SYMBOL $5CE2 inMovePointer
FORCE_SYMBOL $5CE6 inMovePointer
FORCE_SYMBOL $5CEA inMovePointer
COMMENT_LINE $5CEF ***************************************************************************
COMMENT_LINE $5CEF frogger music only uses
COMMENT_LINE $5CEF voices 0 and 1 (the first two voices)
COMMENT_LINE $5CEF the other channel is reserved for sound effects!
COMMENT_LINE $5CEF any change at all?
FORCE_SYMBOL $5CEF currentDataBitPos
COMMENT_LINE $5CF4 load a new byte
COMMENT $5CF4 [6]
FORCE_SYMBOL $5CF4 nextDataPos
COMMENT $5CF7 [6]
COMMENT $5CF9 [6] = 18
FORCE_SYMBOL $5CF9 nextDataPos
FORCE_SYMBOL $5CFC currentDataByte
FORCE_NO_SYMBOL $5CFF
FORCE_SYMBOL $5D01 currentDataBitPos
COMMENT_LINE $5D04 remember we use one bit now!
COMMENT_LINE $5D04 is the bit at the current position set?
FORCE_SYMBOL $5D04 currentDataByte
FORCE_SYMBOL $5D09 STREAM_PART_2
FORCE_SYMBOL $5D0C inMovePointer
FORCE_SYMBOL $5D10 emptyStreamInMove
FORCE_SYMBOL $5D13 inMovePointer
COMMENT_LINE $5D17 ***************************************************************************
COMMENT_LINE $5D17 voice 0 changes?
COMMENT_LINE $5D17 check voice 0, if next bit 0, than nothing changed in voice0
FORCE_SYMBOL $5D17 currentDataBitPos
COMMENT_LINE $5D1C load a new byte
COMMENT $5D1C [6]
FORCE_SYMBOL $5D1C nextDataPos
COMMENT $5D1F [6]
COMMENT $5D21 [6] = 18
FORCE_SYMBOL $5D21 nextDataPos
FORCE_SYMBOL $5D24 currentDataByte
FORCE_NO_SYMBOL $5D27
FORCE_SYMBOL $5D29 currentDataBitPos
COMMENT_LINE $5D2C remember we use one bit now!
COMMENT_LINE $5D2C is the bit at the current position set?
FORCE_SYMBOL $5D2C currentDataByte
FORCE_SYMBOL $5D31 STREAM_PART_3
FORCE_SYMBOL $5D34 inMovePointer
FORCE_SYMBOL $5D38 STREAM_PART_6
FORCE_SYMBOL $5D3B inMovePointer
COMMENT_LINE $5D3F ***************************************************************************
COMMENT_LINE $5D3F voice 0 Amplitude
FORCE_SYMBOL $5D3F currentDataBitPos
COMMENT_LINE $5D44 load a new byte
COMMENT $5D44 [6]
FORCE_SYMBOL $5D44 nextDataPos
COMMENT $5D47 [6]
COMMENT $5D49 [6] = 18
FORCE_SYMBOL $5D49 nextDataPos
FORCE_SYMBOL $5D4C currentDataByte
FORCE_NO_SYMBOL $5D4F
FORCE_SYMBOL $5D51 currentDataBitPos
COMMENT_LINE $5D54 remember we use one bit now!
COMMENT_LINE $5D54 is the bit at the current position set?
FORCE_SYMBOL $5D54 currentDataByte
FORCE_NO_SYMBOL $5D59
FORCE_SYMBOL $5D5B currentDataBitPos
COMMENT $5D61 [6]
FORCE_SYMBOL $5D61 nextDataPos
COMMENT $5D64 [6]
COMMENT $5D66 [6] = 18
FORCE_SYMBOL $5D66 nextDataPos
FORCE_SYMBOL $5D69 currentDataByte
FORCE_NO_SYMBOL $5D6C
FORCE_SYMBOL $5D6E currentDataByte
COMMENT $5D75 [6]
FORCE_SYMBOL $5D75 nextDataPos
COMMENT $5D78 [6]
COMMENT $5D7A [6] = 18
FORCE_SYMBOL $5D7A nextDataPos
FORCE_SYMBOL $5D7D currentDataByte
FORCE_NO_SYMBOL $5D80
FORCE_SYMBOL $5D82 currentDataByte
COMMENT $5D89 [6]
FORCE_SYMBOL $5D89 nextDataPos
COMMENT $5D8C [6]
COMMENT $5D8E [6] = 18
FORCE_SYMBOL $5D8E nextDataPos
FORCE_SYMBOL $5D91 currentDataByte
FORCE_NO_SYMBOL $5D94
FORCE_SYMBOL $5D96 currentDataByte
COMMENT $5D9D [6]
FORCE_SYMBOL $5D9D nextDataPos
COMMENT $5DA0 [6]
COMMENT $5DA2 [6] = 18
FORCE_SYMBOL $5DA2 nextDataPos
FORCE_SYMBOL $5DA5 currentDataByte
FORCE_NO_SYMBOL $5DA8
FORCE_SYMBOL $5DAA currentDataBitPos
FORCE_SYMBOL $5DAD currentDataByte
COMMENT_LINE $5DB1 ldu      #(Vec_Music_Work + register)
COMMENT_LINE $5DB1 sta      ,u
FORCE_SYMBOL $5DB4 STREAM_PART_4
FORCE_SYMBOL $5DB7 inMovePointer
COMMENT_LINE $5DBB ***************************************************************************
COMMENT_LINE $5DBB voice 0 Frequency low
FORCE_SYMBOL $5DBB STREAM_PART_5
FORCE_SYMBOL $5DBE inMovePointer
COMMENT_LINE $5DC2 check voice 0 low frequence, if next bit is one, = it
FORCE_SYMBOL $5DC2 currentDataBitPos
COMMENT_LINE $5DC7 load a new byte
COMMENT $5DC7 [6]
FORCE_SYMBOL $5DC7 nextDataPos
COMMENT $5DCA [6]
COMMENT $5DCC [6] = 18
FORCE_SYMBOL $5DCC nextDataPos
FORCE_SYMBOL $5DCF currentDataByte
FORCE_NO_SYMBOL $5DD2
FORCE_SYMBOL $5DD4 currentDataBitPos
COMMENT_LINE $5DD7 remember we use one bit now!
COMMENT_LINE $5DD7 is the bit at the current position set?
FORCE_SYMBOL $5DD7 currentDataByte
COMMENT_LINE $5DDC get 8 bits of low freq from stream
FORCE_NO_SYMBOL $5DDC
FORCE_SYMBOL $5DDE currentDataBitPos
COMMENT $5DE4 [6]
FORCE_SYMBOL $5DE4 nextDataPos
COMMENT $5DE7 [6]
COMMENT $5DE9 [6] = 18
FORCE_SYMBOL $5DE9 nextDataPos
FORCE_SYMBOL $5DEC currentDataByte
FORCE_NO_SYMBOL $5DEF
FORCE_SYMBOL $5DF1 currentDataByte
COMMENT $5DF8 [6]
FORCE_SYMBOL $5DF8 nextDataPos
COMMENT $5DFB [6]
COMMENT $5DFD [6] = 18
FORCE_SYMBOL $5DFD nextDataPos
FORCE_SYMBOL $5E00 currentDataByte
FORCE_NO_SYMBOL $5E03
FORCE_SYMBOL $5E05 currentDataByte
COMMENT $5E0C [6]
FORCE_SYMBOL $5E0C nextDataPos
COMMENT $5E0F [6]
COMMENT $5E11 [6] = 18
FORCE_SYMBOL $5E11 nextDataPos
FORCE_SYMBOL $5E14 currentDataByte
FORCE_NO_SYMBOL $5E17
FORCE_SYMBOL $5E19 currentDataByte
COMMENT $5E20 [6]
FORCE_SYMBOL $5E20 nextDataPos
COMMENT $5E23 [6]
COMMENT $5E25 [6] = 18
FORCE_SYMBOL $5E25 nextDataPos
FORCE_SYMBOL $5E28 currentDataByte
FORCE_NO_SYMBOL $5E2B
FORCE_SYMBOL $5E2D currentDataByte
COMMENT $5E34 [6]
FORCE_SYMBOL $5E34 nextDataPos
COMMENT $5E37 [6]
COMMENT $5E39 [6] = 18
FORCE_SYMBOL $5E39 nextDataPos
FORCE_SYMBOL $5E3C currentDataByte
FORCE_NO_SYMBOL $5E3F
FORCE_SYMBOL $5E41 currentDataByte
COMMENT $5E48 [6]
FORCE_SYMBOL $5E48 nextDataPos
COMMENT $5E4B [6]
COMMENT $5E4D [6] = 18
FORCE_SYMBOL $5E4D nextDataPos
FORCE_SYMBOL $5E50 currentDataByte
FORCE_NO_SYMBOL $5E53
FORCE_SYMBOL $5E55 currentDataByte
COMMENT $5E5C [6]
FORCE_SYMBOL $5E5C nextDataPos
COMMENT $5E5F [6]
COMMENT $5E61 [6] = 18
FORCE_SYMBOL $5E61 nextDataPos
FORCE_SYMBOL $5E64 currentDataByte
FORCE_NO_SYMBOL $5E67
FORCE_SYMBOL $5E69 currentDataByte
COMMENT $5E70 [6]
FORCE_SYMBOL $5E70 nextDataPos
COMMENT $5E73 [6]
COMMENT $5E75 [6] = 18
FORCE_SYMBOL $5E75 nextDataPos
FORCE_SYMBOL $5E78 currentDataByte
FORCE_NO_SYMBOL $5E7B
FORCE_SYMBOL $5E7D currentDataBitPos
FORCE_SYMBOL $5E80 currentDataByte
COMMENT_LINE $5E84 ldu      #(Vec_Music_Work + register)
COMMENT_LINE $5E84 sta      ,u
FORCE_SYMBOL $5E87 STREAM_PART_5
FORCE_SYMBOL $5E8A inMovePointer
COMMENT_LINE $5E8E ***************************************************************************
COMMENT_LINE $5E8E voice 0 Frequency high
COMMENT_LINE $5E8E check voice 0 high frequency, if next bit is one, = it
FORCE_SYMBOL $5E8E currentDataBitPos
COMMENT_LINE $5E93 load a new byte
COMMENT $5E93 [6]
FORCE_SYMBOL $5E93 nextDataPos
COMMENT $5E96 [6]
COMMENT $5E98 [6] = 18
FORCE_SYMBOL $5E98 nextDataPos
FORCE_SYMBOL $5E9B currentDataByte
FORCE_NO_SYMBOL $5E9E
FORCE_SYMBOL $5EA0 currentDataBitPos
COMMENT_LINE $5EA3 remember we use one bit now!
COMMENT_LINE $5EA3 is the bit at the current position set?
FORCE_SYMBOL $5EA3 currentDataByte
FORCE_NO_SYMBOL $5EA8
FORCE_SYMBOL $5EAA currentDataBitPos
COMMENT $5EB0 [6]
FORCE_SYMBOL $5EB0 nextDataPos
COMMENT $5EB3 [6]
COMMENT $5EB5 [6] = 18
FORCE_SYMBOL $5EB5 nextDataPos
FORCE_SYMBOL $5EB8 currentDataByte
FORCE_NO_SYMBOL $5EBB
FORCE_SYMBOL $5EBD currentDataByte
COMMENT $5EC4 [6]
FORCE_SYMBOL $5EC4 nextDataPos
COMMENT $5EC7 [6]
COMMENT $5EC9 [6] = 18
FORCE_SYMBOL $5EC9 nextDataPos
FORCE_SYMBOL $5ECC currentDataByte
FORCE_NO_SYMBOL $5ECF
FORCE_SYMBOL $5ED1 currentDataByte
COMMENT $5ED8 [6]
FORCE_SYMBOL $5ED8 nextDataPos
COMMENT $5EDB [6]
COMMENT $5EDD [6] = 18
FORCE_SYMBOL $5EDD nextDataPos
FORCE_SYMBOL $5EE0 currentDataByte
FORCE_NO_SYMBOL $5EE3
FORCE_SYMBOL $5EE5 currentDataByte
COMMENT $5EEC [6]
FORCE_SYMBOL $5EEC nextDataPos
COMMENT $5EEF [6]
COMMENT $5EF1 [6] = 18
FORCE_SYMBOL $5EF1 nextDataPos
FORCE_SYMBOL $5EF4 currentDataByte
FORCE_NO_SYMBOL $5EF7
FORCE_SYMBOL $5EF9 currentDataBitPos
FORCE_SYMBOL $5EFC currentDataByte
COMMENT_LINE $5F00 ldu      #(Vec_Music_Work + register)
COMMENT_LINE $5F00 sta      ,u
FORCE_SYMBOL $5F03 STREAM_PART_6
FORCE_SYMBOL $5F06 inMovePointer
COMMENT_LINE $5F0A ***************************************************************************
COMMENT_LINE $5F0A voice 1 changes?
COMMENT_LINE $5F0A check voice !, if next bit 0, than nothing changed in voice!
FORCE_SYMBOL $5F0A currentDataBitPos
COMMENT_LINE $5F0F load a new byte
COMMENT $5F0F [6]
FORCE_SYMBOL $5F0F nextDataPos
COMMENT $5F12 [6]
COMMENT $5F14 [6] = 18
FORCE_SYMBOL $5F14 nextDataPos
FORCE_SYMBOL $5F17 currentDataByte
FORCE_NO_SYMBOL $5F1A
FORCE_SYMBOL $5F1C currentDataBitPos
COMMENT_LINE $5F1F remember we use one bit now!
COMMENT_LINE $5F1F is the bit at the current position set?
FORCE_SYMBOL $5F1F currentDataByte
FORCE_SYMBOL $5F24 STREAM_PART_7
FORCE_SYMBOL $5F27 inMovePointer
FORCE_SYMBOL $5F2B emptyStreamInMove
FORCE_SYMBOL $5F2E inMovePointer
COMMENT_LINE $5F32 ***************************************************************************
COMMENT_LINE $5F32 voice 1 Amplitude
FORCE_SYMBOL $5F32 currentDataBitPos
COMMENT_LINE $5F37 load a new byte
COMMENT $5F37 [6]
FORCE_SYMBOL $5F37 nextDataPos
COMMENT $5F3A [6]
COMMENT $5F3C [6] = 18
FORCE_SYMBOL $5F3C nextDataPos
FORCE_SYMBOL $5F3F currentDataByte
FORCE_NO_SYMBOL $5F42
FORCE_SYMBOL $5F44 currentDataBitPos
COMMENT_LINE $5F47 remember we use one bit now!
COMMENT_LINE $5F47 is the bit at the current position set?
FORCE_SYMBOL $5F47 currentDataByte
FORCE_NO_SYMBOL $5F4C
FORCE_SYMBOL $5F4E currentDataBitPos
COMMENT $5F54 [6]
FORCE_SYMBOL $5F54 nextDataPos
COMMENT $5F57 [6]
COMMENT $5F59 [6] = 18
FORCE_SYMBOL $5F59 nextDataPos
FORCE_SYMBOL $5F5C currentDataByte
FORCE_NO_SYMBOL $5F5F
FORCE_SYMBOL $5F61 currentDataByte
COMMENT $5F68 [6]
FORCE_SYMBOL $5F68 nextDataPos
COMMENT $5F6B [6]
COMMENT $5F6D [6] = 18
FORCE_SYMBOL $5F6D nextDataPos
FORCE_SYMBOL $5F70 currentDataByte
FORCE_NO_SYMBOL $5F73
FORCE_SYMBOL $5F75 currentDataByte
COMMENT $5F7C [6]
FORCE_SYMBOL $5F7C nextDataPos
COMMENT $5F7F [6]
COMMENT $5F81 [6] = 18
FORCE_SYMBOL $5F81 nextDataPos
FORCE_SYMBOL $5F84 currentDataByte
FORCE_NO_SYMBOL $5F87
FORCE_SYMBOL $5F89 currentDataByte
COMMENT $5F90 [6]
FORCE_SYMBOL $5F90 nextDataPos
COMMENT $5F93 [6]
COMMENT $5F95 [6] = 18
FORCE_SYMBOL $5F95 nextDataPos
FORCE_SYMBOL $5F98 currentDataByte
FORCE_NO_SYMBOL $5F9B
FORCE_SYMBOL $5F9D currentDataBitPos
FORCE_SYMBOL $5FA0 currentDataByte
COMMENT_LINE $5FA4 ldu      #(Vec_Music_Work + register)
COMMENT_LINE $5FA4 sta      ,u
FORCE_SYMBOL $5FA7 STREAM_PART_8
FORCE_SYMBOL $5FAA inMovePointer
COMMENT_LINE $5FAE ***************************************************************************
COMMENT_LINE $5FAE voice 1 Frequency low
FORCE_SYMBOL $5FAE STREAM_PART_9
FORCE_SYMBOL $5FB1 inMovePointer
COMMENT_LINE $5FB5 check voice 1 low frequence, if next bit is one, = it
FORCE_SYMBOL $5FB5 currentDataBitPos
COMMENT_LINE $5FBA load a new byte
COMMENT $5FBA [6]
FORCE_SYMBOL $5FBA nextDataPos
COMMENT $5FBD [6]
COMMENT $5FBF [6] = 18
FORCE_SYMBOL $5FBF nextDataPos
FORCE_SYMBOL $5FC2 currentDataByte
FORCE_NO_SYMBOL $5FC5
FORCE_SYMBOL $5FC7 currentDataBitPos
COMMENT_LINE $5FCA remember we use one bit now!
COMMENT_LINE $5FCA is the bit at the current position set?
FORCE_SYMBOL $5FCA currentDataByte
COMMENT_LINE $5FCF get 8 bits of low freq from stream
FORCE_NO_SYMBOL $5FCF
FORCE_SYMBOL $5FD1 currentDataBitPos
COMMENT $5FD7 [6]
FORCE_SYMBOL $5FD7 nextDataPos
COMMENT $5FDA [6]
COMMENT $5FDC [6] = 18
FORCE_SYMBOL $5FDC nextDataPos
FORCE_SYMBOL $5FDF currentDataByte
FORCE_NO_SYMBOL $5FE2
FORCE_SYMBOL $5FE4 currentDataByte
COMMENT $5FEB [6]
FORCE_SYMBOL $5FEB nextDataPos
COMMENT $5FEE [6]
COMMENT $5FF0 [6] = 18
FORCE_SYMBOL $5FF0 nextDataPos
FORCE_SYMBOL $5FF3 currentDataByte
FORCE_NO_SYMBOL $5FF6
FORCE_SYMBOL $5FF8 currentDataByte
COMMENT $5FFF [6]
FORCE_SYMBOL $5FFF nextDataPos
COMMENT $6002 [6]
COMMENT $6004 [6] = 18
FORCE_SYMBOL $6004 nextDataPos
FORCE_SYMBOL $6007 currentDataByte
FORCE_NO_SYMBOL $600A
FORCE_SYMBOL $600C currentDataByte
COMMENT $6013 [6]
FORCE_SYMBOL $6013 nextDataPos
COMMENT $6016 [6]
COMMENT $6018 [6] = 18
FORCE_SYMBOL $6018 nextDataPos
FORCE_SYMBOL $601B currentDataByte
FORCE_NO_SYMBOL $601E
FORCE_SYMBOL $6020 currentDataByte
COMMENT $6027 [6]
FORCE_SYMBOL $6027 nextDataPos
COMMENT $602A [6]
COMMENT $602C [6] = 18
FORCE_SYMBOL $602C nextDataPos
FORCE_SYMBOL $602F currentDataByte
FORCE_NO_SYMBOL $6032
FORCE_SYMBOL $6034 currentDataByte
COMMENT $603B [6]
FORCE_SYMBOL $603B nextDataPos
COMMENT $603E [6]
COMMENT $6040 [6] = 18
FORCE_SYMBOL $6040 nextDataPos
FORCE_SYMBOL $6043 currentDataByte
FORCE_NO_SYMBOL $6046
FORCE_SYMBOL $6048 currentDataByte
COMMENT $604F [6]
FORCE_SYMBOL $604F nextDataPos
COMMENT $6052 [6]
COMMENT $6054 [6] = 18
FORCE_SYMBOL $6054 nextDataPos
FORCE_SYMBOL $6057 currentDataByte
FORCE_NO_SYMBOL $605A
FORCE_SYMBOL $605C currentDataByte
COMMENT $6063 [6]
FORCE_SYMBOL $6063 nextDataPos
COMMENT $6066 [6]
COMMENT $6068 [6] = 18
FORCE_SYMBOL $6068 nextDataPos
FORCE_SYMBOL $606B currentDataByte
FORCE_NO_SYMBOL $606E
FORCE_SYMBOL $6070 currentDataBitPos
FORCE_SYMBOL $6073 currentDataByte
COMMENT_LINE $6077 ldu      #(Vec_Music_Work + register)
COMMENT_LINE $6077 sta      ,u
FORCE_SYMBOL $607A STREAM_PART_9
FORCE_SYMBOL $607D inMovePointer
COMMENT_LINE $6081 ***************************************************************************
COMMENT_LINE $6081 voice 1 Frequency high
COMMENT_LINE $6081 check voice 1 high frequency, if next bit is one, = it
FORCE_SYMBOL $6081 currentDataBitPos
COMMENT_LINE $6086 load a new byte
COMMENT $6086 [6]
FORCE_SYMBOL $6086 nextDataPos
COMMENT $6089 [6]
COMMENT $608B [6] = 18
FORCE_SYMBOL $608B nextDataPos
FORCE_SYMBOL $608E currentDataByte
FORCE_NO_SYMBOL $6091
FORCE_SYMBOL $6093 currentDataBitPos
COMMENT_LINE $6096 remember we use one bit now!
COMMENT_LINE $6096 is the bit at the current position set?
FORCE_SYMBOL $6096 currentDataByte
COMMENT_LINE $609B get 4 bits of low freq from stream
FORCE_NO_SYMBOL $609B
FORCE_SYMBOL $609D currentDataBitPos
COMMENT $60A3 [6]
FORCE_SYMBOL $60A3 nextDataPos
COMMENT $60A6 [6]
COMMENT $60A8 [6] = 18
FORCE_SYMBOL $60A8 nextDataPos
FORCE_SYMBOL $60AB currentDataByte
FORCE_NO_SYMBOL $60AE
FORCE_SYMBOL $60B0 currentDataByte
COMMENT $60B7 [6]
FORCE_SYMBOL $60B7 nextDataPos
COMMENT $60BA [6]
COMMENT $60BC [6] = 18
FORCE_SYMBOL $60BC nextDataPos
FORCE_SYMBOL $60BF currentDataByte
FORCE_NO_SYMBOL $60C2
FORCE_SYMBOL $60C4 currentDataByte
COMMENT $60CB [6]
FORCE_SYMBOL $60CB nextDataPos
COMMENT $60CE [6]
COMMENT $60D0 [6] = 18
FORCE_SYMBOL $60D0 nextDataPos
FORCE_SYMBOL $60D3 currentDataByte
FORCE_NO_SYMBOL $60D6
FORCE_SYMBOL $60D8 currentDataByte
COMMENT $60DF [6]
FORCE_SYMBOL $60DF nextDataPos
COMMENT $60E2 [6]
COMMENT $60E4 [6] = 18
FORCE_SYMBOL $60E4 nextDataPos
FORCE_SYMBOL $60E7 currentDataByte
FORCE_NO_SYMBOL $60EA
FORCE_SYMBOL $60EC currentDataBitPos
FORCE_SYMBOL $60EF currentDataByte
COMMENT_LINE $60F3 ldu      #(Vec_Music_Work + register)
COMMENT_LINE $60F3 sta      ,u
FORCE_SYMBOL $60F6 emptyStreamInMove
FORCE_SYMBOL $60F9 inMovePointer
COMMENT_LINE $60FD ***************************************************************************
COMMENT_LINE $60FD this file is part of Karl Quappe, written by Malban
COMMENT_LINE $60FD in 2016
COMMENT_LINE $60FD all stuff contained here is public domain
COMMENT_LINE $62E7 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $62E7 in 2016
COMMENT_LINE $62E7 all stuff contained here is public domain
COMMENT_LINE $64F6 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $64F6 in 2016
COMMENT_LINE $64F6 all stuff contained here is public domain
COMMENT_LINE $6AD7 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $6AD7 in 2016
COMMENT_LINE $6AD7 all stuff contained here is public domain
COMMENT_LINE $6E26 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $6E26 in 2016
COMMENT_LINE $6E26 all stuff contained here is public domain
COMMENT_LINE $7105 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $7105 in 2016
COMMENT_LINE $7105 all stuff contained here is public domain
COMMENT_LINE $721F this file is part of Karl Quappe, written by Malban
COMMENT_LINE $721F in 2016
COMMENT_LINE $721F all stuff contained here is public domain
COMMENT_LINE $736F this file is part of Karl Quappe, written by Malban
COMMENT_LINE $736F in 2016
COMMENT_LINE $736F all stuff contained here is public domain
COMMENT_LINE $749F ***************** YM Music Structures
COMMENT $749F music to play
COMMENT $74A1 next music piece
COMMENT $74A3 music to play
COMMENT $74A5 next music piece
COMMENT $74B1 next music piece
COMMENT $74B5 next music piece
COMMENT $74B9 next music piece
COMMENT $74BD next music piece
COMMENT $74C1 next music piece
COMMENT $74C5 next music piece
COMMENT_LINE $74C7 KarlHomeJumpMusic:
COMMENT_LINE $74C7 dw       KarlHomeJumpTheme
COMMENT_LINE $74C7 dw       0                            ; next music piece
COMMENT_LINE $74C7 ***************** AYFX Structures
COMMENT_LINE $74C7 priority the higher the more priority!
COMMENT_LINE $74C7 *** AYFX following
COMMENT $74C9 priority 2 = low
COMMENT $74CC priority 2 = low
COMMENT $74CF priority 2 = low
COMMENT $74D2 priority 2 = low
COMMENT $74D5 priority 2 = low
COMMENT $74D8 priority 2 = low
COMMENT $74DB priority 2 = low
COMMENT $74DE priority 2 = low
COMMENT_LINE $74DF Karl_Live_Got_Sound
COMMENT_LINE $74DF dw       KarlCoinNoise_data
COMMENT $74DF priority 2 = low
COMMENT $74E2 priority 2 = low
COMMENT $74E5 priority 2 = low
COMMENT $74E8 priority 2 = low
COMMENT_LINE $74E9 ***************** AYFX DATA
COMMENT_LINE $78B4 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $78B4 in 2016
COMMENT_LINE $78B4 all stuff contained here is public domain
COMMENT_LINE $78B4 format:
COMMENT_LINE $78B4 height, width
COMMENT_LINE $78B4 shiftreg, ...,  shiftreg
COMMENT_LINE $78B4 ....
COMMENT_LINE $78B4 shiftreg, ...,  shiftreg
COMMENT $78B6 forward
COMMENT $78D2 forward
COMMENT $78EE forward
COMMENT $790A forward
COMMENT $7926 forward
COMMENT $7942 forward
COMMENT $795E forward
COMMENT $797A forward
COMMENT $7996 forward
COMMENT $79B2 forward
COMMENT $79CE forward
COMMENT $79EA forward
COMMENT $7A06 forward
COMMENT $7A22 forward
COMMENT $7A3E forward
COMMENT $7A5A forward
COMMENT_LINE $7A76 Note:
COMMENT_LINE $7A76 The vectrex uses the VIA 6522 and the models of VIA it uses has some bugs.
COMMENT_LINE $7A76 One of its bugs is, that a complete shift cycle does not
COMMENT_LINE $7A76 shift 8 times for one byte, but 8+1. The last shifted value is repeated.
COMMENT_LINE $7A76 So that e.g.
COMMENT_LINE $7A76 0101 0101 [e.g. part of a bitmap]
COMMENT_LINE $7A76 results in an output like:
COMMENT_LINE $7A76 0101 0101 1
COMMENT_LINE $7A76 In the normal "text" routines you do not see that, since letters always end with a "0"
COMMENT_LINE $7A76 and a double "00" result just in a little bit more space between letters.
COMMENT_LINE $7A76 In a "continues" bitmap you must align or tweak the bitmap thus, that you do not (or only barely) see bit doubles.
COMMENT_LINE $7A76 I already did that (to some extend) to the title bitmap - and I thought I did a good job :-(.
COMMENT_LINE $7A76 It certainly is even more difficult to do if you are working with "diagonals", since you can not get rid of a double step.
COMMENT_LINE $7A76 See letter "A"
COMMENT_LINE $7A86 ***************************************************************************
COMMENT_LINE $7A86 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $7A86 in 2016
COMMENT_LINE $7A86 all stuff contained here is public domain
COMMENT_LINE $7A86 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $7A86 this file contains the yankee doodle music for the game                   ;
COMMENT_LINE $7A86 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $7A86 Music data bytes:
COMMENT_LINE $7A86 Bits 0-5 = frequency
COMMENT_LINE $7A86 Bit 6 clear = tone
COMMENT_LINE $7A86 Bit 6 = = noise
COMMENT_LINE $7A86 Bit 7 = = next music data byte is for next channel
COMMENT_LINE $7A86 Bit 7 clear, play note with duration in next music data byte:
COMMENT_LINE $7A86 bits 0-5 = duration
COMMENT_LINE $7A86 bit 6 = unused
COMMENT_LINE $7A86 bit 7 = = end of music
COMMENT $7A86 ADSR and twang address tables, in Vectrex ROM
COMMENT $7A8A ;;;;;;;
COMMENT $7A8C first byte is a note, to be found
COMMENT $7A8E in vectrex rom, is a 64 byte table...
COMMENT $7A90 last byte is length of note
COMMENT $7A92 ;;;;;;;
COMMENT $7AA0 ;;;;;;;
COMMENT $7AA8 ;;;;;;;
COMMENT $7AB6 ;;;;;;;
COMMENT $7AC2 ;;;;;;;
COMMENT $7AC6 a 128 means the next byte is a note for the
COMMENT $7ACA next channel...
COMMENT $7AD2 ;;;;;;;
COMMENT $7AE2 ;;;;;;;
COMMENT $7AF2 ;;;;;;;
COMMENT $7B00 ;;;;;;;
COMMENT $7B10 ;;;;;;;
COMMENT $7B20 ;;;;;;;
COMMENT $7B30 ;;;;;;;
COMMENT $7B3C ;;;;;;;
COMMENT $7BAF $FF is end marker for music
COMMENT_LINE $7BB1 (high byte set) and end marker for
COMMENT_LINE $7BB1 copy routine
COMMENT_LINE $7BB1 ***************************************************************************
COMMENT_LINE $7C36 db       "      ALL!", $81
COMMENT_LINE $7C44 ***************************************************************************
COMMENT_LINE $7C44 stupid assembler, these defines must be made after the above
COMMENT_LINE $7C44 labels
COMMENT_LINE $7C44 following are string offsets for the different deaths
COMMENT_LINE $7C44 ***************************************************************************
COMMENT_LINE $7C44 Immediately back to menu
COMMENT $7C44 copy the vec4ever switching function into place
FORCE_SYMBOL $7C44 ramfunctiondata
FORCE_SYMBOL $7C47 ramfunction
FORCE_SYMBOL $7C4C Move_Mem_a
COMMENT $7C4F the 'switch back to menu' command
FORCE_NO_SYMBOL $7C4F
COMMENT $7C52 up up and away
FORCE_SYMBOL $7C52 ramfunction
COMMENT $7C55 Source copy the vec4ever switching function into place
FORCE_SYMBOL $7C55 v4e_saveBlockStart
COMMENT $7C58 destination
FORCE_SYMBOL $7C58 vec4SaveBuffer
FORCE_SYMBOL $7C5D Move_Mem_a
COMMENT_LINE $7C62 ldu #highScoreTable
COMMENT_LINE $7C62 lda #'A'
COMMENT_LINE $7C62 sta 0,u
COMMENT $7C62 copy the vec4ever switching function into place
FORCE_SYMBOL $7C62 StoreHiscoreFnc
FORCE_SYMBOL $7C65 ramfunction
FORCE_SYMBOL $7C6A Move_Mem_a
COMMENT $7C6D the 'store data' command
FORCE_NO_SYMBOL $7C6D
COMMENT $7C70 up up and away
FORCE_SYMBOL $7C70 ramfunction
COMMENT_LINE $7C73 the function below does the magic handshake with the cart,
COMMENT_LINE $7C73 then waits for the new cart data to appear in the cart address
COMMENT_LINE $7C73 space and jumps back to the v4e cart
COMMENT $7C73 notify v4e
FORCE_NO_SYMBOL $7C73
COMMENT $7C76 and put command on the bus
FORCE_NO_SYMBOL $7C76
COMMENT $7C7B while the cart is working there is only one data byte
FORCE_NO_SYMBOL $7C7B
COMMENT $7C7F header just in case
COMMENT_LINE $7C82 the function below does the magic handshake with the cart,
COMMENT_LINE $7C82 then waits for the new cart data to appear in the cart address
COMMENT_LINE $7C82 space and jumps back to the menu
COMMENT $7C82 notify the cart uProc
FORCE_NO_SYMBOL $7C82
COMMENT $7C85 put command on the bus
FORCE_NO_SYMBOL $7C85
FORCE_NO_SYMBOL $7C87
COMMENT $7C8D while the cart is setting up itself there is only one data byte
FORCE_NO_SYMBOL $7C8D
COMMENT $7C90 available, so check for .two. known and different ones
COMMENT $7C92 0-A: "GCE xxxx",$80 / B+C: music pointer (could contain a zero..)
FORCE_NO_SYMBOL $7C92
COMMENT $7C94 look for end of menu cart header
COMMENT $7C98 return to menu code data
COMMENT_LINE $7FD8 ***************************************************************************
RANGE $0000-$0159 DP $FF
RANGE $0159-$0404 DP $D0
RANGE $0404-$0415 DP $C8
RANGE $0415-$0421 DP $D0
RANGE $0421-$0427 DP $C8
RANGE $0427-$047B DP $D0
RANGE $047B-$04E2 DP $C8
RANGE $04E2-$04F2 DP $D0
RANGE $04F2-$05DF DP $C8
RANGE $05DF-$0969 DP $D0
RANGE $0969-$096F DP $C8
RANGE $096F-$0AEE DP $D0
RANGE $0AEE-$0B50 DP $C8
RANGE $0B50-$0E40 DP $D0
RANGE $0E40-$0FAB DP $C8
RANGE $0FAB-$1012 DP $D0
RANGE $1012-$12F1 DP $C8
RANGE $12F1-$1310 DP $D0
RANGE $1310-$133B DP $C8
RANGE $133B-$179C DP $D0
RANGE $179C-$182B DP $C8
RANGE $182B-$1953 DP $D0
RANGE $1953-$1961 DP $C8
RANGE $1961-$197D DP $D0
RANGE $197D-$198D DP $C8
RANGE $198D-$1BB8 DP $D0
RANGE $1BC1-$1C6A DP $D0
RANGE $1CF6-$1E08 DP $D0
RANGE $1E08-$1E08 DP $C8
RANGE $1E08-$1E73 DP $FF
RANGE $1E7B-$1EF9 DP $C8
RANGE $1EF9-$1FA0 DP $D0
RANGE $1FA0-$206B DP $C8
RANGE $206B-$206B DP $D0
RANGE $206B-$2087 DP $C8
RANGE $2087-$20A0 DP $D0
RANGE $20A0-$2125 DP $C8
RANGE $2163-$2296 DP $D0
RANGE $2296-$22C9 DP $C8
RANGE $22C9-$24D9 DP $D0
RANGE $24D9-$254B DP $C8
RANGE $254B-$26A4 DP $D0
RANGE $26A4-$26B4 DP $C8
RANGE $26B4-$59E8 DP $D0
RANGE $59E8-$5C5C DP $C8
RANGE $5C5C-$5C77 DP $D0
RANGE $5C77-$5C83 DP $C8
RANGE $5C83-$5C89 DP $D0
RANGE $5C89-$7FE9 DP $FF
RANGE $0000-$000B CHAR_DATA 11
RANGE $000B-$000D DW_DATA 1
RANGE $000D-$0011 DB_DATA 4
RANGE $0011-$001D CHAR_DATA 12
RANGE $001D-$001E DB_DATA 1
RANGE $001E-$0020 CODE
RANGE $0020-$0028 CHAR_DATA 8
RANGE $0028-$002F CHAR_DATA 7
RANGE $0030-$0034 CHAR_DATA 4
RANGE $0034-$0036 DW_DATA 1
RANGE $0036-$0038 DW_DATA 1
RANGE $0038-$003A DW_DATA 1
RANGE $003A-$003B DB_DATA 1
RANGE $003B-$003C DB_DATA 1
RANGE $003C-$003E DW_DATA 1
RANGE $003E-$0040 DW_DATA 1
RANGE $0040-$0042 DW_DATA 1
RANGE $0042-$0044 DW_DATA 1
RANGE $0044-$0048 CHAR_DATA 4
RANGE $0048-$0051 CHAR_DATA 9
RANGE $0051-$005E CHAR_DATA 13
RANGE $005E-$0068 CHAR_DATA 10
RANGE $0068-$02DD CODE
RANGE $02DD-$02DF DW_DATA 1
RANGE $02DF-$02E1 DW_DATA 1
RANGE $02E1-$02E3 DW_DATA 1
RANGE $02E3-$02E5 DW_DATA 1
RANGE $02E5-$02E7 DW_DATA 1
RANGE $02E7-$02E9 DW_DATA 1
RANGE $02E9-$02EB DW_DATA 1
RANGE $02EB-$02EC DB_DATA 1
RANGE $02EC-$02ED DB_DATA 1
RANGE $02ED-$02EE DB_DATA 1
RANGE $02EE-$02F0 DW_DATA 1
RANGE $02F0-$02F1 DB_DATA 1
RANGE $02F1-$02F2 DB_DATA 1
RANGE $02F2-$02F3 DB_DATA 1
RANGE $02F3-$02F5 DW_DATA 1
RANGE $02F5-$02F6 DB_DATA 1
RANGE $02F6-$02F7 DB_DATA 1
RANGE $02F7-$02F8 DB_DATA 1
RANGE $02F8-$02FA DW_DATA 1
RANGE $02FA-$02FB DB_DATA 1
RANGE $02FB-$02FC DB_DATA 1
RANGE $02FC-$02FD DB_DATA 1
RANGE $02FD-$02FF DW_DATA 1
RANGE $02FF-$0300 DB_DATA 1
RANGE $0300-$0301 DB_DATA 1
RANGE $0301-$0302 DB_DATA 1
RANGE $0302-$0304 DW_DATA 1
RANGE $0304-$0305 DB_DATA 1
RANGE $0305-$0306 DB_DATA 1
RANGE $0306-$0307 DB_DATA 1
RANGE $0307-$0309 DW_DATA 1
RANGE $0309-$1796 CODE
RANGE $1796-$1798 DB_DATA 2
RANGE $1798-$179A DB_DATA 2
RANGE $179A-$179C DB_DATA 2
RANGE $179C-$179E DB_DATA 2
RANGE $179E-$17A0 DB_DATA 2
RANGE $17A0-$17A2 DB_DATA 2
RANGE $17A2-$17A4 DB_DATA 2
RANGE $17A4-$17A6 DB_DATA 2
RANGE $17A6-$17A8 DB_DATA 2
RANGE $17A8-$17AA DB_DATA 2
RANGE $17AA-$17AC DB_DATA 2
RANGE $17AC-$17AE DB_DATA 2
RANGE $17AE-$17B0 DB_DATA 2
RANGE $17B0-$17B2 DB_DATA 2
RANGE $17B2-$17B4 DB_DATA 2
RANGE $17B4-$17B6 DB_DATA 2
RANGE $17B6-$17B8 DB_DATA 2
RANGE $17B8-$17BA DB_DATA 2
RANGE $17BA-$17BC DB_DATA 2
RANGE $17BC-$17BE DB_DATA 2
RANGE $17BE-$17C0 DB_DATA 2
RANGE $17C0-$17C2 DB_DATA 2
RANGE $17C2-$17C4 DB_DATA 2
RANGE $17C4-$17C6 DB_DATA 2
RANGE $17C6-$17C8 DB_DATA 2
RANGE $17C8-$17CA DB_DATA 2
RANGE $17CA-$17CC DB_DATA 2
RANGE $17CC-$17CE DB_DATA 2
RANGE $17CE-$17D0 DB_DATA 2
RANGE $17D0-$17D2 DB_DATA 2
RANGE $17D2-$17D4 DB_DATA 2
RANGE $17D4-$17D6 DB_DATA 2
RANGE $17D6-$17D8 DB_DATA 2
RANGE $17D8-$17DA DB_DATA 2
RANGE $17DA-$17DC DB_DATA 2
RANGE $17DC-$17DE DB_DATA 2
RANGE $17DE-$17E0 DB_DATA 2
RANGE $17E0-$17E2 DB_DATA 2
RANGE $17E2-$17E4 DB_DATA 2
RANGE $17E4-$17E6 DB_DATA 2
RANGE $17E6-$17E8 DB_DATA 2
RANGE $17E8-$17EA DB_DATA 2
RANGE $17EA-$17EC DB_DATA 2
RANGE $17EC-$17EE DB_DATA 2
RANGE $17EE-$17F0 DB_DATA 2
RANGE $17F0-$17F2 DB_DATA 2
RANGE $17F2-$17F4 DB_DATA 2
RANGE $17F4-$17F6 DB_DATA 2
RANGE $17F6-$17F8 DB_DATA 2
RANGE $17F8-$17FA DB_DATA 2
RANGE $17FA-$17FC DB_DATA 2
RANGE $17FC-$17FE DB_DATA 2
RANGE $17FE-$1800 DB_DATA 2
RANGE $1800-$1802 DB_DATA 2
RANGE $1802-$1804 DB_DATA 2
RANGE $1804-$1806 DB_DATA 2
RANGE $1806-$1808 DB_DATA 2
RANGE $1808-$180A DB_DATA 2
RANGE $180A-$180C DB_DATA 2
RANGE $180C-$180E DB_DATA 2
RANGE $180E-$1810 DB_DATA 2
RANGE $1810-$18B2 CODE
RANGE $18B2-$18B4 DB_DATA 2
RANGE $18B4-$18B6 DB_DATA 2
RANGE $18B6-$18B8 DB_DATA 2
RANGE $18B8-$18BA DB_DATA 2
RANGE $18BA-$18BC DB_DATA 2
RANGE $18BC-$18BE DB_DATA 2
RANGE $18BE-$18C0 DB_DATA 2
RANGE $18C0-$18C2 DB_DATA 2
RANGE $18C2-$18C4 DB_DATA 2
RANGE $18C4-$18C6 DB_DATA 2
RANGE $18C6-$18C8 DB_DATA 2
RANGE $18C8-$18CA DB_DATA 2
RANGE $18CA-$18CC DB_DATA 2
RANGE $18CC-$18CE DB_DATA 2
RANGE $18CE-$18D0 DB_DATA 2
RANGE $18D0-$18D2 DB_DATA 2
RANGE $18D2-$18D4 DB_DATA 2
RANGE $18D4-$18D6 DB_DATA 2
RANGE $18D6-$18D8 DB_DATA 2
RANGE $18D8-$18DA DB_DATA 2
RANGE $18DA-$18DC DB_DATA 2
RANGE $18DC-$18DE DB_DATA 2
RANGE $18DE-$18E0 DB_DATA 2
RANGE $18E0-$18E2 DB_DATA 2
RANGE $18E2-$18E4 DB_DATA 2
RANGE $18E4-$18E6 DB_DATA 2
RANGE $18E6-$18E8 DB_DATA 2
RANGE $18E8-$18EA DB_DATA 2
RANGE $18EA-$18EC DB_DATA 2
RANGE $18EC-$18EE DB_DATA 2
RANGE $18EE-$18F0 DB_DATA 2
RANGE $18F0-$18F2 DB_DATA 2
RANGE $18F2-$1E62 CODE
RANGE $1E62-$1E64 DB_DATA 2
RANGE $1E64-$1E66 DB_DATA 2
RANGE $1E66-$1E68 DB_DATA 2
RANGE $1E68-$1E6A DB_DATA 2
RANGE $1E6A-$221C CODE
RANGE $221C-$2220 DB_DATA 4
RANGE $2220-$2224 DB_DATA 4
RANGE $2224-$2226 DB_DATA 2
RANGE $2226-$2228 DB_DATA 2
RANGE $2228-$222A DB_DATA 2
RANGE $222A-$222C DB_DATA 2
RANGE $222C-$22C3 CODE
RANGE $22C3-$22C5 DB_DATA 2
RANGE $22C5-$22C7 DB_DATA 2
RANGE $22C7-$22C9 DB_DATA 2
RANGE $22C9-$22CB DB_DATA 2
RANGE $22CB-$244D CODE
RANGE $244D-$244F DB_DATA 2
RANGE $244F-$2451 DB_DATA 2
RANGE $2451-$2453 DB_DATA 2
RANGE $2453-$2455 DB_DATA 2
RANGE $2455-$2460 CHAR_DATA 11
RANGE $2460-$246B CHAR_DATA 11
RANGE $246B-$2830 CODE
RANGE $2830-$283B CHAR_DATA 11
RANGE $283B-$29CD CODE
RANGE $29CD-$29D7 CHAR_DATA 10
RANGE $29D7-$29E2 CHAR_DATA 11
RANGE $29E2-$29F1 CHAR_DATA 15
RANGE $29F1-$2A01 CHAR_DATA 16
RANGE $2A01-$2A11 CHAR_DATA 16
RANGE $2A11-$2A20 CHAR_DATA 15
RANGE $2A20-$2A2C CHAR_DATA 12
RANGE $2A2C-$2A3C CHAR_DATA 16
RANGE $2A3C-$2A4C CHAR_DATA 16
RANGE $2A4C-$2A5C CHAR_DATA 16
RANGE $2A5C-$2A6B CHAR_DATA 15
RANGE $2A6B-$2A6D DW_DATA 1
RANGE $2A6D-$2A6F DW_DATA 1
RANGE $2A6F-$2A71 DW_DATA 1
RANGE $2A71-$2A73 DW_DATA 1
RANGE $2A73-$2A75 DW_DATA 1
RANGE $2A75-$2A77 DW_DATA 1
RANGE $2A77-$2A79 DW_DATA 1
RANGE $2A79-$2A7A DB_DATA 1
RANGE $2A7A-$2A7C DW_DATA 1
RANGE $2A7C-$2A7E DW_DATA 1
RANGE $2A7E-$2A80 DW_DATA 1
RANGE $2A80-$2A82 DW_DATA 1
RANGE $2A82-$2A84 DW_DATA 1
RANGE $2A84-$2A86 DW_DATA 1
RANGE $2A86-$2A88 DW_DATA 1
RANGE $2A88-$2A8A DW_DATA 1
RANGE $2A8A-$2A8C DW_DATA 1
RANGE $2A8C-$2A8E DW_DATA 1
RANGE $2A8E-$2A90 DW_DATA 1
RANGE $2A90-$2A92 DW_DATA 1
RANGE $2A92-$2A94 DW_DATA 1
RANGE $2A94-$2A96 DW_DATA 1
RANGE $2A96-$2A98 DW_DATA 1
RANGE $2A98-$2A9A DW_DATA 1
RANGE $2A9A-$2A9C DW_DATA 1
RANGE $2A9C-$2A9E DW_DATA 1
RANGE $2A9E-$2AA0 DW_DATA 1
RANGE $2AA0-$2AA2 DW_DATA 1
RANGE $2AA2-$2AA4 DW_DATA 1
RANGE $2AA4-$2AA6 DW_DATA 1
RANGE $2AA6-$2AA8 DW_DATA 1
RANGE $2AA8-$2AAA DW_DATA 1
RANGE $2AAA-$2AAC DW_DATA 1
RANGE $2AAC-$2AAE DW_DATA 1
RANGE $2AAE-$2AB0 DW_DATA 1
RANGE $2AB0-$2AB2 DW_DATA 1
RANGE $2AB2-$2AB4 DW_DATA 1
RANGE $2AB4-$2AB6 DW_DATA 1
RANGE $2AB6-$2AB8 DW_DATA 1
RANGE $2AB8-$2ABA DW_DATA 1
RANGE $2ABA-$2ABC DW_DATA 1
RANGE $2ABC-$2ABE DW_DATA 1
RANGE $2ABE-$2AC0 DW_DATA 1
RANGE $2AC0-$2AC2 DW_DATA 1
RANGE $2AC2-$2AC4 DW_DATA 1
RANGE $2AC4-$2AC6 DW_DATA 1
RANGE $2AC6-$2AC7 DB_DATA 1
RANGE $2AC7-$2AC9 DW_DATA 1
RANGE $2AC9-$2ACB DW_DATA 1
RANGE $2ACB-$2ACD DW_DATA 1
RANGE $2ACD-$2ACF DW_DATA 1
RANGE $2ACF-$2AD1 DW_DATA 1
RANGE $2AD1-$2AD3 DW_DATA 1
RANGE $2AD3-$2AD5 DW_DATA 1
RANGE $2AD5-$2AD7 DW_DATA 1
RANGE $2AD7-$2AD9 DW_DATA 1
RANGE $2AD9-$2ADB DW_DATA 1
RANGE $2ADB-$2ADD DW_DATA 1
RANGE $2ADD-$2ADF DW_DATA 1
RANGE $2ADF-$2AE1 DW_DATA 1
RANGE $2AE1-$2AE3 DW_DATA 1
RANGE $2AE3-$2AE5 DW_DATA 1
RANGE $2AE5-$2AE7 DW_DATA 1
RANGE $2AE7-$2AE9 DW_DATA 1
RANGE $2AE9-$2AEB DW_DATA 1
RANGE $2AEB-$2AED DW_DATA 1
RANGE $2AED-$2AEF DW_DATA 1
RANGE $2AEF-$2AF1 DW_DATA 1
RANGE $2AF1-$2AF3 DW_DATA 1
RANGE $2AF3-$2AF5 DW_DATA 1
RANGE $2AF5-$2AF7 DW_DATA 1
RANGE $2AF7-$2AF9 DW_DATA 1
RANGE $2AF9-$2AFB DW_DATA 1
RANGE $2AFB-$2AFD DW_DATA 1
RANGE $2AFD-$2AFF DW_DATA 1
RANGE $2AFF-$2B01 DW_DATA 1
RANGE $2B01-$2B03 DW_DATA 1
RANGE $2B03-$2B05 DW_DATA 1
RANGE $2B05-$2B07 DW_DATA 1
RANGE $2B07-$2B09 DW_DATA 1
RANGE $2B09-$2B0B DW_DATA 1
RANGE $2B0B-$2B0D DW_DATA 1
RANGE $2B0D-$2B0F DW_DATA 1
RANGE $2B0F-$2B11 DW_DATA 1
RANGE $2B11-$2B13 DW_DATA 1
RANGE $2B13-$2B15 DW_DATA 1
RANGE $2B15-$2B17 DW_DATA 1
RANGE $2B17-$2B19 DW_DATA 1
RANGE $2B19-$2B1B DW_DATA 1
RANGE $2B1B-$2B1D DW_DATA 1
RANGE $2B1D-$2B1F DW_DATA 1
RANGE $2B1F-$2B20 DB_DATA 1
RANGE $2B20-$2B22 DW_DATA 1
RANGE $2B22-$2B24 DW_DATA 1
RANGE $2B24-$2B26 DW_DATA 1
RANGE $2B26-$2B28 DW_DATA 1
RANGE $2B28-$2B2A DW_DATA 1
RANGE $2B2A-$2B2C DW_DATA 1
RANGE $2B2C-$2B2E DW_DATA 1
RANGE $2B2E-$2B30 DW_DATA 1
RANGE $2B30-$2B32 DW_DATA 1
RANGE $2B32-$2B34 DW_DATA 1
RANGE $2B34-$2B36 DW_DATA 1
RANGE $2B36-$2B38 DW_DATA 1
RANGE $2B38-$2B3A DW_DATA 1
RANGE $2B3A-$2B3C DW_DATA 1
RANGE $2B3C-$2B3E DW_DATA 1
RANGE $2B3E-$2B40 DW_DATA 1
RANGE $2B40-$2B42 DW_DATA 1
RANGE $2B42-$2B44 DW_DATA 1
RANGE $2B44-$2B46 DW_DATA 1
RANGE $2B46-$2B48 DW_DATA 1
RANGE $2B48-$2B4A DW_DATA 1
RANGE $2B4A-$2B4C DW_DATA 1
RANGE $2B4C-$2B4E DW_DATA 1
RANGE $2B4E-$2B50 DW_DATA 1
RANGE $2B50-$2B52 DW_DATA 1
RANGE $2B52-$2B54 DW_DATA 1
RANGE $2B54-$2B56 DW_DATA 1
RANGE $2B56-$2B58 DW_DATA 1
RANGE $2B58-$2B5A DW_DATA 1
RANGE $2B5A-$2B5C DW_DATA 1
RANGE $2B5C-$2B5E DW_DATA 1
RANGE $2B5E-$2B60 DW_DATA 1
RANGE $2B60-$2B62 DW_DATA 1
RANGE $2B62-$2B64 DW_DATA 1
RANGE $2B64-$2B66 DW_DATA 1
RANGE $2B66-$2B68 DW_DATA 1
RANGE $2B68-$2B6A DW_DATA 1
RANGE $2B6A-$2B6C DW_DATA 1
RANGE $2B6C-$2B6E DW_DATA 1
RANGE $2B6E-$2B70 DW_DATA 1
RANGE $2B70-$2B72 DW_DATA 1
RANGE $2B72-$2B74 DW_DATA 1
RANGE $2B74-$2B76 DW_DATA 1
RANGE $2B76-$2B78 DW_DATA 1
RANGE $2B78-$2B7A DW_DATA 1
RANGE $2B7A-$2B7B DB_DATA 1
RANGE $2B7B-$2B7D DW_DATA 1
RANGE $2B7D-$2B7F DW_DATA 1
RANGE $2B7F-$2B81 DW_DATA 1
RANGE $2B81-$2B83 DW_DATA 1
RANGE $2B83-$2B85 DW_DATA 1
RANGE $2B85-$2B87 DW_DATA 1
RANGE $2B87-$2B89 DW_DATA 1
RANGE $2B89-$2B8B DW_DATA 1
RANGE $2B8B-$2B8D DW_DATA 1
RANGE $2B8D-$2B8F DW_DATA 1
RANGE $2B8F-$2B91 DW_DATA 1
RANGE $2B91-$2B93 DW_DATA 1
RANGE $2B93-$2B95 DW_DATA 1
RANGE $2B95-$2B97 DW_DATA 1
RANGE $2B97-$2B99 DW_DATA 1
RANGE $2B99-$2B9B DW_DATA 1
RANGE $2B9B-$2B9D DW_DATA 1
RANGE $2B9D-$2B9F DW_DATA 1
RANGE $2B9F-$2BA1 DW_DATA 1
RANGE $2BA1-$2BA3 DW_DATA 1
RANGE $2BA3-$2BA5 DW_DATA 1
RANGE $2BA5-$2BA7 DW_DATA 1
RANGE $2BA7-$2BA9 DW_DATA 1
RANGE $2BA9-$2BAB DW_DATA 1
RANGE $2BAB-$2BAD DW_DATA 1
RANGE $2BAD-$2BAF DW_DATA 1
RANGE $2BAF-$2BB1 DW_DATA 1
RANGE $2BB1-$2BB3 DW_DATA 1
RANGE $2BB3-$2BB5 DW_DATA 1
RANGE $2BB5-$2BB7 DW_DATA 1
RANGE $2BB7-$2BB9 DW_DATA 1
RANGE $2BB9-$2BBB DW_DATA 1
RANGE $2BBB-$2BBD DW_DATA 1
RANGE $2BBD-$2BBF DW_DATA 1
RANGE $2BBF-$2BC1 DW_DATA 1
RANGE $2BC1-$2BC3 DW_DATA 1
RANGE $2BC3-$2BC5 DW_DATA 1
RANGE $2BC5-$2BC7 DW_DATA 1
RANGE $2BC7-$2BC9 DW_DATA 1
RANGE $2BC9-$2BCB DW_DATA 1
RANGE $2BCB-$2BCD DW_DATA 1
RANGE $2BCD-$2BCF DW_DATA 1
RANGE $2BCF-$2BD1 DW_DATA 1
RANGE $2BD1-$2BD3 DW_DATA 1
RANGE $2BD3-$2BD5 DW_DATA 1
RANGE $2BD5-$2BD7 DW_DATA 1
RANGE $2BD7-$2BD9 DW_DATA 1
RANGE $2BD9-$2BDB DW_DATA 1
RANGE $2BDB-$2BDD DW_DATA 1
RANGE $2BDD-$2BDF DW_DATA 1
RANGE $2BDF-$2BE1 DW_DATA 1
RANGE $2BE1-$2BE3 DW_DATA 1
RANGE $2BE3-$2BE5 DW_DATA 1
RANGE $2BE5-$2BE7 DW_DATA 1
RANGE $2BE7-$2BE9 DW_DATA 1
RANGE $2BE9-$2BEB DW_DATA 1
RANGE $2BEB-$2BED DW_DATA 1
RANGE $2BED-$2BEF DW_DATA 1
RANGE $2BEF-$2BF1 DW_DATA 1
RANGE $2BF1-$2BF3 DW_DATA 1
RANGE $2BF3-$2BF5 DW_DATA 1
RANGE $2BF5-$2BF7 DW_DATA 1
RANGE $2BF7-$2BF9 DW_DATA 1
RANGE $2BF9-$2BFB DW_DATA 1
RANGE $2BFB-$2BFD DW_DATA 1
RANGE $2BFD-$2BFF DW_DATA 1
RANGE $2BFF-$2C01 DW_DATA 1
RANGE $2C01-$2C02 DB_DATA 1
RANGE $2C02-$2C04 DW_DATA 1
RANGE $2C04-$2C06 DW_DATA 1
RANGE $2C06-$2C08 DW_DATA 1
RANGE $2C08-$2C0A DW_DATA 1
RANGE $2C0A-$2C0C DW_DATA 1
RANGE $2C0C-$2C0E DW_DATA 1
RANGE $2C0E-$2C10 DW_DATA 1
RANGE $2C10-$2C12 DW_DATA 1
RANGE $2C12-$2C14 DW_DATA 1
RANGE $2C14-$2C16 DW_DATA 1
RANGE $2C16-$2C18 DW_DATA 1
RANGE $2C18-$2C1A DW_DATA 1
RANGE $2C1A-$2C1C DW_DATA 1
RANGE $2C1C-$2C1E DW_DATA 1
RANGE $2C1E-$2C20 DW_DATA 1
RANGE $2C20-$2C22 DW_DATA 1
RANGE $2C22-$2C24 DW_DATA 1
RANGE $2C24-$2C26 DW_DATA 1
RANGE $2C26-$2C28 DW_DATA 1
RANGE $2C28-$2C2A DW_DATA 1
RANGE $2C2A-$2C2C DW_DATA 1
RANGE $2C2C-$2C2E DW_DATA 1
RANGE $2C2E-$2C30 DW_DATA 1
RANGE $2C30-$2C32 DW_DATA 1
RANGE $2C32-$2C34 DW_DATA 1
RANGE $2C34-$2C36 DW_DATA 1
RANGE $2C36-$2C38 DW_DATA 1
RANGE $2C38-$2C3A DW_DATA 1
RANGE $2C3A-$2C3C DW_DATA 1
RANGE $2C3C-$2C3E DW_DATA 1
RANGE $2C3E-$2C40 DW_DATA 1
RANGE $2C40-$2C42 DW_DATA 1
RANGE $2C42-$2C44 DW_DATA 1
RANGE $2C44-$2C46 DW_DATA 1
RANGE $2C46-$2C48 DW_DATA 1
RANGE $2C48-$2C4A DW_DATA 1
RANGE $2C4A-$2C4C DW_DATA 1
RANGE $2C4C-$2C4E DW_DATA 1
RANGE $2C4E-$2C50 DW_DATA 1
RANGE $2C50-$2C52 DW_DATA 1
RANGE $2C52-$2C54 DW_DATA 1
RANGE $2C54-$2C56 DW_DATA 1
RANGE $2C56-$2C58 DW_DATA 1
RANGE $2C58-$2C5A DW_DATA 1
RANGE $2C5A-$2C5C DW_DATA 1
RANGE $2C5C-$2C5E DW_DATA 1
RANGE $2C5E-$2C60 DW_DATA 1
RANGE $2C60-$2C62 DW_DATA 1
RANGE $2C62-$2C64 DW_DATA 1
RANGE $2C64-$2C66 DW_DATA 1
RANGE $2C66-$2C68 DW_DATA 1
RANGE $2C68-$2C6A DW_DATA 1
RANGE $2C6A-$2C6C DW_DATA 1
RANGE $2C6C-$2C6E DW_DATA 1
RANGE $2C6E-$2C6F DB_DATA 1
RANGE $2C6F-$2C71 DW_DATA 1
RANGE $2C71-$2C73 DW_DATA 1
RANGE $2C73-$2C75 DW_DATA 1
RANGE $2C75-$2C77 DW_DATA 1
RANGE $2C77-$2C79 DW_DATA 1
RANGE $2C79-$2C7B DW_DATA 1
RANGE $2C7B-$2C7D DW_DATA 1
RANGE $2C7D-$2C7F DW_DATA 1
RANGE $2C7F-$2C81 DW_DATA 1
RANGE $2C81-$2C83 DW_DATA 1
RANGE $2C83-$2C85 DW_DATA 1
RANGE $2C85-$2C87 DW_DATA 1
RANGE $2C87-$2C89 DW_DATA 1
RANGE $2C89-$2C8B DW_DATA 1
RANGE $2C8B-$2C8D DW_DATA 1
RANGE $2C8D-$2C8F DW_DATA 1
RANGE $2C8F-$2C91 DW_DATA 1
RANGE $2C91-$2C93 DW_DATA 1
RANGE $2C93-$2C95 DW_DATA 1
RANGE $2C95-$2C97 DW_DATA 1
RANGE $2C97-$2C99 DW_DATA 1
RANGE $2C99-$2C9B DW_DATA 1
RANGE $2C9B-$2C9D DW_DATA 1
RANGE $2C9D-$2C9F DW_DATA 1
RANGE $2C9F-$2CA1 DW_DATA 1
RANGE $2CA1-$2CA3 DW_DATA 1
RANGE $2CA3-$2CA5 DW_DATA 1
RANGE $2CA5-$2CA7 DW_DATA 1
RANGE $2CA7-$2CA9 DW_DATA 1
RANGE $2CA9-$2CAB DW_DATA 1
RANGE $2CAB-$2CAD DW_DATA 1
RANGE $2CAD-$2CAF DW_DATA 1
RANGE $2CAF-$2CB1 DW_DATA 1
RANGE $2CB1-$2CB3 DW_DATA 1
RANGE $2CB3-$2CB5 DW_DATA 1
RANGE $2CB5-$2CB7 DW_DATA 1
RANGE $2CB7-$2CB9 DW_DATA 1
RANGE $2CB9-$2CBB DW_DATA 1
RANGE $2CBB-$2CBD DW_DATA 1
RANGE $2CBD-$2CBF DW_DATA 1
RANGE $2CBF-$2CC1 DW_DATA 1
RANGE $2CC1-$2CC3 DW_DATA 1
RANGE $2CC3-$2CC5 DW_DATA 1
RANGE $2CC5-$2CC7 DW_DATA 1
RANGE $2CC7-$2CC9 DW_DATA 1
RANGE $2CC9-$2CCB DW_DATA 1
RANGE $2CCB-$2CCD DW_DATA 1
RANGE $2CCD-$2CCF DW_DATA 1
RANGE $2CCF-$2CD1 DW_DATA 1
RANGE $2CD1-$2CD3 DW_DATA 1
RANGE $2CD3-$2CD5 DW_DATA 1
RANGE $2CD5-$2CD7 DW_DATA 1
RANGE $2CD7-$2CD9 DW_DATA 1
RANGE $2CD9-$2CDB DW_DATA 1
RANGE $2CDB-$2CDD DW_DATA 1
RANGE $2CDD-$2CDF DW_DATA 1
RANGE $2CDF-$2CE1 DW_DATA 1
RANGE $2CE1-$2CE3 DW_DATA 1
RANGE $2CE3-$2CE5 DW_DATA 1
RANGE $2CE5-$2CE7 DW_DATA 1
RANGE $2CE7-$2CE9 DW_DATA 1
RANGE $2CE9-$2CEB DW_DATA 1
RANGE $2CEB-$2CED DW_DATA 1
RANGE $2CED-$2CEF DW_DATA 1
RANGE $2CEF-$2CF1 DW_DATA 1
RANGE $2CF1-$2CF3 DW_DATA 1
RANGE $2CF3-$2CF5 DW_DATA 1
RANGE $2CF5-$2CF7 DW_DATA 1
RANGE $2CF7-$2CF9 DW_DATA 1
RANGE $2CF9-$2CFB DW_DATA 1
RANGE $2CFB-$2CFD DW_DATA 1
RANGE $2CFD-$2CFF DW_DATA 1
RANGE $2CFF-$2D01 DW_DATA 1
RANGE $2D01-$2D03 DW_DATA 1
RANGE $2D03-$2D05 DW_DATA 1
RANGE $2D05-$2D07 DW_DATA 1
RANGE $2D07-$2D09 DW_DATA 1
RANGE $2D09-$2D0B DW_DATA 1
RANGE $2D0B-$2D0D DW_DATA 1
RANGE $2D0D-$2D0F DW_DATA 1
RANGE $2D0F-$2D11 DW_DATA 1
RANGE $2D11-$2D13 DW_DATA 1
RANGE $2D13-$2D15 DW_DATA 1
RANGE $2D15-$2D17 DW_DATA 1
RANGE $2D17-$2D19 DW_DATA 1
RANGE $2D19-$2D1B DW_DATA 1
RANGE $2D1B-$2D1D DW_DATA 1
RANGE $2D1D-$2D1F DW_DATA 1
RANGE $2D1F-$2D21 DW_DATA 1
RANGE $2D21-$2D23 DW_DATA 1
RANGE $2D23-$2D25 DW_DATA 1
RANGE $2D25-$2D27 DW_DATA 1
RANGE $2D27-$2D29 DW_DATA 1
RANGE $2D29-$2D2B DW_DATA 1
RANGE $2D2B-$2D2D DW_DATA 1
RANGE $2D2D-$2D2F DW_DATA 1
RANGE $2D2F-$2D31 DW_DATA 1
RANGE $2D31-$2D33 DW_DATA 1
RANGE $2D33-$2D35 DW_DATA 1
RANGE $2D35-$2D37 DW_DATA 1
RANGE $2D37-$2D39 DW_DATA 1
RANGE $2D39-$2D3B DW_DATA 1
RANGE $2D3B-$2D3D DW_DATA 1
RANGE $2D3D-$2D3F DW_DATA 1
RANGE $2D3F-$2D41 DW_DATA 1
RANGE $2D41-$2D43 DW_DATA 1
RANGE $2D43-$2D45 DW_DATA 1
RANGE $2D45-$2D47 DW_DATA 1
RANGE $2D47-$2D49 DW_DATA 1
RANGE $2D49-$2D4B DW_DATA 1
RANGE $2D4B-$2D4D DW_DATA 1
RANGE $2D4D-$2D4F DW_DATA 1
RANGE $2D4F-$2D51 DW_DATA 1
RANGE $2D51-$2D53 DW_DATA 1
RANGE $2D53-$2D55 DW_DATA 1
RANGE $2D55-$2D57 DW_DATA 1
RANGE $2D57-$2D59 DW_DATA 1
RANGE $2D59-$2D5B DW_DATA 1
RANGE $2D5B-$2D5D DW_DATA 1
RANGE $2D5D-$2D5F DW_DATA 1
RANGE $2D5F-$2D61 DW_DATA 1
RANGE $2D61-$2D63 DW_DATA 1
RANGE $2D63-$2D65 DW_DATA 1
RANGE $2D65-$2D67 DW_DATA 1
RANGE $2D67-$2D69 DW_DATA 1
RANGE $2D69-$2D6B DW_DATA 1
RANGE $2D6B-$2D6D DW_DATA 1
RANGE $2D6D-$2D6F DW_DATA 1
RANGE $2D6F-$2D71 DW_DATA 1
RANGE $2D71-$2D73 DW_DATA 1
RANGE $2D73-$2D75 DW_DATA 1
RANGE $2D75-$2D77 DW_DATA 1
RANGE $2D77-$2D79 DW_DATA 1
RANGE $2D79-$2D7B DW_DATA 1
RANGE $2D7B-$2D7D DW_DATA 1
RANGE $2D7D-$2D7F DW_DATA 1
RANGE $2D7F-$2D81 DW_DATA 1
RANGE $2D81-$2D83 DW_DATA 1
RANGE $2D83-$2D85 DW_DATA 1
RANGE $2D85-$2D87 DW_DATA 1
RANGE $2D87-$2D89 DW_DATA 1
RANGE $2D89-$2D8B DW_DATA 1
RANGE $2D8B-$2D8D DW_DATA 1
RANGE $2D8D-$2D8F DW_DATA 1
RANGE $2D8F-$2D91 DW_DATA 1
RANGE $2D91-$2D93 DW_DATA 1
RANGE $2D93-$2D95 DW_DATA 1
RANGE $2D95-$2D97 DW_DATA 1
RANGE $2D97-$2D99 DW_DATA 1
RANGE $2D99-$2D9B DW_DATA 1
RANGE $2D9B-$2D9D DW_DATA 1
RANGE $2D9D-$2D9F DW_DATA 1
RANGE $2D9F-$2DA1 DW_DATA 1
RANGE $2DA1-$2DA3 DW_DATA 1
RANGE $2DA3-$2DA5 DW_DATA 1
RANGE $2DA5-$2DA7 DW_DATA 1
RANGE $2DA7-$2DA9 DW_DATA 1
RANGE $2DA9-$2DAB DW_DATA 1
RANGE $2DAB-$2DAD DW_DATA 1
RANGE $2DAD-$2DAF DW_DATA 1
RANGE $2DAF-$2DB1 DW_DATA 1
RANGE $2DB1-$2DB3 DW_DATA 1
RANGE $2DB3-$2DB5 DW_DATA 1
RANGE $2DB5-$2DB7 DW_DATA 1
RANGE $2DB7-$2DB9 DW_DATA 1
RANGE $2DB9-$2DBB DW_DATA 1
RANGE $2DBB-$2DBD DW_DATA 1
RANGE $2DBD-$2DBF DW_DATA 1
RANGE $2DBF-$2DC1 DW_DATA 1
RANGE $2DC1-$2DC3 DW_DATA 1
RANGE $2DC3-$2DC5 DW_DATA 1
RANGE $2DC5-$2DC7 DW_DATA 1
RANGE $2DC7-$2DC9 DW_DATA 1
RANGE $2DC9-$2DCA DB_DATA 1
RANGE $2DCA-$2DCC DB_DATA 2
RANGE $2DCC-$2DCE DB_DATA 2
RANGE $2DCE-$2DD0 DB_DATA 2
RANGE $2DD0-$2DD2 DB_DATA 2
RANGE $2DD2-$2DD4 DB_DATA 2
RANGE $2DD4-$2DD6 DB_DATA 2
RANGE $2DD6-$2DD8 DB_DATA 2
RANGE $2DD8-$2DDA DB_DATA 2
RANGE $2DDA-$2DDC DB_DATA 2
RANGE $2DDC-$2DDE DB_DATA 2
RANGE $2DDE-$2DE0 DB_DATA 2
RANGE $2DE0-$2DE2 DB_DATA 2
RANGE $2DE2-$2DE3 DB_DATA 1
RANGE $2DE3-$2DE5 DB_DATA 2
RANGE $2DE5-$2DE7 DB_DATA 2
RANGE $2DE7-$2DE9 DB_DATA 2
RANGE $2DE9-$2DEB DB_DATA 2
RANGE $2DEB-$2DED DB_DATA 2
RANGE $2DED-$2DEF DB_DATA 2
RANGE $2DEF-$2DF1 DB_DATA 2
RANGE $2DF1-$2DF3 DB_DATA 2
RANGE $2DF3-$2DF4 DB_DATA 1
RANGE $2DF4-$2DF6 DB_DATA 2
RANGE $2DF6-$2DF8 DB_DATA 2
RANGE $2DF8-$2DFA DB_DATA 2
RANGE $2DFA-$2DFC DB_DATA 2
RANGE $2DFC-$2DFE DB_DATA 2
RANGE $2DFE-$2E00 DB_DATA 2
RANGE $2E00-$2E02 DB_DATA 2
RANGE $2E02-$2E04 DB_DATA 2
RANGE $2E04-$2E06 DB_DATA 2
RANGE $2E06-$2E08 DB_DATA 2
RANGE $2E08-$2E09 DB_DATA 1
RANGE $2E09-$2E0B DB_DATA 2
RANGE $2E0B-$2E0D DB_DATA 2
RANGE $2E0D-$2E0F DB_DATA 2
RANGE $2E0F-$2E11 DB_DATA 2
RANGE $2E11-$2E13 DB_DATA 2
RANGE $2E13-$2E15 DB_DATA 2
RANGE $2E15-$2E17 DB_DATA 2
RANGE $2E17-$2E19 DB_DATA 2
RANGE $2E19-$2E1B DB_DATA 2
RANGE $2E1B-$2E1D DB_DATA 2
RANGE $2E1D-$2E1E DB_DATA 1
RANGE $2E1E-$2E20 DB_DATA 2
RANGE $2E20-$2E22 DB_DATA 2
RANGE $2E22-$2E24 DB_DATA 2
RANGE $2E24-$2E26 DB_DATA 2
RANGE $2E26-$2E28 DB_DATA 2
RANGE $2E28-$2E2A DB_DATA 2
RANGE $2E2A-$2E2C DB_DATA 2
RANGE $2E2C-$2E2E DB_DATA 2
RANGE $2E2E-$2E30 DB_DATA 2
RANGE $2E30-$2E31 DB_DATA 1
RANGE $2E31-$2E33 DB_DATA 2
RANGE $2E33-$2E35 DB_DATA 2
RANGE $2E35-$2E37 DB_DATA 2
RANGE $2E37-$2E39 DB_DATA 2
RANGE $2E39-$2E3B DB_DATA 2
RANGE $2E3B-$2E3D DB_DATA 2
RANGE $2E3D-$2E3F DB_DATA 2
RANGE $2E3F-$2E41 DB_DATA 2
RANGE $2E41-$2E43 DB_DATA 2
RANGE $2E43-$2E45 DB_DATA 2
RANGE $2E45-$2E46 DB_DATA 1
RANGE $2E46-$2E48 DB_DATA 2
RANGE $2E48-$2E4A DW_DATA 1
RANGE $2E4A-$2E4C DW_DATA 1
RANGE $2E4C-$2E4D DB_DATA 1
RANGE $2E4D-$2E4E DB_DATA 1
RANGE $2E4E-$2E50 DW_DATA 1
RANGE $2E50-$2E51 DB_DATA 1
RANGE $2E51-$2E53 DW_DATA 1
RANGE $2E53-$2E55 DW_DATA 1
RANGE $2E55-$2E56 DB_DATA 1
RANGE $2E56-$2E57 DB_DATA 1
RANGE $2E57-$2E59 DW_DATA 1
RANGE $2E59-$2E5A DB_DATA 1
RANGE $2E5A-$2E5C DW_DATA 1
RANGE $2E5C-$2E5E DW_DATA 1
RANGE $2E5E-$2E5F DB_DATA 1
RANGE $2E5F-$2E60 DB_DATA 1
RANGE $2E60-$2E62 DW_DATA 1
RANGE $2E62-$2E63 DB_DATA 1
RANGE $2E63-$2E65 DW_DATA 1
RANGE $2E65-$2E67 DW_DATA 1
RANGE $2E67-$2E68 DB_DATA 1
RANGE $2E68-$2E69 DB_DATA 1
RANGE $2E69-$2E6B DW_DATA 1
RANGE $2E6B-$2E6C DB_DATA 1
RANGE $2E6C-$2E6E DW_DATA 1
RANGE $2E6E-$2E70 DW_DATA 1
RANGE $2E70-$2E71 DB_DATA 1
RANGE $2E71-$2E72 DB_DATA 1
RANGE $2E72-$2E74 DW_DATA 1
RANGE $2E74-$2E75 DB_DATA 1
RANGE $2E75-$2E77 DW_DATA 1
RANGE $2E77-$2E79 DW_DATA 1
RANGE $2E79-$2E7A DB_DATA 1
RANGE $2E7A-$2E7B DB_DATA 1
RANGE $2E7B-$2E7D DW_DATA 1
RANGE $2E7D-$2E7E DB_DATA 1
RANGE $2E7E-$2E7F DB_DATA 1
RANGE $2E7F-$2E81 DB_DATA 2
RANGE $2E81-$2E83 DB_DATA 2
RANGE $2E83-$2E85 DB_DATA 2
RANGE $2E85-$2E87 DB_DATA 2
RANGE $2E87-$2E89 DB_DATA 2
RANGE $2E89-$2E8B DB_DATA 2
RANGE $2E8B-$2E8D DB_DATA 2
RANGE $2E8D-$2E8F DB_DATA 2
RANGE $2E8F-$2E91 DB_DATA 2
RANGE $2E91-$2E93 DB_DATA 2
RANGE $2E93-$2E95 DB_DATA 2
RANGE $2E95-$2E97 DB_DATA 2
RANGE $2E97-$2E99 DB_DATA 2
RANGE $2E99-$2E9B DB_DATA 2
RANGE $2E9B-$2E9D DB_DATA 2
RANGE $2E9D-$2E9F DB_DATA 2
RANGE $2E9F-$2EA1 DB_DATA 2
RANGE $2EA1-$2EA3 DB_DATA 2
RANGE $2EA3-$2EA5 DB_DATA 2
RANGE $2EA5-$2EA7 DB_DATA 2
RANGE $2EA7-$2EA9 DB_DATA 2
RANGE $2EA9-$2EAA DB_DATA 1
RANGE $2EAA-$2EAB DB_DATA 1
RANGE $2EAB-$2EAC DB_DATA 1
RANGE $2EAC-$2EAD DB_DATA 1
RANGE $2EAD-$2EAE DB_DATA 1
RANGE $2EAE-$2EAF DB_DATA 1
RANGE $2EAF-$2EB0 DB_DATA 1
RANGE $2EB0-$2EB1 DB_DATA 1
RANGE $2EB1-$2EB3 DW_DATA 1
RANGE $2EB3-$2EB5 DW_DATA 1
RANGE $2EB5-$2EB7 DW_DATA 1
RANGE $2EB7-$2EB9 DW_DATA 1
RANGE $2EB9-$2EBB DW_DATA 1
RANGE $2EBB-$2EBD DW_DATA 1
RANGE $2EBD-$2EBF DW_DATA 1
RANGE $2EBF-$2EC1 DW_DATA 1
RANGE $2EC1-$2EC3 DW_DATA 1
RANGE $2EC3-$2EC5 DB_DATA 2
RANGE $2EC5-$2EC7 DB_DATA 2
RANGE $2EC7-$2EC9 DB_DATA 2
RANGE $2EC9-$2ECB DB_DATA 2
RANGE $2ECB-$2ECD DB_DATA 2
RANGE $2ECD-$2ECF DB_DATA 2
RANGE $2ECF-$2ED1 DB_DATA 2
RANGE $2ED1-$2ED3 DB_DATA 2
RANGE $2ED3-$2ED5 DB_DATA 2
RANGE $2ED5-$2ED7 DB_DATA 2
RANGE $2ED7-$2ED9 DB_DATA 2
RANGE $2ED9-$2EDB DB_DATA 2
RANGE $2EDB-$2EDD DB_DATA 2
RANGE $2EDD-$2EDF DB_DATA 2
RANGE $2EDF-$2EE1 DB_DATA 2
RANGE $2EE1-$2EE3 DB_DATA 2
RANGE $2EE3-$2EE5 DB_DATA 2
RANGE $2EE5-$2EE7 DB_DATA 2
RANGE $2EE7-$2EE9 DB_DATA 2
RANGE $2EE9-$2EEB DW_DATA 1
RANGE $2EEB-$2EED DB_DATA 2
RANGE $2EED-$2EEF DB_DATA 2
RANGE $2EEF-$2EF1 DB_DATA 2
RANGE $2EF1-$2EF3 DB_DATA 2
RANGE $2EF3-$2EF5 DB_DATA 2
RANGE $2EF5-$2EF7 DB_DATA 2
RANGE $2EF7-$2EF9 DB_DATA 2
RANGE $2EF9-$2EFB DB_DATA 2
RANGE $2EFB-$2EFD DB_DATA 2
RANGE $2EFD-$2EFF DB_DATA 2
RANGE $2EFF-$2F01 DB_DATA 2
RANGE $2F01-$2F03 DB_DATA 2
RANGE $2F03-$2F05 DB_DATA 2
RANGE $2F05-$2F07 DB_DATA 2
RANGE $2F07-$2F09 DB_DATA 2
RANGE $2F09-$2F0B DB_DATA 2
RANGE $2F0B-$2F0D DB_DATA 2
RANGE $2F0D-$2F0F DB_DATA 2
RANGE $2F0F-$2F11 DB_DATA 2
RANGE $2F11-$2F13 DW_DATA 1
RANGE $2F13-$2F15 DB_DATA 2
RANGE $2F15-$2F17 DB_DATA 2
RANGE $2F17-$2F19 DB_DATA 2
RANGE $2F19-$2F1B DB_DATA 2
RANGE $2F1B-$2F1D DB_DATA 2
RANGE $2F1D-$2F1F DB_DATA 2
RANGE $2F1F-$2F21 DB_DATA 2
RANGE $2F21-$2F23 DB_DATA 2
RANGE $2F23-$2F25 DB_DATA 2
RANGE $2F25-$2F27 DB_DATA 2
RANGE $2F27-$2F29 DB_DATA 2
RANGE $2F29-$2F2B DB_DATA 2
RANGE $2F2B-$2F2D DB_DATA 2
RANGE $2F2D-$2F2F DB_DATA 2
RANGE $2F2F-$2F31 DB_DATA 2
RANGE $2F31-$2F33 DB_DATA 2
RANGE $2F33-$2F35 DB_DATA 2
RANGE $2F35-$2F37 DB_DATA 2
RANGE $2F37-$2F39 DB_DATA 2
RANGE $2F39-$2F3B DW_DATA 1
RANGE $2F3B-$2F3D DB_DATA 2
RANGE $2F3D-$2F3F DB_DATA 2
RANGE $2F3F-$2F41 DB_DATA 2
RANGE $2F41-$2F43 DB_DATA 2
RANGE $2F43-$2F45 DB_DATA 2
RANGE $2F45-$2F47 DB_DATA 2
RANGE $2F47-$2F49 DB_DATA 2
RANGE $2F49-$2F4B DB_DATA 2
RANGE $2F4B-$2F4D DB_DATA 2
RANGE $2F4D-$2F4F DB_DATA 2
RANGE $2F4F-$2F51 DB_DATA 2
RANGE $2F51-$2F53 DB_DATA 2
RANGE $2F53-$2F55 DB_DATA 2
RANGE $2F55-$2F57 DB_DATA 2
RANGE $2F57-$2F59 DB_DATA 2
RANGE $2F59-$2F5B DB_DATA 2
RANGE $2F5B-$2F5D DB_DATA 2
RANGE $2F5D-$2F5F DB_DATA 2
RANGE $2F5F-$2F61 DB_DATA 2
RANGE $2F61-$2F63 DW_DATA 1
RANGE $2F63-$2F65 DB_DATA 2
RANGE $2F65-$2F67 DB_DATA 2
RANGE $2F67-$2F69 DB_DATA 2
RANGE $2F69-$2F6B DB_DATA 2
RANGE $2F6B-$2F6D DB_DATA 2
RANGE $2F6D-$2F6F DB_DATA 2
RANGE $2F6F-$2F71 DB_DATA 2
RANGE $2F71-$2F73 DB_DATA 2
RANGE $2F73-$2F75 DB_DATA 2
RANGE $2F75-$2F77 DB_DATA 2
RANGE $2F77-$2F79 DB_DATA 2
RANGE $2F79-$2F7B DB_DATA 2
RANGE $2F7B-$2F7D DB_DATA 2
RANGE $2F7D-$2F7F DB_DATA 2
RANGE $2F7F-$2F81 DB_DATA 2
RANGE $2F81-$2F83 DB_DATA 2
RANGE $2F83-$2F85 DB_DATA 2
RANGE $2F85-$2F87 DB_DATA 2
RANGE $2F87-$2F89 DB_DATA 2
RANGE $2F89-$2F8B DW_DATA 1
RANGE $2F8B-$2F8D DB_DATA 2
RANGE $2F8D-$2F8F DB_DATA 2
RANGE $2F8F-$2F91 DB_DATA 2
RANGE $2F91-$2F93 DB_DATA 2
RANGE $2F93-$2F95 DB_DATA 2
RANGE $2F95-$2F97 DB_DATA 2
RANGE $2F97-$2F99 DB_DATA 2
RANGE $2F99-$2F9B DB_DATA 2
RANGE $2F9B-$2F9D DB_DATA 2
RANGE $2F9D-$2F9F DB_DATA 2
RANGE $2F9F-$2FA1 DB_DATA 2
RANGE $2FA1-$2FA3 DB_DATA 2
RANGE $2FA3-$2FA5 DB_DATA 2
RANGE $2FA5-$2FA7 DB_DATA 2
RANGE $2FA7-$2FA9 DB_DATA 2
RANGE $2FA9-$2FAB DB_DATA 2
RANGE $2FAB-$2FAD DB_DATA 2
RANGE $2FAD-$2FAF DB_DATA 2
RANGE $2FAF-$2FB1 DB_DATA 2
RANGE $2FB1-$2FB3 DW_DATA 1
RANGE $2FB3-$2FB5 DW_DATA 1
RANGE $2FB5-$2FB7 DW_DATA 1
RANGE $2FB7-$2FB9 DW_DATA 1
RANGE $2FB9-$2FBB DW_DATA 1
RANGE $2FBB-$2FBD DW_DATA 1
RANGE $2FBD-$2FBF DW_DATA 1
RANGE $2FBF-$2FC1 DW_DATA 1
RANGE $2FC1-$2FC3 DW_DATA 1
RANGE $2FC3-$2FC5 DB_DATA 2
RANGE $2FC5-$2FC7 DB_DATA 2
RANGE $2FC7-$2FC9 DB_DATA 2
RANGE $2FC9-$2FCB DB_DATA 2
RANGE $2FCB-$2FCD DB_DATA 2
RANGE $2FCD-$2FCF DB_DATA 2
RANGE $2FCF-$2FD1 DB_DATA 2
RANGE $2FD1-$2FD3 DB_DATA 2
RANGE $2FD3-$2FD5 DB_DATA 2
RANGE $2FD5-$2FD7 DB_DATA 2
RANGE $2FD7-$2FD9 DB_DATA 2
RANGE $2FD9-$2FDB DB_DATA 2
RANGE $2FDB-$2FDD DB_DATA 2
RANGE $2FDD-$2FDF DB_DATA 2
RANGE $2FDF-$2FE1 DB_DATA 2
RANGE $2FE1-$2FE3 DB_DATA 2
RANGE $2FE3-$2FE5 DB_DATA 2
RANGE $2FE5-$2FE7 DB_DATA 2
RANGE $2FE7-$2FE9 DB_DATA 2
RANGE $2FE9-$2FEB DW_DATA 1
RANGE $2FEB-$2FED DB_DATA 2
RANGE $2FED-$2FEF DB_DATA 2
RANGE $2FEF-$2FF1 DB_DATA 2
RANGE $2FF1-$2FF3 DB_DATA 2
RANGE $2FF3-$2FF5 DB_DATA 2
RANGE $2FF5-$2FF7 DB_DATA 2
RANGE $2FF7-$2FF9 DB_DATA 2
RANGE $2FF9-$2FFB DB_DATA 2
RANGE $2FFB-$2FFD DB_DATA 2
RANGE $2FFD-$2FFF DB_DATA 2
RANGE $2FFF-$3001 DB_DATA 2
RANGE $3001-$3003 DB_DATA 2
RANGE $3003-$3005 DB_DATA 2
RANGE $3005-$3007 DB_DATA 2
RANGE $3007-$3009 DB_DATA 2
RANGE $3009-$300B DB_DATA 2
RANGE $300B-$300D DB_DATA 2
RANGE $300D-$300F DB_DATA 2
RANGE $300F-$3011 DB_DATA 2
RANGE $3011-$3013 DW_DATA 1
RANGE $3013-$3015 DB_DATA 2
RANGE $3015-$3017 DB_DATA 2
RANGE $3017-$3019 DB_DATA 2
RANGE $3019-$301B DB_DATA 2
RANGE $301B-$301D DB_DATA 2
RANGE $301D-$301F DB_DATA 2
RANGE $301F-$3021 DB_DATA 2
RANGE $3021-$3023 DB_DATA 2
RANGE $3023-$3025 DB_DATA 2
RANGE $3025-$3027 DB_DATA 2
RANGE $3027-$3029 DB_DATA 2
RANGE $3029-$302B DB_DATA 2
RANGE $302B-$302D DB_DATA 2
RANGE $302D-$302F DB_DATA 2
RANGE $302F-$3031 DB_DATA 2
RANGE $3031-$3033 DB_DATA 2
RANGE $3033-$3035 DB_DATA 2
RANGE $3035-$3037 DB_DATA 2
RANGE $3037-$3039 DB_DATA 2
RANGE $3039-$303B DW_DATA 1
RANGE $303B-$303D DB_DATA 2
RANGE $303D-$303F DB_DATA 2
RANGE $303F-$3041 DB_DATA 2
RANGE $3041-$3043 DB_DATA 2
RANGE $3043-$3045 DB_DATA 2
RANGE $3045-$3047 DB_DATA 2
RANGE $3047-$3049 DB_DATA 2
RANGE $3049-$304B DB_DATA 2
RANGE $304B-$304D DB_DATA 2
RANGE $304D-$304F DB_DATA 2
RANGE $304F-$3051 DB_DATA 2
RANGE $3051-$3053 DB_DATA 2
RANGE $3053-$3055 DB_DATA 2
RANGE $3055-$3057 DB_DATA 2
RANGE $3057-$3059 DB_DATA 2
RANGE $3059-$305B DB_DATA 2
RANGE $305B-$305D DB_DATA 2
RANGE $305D-$305F DB_DATA 2
RANGE $305F-$3061 DB_DATA 2
RANGE $3061-$3063 DW_DATA 1
RANGE $3063-$3065 DB_DATA 2
RANGE $3065-$3067 DB_DATA 2
RANGE $3067-$3069 DB_DATA 2
RANGE $3069-$306B DB_DATA 2
RANGE $306B-$306D DB_DATA 2
RANGE $306D-$306F DB_DATA 2
RANGE $306F-$3071 DB_DATA 2
RANGE $3071-$3073 DB_DATA 2
RANGE $3073-$3075 DB_DATA 2
RANGE $3075-$3077 DB_DATA 2
RANGE $3077-$3079 DB_DATA 2
RANGE $3079-$307B DB_DATA 2
RANGE $307B-$307D DB_DATA 2
RANGE $307D-$307F DB_DATA 2
RANGE $307F-$3081 DB_DATA 2
RANGE $3081-$3083 DB_DATA 2
RANGE $3083-$3085 DB_DATA 2
RANGE $3085-$3087 DB_DATA 2
RANGE $3087-$3089 DB_DATA 2
RANGE $3089-$308B DW_DATA 1
RANGE $308B-$308D DB_DATA 2
RANGE $308D-$308F DB_DATA 2
RANGE $308F-$3091 DB_DATA 2
RANGE $3091-$3093 DB_DATA 2
RANGE $3093-$3095 DB_DATA 2
RANGE $3095-$3097 DB_DATA 2
RANGE $3097-$3099 DB_DATA 2
RANGE $3099-$309B DB_DATA 2
RANGE $309B-$309D DB_DATA 2
RANGE $309D-$309F DB_DATA 2
RANGE $309F-$30A1 DB_DATA 2
RANGE $30A1-$30A3 DB_DATA 2
RANGE $30A3-$30A5 DB_DATA 2
RANGE $30A5-$30A7 DB_DATA 2
RANGE $30A7-$30A9 DB_DATA 2
RANGE $30A9-$30AB DB_DATA 2
RANGE $30AB-$30AD DB_DATA 2
RANGE $30AD-$30AF DB_DATA 2
RANGE $30AF-$30B1 DB_DATA 2
RANGE $30B1-$30B3 DW_DATA 1
RANGE $30B3-$30B5 DW_DATA 1
RANGE $30B5-$30B7 DW_DATA 1
RANGE $30B7-$30B9 DW_DATA 1
RANGE $30B9-$30BB DW_DATA 1
RANGE $30BB-$30BD DW_DATA 1
RANGE $30BD-$30BF DW_DATA 1
RANGE $30BF-$30C1 DW_DATA 1
RANGE $30C1-$30C3 DW_DATA 1
RANGE $30C3-$30C5 DB_DATA 2
RANGE $30C5-$30C7 DB_DATA 2
RANGE $30C7-$30C9 DB_DATA 2
RANGE $30C9-$30CB DB_DATA 2
RANGE $30CB-$30CD DB_DATA 2
RANGE $30CD-$30CF DB_DATA 2
RANGE $30CF-$30D1 DB_DATA 2
RANGE $30D1-$30D3 DB_DATA 2
RANGE $30D3-$30D5 DB_DATA 2
RANGE $30D5-$30D7 DB_DATA 2
RANGE $30D7-$30D9 DB_DATA 2
RANGE $30D9-$30DB DB_DATA 2
RANGE $30DB-$30DD DB_DATA 2
RANGE $30DD-$30DF DB_DATA 2
RANGE $30DF-$30E1 DB_DATA 2
RANGE $30E1-$30E3 DB_DATA 2
RANGE $30E3-$30E5 DB_DATA 2
RANGE $30E5-$30E7 DB_DATA 2
RANGE $30E7-$30E9 DB_DATA 2
RANGE $30E9-$30EB DW_DATA 1
RANGE $30EB-$30ED DB_DATA 2
RANGE $30ED-$30EF DB_DATA 2
RANGE $30EF-$30F1 DB_DATA 2
RANGE $30F1-$30F3 DB_DATA 2
RANGE $30F3-$30F5 DB_DATA 2
RANGE $30F5-$30F7 DB_DATA 2
RANGE $30F7-$30F9 DB_DATA 2
RANGE $30F9-$30FB DB_DATA 2
RANGE $30FB-$30FD DB_DATA 2
RANGE $30FD-$30FF DB_DATA 2
RANGE $30FF-$3101 DB_DATA 2
RANGE $3101-$3103 DB_DATA 2
RANGE $3103-$3105 DB_DATA 2
RANGE $3105-$3107 DB_DATA 2
RANGE $3107-$3109 DB_DATA 2
RANGE $3109-$310B DB_DATA 2
RANGE $310B-$310D DB_DATA 2
RANGE $310D-$310F DB_DATA 2
RANGE $310F-$3111 DB_DATA 2
RANGE $3111-$3113 DW_DATA 1
RANGE $3113-$3115 DB_DATA 2
RANGE $3115-$3117 DB_DATA 2
RANGE $3117-$3119 DB_DATA 2
RANGE $3119-$311B DB_DATA 2
RANGE $311B-$311D DB_DATA 2
RANGE $311D-$311F DB_DATA 2
RANGE $311F-$3121 DB_DATA 2
RANGE $3121-$3123 DB_DATA 2
RANGE $3123-$3125 DB_DATA 2
RANGE $3125-$3127 DB_DATA 2
RANGE $3127-$3129 DB_DATA 2
RANGE $3129-$312B DB_DATA 2
RANGE $312B-$312D DB_DATA 2
RANGE $312D-$312F DB_DATA 2
RANGE $312F-$3131 DB_DATA 2
RANGE $3131-$3133 DB_DATA 2
RANGE $3133-$3135 DB_DATA 2
RANGE $3135-$3137 DB_DATA 2
RANGE $3137-$3139 DB_DATA 2
RANGE $3139-$313B DW_DATA 1
RANGE $313B-$313D DB_DATA 2
RANGE $313D-$313F DB_DATA 2
RANGE $313F-$3141 DB_DATA 2
RANGE $3141-$3143 DB_DATA 2
RANGE $3143-$3145 DB_DATA 2
RANGE $3145-$3147 DB_DATA 2
RANGE $3147-$3149 DB_DATA 2
RANGE $3149-$314B DB_DATA 2
RANGE $314B-$314D DB_DATA 2
RANGE $314D-$314F DB_DATA 2
RANGE $314F-$3151 DB_DATA 2
RANGE $3151-$3153 DB_DATA 2
RANGE $3153-$3155 DB_DATA 2
RANGE $3155-$3157 DB_DATA 2
RANGE $3157-$3159 DB_DATA 2
RANGE $3159-$315B DB_DATA 2
RANGE $315B-$315D DB_DATA 2
RANGE $315D-$315F DB_DATA 2
RANGE $315F-$3161 DB_DATA 2
RANGE $3161-$3163 DW_DATA 1
RANGE $3163-$3165 DB_DATA 2
RANGE $3165-$3167 DB_DATA 2
RANGE $3167-$3169 DB_DATA 2
RANGE $3169-$316B DB_DATA 2
RANGE $316B-$316D DB_DATA 2
RANGE $316D-$316F DB_DATA 2
RANGE $316F-$3171 DB_DATA 2
RANGE $3171-$3173 DB_DATA 2
RANGE $3173-$3175 DB_DATA 2
RANGE $3175-$3177 DB_DATA 2
RANGE $3177-$3179 DB_DATA 2
RANGE $3179-$317B DB_DATA 2
RANGE $317B-$317D DB_DATA 2
RANGE $317D-$317F DB_DATA 2
RANGE $317F-$3181 DB_DATA 2
RANGE $3181-$3183 DB_DATA 2
RANGE $3183-$3185 DB_DATA 2
RANGE $3185-$3187 DB_DATA 2
RANGE $3187-$3189 DB_DATA 2
RANGE $3189-$318B DW_DATA 1
RANGE $318B-$318D DB_DATA 2
RANGE $318D-$318F DB_DATA 2
RANGE $318F-$3191 DB_DATA 2
RANGE $3191-$3193 DB_DATA 2
RANGE $3193-$3195 DB_DATA 2
RANGE $3195-$3197 DB_DATA 2
RANGE $3197-$3199 DB_DATA 2
RANGE $3199-$319B DB_DATA 2
RANGE $319B-$319D DB_DATA 2
RANGE $319D-$319F DB_DATA 2
RANGE $319F-$31A1 DB_DATA 2
RANGE $31A1-$31A3 DB_DATA 2
RANGE $31A3-$31A5 DB_DATA 2
RANGE $31A5-$31A7 DB_DATA 2
RANGE $31A7-$31A9 DB_DATA 2
RANGE $31A9-$31AB DB_DATA 2
RANGE $31AB-$31AD DB_DATA 2
RANGE $31AD-$31AF DB_DATA 2
RANGE $31AF-$31B1 DB_DATA 2
RANGE $31B1-$31B3 DW_DATA 1
RANGE $31B3-$31B5 DW_DATA 1
RANGE $31B5-$31B7 DW_DATA 1
RANGE $31B7-$31B9 DW_DATA 1
RANGE $31B9-$31BB DW_DATA 1
RANGE $31BB-$31BD DW_DATA 1
RANGE $31BD-$31BF DW_DATA 1
RANGE $31BF-$31C1 DW_DATA 1
RANGE $31C1-$31C3 DW_DATA 1
RANGE $31C3-$31C5 DB_DATA 2
RANGE $31C5-$31C7 DB_DATA 2
RANGE $31C7-$31C9 DB_DATA 2
RANGE $31C9-$31CB DB_DATA 2
RANGE $31CB-$31CD DB_DATA 2
RANGE $31CD-$31CF DB_DATA 2
RANGE $31CF-$31D1 DB_DATA 2
RANGE $31D1-$31D3 DB_DATA 2
RANGE $31D3-$31D5 DB_DATA 2
RANGE $31D5-$31D7 DB_DATA 2
RANGE $31D7-$31D9 DB_DATA 2
RANGE $31D9-$31DB DB_DATA 2
RANGE $31DB-$31DD DB_DATA 2
RANGE $31DD-$31DF DB_DATA 2
RANGE $31DF-$31E1 DB_DATA 2
RANGE $31E1-$31E3 DB_DATA 2
RANGE $31E3-$31E5 DB_DATA 2
RANGE $31E5-$31E7 DB_DATA 2
RANGE $31E7-$31E9 DB_DATA 2
RANGE $31E9-$31EB DW_DATA 1
RANGE $31EB-$31ED DB_DATA 2
RANGE $31ED-$31EF DB_DATA 2
RANGE $31EF-$31F1 DB_DATA 2
RANGE $31F1-$31F3 DB_DATA 2
RANGE $31F3-$31F5 DB_DATA 2
RANGE $31F5-$31F7 DB_DATA 2
RANGE $31F7-$31F9 DB_DATA 2
RANGE $31F9-$31FB DB_DATA 2
RANGE $31FB-$31FD DB_DATA 2
RANGE $31FD-$31FF DB_DATA 2
RANGE $31FF-$3201 DB_DATA 2
RANGE $3201-$3203 DB_DATA 2
RANGE $3203-$3205 DB_DATA 2
RANGE $3205-$3207 DB_DATA 2
RANGE $3207-$3209 DB_DATA 2
RANGE $3209-$320B DB_DATA 2
RANGE $320B-$320D DB_DATA 2
RANGE $320D-$320F DB_DATA 2
RANGE $320F-$3211 DB_DATA 2
RANGE $3211-$3213 DW_DATA 1
RANGE $3213-$3215 DB_DATA 2
RANGE $3215-$3217 DB_DATA 2
RANGE $3217-$3219 DB_DATA 2
RANGE $3219-$321B DB_DATA 2
RANGE $321B-$321D DB_DATA 2
RANGE $321D-$321F DB_DATA 2
RANGE $321F-$3221 DB_DATA 2
RANGE $3221-$3223 DB_DATA 2
RANGE $3223-$3225 DB_DATA 2
RANGE $3225-$3227 DB_DATA 2
RANGE $3227-$3229 DB_DATA 2
RANGE $3229-$322B DB_DATA 2
RANGE $322B-$322D DB_DATA 2
RANGE $322D-$322F DB_DATA 2
RANGE $322F-$3231 DB_DATA 2
RANGE $3231-$3233 DB_DATA 2
RANGE $3233-$3235 DB_DATA 2
RANGE $3235-$3237 DB_DATA 2
RANGE $3237-$3239 DB_DATA 2
RANGE $3239-$323B DW_DATA 1
RANGE $323B-$323D DB_DATA 2
RANGE $323D-$323F DB_DATA 2
RANGE $323F-$3241 DB_DATA 2
RANGE $3241-$3243 DB_DATA 2
RANGE $3243-$3245 DB_DATA 2
RANGE $3245-$3247 DB_DATA 2
RANGE $3247-$3249 DB_DATA 2
RANGE $3249-$324B DB_DATA 2
RANGE $324B-$324D DB_DATA 2
RANGE $324D-$324F DB_DATA 2
RANGE $324F-$3251 DB_DATA 2
RANGE $3251-$3253 DB_DATA 2
RANGE $3253-$3255 DB_DATA 2
RANGE $3255-$3257 DB_DATA 2
RANGE $3257-$3259 DB_DATA 2
RANGE $3259-$325B DB_DATA 2
RANGE $325B-$325D DB_DATA 2
RANGE $325D-$325F DB_DATA 2
RANGE $325F-$3261 DB_DATA 2
RANGE $3261-$3263 DW_DATA 1
RANGE $3263-$3265 DB_DATA 2
RANGE $3265-$3267 DB_DATA 2
RANGE $3267-$3269 DB_DATA 2
RANGE $3269-$326B DB_DATA 2
RANGE $326B-$326D DB_DATA 2
RANGE $326D-$326F DB_DATA 2
RANGE $326F-$3271 DB_DATA 2
RANGE $3271-$3273 DB_DATA 2
RANGE $3273-$3275 DB_DATA 2
RANGE $3275-$3277 DB_DATA 2
RANGE $3277-$3279 DB_DATA 2
RANGE $3279-$327B DB_DATA 2
RANGE $327B-$327D DB_DATA 2
RANGE $327D-$327F DB_DATA 2
RANGE $327F-$3281 DB_DATA 2
RANGE $3281-$3283 DB_DATA 2
RANGE $3283-$3285 DB_DATA 2
RANGE $3285-$3287 DB_DATA 2
RANGE $3287-$3289 DB_DATA 2
RANGE $3289-$328B DW_DATA 1
RANGE $328B-$328D DB_DATA 2
RANGE $328D-$328F DB_DATA 2
RANGE $328F-$3291 DB_DATA 2
RANGE $3291-$3293 DB_DATA 2
RANGE $3293-$3295 DB_DATA 2
RANGE $3295-$3297 DB_DATA 2
RANGE $3297-$3299 DB_DATA 2
RANGE $3299-$329B DB_DATA 2
RANGE $329B-$329D DB_DATA 2
RANGE $329D-$329F DB_DATA 2
RANGE $329F-$32A1 DB_DATA 2
RANGE $32A1-$32A3 DB_DATA 2
RANGE $32A3-$32A5 DB_DATA 2
RANGE $32A5-$32A7 DB_DATA 2
RANGE $32A7-$32A9 DB_DATA 2
RANGE $32A9-$32AB DB_DATA 2
RANGE $32AB-$32AD DB_DATA 2
RANGE $32AD-$32AF DB_DATA 2
RANGE $32AF-$32B1 DB_DATA 2
RANGE $32B1-$32B3 DW_DATA 1
RANGE $32B3-$32B5 DB_DATA 2
RANGE $32B5-$32B7 DB_DATA 2
RANGE $32B7-$32B9 DB_DATA 2
RANGE $32B9-$32BB DB_DATA 2
RANGE $32BB-$32BD DB_DATA 2
RANGE $32BD-$32BF DB_DATA 2
RANGE $32BF-$32C1 DB_DATA 2
RANGE $32C1-$32C3 DB_DATA 2
RANGE $32C3-$32C4 DB_DATA 1
RANGE $32C4-$32C6 DW_DATA 1
RANGE $32C6-$32C7 DB_DATA 1
RANGE $32C7-$32C8 DB_DATA 1
RANGE $32C8-$32CA DW_DATA 1
RANGE $32CA-$32CB DB_DATA 1
RANGE $32CB-$32CC DB_DATA 1
RANGE $32CC-$32CD DB_DATA 1
RANGE $32CD-$32CE DB_DATA 1
RANGE $32CE-$32D0 DW_DATA 1
RANGE $32D0-$32D2 DB_DATA 2
RANGE $32D2-$32D4 DB_DATA 2
RANGE $32D4-$32D6 DB_DATA 2
RANGE $32D6-$32D8 DB_DATA 2
RANGE $32D8-$32DA DB_DATA 2
RANGE $32DA-$32DC DB_DATA 2
RANGE $32DC-$32DE DB_DATA 2
RANGE $32DE-$32E0 DB_DATA 2
RANGE $32E0-$32E1 DB_DATA 1
RANGE $32E1-$32E3 DW_DATA 1
RANGE $32E3-$32E4 DB_DATA 1
RANGE $32E4-$32E5 DB_DATA 1
RANGE $32E5-$32E7 DW_DATA 1
RANGE $32E7-$32E8 DB_DATA 1
RANGE $32E8-$32E9 DB_DATA 1
RANGE $32E9-$32EA DB_DATA 1
RANGE $32EA-$32EB DB_DATA 1
RANGE $32EB-$32ED DW_DATA 1
RANGE $32ED-$32EF DB_DATA 2
RANGE $32EF-$32F1 DB_DATA 2
RANGE $32F1-$32F3 DB_DATA 2
RANGE $32F3-$32F5 DB_DATA 2
RANGE $32F5-$32F7 DB_DATA 2
RANGE $32F7-$32F9 DB_DATA 2
RANGE $32F9-$32FB DB_DATA 2
RANGE $32FB-$32FD DB_DATA 2
RANGE $32FD-$32FE DB_DATA 1
RANGE $32FE-$3300 DW_DATA 1
RANGE $3300-$3301 DB_DATA 1
RANGE $3301-$3302 DB_DATA 1
RANGE $3302-$3304 DW_DATA 1
RANGE $3304-$3305 DB_DATA 1
RANGE $3305-$3306 DB_DATA 1
RANGE $3306-$3307 DB_DATA 1
RANGE $3307-$3308 DB_DATA 1
RANGE $3308-$3309 DB_DATA 1
RANGE $3309-$330B DW_DATA 1
RANGE $330B-$330C DB_DATA 1
RANGE $330C-$330D DB_DATA 1
RANGE $330D-$330F DW_DATA 1
RANGE $330F-$3310 DB_DATA 1
RANGE $3310-$3311 DB_DATA 1
RANGE $3311-$3312 DB_DATA 1
RANGE $3312-$3313 DB_DATA 1
RANGE $3313-$3315 DW_DATA 1
RANGE $3315-$3317 DB_DATA 2
RANGE $3317-$3319 DB_DATA 2
RANGE $3319-$331B DB_DATA 2
RANGE $331B-$331D DB_DATA 2
RANGE $331D-$331F DB_DATA 2
RANGE $331F-$3321 DB_DATA 2
RANGE $3321-$3323 DB_DATA 2
RANGE $3323-$3325 DB_DATA 2
RANGE $3325-$3327 DB_DATA 2
RANGE $3327-$3329 DB_DATA 2
RANGE $3329-$332B DB_DATA 2
RANGE $332B-$332D DB_DATA 2
RANGE $332D-$332F DB_DATA 2
RANGE $332F-$3331 DB_DATA 2
RANGE $3331-$3333 DB_DATA 2
RANGE $3333-$3335 DB_DATA 2
RANGE $3335-$3337 DW_DATA 1
RANGE $3337-$3339 DB_DATA 2
RANGE $3339-$333B DB_DATA 2
RANGE $333B-$333D DB_DATA 2
RANGE $333D-$333F DB_DATA 2
RANGE $333F-$3341 DB_DATA 2
RANGE $3341-$3343 DB_DATA 2
RANGE $3343-$3345 DB_DATA 2
RANGE $3345-$3347 DB_DATA 2
RANGE $3347-$3349 DB_DATA 2
RANGE $3349-$334B DB_DATA 2
RANGE $334B-$334D DB_DATA 2
RANGE $334D-$334F DB_DATA 2
RANGE $334F-$3351 DB_DATA 2
RANGE $3351-$3353 DB_DATA 2
RANGE $3353-$3355 DB_DATA 2
RANGE $3355-$3357 DB_DATA 2
RANGE $3357-$3359 DW_DATA 1
RANGE $3359-$335B DB_DATA 2
RANGE $335B-$335D DB_DATA 2
RANGE $335D-$335F DB_DATA 2
RANGE $335F-$3361 DB_DATA 2
RANGE $3361-$3363 DB_DATA 2
RANGE $3363-$3365 DB_DATA 2
RANGE $3365-$3367 DB_DATA 2
RANGE $3367-$3369 DB_DATA 2
RANGE $3369-$336B DB_DATA 2
RANGE $336B-$336D DB_DATA 2
RANGE $336D-$336F DB_DATA 2
RANGE $336F-$3371 DB_DATA 2
RANGE $3371-$3373 DB_DATA 2
RANGE $3373-$3375 DB_DATA 2
RANGE $3375-$3377 DB_DATA 2
RANGE $3377-$3379 DB_DATA 2
RANGE $3379-$337B DW_DATA 1
RANGE $337B-$337D DB_DATA 2
RANGE $337D-$337F DB_DATA 2
RANGE $337F-$3381 DB_DATA 2
RANGE $3381-$3383 DB_DATA 2
RANGE $3383-$3385 DB_DATA 2
RANGE $3385-$3387 DB_DATA 2
RANGE $3387-$3389 DB_DATA 2
RANGE $3389-$338B DB_DATA 2
RANGE $338B-$338D DB_DATA 2
RANGE $338D-$338F DB_DATA 2
RANGE $338F-$3391 DB_DATA 2
RANGE $3391-$3393 DB_DATA 2
RANGE $3393-$3395 DB_DATA 2
RANGE $3395-$3397 DB_DATA 2
RANGE $3397-$3399 DB_DATA 2
RANGE $3399-$339B DB_DATA 2
RANGE $339B-$339D DW_DATA 1
RANGE $339D-$339F DB_DATA 2
RANGE $339F-$33A1 DB_DATA 2
RANGE $33A1-$33A3 DB_DATA 2
RANGE $33A3-$33A5 DB_DATA 2
RANGE $33A5-$33A7 DB_DATA 2
RANGE $33A7-$33A9 DB_DATA 2
RANGE $33A9-$33AB DB_DATA 2
RANGE $33AB-$33AD DB_DATA 2
RANGE $33AD-$33AF DB_DATA 2
RANGE $33AF-$33B1 DB_DATA 2
RANGE $33B1-$33B3 DB_DATA 2
RANGE $33B3-$33B5 DB_DATA 2
RANGE $33B5-$33B7 DB_DATA 2
RANGE $33B7-$33B9 DB_DATA 2
RANGE $33B9-$33BB DB_DATA 2
RANGE $33BB-$33BD DB_DATA 2
RANGE $33BD-$33BF DW_DATA 1
RANGE $33BF-$33C1 DB_DATA 2
RANGE $33C1-$33C3 DB_DATA 2
RANGE $33C3-$33C5 DB_DATA 2
RANGE $33C5-$33C7 DB_DATA 2
RANGE $33C7-$33C9 DB_DATA 2
RANGE $33C9-$33CB DB_DATA 2
RANGE $33CB-$33CD DB_DATA 2
RANGE $33CD-$33CF DB_DATA 2
RANGE $33CF-$33D1 DB_DATA 2
RANGE $33D1-$33D3 DB_DATA 2
RANGE $33D3-$33D5 DB_DATA 2
RANGE $33D5-$33D7 DB_DATA 2
RANGE $33D7-$33D9 DB_DATA 2
RANGE $33D9-$33DB DB_DATA 2
RANGE $33DB-$33DD DB_DATA 2
RANGE $33DD-$33DF DB_DATA 2
RANGE $33DF-$33E1 DW_DATA 1
RANGE $33E1-$33E3 DB_DATA 2
RANGE $33E3-$33E5 DB_DATA 2
RANGE $33E5-$33E7 DB_DATA 2
RANGE $33E7-$33E9 DB_DATA 2
RANGE $33E9-$33EB DB_DATA 2
RANGE $33EB-$33ED DB_DATA 2
RANGE $33ED-$33EF DB_DATA 2
RANGE $33EF-$33F1 DB_DATA 2
RANGE $33F1-$33F3 DB_DATA 2
RANGE $33F3-$33F5 DB_DATA 2
RANGE $33F5-$33F7 DB_DATA 2
RANGE $33F7-$33F9 DB_DATA 2
RANGE $33F9-$33FB DB_DATA 2
RANGE $33FB-$33FD DB_DATA 2
RANGE $33FD-$33FF DB_DATA 2
RANGE $33FF-$3401 DB_DATA 2
RANGE $3401-$3403 DW_DATA 1
RANGE $3403-$3405 DB_DATA 2
RANGE $3405-$3407 DB_DATA 2
RANGE $3407-$3409 DB_DATA 2
RANGE $3409-$340B DB_DATA 2
RANGE $340B-$340D DB_DATA 2
RANGE $340D-$340F DB_DATA 2
RANGE $340F-$3411 DB_DATA 2
RANGE $3411-$3413 DB_DATA 2
RANGE $3413-$3415 DB_DATA 2
RANGE $3415-$3417 DB_DATA 2
RANGE $3417-$3419 DB_DATA 2
RANGE $3419-$341B DB_DATA 2
RANGE $341B-$341D DB_DATA 2
RANGE $341D-$341F DB_DATA 2
RANGE $341F-$3421 DB_DATA 2
RANGE $3421-$3423 DB_DATA 2
RANGE $3423-$3425 DW_DATA 1
RANGE $3425-$3427 DB_DATA 2
RANGE $3427-$3429 DB_DATA 2
RANGE $3429-$342B DB_DATA 2
RANGE $342B-$342D DB_DATA 2
RANGE $342D-$342F DB_DATA 2
RANGE $342F-$3431 DB_DATA 2
RANGE $3431-$3433 DB_DATA 2
RANGE $3433-$3435 DB_DATA 2
RANGE $3435-$3437 DB_DATA 2
RANGE $3437-$3439 DB_DATA 2
RANGE $3439-$343B DB_DATA 2
RANGE $343B-$343D DB_DATA 2
RANGE $343D-$343F DB_DATA 2
RANGE $343F-$3441 DB_DATA 2
RANGE $3441-$3443 DB_DATA 2
RANGE $3443-$3445 DB_DATA 2
RANGE $3445-$3447 DW_DATA 1
RANGE $3447-$3449 DB_DATA 2
RANGE $3449-$344B DB_DATA 2
RANGE $344B-$344D DB_DATA 2
RANGE $344D-$344F DB_DATA 2
RANGE $344F-$3451 DB_DATA 2
RANGE $3451-$3453 DB_DATA 2
RANGE $3453-$3455 DB_DATA 2
RANGE $3455-$3457 DB_DATA 2
RANGE $3457-$3459 DB_DATA 2
RANGE $3459-$345B DB_DATA 2
RANGE $345B-$345D DB_DATA 2
RANGE $345D-$345F DB_DATA 2
RANGE $345F-$3461 DB_DATA 2
RANGE $3461-$3463 DB_DATA 2
RANGE $3463-$3465 DB_DATA 2
RANGE $3465-$3467 DB_DATA 2
RANGE $3467-$3468 DB_DATA 1
RANGE $3468-$346A DW_DATA 1
RANGE $346A-$346B DB_DATA 1
RANGE $346B-$346C DB_DATA 1
RANGE $346C-$346E DW_DATA 1
RANGE $346E-$346F DB_DATA 1
RANGE $346F-$3470 DB_DATA 1
RANGE $3470-$3471 DB_DATA 1
RANGE $3471-$3472 DB_DATA 1
RANGE $3472-$3473 DB_DATA 1
RANGE $3473-$3475 DW_DATA 1
RANGE $3475-$3476 DB_DATA 1
RANGE $3476-$3477 DB_DATA 1
RANGE $3477-$3479 DW_DATA 1
RANGE $3479-$347A DB_DATA 1
RANGE $347A-$347B DB_DATA 1
RANGE $347B-$347C DB_DATA 1
RANGE $347C-$347D DB_DATA 1
RANGE $347D-$347E DB_DATA 1
RANGE $347E-$3480 DW_DATA 1
RANGE $3480-$3481 DB_DATA 1
RANGE $3481-$3482 DB_DATA 1
RANGE $3482-$3484 DW_DATA 1
RANGE $3484-$3485 DB_DATA 1
RANGE $3485-$3486 DB_DATA 1
RANGE $3486-$3487 DB_DATA 1
RANGE $3487-$3488 DB_DATA 1
RANGE $3488-$3489 DB_DATA 1
RANGE $3489-$348B DW_DATA 1
RANGE $348B-$348C DB_DATA 1
RANGE $348C-$348D DB_DATA 1
RANGE $348D-$348F DW_DATA 1
RANGE $348F-$3490 DB_DATA 1
RANGE $3490-$3491 DB_DATA 1
RANGE $3491-$3492 DB_DATA 1
RANGE $3492-$3493 DB_DATA 1
RANGE $3493-$3494 DB_DATA 1
RANGE $3494-$3496 DW_DATA 1
RANGE $3496-$3497 DB_DATA 1
RANGE $3497-$3498 DB_DATA 1
RANGE $3498-$349A DW_DATA 1
RANGE $349A-$349B DB_DATA 1
RANGE $349B-$349C DB_DATA 1
RANGE $349C-$349D DB_DATA 1
RANGE $349D-$349E DB_DATA 1
RANGE $349E-$349F DB_DATA 1
RANGE $349F-$34A1 DW_DATA 1
RANGE $34A1-$34A2 DB_DATA 1
RANGE $34A2-$34A3 DB_DATA 1
RANGE $34A3-$34A5 DW_DATA 1
RANGE $34A5-$34A6 DB_DATA 1
RANGE $34A6-$34A7 DB_DATA 1
RANGE $34A7-$34A8 DB_DATA 1
RANGE $34A8-$34A9 DB_DATA 1
RANGE $34A9-$34AA DB_DATA 1
RANGE $34AA-$34AC DW_DATA 1
RANGE $34AC-$34AD DB_DATA 1
RANGE $34AD-$34AE DB_DATA 1
RANGE $34AE-$34B0 DW_DATA 1
RANGE $34B0-$34B1 DB_DATA 1
RANGE $34B1-$34B2 DB_DATA 1
RANGE $34B2-$34B3 DB_DATA 1
RANGE $34B3-$34B4 DB_DATA 1
RANGE $34B4-$34B5 DB_DATA 1
RANGE $34B5-$34B7 DW_DATA 1
RANGE $34B7-$34B8 DB_DATA 1
RANGE $34B8-$34B9 DB_DATA 1
RANGE $34B9-$34BB DW_DATA 1
RANGE $34BB-$34BC DB_DATA 1
RANGE $34BC-$34BD DB_DATA 1
RANGE $34BD-$34BE DB_DATA 1
RANGE $34BE-$34BF DB_DATA 1
RANGE $34BF-$34C0 DB_DATA 1
RANGE $34C0-$34C2 DW_DATA 1
RANGE $34C2-$34C3 DB_DATA 1
RANGE $34C3-$34C4 DB_DATA 1
RANGE $34C4-$34C6 DW_DATA 1
RANGE $34C6-$34C7 DB_DATA 1
RANGE $34C7-$34C8 DB_DATA 1
RANGE $34C8-$34C9 DB_DATA 1
RANGE $34C9-$34CA DB_DATA 1
RANGE $34CA-$34CB DB_DATA 1
RANGE $34CB-$34CD DW_DATA 1
RANGE $34CD-$34CE DB_DATA 1
RANGE $34CE-$34CF DB_DATA 1
RANGE $34CF-$34D1 DW_DATA 1
RANGE $34D1-$34D2 DB_DATA 1
RANGE $34D2-$34D3 DB_DATA 1
RANGE $34D3-$34D4 DB_DATA 1
RANGE $34D4-$34D5 DB_DATA 1
RANGE $34D5-$34D7 DW_DATA 1
RANGE $34D7-$34D8 DB_DATA 1
RANGE $34D8-$34DA DW_DATA 1
RANGE $34DA-$34DB DB_DATA 1
RANGE $34DB-$34DC DB_DATA 1
RANGE $34DC-$34DE DW_DATA 1
RANGE $34DE-$34DF DB_DATA 1
RANGE $34DF-$34E1 DW_DATA 1
RANGE $34E1-$34E2 DB_DATA 1
RANGE $34E2-$34E3 DB_DATA 1
RANGE $34E3-$34E5 DW_DATA 1
RANGE $34E5-$34E6 DB_DATA 1
RANGE $34E6-$34E8 DW_DATA 1
RANGE $34E8-$34E9 DB_DATA 1
RANGE $34E9-$34EA DB_DATA 1
RANGE $34EA-$34EC DW_DATA 1
RANGE $34EC-$34ED DB_DATA 1
RANGE $34ED-$34EF DW_DATA 1
RANGE $34EF-$34F0 DB_DATA 1
RANGE $34F0-$34F1 DB_DATA 1
RANGE $34F1-$34F3 DW_DATA 1
RANGE $34F3-$34F4 DB_DATA 1
RANGE $34F4-$34F6 DW_DATA 1
RANGE $34F6-$34F7 DB_DATA 1
RANGE $34F7-$34F8 DB_DATA 1
RANGE $34F8-$34FA DW_DATA 1
RANGE $34FA-$34FB DB_DATA 1
RANGE $34FB-$34FD DW_DATA 1
RANGE $34FD-$34FE DB_DATA 1
RANGE $34FE-$34FF DB_DATA 1
RANGE $34FF-$3501 DW_DATA 1
RANGE $3501-$3502 DB_DATA 1
RANGE $3502-$3504 DW_DATA 1
RANGE $3504-$3505 DB_DATA 1
RANGE $3505-$3506 DB_DATA 1
RANGE $3506-$3508 DW_DATA 1
RANGE $3508-$3509 DB_DATA 1
RANGE $3509-$350B DW_DATA 1
RANGE $350B-$350C DB_DATA 1
RANGE $350C-$350D DB_DATA 1
RANGE $350D-$350F DW_DATA 1
RANGE $350F-$3510 DB_DATA 1
RANGE $3510-$3512 DW_DATA 1
RANGE $3512-$3513 DB_DATA 1
RANGE $3513-$3514 DB_DATA 1
RANGE $3514-$3516 DW_DATA 1
RANGE $3516-$3517 DB_DATA 1
RANGE $3517-$3519 DW_DATA 1
RANGE $3519-$351A DB_DATA 1
RANGE $351A-$351B DB_DATA 1
RANGE $351B-$351D DW_DATA 1
RANGE $351D-$351E DB_DATA 1
RANGE $351E-$3520 DW_DATA 1
RANGE $3520-$3521 DB_DATA 1
RANGE $3521-$3522 DB_DATA 1
RANGE $3522-$3524 DW_DATA 1
RANGE $3524-$3525 DB_DATA 1
RANGE $3525-$3527 DW_DATA 1
RANGE $3527-$3528 DB_DATA 1
RANGE $3528-$3529 DB_DATA 1
RANGE $3529-$352B DW_DATA 1
RANGE $352B-$352C DB_DATA 1
RANGE $352C-$352E DW_DATA 1
RANGE $352E-$352F DB_DATA 1
RANGE $352F-$3530 DB_DATA 1
RANGE $3530-$3532 DW_DATA 1
RANGE $3532-$3533 DB_DATA 1
RANGE $3533-$3535 DW_DATA 1
RANGE $3535-$3536 DB_DATA 1
RANGE $3536-$3537 DB_DATA 1
RANGE $3537-$3539 DW_DATA 1
RANGE $3539-$353A DB_DATA 1
RANGE $353A-$353C DW_DATA 1
RANGE $353C-$353D DB_DATA 1
RANGE $353D-$353E DB_DATA 1
RANGE $353E-$3540 DW_DATA 1
RANGE $3540-$3541 DB_DATA 1
RANGE $3541-$3543 DW_DATA 1
RANGE $3543-$3544 DB_DATA 1
RANGE $3544-$3545 DB_DATA 1
RANGE $3545-$3547 DW_DATA 1
RANGE $3547-$3548 DB_DATA 1
RANGE $3548-$354A DW_DATA 1
RANGE $354A-$354B DB_DATA 1
RANGE $354B-$354C DB_DATA 1
RANGE $354C-$354E DW_DATA 1
RANGE $354E-$354F DB_DATA 1
RANGE $354F-$3551 DW_DATA 1
RANGE $3551-$3552 DB_DATA 1
RANGE $3552-$3553 DB_DATA 1
RANGE $3553-$3555 DW_DATA 1
RANGE $3555-$3557 DB_DATA 2
RANGE $3557-$3559 DB_DATA 2
RANGE $3559-$355B DB_DATA 2
RANGE $355B-$355D DB_DATA 2
RANGE $355D-$355F DB_DATA 2
RANGE $355F-$3561 DB_DATA 2
RANGE $3561-$3563 DB_DATA 2
RANGE $3563-$3565 DB_DATA 2
RANGE $3565-$3567 DB_DATA 2
RANGE $3567-$3569 DB_DATA 2
RANGE $3569-$356B DB_DATA 2
RANGE $356B-$356D DB_DATA 2
RANGE $356D-$356F DB_DATA 2
RANGE $356F-$3571 DB_DATA 2
RANGE $3571-$3573 DB_DATA 2
RANGE $3573-$3575 DB_DATA 2
RANGE $3575-$3577 DB_DATA 2
RANGE $3577-$3579 DB_DATA 2
RANGE $3579-$357B DB_DATA 2
RANGE $357B-$357D DW_DATA 1
RANGE $357D-$357F DB_DATA 2
RANGE $357F-$3581 DB_DATA 2
RANGE $3581-$3583 DB_DATA 2
RANGE $3583-$3585 DB_DATA 2
RANGE $3585-$3587 DB_DATA 2
RANGE $3587-$3589 DB_DATA 2
RANGE $3589-$358B DB_DATA 2
RANGE $358B-$358D DB_DATA 2
RANGE $358D-$358F DB_DATA 2
RANGE $358F-$3591 DB_DATA 2
RANGE $3591-$3593 DB_DATA 2
RANGE $3593-$3595 DB_DATA 2
RANGE $3595-$3597 DB_DATA 2
RANGE $3597-$3599 DB_DATA 2
RANGE $3599-$359B DB_DATA 2
RANGE $359B-$359D DB_DATA 2
RANGE $359D-$359F DB_DATA 2
RANGE $359F-$35A1 DB_DATA 2
RANGE $35A1-$35A3 DB_DATA 2
RANGE $35A3-$35A5 DW_DATA 1
RANGE $35A5-$35A7 DB_DATA 2
RANGE $35A7-$35A9 DB_DATA 2
RANGE $35A9-$35AB DB_DATA 2
RANGE $35AB-$35AD DB_DATA 2
RANGE $35AD-$35AF DB_DATA 2
RANGE $35AF-$35B1 DB_DATA 2
RANGE $35B1-$35B3 DB_DATA 2
RANGE $35B3-$35B5 DB_DATA 2
RANGE $35B5-$35B7 DB_DATA 2
RANGE $35B7-$35B9 DB_DATA 2
RANGE $35B9-$35BB DB_DATA 2
RANGE $35BB-$35BD DB_DATA 2
RANGE $35BD-$35BF DB_DATA 2
RANGE $35BF-$35C1 DB_DATA 2
RANGE $35C1-$35C3 DW_DATA 1
RANGE $35C3-$35C5 DB_DATA 2
RANGE $35C5-$35C7 DB_DATA 2
RANGE $35C7-$35C9 DB_DATA 2
RANGE $35C9-$35CB DB_DATA 2
RANGE $35CB-$35CD DB_DATA 2
RANGE $35CD-$35CF DB_DATA 2
RANGE $35CF-$35D1 DB_DATA 2
RANGE $35D1-$35D3 DB_DATA 2
RANGE $35D3-$35D5 DB_DATA 2
RANGE $35D5-$35D7 DW_DATA 1
RANGE $35D7-$35D9 DB_DATA 2
RANGE $35D9-$35DB DB_DATA 2
RANGE $35DB-$35DD DB_DATA 2
RANGE $35DD-$35DF DB_DATA 2
RANGE $35DF-$35E1 DW_DATA 1
RANGE $35E1-$35E3 DB_DATA 2
RANGE $35E3-$35E5 DB_DATA 2
RANGE $35E5-$35E7 DB_DATA 2
RANGE $35E7-$35E9 DB_DATA 2
RANGE $35E9-$35EB DW_DATA 1
RANGE $35EB-$35ED DB_DATA 2
RANGE $35ED-$35EF DB_DATA 2
RANGE $35EF-$35F1 DB_DATA 2
RANGE $35F1-$35F3 DB_DATA 2
RANGE $35F3-$35F5 DW_DATA 1
RANGE $35F5-$35F7 DB_DATA 2
RANGE $35F7-$35F9 DB_DATA 2
RANGE $35F9-$35FB DB_DATA 2
RANGE $35FB-$35FD DB_DATA 2
RANGE $35FD-$35FF DB_DATA 2
RANGE $35FF-$3601 DB_DATA 2
RANGE $3601-$3603 DB_DATA 2
RANGE $3603-$3605 DB_DATA 2
RANGE $3605-$3607 DB_DATA 2
RANGE $3607-$3609 DB_DATA 2
RANGE $3609-$360B DB_DATA 2
RANGE $360B-$360D DB_DATA 2
RANGE $360D-$360F DB_DATA 2
RANGE $360F-$3611 DB_DATA 2
RANGE $3611-$3613 DB_DATA 2
RANGE $3613-$3615 DB_DATA 2
RANGE $3615-$3617 DB_DATA 2
RANGE $3617-$3619 DB_DATA 2
RANGE $3619-$361B DB_DATA 2
RANGE $361B-$361D DW_DATA 1
RANGE $361D-$361F DB_DATA 2
RANGE $361F-$3621 DB_DATA 2
RANGE $3621-$3623 DB_DATA 2
RANGE $3623-$3625 DB_DATA 2
RANGE $3625-$3627 DB_DATA 2
RANGE $3627-$3629 DB_DATA 2
RANGE $3629-$362B DB_DATA 2
RANGE $362B-$362D DB_DATA 2
RANGE $362D-$362F DB_DATA 2
RANGE $362F-$3631 DB_DATA 2
RANGE $3631-$3633 DB_DATA 2
RANGE $3633-$3635 DB_DATA 2
RANGE $3635-$3637 DB_DATA 2
RANGE $3637-$3639 DB_DATA 2
RANGE $3639-$363B DB_DATA 2
RANGE $363B-$363D DB_DATA 2
RANGE $363D-$363F DB_DATA 2
RANGE $363F-$3641 DB_DATA 2
RANGE $3641-$3643 DB_DATA 2
RANGE $3643-$3645 DW_DATA 1
RANGE $3645-$3647 DB_DATA 2
RANGE $3647-$3649 DB_DATA 2
RANGE $3649-$364B DB_DATA 2
RANGE $364B-$364D DB_DATA 2
RANGE $364D-$364F DB_DATA 2
RANGE $364F-$3651 DB_DATA 2
RANGE $3651-$3653 DB_DATA 2
RANGE $3653-$3655 DB_DATA 2
RANGE $3655-$3657 DB_DATA 2
RANGE $3657-$3659 DB_DATA 2
RANGE $3659-$365B DB_DATA 2
RANGE $365B-$365D DB_DATA 2
RANGE $365D-$365F DB_DATA 2
RANGE $365F-$3661 DB_DATA 2
RANGE $3661-$3663 DB_DATA 2
RANGE $3663-$3665 DB_DATA 2
RANGE $3665-$3667 DB_DATA 2
RANGE $3667-$3669 DB_DATA 2
RANGE $3669-$366B DB_DATA 2
RANGE $366B-$366D DB_DATA 2
RANGE $366D-$366F DW_DATA 1
RANGE $366F-$3671 DB_DATA 2
RANGE $3671-$3673 DB_DATA 2
RANGE $3673-$3675 DB_DATA 2
RANGE $3675-$3677 DB_DATA 2
RANGE $3677-$3679 DB_DATA 2
RANGE $3679-$367B DB_DATA 2
RANGE $367B-$367D DB_DATA 2
RANGE $367D-$367F DB_DATA 2
RANGE $367F-$3681 DB_DATA 2
RANGE $3681-$3683 DB_DATA 2
RANGE $3683-$3685 DB_DATA 2
RANGE $3685-$3687 DB_DATA 2
RANGE $3687-$3689 DB_DATA 2
RANGE $3689-$368B DB_DATA 2
RANGE $368B-$368D DB_DATA 2
RANGE $368D-$368F DB_DATA 2
RANGE $368F-$3691 DB_DATA 2
RANGE $3691-$3693 DB_DATA 2
RANGE $3693-$3695 DB_DATA 2
RANGE $3695-$3697 DB_DATA 2
RANGE $3697-$3699 DW_DATA 1
RANGE $3699-$369B DB_DATA 2
RANGE $369B-$369D DB_DATA 2
RANGE $369D-$369F DB_DATA 2
RANGE $369F-$36A0 DB_DATA 1
RANGE $36A0-$36A2 DW_DATA 1
RANGE $36A2-$36A3 DB_DATA 1
RANGE $36A3-$36A4 DB_DATA 1
RANGE $36A4-$36A6 DW_DATA 1
RANGE $36A6-$36A7 DB_DATA 1
RANGE $36A7-$36A8 DB_DATA 1
RANGE $36A8-$36AA DW_DATA 1
RANGE $36AA-$36AC DB_DATA 2
RANGE $36AC-$36AE DB_DATA 2
RANGE $36AE-$36B0 DB_DATA 2
RANGE $36B0-$36B2 DB_DATA 2
RANGE $36B2-$36B4 DB_DATA 2
RANGE $36B4-$36B6 DB_DATA 2
RANGE $36B6-$36B8 DB_DATA 2
RANGE $36B8-$36B9 DB_DATA 1
RANGE $36B9-$36BB DW_DATA 1
RANGE $36BB-$36BC DB_DATA 1
RANGE $36BC-$36BD DB_DATA 1
RANGE $36BD-$36BF DW_DATA 1
RANGE $36BF-$36C0 DB_DATA 1
RANGE $36C0-$36C1 DB_DATA 1
RANGE $36C1-$36C3 DW_DATA 1
RANGE $36C3-$36C5 DB_DATA 2
RANGE $36C5-$36C7 DB_DATA 2
RANGE $36C7-$36C9 DB_DATA 2
RANGE $36C9-$36CB DB_DATA 2
RANGE $36CB-$36CC DB_DATA 1
RANGE $36CC-$36CE DW_DATA 1
RANGE $36CE-$36CF DB_DATA 1
RANGE $36CF-$36D0 DB_DATA 1
RANGE $36D0-$36D2 DW_DATA 1
RANGE $36D2-$36D3 DB_DATA 1
RANGE $36D3-$36D4 DB_DATA 1
RANGE $36D4-$36D6 DW_DATA 1
RANGE $36D6-$36D8 DB_DATA 2
RANGE $36D8-$36DA DB_DATA 2
RANGE $36DA-$36DC DB_DATA 2
RANGE $36DC-$36DE DB_DATA 2
RANGE $36DE-$36E0 DB_DATA 2
RANGE $36E0-$36E2 DB_DATA 2
RANGE $36E2-$36E4 DB_DATA 2
RANGE $36E4-$36E6 DB_DATA 2
RANGE $36E6-$36E8 DB_DATA 2
RANGE $36E8-$36EA DB_DATA 2
RANGE $36EA-$36EB DB_DATA 1
RANGE $36EB-$36ED DW_DATA 1
RANGE $36ED-$36EE DB_DATA 1
RANGE $36EE-$36EF DB_DATA 1
RANGE $36EF-$36F1 DW_DATA 1
RANGE $36F1-$36F2 DB_DATA 1
RANGE $36F2-$36F3 DB_DATA 1
RANGE $36F3-$36F5 DW_DATA 1
RANGE $36F5-$36F7 DB_DATA 2
RANGE $36F7-$36F9 DB_DATA 2
RANGE $36F9-$36FB DB_DATA 2
RANGE $36FB-$36FD DB_DATA 2
RANGE $36FD-$36FF DB_DATA 2
RANGE $36FF-$3701 DB_DATA 2
RANGE $3701-$3703 DB_DATA 2
RANGE $3703-$3705 DB_DATA 2
RANGE $3705-$3707 DB_DATA 2
RANGE $3707-$3709 DB_DATA 2
RANGE $3709-$370B DB_DATA 2
RANGE $370B-$370D DB_DATA 2
RANGE $370D-$370E DB_DATA 1
RANGE $370E-$3710 DW_DATA 1
RANGE $3710-$3711 DB_DATA 1
RANGE $3711-$3712 DB_DATA 1
RANGE $3712-$3714 DW_DATA 1
RANGE $3714-$3715 DB_DATA 1
RANGE $3715-$3716 DB_DATA 1
RANGE $3716-$3717 DB_DATA 1
RANGE $3717-$3718 DB_DATA 1
RANGE $3718-$371A DW_DATA 1
RANGE $371A-$371C DB_DATA 2
RANGE $371C-$371E DB_DATA 2
RANGE $371E-$3720 DB_DATA 2
RANGE $3720-$3722 DB_DATA 2
RANGE $3722-$3724 DB_DATA 2
RANGE $3724-$3726 DB_DATA 2
RANGE $3726-$3727 DB_DATA 1
RANGE $3727-$3729 DW_DATA 1
RANGE $3729-$372A DB_DATA 1
RANGE $372A-$372B DB_DATA 1
RANGE $372B-$372D DW_DATA 1
RANGE $372D-$372E DB_DATA 1
RANGE $372E-$372F DB_DATA 1
RANGE $372F-$3731 DW_DATA 1
RANGE $3731-$3733 DB_DATA 2
RANGE $3733-$3735 DB_DATA 2
RANGE $3735-$3737 DB_DATA 2
RANGE $3737-$3739 DB_DATA 2
RANGE $3739-$373B DB_DATA 2
RANGE $373B-$373D DB_DATA 2
RANGE $373D-$373F DB_DATA 2
RANGE $373F-$3741 DB_DATA 2
RANGE $3741-$3743 DB_DATA 2
RANGE $3743-$3745 DW_DATA 1
RANGE $3745-$3747 DB_DATA 2
RANGE $3747-$3749 DB_DATA 2
RANGE $3749-$374B DB_DATA 2
RANGE $374B-$374D DB_DATA 2
RANGE $374D-$374F DB_DATA 2
RANGE $374F-$3751 DB_DATA 2
RANGE $3751-$3753 DB_DATA 2
RANGE $3753-$3755 DB_DATA 2
RANGE $3755-$3757 DB_DATA 2
RANGE $3757-$3759 DW_DATA 1
RANGE $3759-$375B DB_DATA 2
RANGE $375B-$375D DB_DATA 2
RANGE $375D-$375F DB_DATA 2
RANGE $375F-$3761 DB_DATA 2
RANGE $3761-$3763 DB_DATA 2
RANGE $3763-$3765 DB_DATA 2
RANGE $3765-$3767 DB_DATA 2
RANGE $3767-$3769 DB_DATA 2
RANGE $3769-$376B DB_DATA 2
RANGE $376B-$376D DW_DATA 1
RANGE $376D-$376F DB_DATA 2
RANGE $376F-$3771 DB_DATA 2
RANGE $3771-$3773 DB_DATA 2
RANGE $3773-$3775 DB_DATA 2
RANGE $3775-$3777 DB_DATA 2
RANGE $3777-$3779 DB_DATA 2
RANGE $3779-$377B DB_DATA 2
RANGE $377B-$377D DB_DATA 2
RANGE $377D-$377F DB_DATA 2
RANGE $377F-$3780 DB_DATA 1
RANGE $3780-$3782 DW_DATA 1
RANGE $3782-$3783 DB_DATA 1
RANGE $3783-$3784 DB_DATA 1
RANGE $3784-$3786 DW_DATA 1
RANGE $3786-$3787 DB_DATA 1
RANGE $3787-$3788 DB_DATA 1
RANGE $3788-$3789 DB_DATA 1
RANGE $3789-$378B DW_DATA 1
RANGE $378B-$378C DB_DATA 1
RANGE $378C-$378D DB_DATA 1
RANGE $378D-$378F DW_DATA 1
RANGE $378F-$3790 DB_DATA 1
RANGE $3790-$3791 DB_DATA 1
RANGE $3791-$3792 DB_DATA 1
RANGE $3792-$3794 DW_DATA 1
RANGE $3794-$3795 DB_DATA 1
RANGE $3795-$3796 DB_DATA 1
RANGE $3796-$3798 DW_DATA 1
RANGE $3798-$3799 DB_DATA 1
RANGE $3799-$379A DB_DATA 1
RANGE $379A-$379B DB_DATA 1
RANGE $379B-$379D DW_DATA 1
RANGE $379D-$379E DB_DATA 1
RANGE $379E-$379F DB_DATA 1
RANGE $379F-$37A1 DW_DATA 1
RANGE $37A1-$37A2 DB_DATA 1
RANGE $37A2-$37A3 DB_DATA 1
RANGE $37A3-$37A4 DB_DATA 1
RANGE $37A4-$37A6 DW_DATA 1
RANGE $37A6-$37A7 DB_DATA 1
RANGE $37A7-$37A8 DB_DATA 1
RANGE $37A8-$37AA DW_DATA 1
RANGE $37AA-$37AB DB_DATA 1
RANGE $37AB-$37AC DB_DATA 1
RANGE $37AC-$37AD DB_DATA 1
RANGE $37AD-$37AF DW_DATA 1
RANGE $37AF-$37B0 DB_DATA 1
RANGE $37B0-$37B1 DB_DATA 1
RANGE $37B1-$37B3 DW_DATA 1
RANGE $37B3-$37B4 DB_DATA 1
RANGE $37B4-$37B5 DB_DATA 1
RANGE $37B5-$37B7 DW_DATA 1
RANGE $37B7-$37B9 DB_DATA 2
RANGE $37B9-$37BB DB_DATA 2
RANGE $37BB-$37BD DB_DATA 2
RANGE $37BD-$37BF DB_DATA 2
RANGE $37BF-$37C1 DB_DATA 2
RANGE $37C1-$37C3 DB_DATA 2
RANGE $37C3-$37C5 DB_DATA 2
RANGE $37C5-$37C7 DB_DATA 2
RANGE $37C7-$37C9 DB_DATA 2
RANGE $37C9-$37CB DB_DATA 2
RANGE $37CB-$37CD DW_DATA 1
RANGE $37CD-$37CF DB_DATA 2
RANGE $37CF-$37D1 DB_DATA 2
RANGE $37D1-$37D3 DB_DATA 2
RANGE $37D3-$37D5 DB_DATA 2
RANGE $37D5-$37D7 DB_DATA 2
RANGE $37D7-$37D9 DB_DATA 2
RANGE $37D9-$37DB DB_DATA 2
RANGE $37DB-$37DD DB_DATA 2
RANGE $37DD-$37DF DB_DATA 2
RANGE $37DF-$37E1 DB_DATA 2
RANGE $37E1-$37E3 DW_DATA 1
RANGE $37E3-$37E5 DB_DATA 2
RANGE $37E5-$37E7 DB_DATA 2
RANGE $37E7-$37E9 DB_DATA 2
RANGE $37E9-$37EB DB_DATA 2
RANGE $37EB-$37ED DB_DATA 2
RANGE $37ED-$37EF DB_DATA 2
RANGE $37EF-$37F1 DB_DATA 2
RANGE $37F1-$37F3 DB_DATA 2
RANGE $37F3-$37F5 DB_DATA 2
RANGE $37F5-$37F7 DB_DATA 2
RANGE $37F7-$37F8 DB_DATA 1
RANGE $37F8-$37FA DW_DATA 1
RANGE $37FA-$37FB DB_DATA 1
RANGE $37FB-$37FC DB_DATA 1
RANGE $37FC-$37FE DW_DATA 1
RANGE $37FE-$37FF DB_DATA 1
RANGE $37FF-$3800 DB_DATA 1
RANGE $3800-$3801 DB_DATA 1
RANGE $3801-$3803 DW_DATA 1
RANGE $3803-$3804 DB_DATA 1
RANGE $3804-$3805 DB_DATA 1
RANGE $3805-$3807 DW_DATA 1
RANGE $3807-$3808 DB_DATA 1
RANGE $3808-$3809 DB_DATA 1
RANGE $3809-$380A DB_DATA 1
RANGE $380A-$380C DW_DATA 1
RANGE $380C-$380D DB_DATA 1
RANGE $380D-$380E DB_DATA 1
RANGE $380E-$3810 DW_DATA 1
RANGE $3810-$3811 DB_DATA 1
RANGE $3811-$3812 DB_DATA 1
RANGE $3812-$3813 DB_DATA 1
RANGE $3813-$3815 DW_DATA 1
RANGE $3815-$3816 DB_DATA 1
RANGE $3816-$3817 DB_DATA 1
RANGE $3817-$3819 DW_DATA 1
RANGE $3819-$381A DB_DATA 1
RANGE $381A-$381B DB_DATA 1
RANGE $381B-$381D DW_DATA 1
RANGE $381D-$381F DB_DATA 2
RANGE $381F-$3821 DB_DATA 2
RANGE $3821-$3823 DB_DATA 2
RANGE $3823-$3825 DW_DATA 1
RANGE $3825-$3827 DB_DATA 2
RANGE $3827-$3829 DB_DATA 2
RANGE $3829-$382B DB_DATA 2
RANGE $382B-$382D DB_DATA 2
RANGE $382D-$382F DB_DATA 2
RANGE $382F-$3831 DW_DATA 1
RANGE $3831-$3833 DB_DATA 2
RANGE $3833-$3835 DB_DATA 2
RANGE $3835-$3837 DB_DATA 2
RANGE $3837-$3839 DB_DATA 2
RANGE $3839-$383B DB_DATA 2
RANGE $383B-$383D DB_DATA 2
RANGE $383D-$383F DW_DATA 1
RANGE $383F-$3841 DB_DATA 2
RANGE $3841-$3843 DB_DATA 2
RANGE $3843-$3845 DB_DATA 2
RANGE $3845-$3847 DB_DATA 2
RANGE $3847-$3849 DB_DATA 2
RANGE $3849-$384B DB_DATA 2
RANGE $384B-$384D DW_DATA 1
RANGE $384D-$384F DB_DATA 2
RANGE $384F-$3851 DB_DATA 2
RANGE $3851-$3853 DB_DATA 2
RANGE $3853-$3855 DB_DATA 2
RANGE $3855-$3857 DB_DATA 2
RANGE $3857-$3859 DB_DATA 2
RANGE $3859-$385B DW_DATA 1
RANGE $385B-$385D DB_DATA 2
RANGE $385D-$385F DB_DATA 2
RANGE $385F-$3861 DB_DATA 2
RANGE $3861-$3863 DB_DATA 2
RANGE $3863-$3865 DB_DATA 2
RANGE $3865-$3867 DW_DATA 1
RANGE $3867-$3869 DB_DATA 2
RANGE $3869-$386B DB_DATA 2
RANGE $386B-$386D DB_DATA 2
RANGE $386D-$386F DB_DATA 2
RANGE $386F-$3871 DB_DATA 2
RANGE $3871-$3872 DB_DATA 1
RANGE $3872-$3874 DW_DATA 1
RANGE $3874-$3875 DB_DATA 1
RANGE $3875-$3876 DB_DATA 1
RANGE $3876-$3878 DW_DATA 1
RANGE $3878-$3879 DB_DATA 1
RANGE $3879-$387A DB_DATA 1
RANGE $387A-$387B DB_DATA 1
RANGE $387B-$387D DW_DATA 1
RANGE $387D-$387E DB_DATA 1
RANGE $387E-$387F DB_DATA 1
RANGE $387F-$3881 DW_DATA 1
RANGE $3881-$3882 DB_DATA 1
RANGE $3882-$3883 DB_DATA 1
RANGE $3883-$3884 DB_DATA 1
RANGE $3884-$3886 DW_DATA 1
RANGE $3886-$3887 DB_DATA 1
RANGE $3887-$3888 DB_DATA 1
RANGE $3888-$388A DW_DATA 1
RANGE $388A-$388B DB_DATA 1
RANGE $388B-$388C DB_DATA 1
RANGE $388C-$388D DB_DATA 1
RANGE $388D-$388F DW_DATA 1
RANGE $388F-$3890 DB_DATA 1
RANGE $3890-$3891 DB_DATA 1
RANGE $3891-$3893 DW_DATA 1
RANGE $3893-$3894 DB_DATA 1
RANGE $3894-$3895 DB_DATA 1
RANGE $3895-$3896 DB_DATA 1
RANGE $3896-$3898 DW_DATA 1
RANGE $3898-$3899 DB_DATA 1
RANGE $3899-$389A DB_DATA 1
RANGE $389A-$389C DW_DATA 1
RANGE $389C-$389D DB_DATA 1
RANGE $389D-$389E DB_DATA 1
RANGE $389E-$389F DB_DATA 1
RANGE $389F-$38A1 DW_DATA 1
RANGE $38A1-$38A2 DB_DATA 1
RANGE $38A2-$38A3 DB_DATA 1
RANGE $38A3-$38A5 DW_DATA 1
RANGE $38A5-$38A6 DB_DATA 1
RANGE $38A6-$38A7 DB_DATA 1
RANGE $38A7-$38A8 DB_DATA 1
RANGE $38A8-$38AA DW_DATA 1
RANGE $38AA-$38AB DB_DATA 1
RANGE $38AB-$38AC DB_DATA 1
RANGE $38AC-$38AE DW_DATA 1
RANGE $38AE-$38AF DB_DATA 1
RANGE $38AF-$38B0 DB_DATA 1
RANGE $38B0-$38B2 DW_DATA 1
RANGE $38B2-$38B4 DB_DATA 2
RANGE $38B4-$38B6 DB_DATA 2
RANGE $38B6-$38B8 DB_DATA 2
RANGE $38B8-$38BA DB_DATA 2
RANGE $38BA-$38BC DB_DATA 2
RANGE $38BC-$38BE DB_DATA 2
RANGE $38BE-$38C0 DB_DATA 2
RANGE $38C0-$38C2 DB_DATA 2
RANGE $38C2-$38C4 DB_DATA 2
RANGE $38C4-$38C6 DB_DATA 2
RANGE $38C6-$38C8 DB_DATA 2
RANGE $38C8-$38C9 DB_DATA 1
RANGE $38C9-$38CB DW_DATA 1
RANGE $38CB-$38CC DB_DATA 1
RANGE $38CC-$38CD DB_DATA 1
RANGE $38CD-$38CF DW_DATA 1
RANGE $38CF-$38D0 DB_DATA 1
RANGE $38D0-$38D1 DB_DATA 1
RANGE $38D1-$38D2 DB_DATA 1
RANGE $38D2-$38D3 DB_DATA 1
RANGE $38D3-$38D5 DW_DATA 1
RANGE $38D5-$38D7 DB_DATA 2
RANGE $38D7-$38D9 DB_DATA 2
RANGE $38D9-$38DB DB_DATA 2
RANGE $38DB-$38DD DB_DATA 2
RANGE $38DD-$38DF DB_DATA 2
RANGE $38DF-$38E1 DB_DATA 2
RANGE $38E1-$38E3 DB_DATA 2
RANGE $38E3-$38E5 DB_DATA 2
RANGE $38E5-$38E7 DB_DATA 2
RANGE $38E7-$38E9 DB_DATA 2
RANGE $38E9-$38EA DB_DATA 1
RANGE $38EA-$38EC DW_DATA 1
RANGE $38EC-$38ED DB_DATA 1
RANGE $38ED-$38EE DB_DATA 1
RANGE $38EE-$38F0 DW_DATA 1
RANGE $38F0-$38F1 DB_DATA 1
RANGE $38F1-$38F2 DB_DATA 1
RANGE $38F2-$38F3 DB_DATA 1
RANGE $38F3-$38F4 DB_DATA 1
RANGE $38F4-$38F6 DW_DATA 1
RANGE $38F6-$38F8 DB_DATA 2
RANGE $38F8-$38FA DB_DATA 2
RANGE $38FA-$38FC DB_DATA 2
RANGE $38FC-$38FE DB_DATA 2
RANGE $38FE-$3900 DB_DATA 2
RANGE $3900-$3902 DB_DATA 2
RANGE $3902-$3904 DB_DATA 2
RANGE $3904-$3906 DB_DATA 2
RANGE $3906-$3908 DB_DATA 2
RANGE $3908-$390A DB_DATA 2
RANGE $390A-$390B DB_DATA 1
RANGE $390B-$390D DW_DATA 1
RANGE $390D-$390E DB_DATA 1
RANGE $390E-$390F DB_DATA 1
RANGE $390F-$3911 DW_DATA 1
RANGE $3911-$3912 DB_DATA 1
RANGE $3912-$3913 DB_DATA 1
RANGE $3913-$3914 DB_DATA 1
RANGE $3914-$3915 DB_DATA 1
RANGE $3915-$3916 DB_DATA 1
RANGE $3916-$3918 DW_DATA 1
RANGE $3918-$3919 DB_DATA 1
RANGE $3919-$391A DB_DATA 1
RANGE $391A-$391C DW_DATA 1
RANGE $391C-$391D DB_DATA 1
RANGE $391D-$391E DB_DATA 1
RANGE $391E-$391F DB_DATA 1
RANGE $391F-$3920 DB_DATA 1
RANGE $3920-$3922 DW_DATA 1
RANGE $3922-$3924 DB_DATA 2
RANGE $3924-$3926 DB_DATA 2
RANGE $3926-$3928 DB_DATA 2
RANGE $3928-$392A DB_DATA 2
RANGE $392A-$392C DB_DATA 2
RANGE $392C-$392E DB_DATA 2
RANGE $392E-$3930 DB_DATA 2
RANGE $3930-$3932 DB_DATA 2
RANGE $3932-$3934 DB_DATA 2
RANGE $3934-$3936 DB_DATA 2
RANGE $3936-$3938 DB_DATA 2
RANGE $3938-$393A DB_DATA 2
RANGE $393A-$393C DB_DATA 2
RANGE $393C-$393E DB_DATA 2
RANGE $393E-$3940 DB_DATA 2
RANGE $3940-$3942 DB_DATA 2
RANGE $3942-$3944 DB_DATA 2
RANGE $3944-$3946 DB_DATA 2
RANGE $3946-$3948 DB_DATA 2
RANGE $3948-$394A DB_DATA 2
RANGE $394A-$394C DB_DATA 2
RANGE $394C-$394E DB_DATA 2
RANGE $394E-$394F DB_DATA 1
RANGE $394F-$3951 DW_DATA 1
RANGE $3951-$3952 DB_DATA 1
RANGE $3952-$3953 DB_DATA 1
RANGE $3953-$3955 DW_DATA 1
RANGE $3955-$3956 DB_DATA 1
RANGE $3956-$3957 DB_DATA 1
RANGE $3957-$3958 DB_DATA 1
RANGE $3958-$3959 DB_DATA 1
RANGE $3959-$395A DB_DATA 1
RANGE $395A-$395C DW_DATA 1
RANGE $395C-$395D DB_DATA 1
RANGE $395D-$395E DB_DATA 1
RANGE $395E-$3960 DW_DATA 1
RANGE $3960-$3961 DB_DATA 1
RANGE $3961-$3962 DB_DATA 1
RANGE $3962-$3963 DB_DATA 1
RANGE $3963-$3964 DB_DATA 1
RANGE $3964-$3966 DW_DATA 1
RANGE $3966-$3968 DB_DATA 2
RANGE $3968-$396A DB_DATA 2
RANGE $396A-$396C DB_DATA 2
RANGE $396C-$396E DB_DATA 2
RANGE $396E-$3970 DB_DATA 2
RANGE $3970-$3972 DB_DATA 2
RANGE $3972-$3974 DB_DATA 2
RANGE $3974-$3976 DB_DATA 2
RANGE $3976-$3978 DB_DATA 2
RANGE $3978-$397A DB_DATA 2
RANGE $397A-$397C DB_DATA 2
RANGE $397C-$397E DB_DATA 2
RANGE $397E-$3980 DB_DATA 2
RANGE $3980-$3982 DB_DATA 2
RANGE $3982-$3984 DB_DATA 2
RANGE $3984-$3986 DB_DATA 2
RANGE $3986-$3988 DB_DATA 2
RANGE $3988-$398A DB_DATA 2
RANGE $398A-$398C DB_DATA 2
RANGE $398C-$398E DB_DATA 2
RANGE $398E-$3990 DB_DATA 2
RANGE $3990-$3992 DB_DATA 2
RANGE $3992-$3993 DB_DATA 1
RANGE $3993-$3995 DW_DATA 1
RANGE $3995-$3996 DB_DATA 1
RANGE $3996-$3997 DB_DATA 1
RANGE $3997-$3999 DW_DATA 1
RANGE $3999-$399A DB_DATA 1
RANGE $399A-$399B DB_DATA 1
RANGE $399B-$399C DB_DATA 1
RANGE $399C-$399D DB_DATA 1
RANGE $399D-$399E DB_DATA 1
RANGE $399E-$39A0 DW_DATA 1
RANGE $39A0-$39A1 DB_DATA 1
RANGE $39A1-$39A2 DB_DATA 1
RANGE $39A2-$39A4 DW_DATA 1
RANGE $39A4-$39A5 DB_DATA 1
RANGE $39A5-$39A6 DB_DATA 1
RANGE $39A6-$39A7 DB_DATA 1
RANGE $39A7-$39A8 DB_DATA 1
RANGE $39A8-$39AA DW_DATA 1
RANGE $39AA-$39AC DB_DATA 2
RANGE $39AC-$39AE DB_DATA 2
RANGE $39AE-$39B0 DB_DATA 2
RANGE $39B0-$39B2 DB_DATA 2
RANGE $39B2-$39B4 DB_DATA 2
RANGE $39B4-$39B6 DB_DATA 2
RANGE $39B6-$39B8 DB_DATA 2
RANGE $39B8-$39BA DB_DATA 2
RANGE $39BA-$39BC DB_DATA 2
RANGE $39BC-$39BE DB_DATA 2
RANGE $39BE-$39C0 DB_DATA 2
RANGE $39C0-$39C2 DB_DATA 2
RANGE $39C2-$39C4 DB_DATA 2
RANGE $39C4-$39C6 DB_DATA 2
RANGE $39C6-$39C8 DB_DATA 2
RANGE $39C8-$39CA DB_DATA 2
RANGE $39CA-$39CC DB_DATA 2
RANGE $39CC-$39CE DB_DATA 2
RANGE $39CE-$39D0 DB_DATA 2
RANGE $39D0-$39D2 DB_DATA 2
RANGE $39D2-$39D4 DB_DATA 2
RANGE $39D4-$39D6 DB_DATA 2
RANGE $39D6-$39D7 DB_DATA 1
RANGE $39D7-$39D9 DW_DATA 1
RANGE $39D9-$39DA DB_DATA 1
RANGE $39DA-$39DB DB_DATA 1
RANGE $39DB-$39DD DW_DATA 1
RANGE $39DD-$39DE DB_DATA 1
RANGE $39DE-$39DF DB_DATA 1
RANGE $39DF-$39E0 DB_DATA 1
RANGE $39E0-$39E1 DB_DATA 1
RANGE $39E1-$39E2 DB_DATA 1
RANGE $39E2-$39E4 DW_DATA 1
RANGE $39E4-$39E5 DB_DATA 1
RANGE $39E5-$39E6 DB_DATA 1
RANGE $39E6-$39E8 DW_DATA 1
RANGE $39E8-$39E9 DB_DATA 1
RANGE $39E9-$39EA DB_DATA 1
RANGE $39EA-$39EB DB_DATA 1
RANGE $39EB-$39EC DB_DATA 1
RANGE $39EC-$39EE DW_DATA 1
RANGE $39EE-$39F0 DB_DATA 2
RANGE $39F0-$39F2 DB_DATA 2
RANGE $39F2-$39F4 DB_DATA 2
RANGE $39F4-$39F6 DB_DATA 2
RANGE $39F6-$39F8 DB_DATA 2
RANGE $39F8-$39FA DB_DATA 2
RANGE $39FA-$39FC DB_DATA 2
RANGE $39FC-$39FE DB_DATA 2
RANGE $39FE-$3A00 DB_DATA 2
RANGE $3A00-$3A02 DB_DATA 2
RANGE $3A02-$3A04 DB_DATA 2
RANGE $3A04-$3A06 DB_DATA 2
RANGE $3A06-$3A08 DB_DATA 2
RANGE $3A08-$3A0A DB_DATA 2
RANGE $3A0A-$3A0C DB_DATA 2
RANGE $3A0C-$3A0E DB_DATA 2
RANGE $3A0E-$3A10 DB_DATA 2
RANGE $3A10-$3A12 DB_DATA 2
RANGE $3A12-$3A14 DB_DATA 2
RANGE $3A14-$3A16 DB_DATA 2
RANGE $3A16-$3A18 DB_DATA 2
RANGE $3A18-$3A1A DB_DATA 2
RANGE $3A1A-$3A1B DB_DATA 1
RANGE $3A1B-$3A1D DW_DATA 1
RANGE $3A1D-$3A1E DB_DATA 1
RANGE $3A1E-$3A1F DB_DATA 1
RANGE $3A1F-$3A21 DW_DATA 1
RANGE $3A21-$3A22 DB_DATA 1
RANGE $3A22-$3A23 DB_DATA 1
RANGE $3A23-$3A24 DB_DATA 1
RANGE $3A24-$3A25 DB_DATA 1
RANGE $3A25-$3A26 DB_DATA 1
RANGE $3A26-$3A28 DW_DATA 1
RANGE $3A28-$3A29 DB_DATA 1
RANGE $3A29-$3A2A DB_DATA 1
RANGE $3A2A-$3A2C DW_DATA 1
RANGE $3A2C-$3A2D DB_DATA 1
RANGE $3A2D-$3A2E DB_DATA 1
RANGE $3A2E-$3A2F DB_DATA 1
RANGE $3A2F-$3A30 DB_DATA 1
RANGE $3A30-$3A32 DW_DATA 1
RANGE $3A32-$3A34 DB_DATA 2
RANGE $3A34-$3A36 DB_DATA 2
RANGE $3A36-$3A38 DB_DATA 2
RANGE $3A38-$3A3A DB_DATA 2
RANGE $3A3A-$3A3C DB_DATA 2
RANGE $3A3C-$3A3E DB_DATA 2
RANGE $3A3E-$3A40 DB_DATA 2
RANGE $3A40-$3A42 DB_DATA 2
RANGE $3A42-$3A44 DB_DATA 2
RANGE $3A44-$3A46 DB_DATA 2
RANGE $3A46-$3A48 DB_DATA 2
RANGE $3A48-$3A4A DB_DATA 2
RANGE $3A4A-$3A4C DB_DATA 2
RANGE $3A4C-$3A4E DB_DATA 2
RANGE $3A4E-$3A50 DB_DATA 2
RANGE $3A50-$3A52 DB_DATA 2
RANGE $3A52-$3A54 DB_DATA 2
RANGE $3A54-$3A56 DB_DATA 2
RANGE $3A56-$3A58 DB_DATA 2
RANGE $3A58-$3A5A DB_DATA 2
RANGE $3A5A-$3A5C DB_DATA 2
RANGE $3A5C-$3A5E DB_DATA 2
RANGE $3A5E-$3A5F DB_DATA 1
RANGE $3A5F-$3A61 DW_DATA 1
RANGE $3A61-$3A62 DB_DATA 1
RANGE $3A62-$3A63 DB_DATA 1
RANGE $3A63-$3A65 DW_DATA 1
RANGE $3A65-$3A66 DB_DATA 1
RANGE $3A66-$3A67 DB_DATA 1
RANGE $3A67-$3A68 DB_DATA 1
RANGE $3A68-$3A69 DB_DATA 1
RANGE $3A69-$3A6A DB_DATA 1
RANGE $3A6A-$3A6C DW_DATA 1
RANGE $3A6C-$3A6D DB_DATA 1
RANGE $3A6D-$3A6E DB_DATA 1
RANGE $3A6E-$3A70 DW_DATA 1
RANGE $3A70-$3A71 DB_DATA 1
RANGE $3A71-$3A72 DB_DATA 1
RANGE $3A72-$3A73 DB_DATA 1
RANGE $3A73-$3A74 DB_DATA 1
RANGE $3A74-$3A76 DW_DATA 1
RANGE $3A76-$3A78 DB_DATA 2
RANGE $3A78-$3A7A DB_DATA 2
RANGE $3A7A-$3A7C DB_DATA 2
RANGE $3A7C-$3A7E DB_DATA 2
RANGE $3A7E-$3A80 DB_DATA 2
RANGE $3A80-$3A82 DB_DATA 2
RANGE $3A82-$3A84 DB_DATA 2
RANGE $3A84-$3A86 DB_DATA 2
RANGE $3A86-$3A88 DB_DATA 2
RANGE $3A88-$3A8A DB_DATA 2
RANGE $3A8A-$3A8C DB_DATA 2
RANGE $3A8C-$3A8E DB_DATA 2
RANGE $3A8E-$3A90 DB_DATA 2
RANGE $3A90-$3A92 DB_DATA 2
RANGE $3A92-$3A94 DB_DATA 2
RANGE $3A94-$3A96 DB_DATA 2
RANGE $3A96-$3A98 DB_DATA 2
RANGE $3A98-$3A9A DB_DATA 2
RANGE $3A9A-$3A9C DB_DATA 2
RANGE $3A9C-$3A9E DB_DATA 2
RANGE $3A9E-$3AA0 DB_DATA 2
RANGE $3AA0-$3AA2 DB_DATA 2
RANGE $3AA2-$3AA3 DB_DATA 1
RANGE $3AA3-$3AA5 DW_DATA 1
RANGE $3AA5-$3AA6 DB_DATA 1
RANGE $3AA6-$3AA7 DB_DATA 1
RANGE $3AA7-$3AA9 DW_DATA 1
RANGE $3AA9-$3AAA DB_DATA 1
RANGE $3AAA-$3AAB DB_DATA 1
RANGE $3AAB-$3AAC DB_DATA 1
RANGE $3AAC-$3AAD DB_DATA 1
RANGE $3AAD-$3AAE DB_DATA 1
RANGE $3AAE-$3AB0 DW_DATA 1
RANGE $3AB0-$3AB1 DB_DATA 1
RANGE $3AB1-$3AB2 DB_DATA 1
RANGE $3AB2-$3AB4 DW_DATA 1
RANGE $3AB4-$3AB5 DB_DATA 1
RANGE $3AB5-$3AB6 DB_DATA 1
RANGE $3AB6-$3AB7 DB_DATA 1
RANGE $3AB7-$3AB8 DB_DATA 1
RANGE $3AB8-$3ABA DW_DATA 1
RANGE $3ABA-$3ABC DB_DATA 2
RANGE $3ABC-$3ABE DB_DATA 2
RANGE $3ABE-$3AC0 DB_DATA 2
RANGE $3AC0-$3AC2 DB_DATA 2
RANGE $3AC2-$3AC4 DB_DATA 2
RANGE $3AC4-$3AC6 DB_DATA 2
RANGE $3AC6-$3AC8 DB_DATA 2
RANGE $3AC8-$3ACA DB_DATA 2
RANGE $3ACA-$3ACC DB_DATA 2
RANGE $3ACC-$3ACE DB_DATA 2
RANGE $3ACE-$3AD0 DB_DATA 2
RANGE $3AD0-$3AD2 DB_DATA 2
RANGE $3AD2-$3AD4 DB_DATA 2
RANGE $3AD4-$3AD6 DB_DATA 2
RANGE $3AD6-$3AD8 DB_DATA 2
RANGE $3AD8-$3ADA DB_DATA 2
RANGE $3ADA-$3ADC DB_DATA 2
RANGE $3ADC-$3ADE DB_DATA 2
RANGE $3ADE-$3AE0 DB_DATA 2
RANGE $3AE0-$3AE2 DB_DATA 2
RANGE $3AE2-$3AE4 DB_DATA 2
RANGE $3AE4-$3AE6 DB_DATA 2
RANGE $3AE6-$3AE7 DB_DATA 1
RANGE $3AE7-$3AE9 DW_DATA 1
RANGE $3AE9-$3AEA DB_DATA 1
RANGE $3AEA-$3AEB DB_DATA 1
RANGE $3AEB-$3AED DW_DATA 1
RANGE $3AED-$3AEE DB_DATA 1
RANGE $3AEE-$3AEF DB_DATA 1
RANGE $3AEF-$3AF0 DB_DATA 1
RANGE $3AF0-$3AF1 DB_DATA 1
RANGE $3AF1-$3AF2 DB_DATA 1
RANGE $3AF2-$3AF4 DW_DATA 1
RANGE $3AF4-$3AF5 DB_DATA 1
RANGE $3AF5-$3AF6 DB_DATA 1
RANGE $3AF6-$3AF8 DW_DATA 1
RANGE $3AF8-$3AF9 DB_DATA 1
RANGE $3AF9-$3AFA DB_DATA 1
RANGE $3AFA-$3AFB DB_DATA 1
RANGE $3AFB-$3AFC DB_DATA 1
RANGE $3AFC-$3AFE DW_DATA 1
RANGE $3AFE-$3B00 DB_DATA 2
RANGE $3B00-$3B02 DB_DATA 2
RANGE $3B02-$3B04 DB_DATA 2
RANGE $3B04-$3B06 DB_DATA 2
RANGE $3B06-$3B08 DB_DATA 2
RANGE $3B08-$3B0A DB_DATA 2
RANGE $3B0A-$3B0C DB_DATA 2
RANGE $3B0C-$3B0E DB_DATA 2
RANGE $3B0E-$3B10 DB_DATA 2
RANGE $3B10-$3B12 DB_DATA 2
RANGE $3B12-$3B14 DB_DATA 2
RANGE $3B14-$3B16 DB_DATA 2
RANGE $3B16-$3B18 DB_DATA 2
RANGE $3B18-$3B1A DB_DATA 2
RANGE $3B1A-$3B1C DB_DATA 2
RANGE $3B1C-$3B1E DB_DATA 2
RANGE $3B1E-$3B20 DB_DATA 2
RANGE $3B20-$3B22 DB_DATA 2
RANGE $3B22-$3B24 DB_DATA 2
RANGE $3B24-$3B26 DB_DATA 2
RANGE $3B26-$3B28 DB_DATA 2
RANGE $3B28-$3B2A DB_DATA 2
RANGE $3B2A-$3B2B DB_DATA 1
RANGE $3B2B-$3B2D DW_DATA 1
RANGE $3B2D-$3B2E DB_DATA 1
RANGE $3B2E-$3B2F DB_DATA 1
RANGE $3B2F-$3B31 DW_DATA 1
RANGE $3B31-$3B32 DB_DATA 1
RANGE $3B32-$3B33 DB_DATA 1
RANGE $3B33-$3B34 DB_DATA 1
RANGE $3B34-$3B35 DB_DATA 1
RANGE $3B35-$3B36 DB_DATA 1
RANGE $3B36-$3B38 DW_DATA 1
RANGE $3B38-$3B39 DB_DATA 1
RANGE $3B39-$3B3A DB_DATA 1
RANGE $3B3A-$3B3C DW_DATA 1
RANGE $3B3C-$3B3D DB_DATA 1
RANGE $3B3D-$3B3E DB_DATA 1
RANGE $3B3E-$3B3F DB_DATA 1
RANGE $3B3F-$3B40 DB_DATA 1
RANGE $3B40-$3B42 DW_DATA 1
RANGE $3B42-$3B44 DB_DATA 2
RANGE $3B44-$3B46 DB_DATA 2
RANGE $3B46-$3B48 DB_DATA 2
RANGE $3B48-$3B4A DB_DATA 2
RANGE $3B4A-$3B4C DB_DATA 2
RANGE $3B4C-$3B4E DB_DATA 2
RANGE $3B4E-$3B50 DB_DATA 2
RANGE $3B50-$3B52 DB_DATA 2
RANGE $3B52-$3B54 DB_DATA 2
RANGE $3B54-$3B56 DB_DATA 2
RANGE $3B56-$3B58 DB_DATA 2
RANGE $3B58-$3B5A DB_DATA 2
RANGE $3B5A-$3B5C DB_DATA 2
RANGE $3B5C-$3B5E DB_DATA 2
RANGE $3B5E-$3B60 DB_DATA 2
RANGE $3B60-$3B62 DB_DATA 2
RANGE $3B62-$3B64 DB_DATA 2
RANGE $3B64-$3B65 DB_DATA 1
RANGE $3B65-$3B67 DW_DATA 1
RANGE $3B67-$3B68 DB_DATA 1
RANGE $3B68-$3B69 DB_DATA 1
RANGE $3B69-$3B6B DW_DATA 1
RANGE $3B6B-$3B6C DB_DATA 1
RANGE $3B6C-$3B6D DB_DATA 1
RANGE $3B6D-$3B6E DB_DATA 1
RANGE $3B6E-$3B6F DB_DATA 1
RANGE $3B6F-$3B70 DB_DATA 1
RANGE $3B70-$3B72 DW_DATA 1
RANGE $3B72-$3B73 DB_DATA 1
RANGE $3B73-$3B74 DB_DATA 1
RANGE $3B74-$3B76 DW_DATA 1
RANGE $3B76-$3B77 DB_DATA 1
RANGE $3B77-$3B78 DB_DATA 1
RANGE $3B78-$3B79 DB_DATA 1
RANGE $3B79-$3B7A DB_DATA 1
RANGE $3B7A-$3B7C DW_DATA 1
RANGE $3B7C-$3B7E DB_DATA 2
RANGE $3B7E-$3B80 DB_DATA 2
RANGE $3B80-$3B82 DB_DATA 2
RANGE $3B82-$3B84 DB_DATA 2
RANGE $3B84-$3B86 DB_DATA 2
RANGE $3B86-$3B88 DB_DATA 2
RANGE $3B88-$3B8A DB_DATA 2
RANGE $3B8A-$3B8C DB_DATA 2
RANGE $3B8C-$3B8E DB_DATA 2
RANGE $3B8E-$3B90 DB_DATA 2
RANGE $3B90-$3B92 DB_DATA 2
RANGE $3B92-$3B94 DB_DATA 2
RANGE $3B94-$3B96 DB_DATA 2
RANGE $3B96-$3B98 DB_DATA 2
RANGE $3B98-$3B9A DB_DATA 2
RANGE $3B9A-$3B9C DB_DATA 2
RANGE $3B9C-$3B9E DB_DATA 2
RANGE $3B9E-$3B9F DB_DATA 1
RANGE $3B9F-$3BA1 DW_DATA 1
RANGE $3BA1-$3BA2 DB_DATA 1
RANGE $3BA2-$3BA3 DB_DATA 1
RANGE $3BA3-$3BA5 DW_DATA 1
RANGE $3BA5-$3BA6 DB_DATA 1
RANGE $3BA6-$3BA7 DB_DATA 1
RANGE $3BA7-$3BA8 DB_DATA 1
RANGE $3BA8-$3BA9 DB_DATA 1
RANGE $3BA9-$3BAA DB_DATA 1
RANGE $3BAA-$3BAC DW_DATA 1
RANGE $3BAC-$3BAD DB_DATA 1
RANGE $3BAD-$3BAE DB_DATA 1
RANGE $3BAE-$3BB0 DW_DATA 1
RANGE $3BB0-$3BB1 DB_DATA 1
RANGE $3BB1-$3BB2 DB_DATA 1
RANGE $3BB2-$3BB3 DB_DATA 1
RANGE $3BB3-$3BB4 DB_DATA 1
RANGE $3BB4-$3BB6 DW_DATA 1
RANGE $3BB6-$3BB8 DB_DATA 2
RANGE $3BB8-$3BBA DB_DATA 2
RANGE $3BBA-$3BBC DB_DATA 2
RANGE $3BBC-$3BBE DB_DATA 2
RANGE $3BBE-$3BC0 DB_DATA 2
RANGE $3BC0-$3BC2 DB_DATA 2
RANGE $3BC2-$3BC4 DB_DATA 2
RANGE $3BC4-$3BC6 DB_DATA 2
RANGE $3BC6-$3BC8 DB_DATA 2
RANGE $3BC8-$3BCA DB_DATA 2
RANGE $3BCA-$3BCC DB_DATA 2
RANGE $3BCC-$3BCE DB_DATA 2
RANGE $3BCE-$3BD0 DB_DATA 2
RANGE $3BD0-$3BD2 DB_DATA 2
RANGE $3BD2-$3BD4 DB_DATA 2
RANGE $3BD4-$3BD6 DB_DATA 2
RANGE $3BD6-$3BD8 DB_DATA 2
RANGE $3BD8-$3BD9 DB_DATA 1
RANGE $3BD9-$3BDB DW_DATA 1
RANGE $3BDB-$3BDC DB_DATA 1
RANGE $3BDC-$3BDD DB_DATA 1
RANGE $3BDD-$3BDF DW_DATA 1
RANGE $3BDF-$3BE0 DB_DATA 1
RANGE $3BE0-$3BE1 DB_DATA 1
RANGE $3BE1-$3BE2 DB_DATA 1
RANGE $3BE2-$3BE3 DB_DATA 1
RANGE $3BE3-$3BE4 DB_DATA 1
RANGE $3BE4-$3BE6 DW_DATA 1
RANGE $3BE6-$3BE7 DB_DATA 1
RANGE $3BE7-$3BE8 DB_DATA 1
RANGE $3BE8-$3BEA DW_DATA 1
RANGE $3BEA-$3BEB DB_DATA 1
RANGE $3BEB-$3BEC DB_DATA 1
RANGE $3BEC-$3BED DB_DATA 1
RANGE $3BED-$3BEE DB_DATA 1
RANGE $3BEE-$3BEF DB_DATA 1
RANGE $3BEF-$3BF1 DW_DATA 1
RANGE $3BF1-$3BF2 DB_DATA 1
RANGE $3BF2-$3BF3 DB_DATA 1
RANGE $3BF3-$3BF5 DW_DATA 1
RANGE $3BF5-$3BF6 DB_DATA 1
RANGE $3BF6-$3BF7 DB_DATA 1
RANGE $3BF7-$3BF8 DB_DATA 1
RANGE $3BF8-$3BF9 DB_DATA 1
RANGE $3BF9-$3BFA DB_DATA 1
RANGE $3BFA-$3BFC DW_DATA 1
RANGE $3BFC-$3BFD DB_DATA 1
RANGE $3BFD-$3BFE DB_DATA 1
RANGE $3BFE-$3C00 DW_DATA 1
RANGE $3C00-$3C01 DB_DATA 1
RANGE $3C01-$3C02 DB_DATA 1
RANGE $3C02-$3C03 DB_DATA 1
RANGE $3C03-$3C04 DB_DATA 1
RANGE $3C04-$3C06 DW_DATA 1
RANGE $3C06-$3C08 DB_DATA 2
RANGE $3C08-$3C0A DB_DATA 2
RANGE $3C0A-$3C0C DB_DATA 2
RANGE $3C0C-$3C0E DB_DATA 2
RANGE $3C0E-$3C10 DB_DATA 2
RANGE $3C10-$3C12 DB_DATA 2
RANGE $3C12-$3C14 DB_DATA 2
RANGE $3C14-$3C16 DB_DATA 2
RANGE $3C16-$3C18 DB_DATA 2
RANGE $3C18-$3C1A DB_DATA 2
RANGE $3C1A-$3C1C DB_DATA 2
RANGE $3C1C-$3C1E DB_DATA 2
RANGE $3C1E-$3C20 DB_DATA 2
RANGE $3C20-$3C22 DB_DATA 2
RANGE $3C22-$3C24 DB_DATA 2
RANGE $3C24-$3C26 DB_DATA 2
RANGE $3C26-$3C28 DB_DATA 2
RANGE $3C28-$3C29 DB_DATA 1
RANGE $3C29-$3C2B DW_DATA 1
RANGE $3C2B-$3C2C DB_DATA 1
RANGE $3C2C-$3C2D DB_DATA 1
RANGE $3C2D-$3C2F DW_DATA 1
RANGE $3C2F-$3C30 DB_DATA 1
RANGE $3C30-$3C31 DB_DATA 1
RANGE $3C31-$3C32 DB_DATA 1
RANGE $3C32-$3C33 DB_DATA 1
RANGE $3C33-$3C34 DB_DATA 1
RANGE $3C34-$3C36 DW_DATA 1
RANGE $3C36-$3C37 DB_DATA 1
RANGE $3C37-$3C38 DB_DATA 1
RANGE $3C38-$3C3A DW_DATA 1
RANGE $3C3A-$3C3B DB_DATA 1
RANGE $3C3B-$3C3C DB_DATA 1
RANGE $3C3C-$3C3D DB_DATA 1
RANGE $3C3D-$3C3E DB_DATA 1
RANGE $3C3E-$3C40 DW_DATA 1
RANGE $3C40-$3C42 DB_DATA 2
RANGE $3C42-$3C44 DB_DATA 2
RANGE $3C44-$3C46 DB_DATA 2
RANGE $3C46-$3C48 DB_DATA 2
RANGE $3C48-$3C4A DB_DATA 2
RANGE $3C4A-$3C4C DB_DATA 2
RANGE $3C4C-$3C4E DB_DATA 2
RANGE $3C4E-$3C50 DB_DATA 2
RANGE $3C50-$3C52 DB_DATA 2
RANGE $3C52-$3C54 DB_DATA 2
RANGE $3C54-$3C56 DB_DATA 2
RANGE $3C56-$3C58 DB_DATA 2
RANGE $3C58-$3C5A DB_DATA 2
RANGE $3C5A-$3C5C DB_DATA 2
RANGE $3C5C-$3C5E DB_DATA 2
RANGE $3C5E-$3C60 DB_DATA 2
RANGE $3C60-$3C62 DB_DATA 2
RANGE $3C62-$3C63 DB_DATA 1
RANGE $3C63-$3C65 DW_DATA 1
RANGE $3C65-$3C66 DB_DATA 1
RANGE $3C66-$3C67 DB_DATA 1
RANGE $3C67-$3C69 DW_DATA 1
RANGE $3C69-$3C6A DB_DATA 1
RANGE $3C6A-$3C6B DB_DATA 1
RANGE $3C6B-$3C6C DB_DATA 1
RANGE $3C6C-$3C6D DB_DATA 1
RANGE $3C6D-$3C6E DB_DATA 1
RANGE $3C6E-$3C70 DW_DATA 1
RANGE $3C70-$3C71 DB_DATA 1
RANGE $3C71-$3C72 DB_DATA 1
RANGE $3C72-$3C74 DW_DATA 1
RANGE $3C74-$3C75 DB_DATA 1
RANGE $3C75-$3C76 DB_DATA 1
RANGE $3C76-$3C77 DB_DATA 1
RANGE $3C77-$3C78 DB_DATA 1
RANGE $3C78-$3C7A DW_DATA 1
RANGE $3C7A-$3C7C DB_DATA 2
RANGE $3C7C-$3C7E DB_DATA 2
RANGE $3C7E-$3C80 DB_DATA 2
RANGE $3C80-$3C82 DB_DATA 2
RANGE $3C82-$3C84 DB_DATA 2
RANGE $3C84-$3C86 DB_DATA 2
RANGE $3C86-$3C88 DB_DATA 2
RANGE $3C88-$3C8A DB_DATA 2
RANGE $3C8A-$3C8C DB_DATA 2
RANGE $3C8C-$3C8E DB_DATA 2
RANGE $3C8E-$3C90 DB_DATA 2
RANGE $3C90-$3C92 DB_DATA 2
RANGE $3C92-$3C94 DB_DATA 2
RANGE $3C94-$3C96 DB_DATA 2
RANGE $3C96-$3C98 DB_DATA 2
RANGE $3C98-$3C9A DB_DATA 2
RANGE $3C9A-$3C9C DB_DATA 2
RANGE $3C9C-$3C9D DB_DATA 1
RANGE $3C9D-$3C9F DW_DATA 1
RANGE $3C9F-$3CA0 DB_DATA 1
RANGE $3CA0-$3CA1 DB_DATA 1
RANGE $3CA1-$3CA3 DW_DATA 1
RANGE $3CA3-$3CA4 DB_DATA 1
RANGE $3CA4-$3CA5 DB_DATA 1
RANGE $3CA5-$3CA6 DB_DATA 1
RANGE $3CA6-$3CA7 DB_DATA 1
RANGE $3CA7-$3CA8 DB_DATA 1
RANGE $3CA8-$3CAA DW_DATA 1
RANGE $3CAA-$3CAB DB_DATA 1
RANGE $3CAB-$3CAC DB_DATA 1
RANGE $3CAC-$3CAE DW_DATA 1
RANGE $3CAE-$3CAF DB_DATA 1
RANGE $3CAF-$3CB0 DB_DATA 1
RANGE $3CB0-$3CB1 DB_DATA 1
RANGE $3CB1-$3CB2 DB_DATA 1
RANGE $3CB2-$3CB3 DB_DATA 1
RANGE $3CB3-$3CB5 DW_DATA 1
RANGE $3CB5-$3CB6 DB_DATA 1
RANGE $3CB6-$3CB7 DB_DATA 1
RANGE $3CB7-$3CB9 DW_DATA 1
RANGE $3CB9-$3CBA DB_DATA 1
RANGE $3CBA-$3CBB DB_DATA 1
RANGE $3CBB-$3CBC DB_DATA 1
RANGE $3CBC-$3CBD DB_DATA 1
RANGE $3CBD-$3CBE DB_DATA 1
RANGE $3CBE-$3CC0 DW_DATA 1
RANGE $3CC0-$3CC1 DB_DATA 1
RANGE $3CC1-$3CC2 DB_DATA 1
RANGE $3CC2-$3CC4 DW_DATA 1
RANGE $3CC4-$3CC5 DB_DATA 1
RANGE $3CC5-$3CC6 DB_DATA 1
RANGE $3CC6-$3CC7 DB_DATA 1
RANGE $3CC7-$3CC8 DB_DATA 1
RANGE $3CC8-$3CCA DW_DATA 1
RANGE $3CCA-$3CCC DB_DATA 2
RANGE $3CCC-$3CCE DB_DATA 2
RANGE $3CCE-$3CD0 DB_DATA 2
RANGE $3CD0-$3CD2 DB_DATA 2
RANGE $3CD2-$3CD4 DB_DATA 2
RANGE $3CD4-$3CD6 DB_DATA 2
RANGE $3CD6-$3CD8 DB_DATA 2
RANGE $3CD8-$3CDA DB_DATA 2
RANGE $3CDA-$3CDC DB_DATA 2
RANGE $3CDC-$3CDE DB_DATA 2
RANGE $3CDE-$3CE0 DB_DATA 2
RANGE $3CE0-$3CE2 DB_DATA 2
RANGE $3CE2-$3CE4 DB_DATA 2
RANGE $3CE4-$3CE6 DB_DATA 2
RANGE $3CE6-$3CE8 DB_DATA 2
RANGE $3CE8-$3CEA DB_DATA 2
RANGE $3CEA-$3CEC DB_DATA 2
RANGE $3CEC-$3CEE DB_DATA 2
RANGE $3CEE-$3CEF DB_DATA 1
RANGE $3CEF-$3CF1 DW_DATA 1
RANGE $3CF1-$3CF2 DB_DATA 1
RANGE $3CF2-$3CF3 DB_DATA 1
RANGE $3CF3-$3CF5 DW_DATA 1
RANGE $3CF5-$3CF6 DB_DATA 1
RANGE $3CF6-$3CF7 DB_DATA 1
RANGE $3CF7-$3CF8 DB_DATA 1
RANGE $3CF8-$3CF9 DB_DATA 1
RANGE $3CF9-$3CFB DW_DATA 1
RANGE $3CFB-$3CFD DB_DATA 2
RANGE $3CFD-$3CFF DB_DATA 2
RANGE $3CFF-$3D01 DB_DATA 2
RANGE $3D01-$3D03 DB_DATA 2
RANGE $3D03-$3D05 DB_DATA 2
RANGE $3D05-$3D07 DB_DATA 2
RANGE $3D07-$3D09 DB_DATA 2
RANGE $3D09-$3D0B DB_DATA 2
RANGE $3D0B-$3D0D DB_DATA 2
RANGE $3D0D-$3D0F DB_DATA 2
RANGE $3D0F-$3D11 DB_DATA 2
RANGE $3D11-$3D13 DB_DATA 2
RANGE $3D13-$3D15 DB_DATA 2
RANGE $3D15-$3D17 DB_DATA 2
RANGE $3D17-$3D19 DB_DATA 2
RANGE $3D19-$3D1B DB_DATA 2
RANGE $3D1B-$3D1D DB_DATA 2
RANGE $3D1D-$3D1F DB_DATA 2
RANGE $3D1F-$3D20 DB_DATA 1
RANGE $3D20-$3D22 DW_DATA 1
RANGE $3D22-$3D23 DB_DATA 1
RANGE $3D23-$3D24 DB_DATA 1
RANGE $3D24-$3D26 DW_DATA 1
RANGE $3D26-$3D27 DB_DATA 1
RANGE $3D27-$3D28 DB_DATA 1
RANGE $3D28-$3D29 DB_DATA 1
RANGE $3D29-$3D2A DB_DATA 1
RANGE $3D2A-$3D2C DW_DATA 1
RANGE $3D2C-$3D2E DB_DATA 2
RANGE $3D2E-$3D30 DB_DATA 2
RANGE $3D30-$3D32 DB_DATA 2
RANGE $3D32-$3D34 DB_DATA 2
RANGE $3D34-$3D36 DB_DATA 2
RANGE $3D36-$3D38 DB_DATA 2
RANGE $3D38-$3D3A DB_DATA 2
RANGE $3D3A-$3D3C DB_DATA 2
RANGE $3D3C-$3D3E DB_DATA 2
RANGE $3D3E-$3D40 DB_DATA 2
RANGE $3D40-$3D42 DB_DATA 2
RANGE $3D42-$3D44 DB_DATA 2
RANGE $3D44-$3D46 DB_DATA 2
RANGE $3D46-$3D48 DB_DATA 2
RANGE $3D48-$3D4A DB_DATA 2
RANGE $3D4A-$3D4C DB_DATA 2
RANGE $3D4C-$3D4E DB_DATA 2
RANGE $3D4E-$3D50 DB_DATA 2
RANGE $3D50-$3D51 DB_DATA 1
RANGE $3D51-$3D53 DW_DATA 1
RANGE $3D53-$3D54 DB_DATA 1
RANGE $3D54-$3D55 DB_DATA 1
RANGE $3D55-$3D57 DW_DATA 1
RANGE $3D57-$3D58 DB_DATA 1
RANGE $3D58-$3D59 DB_DATA 1
RANGE $3D59-$3D5A DB_DATA 1
RANGE $3D5A-$3D5B DB_DATA 1
RANGE $3D5B-$3D5C DB_DATA 1
RANGE $3D5C-$3D5E DW_DATA 1
RANGE $3D5E-$3D5F DB_DATA 1
RANGE $3D5F-$3D60 DB_DATA 1
RANGE $3D60-$3D62 DW_DATA 1
RANGE $3D62-$3D63 DB_DATA 1
RANGE $3D63-$3D64 DB_DATA 1
RANGE $3D64-$3D65 DB_DATA 1
RANGE $3D65-$3D66 DB_DATA 1
RANGE $3D66-$3D67 DB_DATA 1
RANGE $3D67-$3D69 DW_DATA 1
RANGE $3D69-$3D6A DB_DATA 1
RANGE $3D6A-$3D6B DB_DATA 1
RANGE $3D6B-$3D6D DW_DATA 1
RANGE $3D6D-$3D6E DB_DATA 1
RANGE $3D6E-$3D6F DB_DATA 1
RANGE $3D6F-$3D70 DB_DATA 1
RANGE $3D70-$3D71 DB_DATA 1
RANGE $3D71-$3D72 DB_DATA 1
RANGE $3D72-$3D74 DW_DATA 1
RANGE $3D74-$3D75 DB_DATA 1
RANGE $3D75-$3D76 DB_DATA 1
RANGE $3D76-$3D78 DW_DATA 1
RANGE $3D78-$3D79 DB_DATA 1
RANGE $3D79-$3D7A DB_DATA 1
RANGE $3D7A-$3D7B DB_DATA 1
RANGE $3D7B-$3D7C DB_DATA 1
RANGE $3D7C-$3D7E DW_DATA 1
RANGE $3D7E-$3D80 DB_DATA 2
RANGE $3D80-$3D82 DB_DATA 2
RANGE $3D82-$3D84 DB_DATA 2
RANGE $3D84-$3D86 DB_DATA 2
RANGE $3D86-$3D88 DB_DATA 2
RANGE $3D88-$3D8A DB_DATA 2
RANGE $3D8A-$3D8C DB_DATA 2
RANGE $3D8C-$3D8E DB_DATA 2
RANGE $3D8E-$3D90 DB_DATA 2
RANGE $3D90-$3D92 DB_DATA 2
RANGE $3D92-$3D94 DB_DATA 2
RANGE $3D94-$3D96 DB_DATA 2
RANGE $3D96-$3D98 DB_DATA 2
RANGE $3D98-$3D9A DB_DATA 2
RANGE $3D9A-$3D9C DB_DATA 2
RANGE $3D9C-$3D9E DB_DATA 2
RANGE $3D9E-$3DA0 DB_DATA 2
RANGE $3DA0-$3DA1 DB_DATA 1
RANGE $3DA1-$3DA3 DW_DATA 1
RANGE $3DA3-$3DA4 DB_DATA 1
RANGE $3DA4-$3DA5 DB_DATA 1
RANGE $3DA5-$3DA7 DW_DATA 1
RANGE $3DA7-$3DA8 DB_DATA 1
RANGE $3DA8-$3DA9 DB_DATA 1
RANGE $3DA9-$3DAA DB_DATA 1
RANGE $3DAA-$3DAB DB_DATA 1
RANGE $3DAB-$3DAC DB_DATA 1
RANGE $3DAC-$3DAE DW_DATA 1
RANGE $3DAE-$3DAF DB_DATA 1
RANGE $3DAF-$3DB0 DB_DATA 1
RANGE $3DB0-$3DB2 DW_DATA 1
RANGE $3DB2-$3DB3 DB_DATA 1
RANGE $3DB3-$3DB4 DB_DATA 1
RANGE $3DB4-$3DB5 DB_DATA 1
RANGE $3DB5-$3DB6 DB_DATA 1
RANGE $3DB6-$3DB7 DB_DATA 1
RANGE $3DB7-$3DB9 DW_DATA 1
RANGE $3DB9-$3DBA DB_DATA 1
RANGE $3DBA-$3DBB DB_DATA 1
RANGE $3DBB-$3DBD DW_DATA 1
RANGE $3DBD-$3DBE DB_DATA 1
RANGE $3DBE-$3DBF DB_DATA 1
RANGE $3DBF-$3DC0 DB_DATA 1
RANGE $3DC0-$3DC1 DB_DATA 1
RANGE $3DC1-$3DC3 DW_DATA 1
RANGE $3DC3-$3DC5 DB_DATA 2
RANGE $3DC5-$3DC7 DB_DATA 2
RANGE $3DC7-$3DC9 DB_DATA 2
RANGE $3DC9-$3DCB DB_DATA 2
RANGE $3DCB-$3DCD DB_DATA 2
RANGE $3DCD-$3DCF DB_DATA 2
RANGE $3DCF-$3DD1 DB_DATA 2
RANGE $3DD1-$3DD3 DB_DATA 2
RANGE $3DD3-$3DD5 DB_DATA 2
RANGE $3DD5-$3DD7 DB_DATA 2
RANGE $3DD7-$3DD9 DB_DATA 2
RANGE $3DD9-$3DDB DB_DATA 2
RANGE $3DDB-$3DDD DB_DATA 2
RANGE $3DDD-$3DDF DB_DATA 2
RANGE $3DDF-$3DE1 DB_DATA 2
RANGE $3DE1-$3DE3 DB_DATA 2
RANGE $3DE3-$3DE5 DB_DATA 2
RANGE $3DE5-$3DE6 DB_DATA 1
RANGE $3DE6-$3DE8 DW_DATA 1
RANGE $3DE8-$3DE9 DB_DATA 1
RANGE $3DE9-$3DEA DB_DATA 1
RANGE $3DEA-$3DEC DW_DATA 1
RANGE $3DEC-$3DED DB_DATA 1
RANGE $3DED-$3DEE DB_DATA 1
RANGE $3DEE-$3DEF DB_DATA 1
RANGE $3DEF-$3DF0 DB_DATA 1
RANGE $3DF0-$3DF1 DB_DATA 1
RANGE $3DF1-$3DF3 DW_DATA 1
RANGE $3DF3-$3DF4 DB_DATA 1
RANGE $3DF4-$3DF5 DB_DATA 1
RANGE $3DF5-$3DF7 DW_DATA 1
RANGE $3DF7-$3DF8 DB_DATA 1
RANGE $3DF8-$3DF9 DB_DATA 1
RANGE $3DF9-$3DFA DB_DATA 1
RANGE $3DFA-$3DFB DB_DATA 1
RANGE $3DFB-$3DFC DB_DATA 1
RANGE $3DFC-$3DFE DW_DATA 1
RANGE $3DFE-$3DFF DB_DATA 1
RANGE $3DFF-$3E00 DB_DATA 1
RANGE $3E00-$3E02 DW_DATA 1
RANGE $3E02-$3E03 DB_DATA 1
RANGE $3E03-$3E04 DB_DATA 1
RANGE $3E04-$3E05 DB_DATA 1
RANGE $3E05-$3E06 DB_DATA 1
RANGE $3E06-$3E08 DW_DATA 1
RANGE $3E08-$3E0A DB_DATA 2
RANGE $3E0A-$3E0C DB_DATA 2
RANGE $3E0C-$3E0E DB_DATA 2
RANGE $3E0E-$3E10 DB_DATA 2
RANGE $3E10-$3E12 DB_DATA 2
RANGE $3E12-$3E14 DB_DATA 2
RANGE $3E14-$3E16 DB_DATA 2
RANGE $3E16-$3E18 DB_DATA 2
RANGE $3E18-$3E1A DB_DATA 2
RANGE $3E1A-$3E1C DB_DATA 2
RANGE $3E1C-$3E1E DB_DATA 2
RANGE $3E1E-$3E20 DB_DATA 2
RANGE $3E20-$3E22 DB_DATA 2
RANGE $3E22-$3E24 DB_DATA 2
RANGE $3E24-$3E26 DB_DATA 2
RANGE $3E26-$3E28 DB_DATA 2
RANGE $3E28-$3E2A DB_DATA 2
RANGE $3E2A-$3E2B DB_DATA 1
RANGE $3E2B-$3E2D DW_DATA 1
RANGE $3E2D-$3E2E DB_DATA 1
RANGE $3E2E-$3E2F DB_DATA 1
RANGE $3E2F-$3E31 DW_DATA 1
RANGE $3E31-$3E32 DB_DATA 1
RANGE $3E32-$3E33 DB_DATA 1
RANGE $3E33-$3E34 DB_DATA 1
RANGE $3E34-$3E35 DB_DATA 1
RANGE $3E35-$3E36 DB_DATA 1
RANGE $3E36-$3E38 DW_DATA 1
RANGE $3E38-$3E39 DB_DATA 1
RANGE $3E39-$3E3A DB_DATA 1
RANGE $3E3A-$3E3C DW_DATA 1
RANGE $3E3C-$3E3D DB_DATA 1
RANGE $3E3D-$3E3E DB_DATA 1
RANGE $3E3E-$3E3F DB_DATA 1
RANGE $3E3F-$3E40 DB_DATA 1
RANGE $3E40-$3E41 DB_DATA 1
RANGE $3E41-$3E43 DW_DATA 1
RANGE $3E43-$3E44 DB_DATA 1
RANGE $3E44-$3E45 DB_DATA 1
RANGE $3E45-$3E47 DW_DATA 1
RANGE $3E47-$3E48 DB_DATA 1
RANGE $3E48-$3E49 DB_DATA 1
RANGE $3E49-$3E4A DB_DATA 1
RANGE $3E4A-$3E4B DB_DATA 1
RANGE $3E4B-$3E4C DB_DATA 1
RANGE $3E4C-$3E4E DW_DATA 1
RANGE $3E4E-$3E4F DB_DATA 1
RANGE $3E4F-$3E50 DB_DATA 1
RANGE $3E50-$3E52 DW_DATA 1
RANGE $3E52-$3E53 DB_DATA 1
RANGE $3E53-$3E54 DB_DATA 1
RANGE $3E54-$3E55 DB_DATA 1
RANGE $3E55-$3E56 DB_DATA 1
RANGE $3E56-$3E57 DB_DATA 1
RANGE $3E57-$3E59 DW_DATA 1
RANGE $3E59-$3E5A DB_DATA 1
RANGE $3E5A-$3E5B DB_DATA 1
RANGE $3E5B-$3E5D DW_DATA 1
RANGE $3E5D-$3E5E DB_DATA 1
RANGE $3E5E-$3E5F DB_DATA 1
RANGE $3E5F-$3E60 DB_DATA 1
RANGE $3E60-$3E61 DB_DATA 1
RANGE $3E61-$3E62 DB_DATA 1
RANGE $3E62-$3E64 DW_DATA 1
RANGE $3E64-$3E65 DB_DATA 1
RANGE $3E65-$3E66 DB_DATA 1
RANGE $3E66-$3E68 DW_DATA 1
RANGE $3E68-$3E69 DB_DATA 1
RANGE $3E69-$3E6A DB_DATA 1
RANGE $3E6A-$3E6B DB_DATA 1
RANGE $3E6B-$3E6C DB_DATA 1
RANGE $3E6C-$3E6E DW_DATA 1
RANGE $3E6E-$3E70 DB_DATA 2
RANGE $3E70-$3E72 DB_DATA 2
RANGE $3E72-$3E74 DB_DATA 2
RANGE $3E74-$3E76 DB_DATA 2
RANGE $3E76-$3E78 DB_DATA 2
RANGE $3E78-$3E7A DB_DATA 2
RANGE $3E7A-$3E7C DB_DATA 2
RANGE $3E7C-$3E7E DB_DATA 2
RANGE $3E7E-$3E80 DB_DATA 2
RANGE $3E80-$3E82 DB_DATA 2
RANGE $3E82-$3E84 DB_DATA 2
RANGE $3E84-$3E86 DB_DATA 2
RANGE $3E86-$3E88 DB_DATA 2
RANGE $3E88-$3E8A DB_DATA 2
RANGE $3E8A-$3E8C DB_DATA 2
RANGE $3E8C-$3E8E DB_DATA 2
RANGE $3E8E-$3E90 DB_DATA 2
RANGE $3E90-$3E91 DB_DATA 1
RANGE $3E91-$3E93 DW_DATA 1
RANGE $3E93-$3E94 DB_DATA 1
RANGE $3E94-$3E95 DB_DATA 1
RANGE $3E95-$3E97 DW_DATA 1
RANGE $3E97-$3E98 DB_DATA 1
RANGE $3E98-$3E99 DB_DATA 1
RANGE $3E99-$3E9A DB_DATA 1
RANGE $3E9A-$3E9B DB_DATA 1
RANGE $3E9B-$3E9D DW_DATA 1
RANGE $3E9D-$3E9F DB_DATA 2
RANGE $3E9F-$3EA1 DB_DATA 2
RANGE $3EA1-$3EA3 DB_DATA 2
RANGE $3EA3-$3EA5 DB_DATA 2
RANGE $3EA5-$3EA7 DB_DATA 2
RANGE $3EA7-$3EA9 DB_DATA 2
RANGE $3EA9-$3EAB DB_DATA 2
RANGE $3EAB-$3EAD DB_DATA 2
RANGE $3EAD-$3EAF DB_DATA 2
RANGE $3EAF-$3EB1 DB_DATA 2
RANGE $3EB1-$3EB3 DB_DATA 2
RANGE $3EB3-$3EB5 DB_DATA 2
RANGE $3EB5-$3EB7 DB_DATA 2
RANGE $3EB7-$3EB9 DB_DATA 2
RANGE $3EB9-$3EBB DB_DATA 2
RANGE $3EBB-$3EBD DB_DATA 2
RANGE $3EBD-$3EBF DB_DATA 2
RANGE $3EBF-$3EC1 DB_DATA 2
RANGE $3EC1-$3EC2 DB_DATA 1
RANGE $3EC2-$3EC4 DW_DATA 1
RANGE $3EC4-$3EC5 DB_DATA 1
RANGE $3EC5-$3EC6 DB_DATA 1
RANGE $3EC6-$3EC8 DW_DATA 1
RANGE $3EC8-$3EC9 DB_DATA 1
RANGE $3EC9-$3ECA DB_DATA 1
RANGE $3ECA-$3ECB DB_DATA 1
RANGE $3ECB-$3ECC DB_DATA 1
RANGE $3ECC-$3ECE DW_DATA 1
RANGE $3ECE-$3ED0 DB_DATA 2
RANGE $3ED0-$3ED2 DB_DATA 2
RANGE $3ED2-$3ED4 DB_DATA 2
RANGE $3ED4-$3ED6 DB_DATA 2
RANGE $3ED6-$3ED8 DB_DATA 2
RANGE $3ED8-$3EDA DB_DATA 2
RANGE $3EDA-$3EDC DB_DATA 2
RANGE $3EDC-$3EDE DB_DATA 2
RANGE $3EDE-$3EE0 DB_DATA 2
RANGE $3EE0-$3EE2 DB_DATA 2
RANGE $3EE2-$3EE4 DB_DATA 2
RANGE $3EE4-$3EE6 DB_DATA 2
RANGE $3EE6-$3EE8 DB_DATA 2
RANGE $3EE8-$3EEA DB_DATA 2
RANGE $3EEA-$3EEC DB_DATA 2
RANGE $3EEC-$3EEE DB_DATA 2
RANGE $3EEE-$3EF0 DB_DATA 2
RANGE $3EF0-$3EF2 DB_DATA 2
RANGE $3EF2-$3EF3 DB_DATA 1
RANGE $3EF3-$3EF5 DW_DATA 1
RANGE $3EF5-$3EF6 DB_DATA 1
RANGE $3EF6-$3EF7 DB_DATA 1
RANGE $3EF7-$3EF9 DW_DATA 1
RANGE $3EF9-$3EFA DB_DATA 1
RANGE $3EFA-$3EFB DB_DATA 1
RANGE $3EFB-$3EFC DB_DATA 1
RANGE $3EFC-$3EFD DB_DATA 1
RANGE $3EFD-$3EFF DW_DATA 1
RANGE $3EFF-$3F01 DB_DATA 2
RANGE $3F01-$3F03 DB_DATA 2
RANGE $3F03-$3F05 DB_DATA 2
RANGE $3F05-$3F07 DB_DATA 2
RANGE $3F07-$3F09 DB_DATA 2
RANGE $3F09-$3F0B DB_DATA 2
RANGE $3F0B-$3F0D DB_DATA 2
RANGE $3F0D-$3F0F DB_DATA 2
RANGE $3F0F-$3F11 DB_DATA 2
RANGE $3F11-$3F13 DB_DATA 2
RANGE $3F13-$3F15 DB_DATA 2
RANGE $3F15-$3F17 DB_DATA 2
RANGE $3F17-$3F19 DB_DATA 2
RANGE $3F19-$3F1B DB_DATA 2
RANGE $3F1B-$3F1D DB_DATA 2
RANGE $3F1D-$3F1F DB_DATA 2
RANGE $3F1F-$3F21 DB_DATA 2
RANGE $3F21-$3F23 DB_DATA 2
RANGE $3F23-$3F25 DB_DATA 2
RANGE $3F25-$3F26 DB_DATA 1
RANGE $3F26-$3F28 DW_DATA 1
RANGE $3F28-$3F29 DB_DATA 1
RANGE $3F29-$3F2A DB_DATA 1
RANGE $3F2A-$3F2C DW_DATA 1
RANGE $3F2C-$3F2D DB_DATA 1
RANGE $3F2D-$3F2E DB_DATA 1
RANGE $3F2E-$3F2F DB_DATA 1
RANGE $3F2F-$3F30 DB_DATA 1
RANGE $3F30-$3F31 DB_DATA 1
RANGE $3F31-$3F33 DW_DATA 1
RANGE $3F33-$3F34 DB_DATA 1
RANGE $3F34-$3F35 DB_DATA 1
RANGE $3F35-$3F37 DW_DATA 1
RANGE $3F37-$3F38 DB_DATA 1
RANGE $3F38-$3F39 DB_DATA 1
RANGE $3F39-$3F3A DB_DATA 1
RANGE $3F3A-$3F3B DB_DATA 1
RANGE $3F3B-$3F3C DB_DATA 1
RANGE $3F3C-$3F3E DW_DATA 1
RANGE $3F3E-$3F3F DB_DATA 1
RANGE $3F3F-$3F40 DB_DATA 1
RANGE $3F40-$3F42 DW_DATA 1
RANGE $3F42-$3F43 DB_DATA 1
RANGE $3F43-$3F44 DB_DATA 1
RANGE $3F44-$3F45 DB_DATA 1
RANGE $3F45-$3F46 DB_DATA 1
RANGE $3F46-$3F47 DB_DATA 1
RANGE $3F47-$3F49 DW_DATA 1
RANGE $3F49-$3F4A DB_DATA 1
RANGE $3F4A-$3F4B DB_DATA 1
RANGE $3F4B-$3F4D DW_DATA 1
RANGE $3F4D-$3F4E DB_DATA 1
RANGE $3F4E-$3F4F DB_DATA 1
RANGE $3F4F-$3F50 DB_DATA 1
RANGE $3F50-$3F51 DB_DATA 1
RANGE $3F51-$3F52 DB_DATA 1
RANGE $3F52-$3F54 DW_DATA 1
RANGE $3F54-$3F55 DB_DATA 1
RANGE $3F55-$3F56 DB_DATA 1
RANGE $3F56-$3F58 DW_DATA 1
RANGE $3F58-$3F59 DB_DATA 1
RANGE $3F59-$3F5A DB_DATA 1
RANGE $3F5A-$3F5B DB_DATA 1
RANGE $3F5B-$3F5C DB_DATA 1
RANGE $3F5C-$3F5E DW_DATA 1
RANGE $3F5E-$3F60 DB_DATA 2
RANGE $3F60-$3F62 DB_DATA 2
RANGE $3F62-$3F64 DB_DATA 2
RANGE $3F64-$3F66 DB_DATA 2
RANGE $3F66-$3F68 DB_DATA 2
RANGE $3F68-$3F6A DB_DATA 2
RANGE $3F6A-$3F6C DB_DATA 2
RANGE $3F6C-$3F6E DB_DATA 2
RANGE $3F6E-$3F70 DB_DATA 2
RANGE $3F70-$3F72 DB_DATA 2
RANGE $3F72-$3F74 DB_DATA 2
RANGE $3F74-$3F76 DB_DATA 2
RANGE $3F76-$3F78 DB_DATA 2
RANGE $3F78-$3F7A DB_DATA 2
RANGE $3F7A-$3F7C DW_DATA 1
RANGE $3F7C-$3F7E DB_DATA 2
RANGE $3F7E-$3F80 DB_DATA 2
RANGE $3F80-$3F82 DB_DATA 2
RANGE $3F82-$3F84 DB_DATA 2
RANGE $3F84-$3F86 DB_DATA 2
RANGE $3F86-$3F88 DB_DATA 2
RANGE $3F88-$3F8A DB_DATA 2
RANGE $3F8A-$3F8C DB_DATA 2
RANGE $3F8C-$3F8E DB_DATA 2
RANGE $3F8E-$3F90 DB_DATA 2
RANGE $3F90-$3F92 DB_DATA 2
RANGE $3F92-$3F94 DB_DATA 2
RANGE $3F94-$3F96 DB_DATA 2
RANGE $3F96-$3F98 DB_DATA 2
RANGE $3F98-$3F9A DW_DATA 1
RANGE $3F9A-$3F9C DB_DATA 2
RANGE $3F9C-$3F9E DB_DATA 2
RANGE $3F9E-$3FA0 DB_DATA 2
RANGE $3FA0-$3FA2 DB_DATA 2
RANGE $3FA2-$3FA4 DB_DATA 2
RANGE $3FA4-$3FA6 DB_DATA 2
RANGE $3FA6-$3FA8 DB_DATA 2
RANGE $3FA8-$3FAA DB_DATA 2
RANGE $3FAA-$3FAC DB_DATA 2
RANGE $3FAC-$3FAE DB_DATA 2
RANGE $3FAE-$3FB0 DB_DATA 2
RANGE $3FB0-$3FB2 DB_DATA 2
RANGE $3FB2-$3FB4 DB_DATA 2
RANGE $3FB4-$3FB6 DB_DATA 2
RANGE $3FB6-$3FB8 DW_DATA 1
RANGE $3FB8-$3FBA DB_DATA 2
RANGE $3FBA-$3FBC DB_DATA 2
RANGE $3FBC-$3FBE DB_DATA 2
RANGE $3FBE-$3FC0 DB_DATA 2
RANGE $3FC0-$3FC2 DB_DATA 2
RANGE $3FC2-$3FC4 DB_DATA 2
RANGE $3FC4-$3FC6 DB_DATA 2
RANGE $3FC6-$3FC8 DB_DATA 2
RANGE $3FC8-$3FCA DB_DATA 2
RANGE $3FCA-$3FCC DB_DATA 2
RANGE $3FCC-$3FCE DB_DATA 2
RANGE $3FCE-$3FD0 DB_DATA 2
RANGE $3FD0-$3FD2 DB_DATA 2
RANGE $3FD2-$3FD4 DB_DATA 2
RANGE $3FD4-$3FD5 DB_DATA 1
RANGE $3FD5-$3FD7 DW_DATA 1
RANGE $3FD7-$3FD8 DB_DATA 1
RANGE $3FD8-$3FD9 DB_DATA 1
RANGE $3FD9-$3FDB DW_DATA 1
RANGE $3FDB-$3FDC DB_DATA 1
RANGE $3FDC-$3FDD DB_DATA 1
RANGE $3FDD-$3FDE DB_DATA 1
RANGE $3FDE-$3FDF DB_DATA 1
RANGE $3FDF-$3FE1 DW_DATA 1
RANGE $3FE1-$3FE3 DB_DATA 2
RANGE $3FE3-$3FE5 DB_DATA 2
RANGE $3FE5-$3FE7 DB_DATA 2
RANGE $3FE7-$3FE9 DB_DATA 2
RANGE $3FE9-$3FEB DB_DATA 2
RANGE $3FEB-$3FED DB_DATA 2
RANGE $3FED-$3FEF DB_DATA 2
RANGE $3FEF-$3FF1 DB_DATA 2
RANGE $3FF1-$3FF3 DB_DATA 2
RANGE $3FF3-$3FF5 DB_DATA 2
RANGE $3FF5-$3FF7 DB_DATA 2
RANGE $3FF7-$3FF9 DB_DATA 2
RANGE $3FF9-$3FFB DB_DATA 2
RANGE $3FFB-$3FFD DB_DATA 2
RANGE $3FFD-$3FFE DB_DATA 1
RANGE $3FFE-$4000 DW_DATA 1
RANGE $4000-$4001 DB_DATA 1
RANGE $4001-$4002 DB_DATA 1
RANGE $4002-$4004 DW_DATA 1
RANGE $4004-$4005 DB_DATA 1
RANGE $4005-$4006 DB_DATA 1
RANGE $4006-$4007 DB_DATA 1
RANGE $4007-$4008 DB_DATA 1
RANGE $4008-$400A DW_DATA 1
RANGE $400A-$400C DB_DATA 2
RANGE $400C-$400E DB_DATA 2
RANGE $400E-$4010 DB_DATA 2
RANGE $4010-$4012 DB_DATA 2
RANGE $4012-$4014 DB_DATA 2
RANGE $4014-$4016 DB_DATA 2
RANGE $4016-$4018 DB_DATA 2
RANGE $4018-$401A DB_DATA 2
RANGE $401A-$401C DB_DATA 2
RANGE $401C-$401E DB_DATA 2
RANGE $401E-$4020 DB_DATA 2
RANGE $4020-$4022 DB_DATA 2
RANGE $4022-$4024 DB_DATA 2
RANGE $4024-$4026 DB_DATA 2
RANGE $4026-$4027 DB_DATA 1
RANGE $4027-$4029 DW_DATA 1
RANGE $4029-$402A DB_DATA 1
RANGE $402A-$402B DB_DATA 1
RANGE $402B-$402D DW_DATA 1
RANGE $402D-$402E DB_DATA 1
RANGE $402E-$402F DB_DATA 1
RANGE $402F-$4030 DB_DATA 1
RANGE $4030-$4031 DB_DATA 1
RANGE $4031-$4032 DB_DATA 1
RANGE $4032-$4034 DW_DATA 1
RANGE $4034-$4035 DB_DATA 1
RANGE $4035-$4036 DB_DATA 1
RANGE $4036-$4038 DW_DATA 1
RANGE $4038-$4039 DB_DATA 1
RANGE $4039-$403A DB_DATA 1
RANGE $403A-$403B DB_DATA 1
RANGE $403B-$403C DB_DATA 1
RANGE $403C-$403D DB_DATA 1
RANGE $403D-$403F DW_DATA 1
RANGE $403F-$4040 DB_DATA 1
RANGE $4040-$4041 DB_DATA 1
RANGE $4041-$4043 DW_DATA 1
RANGE $4043-$4044 DB_DATA 1
RANGE $4044-$4045 DB_DATA 1
RANGE $4045-$4046 DB_DATA 1
RANGE $4046-$4047 DB_DATA 1
RANGE $4047-$4048 DB_DATA 1
RANGE $4048-$404A DW_DATA 1
RANGE $404A-$404B DB_DATA 1
RANGE $404B-$404C DB_DATA 1
RANGE $404C-$404E DW_DATA 1
RANGE $404E-$404F DB_DATA 1
RANGE $404F-$4050 DB_DATA 1
RANGE $4050-$4051 DB_DATA 1
RANGE $4051-$4052 DB_DATA 1
RANGE $4052-$4053 DB_DATA 1
RANGE $4053-$4055 DW_DATA 1
RANGE $4055-$4056 DB_DATA 1
RANGE $4056-$4057 DB_DATA 1
RANGE $4057-$4059 DW_DATA 1
RANGE $4059-$405A DB_DATA 1
RANGE $405A-$405B DB_DATA 1
RANGE $405B-$405C DB_DATA 1
RANGE $405C-$405D DB_DATA 1
RANGE $405D-$405E DB_DATA 1
RANGE $405E-$4060 DW_DATA 1
RANGE $4060-$4061 DB_DATA 1
RANGE $4061-$4062 DB_DATA 1
RANGE $4062-$4064 DW_DATA 1
RANGE $4064-$4065 DB_DATA 1
RANGE $4065-$4066 DB_DATA 1
RANGE $4066-$4067 DB_DATA 1
RANGE $4067-$4068 DB_DATA 1
RANGE $4068-$4069 DB_DATA 1
RANGE $4069-$406B DW_DATA 1
RANGE $406B-$406C DB_DATA 1
RANGE $406C-$406D DB_DATA 1
RANGE $406D-$406F DW_DATA 1
RANGE $406F-$4070 DB_DATA 1
RANGE $4070-$4071 DB_DATA 1
RANGE $4071-$4072 DB_DATA 1
RANGE $4072-$4073 DB_DATA 1
RANGE $4073-$4074 DB_DATA 1
RANGE $4074-$4076 DW_DATA 1
RANGE $4076-$4077 DB_DATA 1
RANGE $4077-$4078 DB_DATA 1
RANGE $4078-$407A DW_DATA 1
RANGE $407A-$407B DB_DATA 1
RANGE $407B-$407C DB_DATA 1
RANGE $407C-$407D DB_DATA 1
RANGE $407D-$407E DB_DATA 1
RANGE $407E-$407F DB_DATA 1
RANGE $407F-$4081 DW_DATA 1
RANGE $4081-$4082 DB_DATA 1
RANGE $4082-$4083 DB_DATA 1
RANGE $4083-$4085 DW_DATA 1
RANGE $4085-$4086 DB_DATA 1
RANGE $4086-$4087 DB_DATA 1
RANGE $4087-$4088 DB_DATA 1
RANGE $4088-$4089 DB_DATA 1
RANGE $4089-$408A DB_DATA 1
RANGE $408A-$408C DW_DATA 1
RANGE $408C-$408D DB_DATA 1
RANGE $408D-$408E DB_DATA 1
RANGE $408E-$4090 DW_DATA 1
RANGE $4090-$4091 DB_DATA 1
RANGE $4091-$4092 DB_DATA 1
RANGE $4092-$4093 DB_DATA 1
RANGE $4093-$4094 DB_DATA 1
RANGE $4094-$4095 DB_DATA 1
RANGE $4095-$4097 DW_DATA 1
RANGE $4097-$4098 DB_DATA 1
RANGE $4098-$4099 DB_DATA 1
RANGE $4099-$409B DW_DATA 1
RANGE $409B-$409C DB_DATA 1
RANGE $409C-$409D DB_DATA 1
RANGE $409D-$409E DB_DATA 1
RANGE $409E-$409F DB_DATA 1
RANGE $409F-$40A0 DB_DATA 1
RANGE $40A0-$40A2 DW_DATA 1
RANGE $40A2-$40A3 DB_DATA 1
RANGE $40A3-$40A4 DB_DATA 1
RANGE $40A4-$40A6 DW_DATA 1
RANGE $40A6-$40A7 DB_DATA 1
RANGE $40A7-$40A8 DB_DATA 1
RANGE $40A8-$40A9 DB_DATA 1
RANGE $40A9-$40AA DB_DATA 1
RANGE $40AA-$40AB DB_DATA 1
RANGE $40AB-$40AD DW_DATA 1
RANGE $40AD-$40AE DB_DATA 1
RANGE $40AE-$40AF DB_DATA 1
RANGE $40AF-$40B1 DW_DATA 1
RANGE $40B1-$40B2 DB_DATA 1
RANGE $40B2-$40B3 DB_DATA 1
RANGE $40B3-$40B4 DB_DATA 1
RANGE $40B4-$40B5 DB_DATA 1
RANGE $40B5-$40B6 DB_DATA 1
RANGE $40B6-$40B8 DW_DATA 1
RANGE $40B8-$40B9 DB_DATA 1
RANGE $40B9-$40BA DB_DATA 1
RANGE $40BA-$40BC DW_DATA 1
RANGE $40BC-$40BD DB_DATA 1
RANGE $40BD-$40BE DB_DATA 1
RANGE $40BE-$40BF DB_DATA 1
RANGE $40BF-$40C0 DB_DATA 1
RANGE $40C0-$40C2 DW_DATA 1
RANGE $40C2-$40C4 DB_DATA 2
RANGE $40C4-$40C6 DB_DATA 2
RANGE $40C6-$40C8 DB_DATA 2
RANGE $40C8-$40CA DB_DATA 2
RANGE $40CA-$40CC DB_DATA 2
RANGE $40CC-$40CE DB_DATA 2
RANGE $40CE-$40D0 DB_DATA 2
RANGE $40D0-$40D2 DB_DATA 2
RANGE $40D2-$40D4 DB_DATA 2
RANGE $40D4-$40D6 DB_DATA 2
RANGE $40D6-$40D8 DB_DATA 2
RANGE $40D8-$40DA DB_DATA 2
RANGE $40DA-$40DB DB_DATA 1
RANGE $40DB-$40DD DW_DATA 1
RANGE $40DD-$40DE DB_DATA 1
RANGE $40DE-$40DF DB_DATA 1
RANGE $40DF-$40E1 DW_DATA 1
RANGE $40E1-$40E2 DB_DATA 1
RANGE $40E2-$40E3 DB_DATA 1
RANGE $40E3-$40E4 DB_DATA 1
RANGE $40E4-$40E5 DB_DATA 1
RANGE $40E5-$40E7 DW_DATA 1
RANGE $40E7-$40E9 DB_DATA 2
RANGE $40E9-$40EB DB_DATA 2
RANGE $40EB-$40ED DB_DATA 2
RANGE $40ED-$40EF DB_DATA 2
RANGE $40EF-$40F1 DB_DATA 2
RANGE $40F1-$40F3 DB_DATA 2
RANGE $40F3-$40F5 DB_DATA 2
RANGE $40F5-$40F7 DB_DATA 2
RANGE $40F7-$40F9 DB_DATA 2
RANGE $40F9-$40FB DB_DATA 2
RANGE $40FB-$40FD DB_DATA 2
RANGE $40FD-$40FF DB_DATA 2
RANGE $40FF-$4100 DB_DATA 1
RANGE $4100-$4102 DW_DATA 1
RANGE $4102-$4103 DB_DATA 1
RANGE $4103-$4104 DB_DATA 1
RANGE $4104-$4106 DW_DATA 1
RANGE $4106-$4107 DB_DATA 1
RANGE $4107-$4108 DB_DATA 1
RANGE $4108-$4109 DB_DATA 1
RANGE $4109-$410A DB_DATA 1
RANGE $410A-$410C DW_DATA 1
RANGE $410C-$410E DB_DATA 2
RANGE $410E-$4110 DB_DATA 2
RANGE $4110-$4112 DB_DATA 2
RANGE $4112-$4114 DB_DATA 2
RANGE $4114-$4116 DB_DATA 2
RANGE $4116-$4118 DB_DATA 2
RANGE $4118-$411A DB_DATA 2
RANGE $411A-$411C DB_DATA 2
RANGE $411C-$411E DB_DATA 2
RANGE $411E-$4120 DB_DATA 2
RANGE $4120-$4122 DB_DATA 2
RANGE $4122-$4124 DB_DATA 2
RANGE $4124-$4125 DB_DATA 1
RANGE $4125-$4127 DW_DATA 1
RANGE $4127-$4128 DB_DATA 1
RANGE $4128-$4129 DB_DATA 1
RANGE $4129-$412B DW_DATA 1
RANGE $412B-$412C DB_DATA 1
RANGE $412C-$412D DB_DATA 1
RANGE $412D-$412E DB_DATA 1
RANGE $412E-$412F DB_DATA 1
RANGE $412F-$4130 DB_DATA 1
RANGE $4130-$4132 DW_DATA 1
RANGE $4132-$4133 DB_DATA 1
RANGE $4133-$4134 DB_DATA 1
RANGE $4134-$4136 DW_DATA 1
RANGE $4136-$4137 DB_DATA 1
RANGE $4137-$4138 DB_DATA 1
RANGE $4138-$4139 DB_DATA 1
RANGE $4139-$413A DB_DATA 1
RANGE $413A-$413C DW_DATA 1
RANGE $413C-$413E DB_DATA 2
RANGE $413E-$4140 DB_DATA 2
RANGE $4140-$4142 DB_DATA 2
RANGE $4142-$4144 DB_DATA 2
RANGE $4144-$4146 DB_DATA 2
RANGE $4146-$4148 DB_DATA 2
RANGE $4148-$414A DB_DATA 2
RANGE $414A-$414C DB_DATA 2
RANGE $414C-$414E DB_DATA 2
RANGE $414E-$4150 DB_DATA 2
RANGE $4150-$4152 DB_DATA 2
RANGE $4152-$4153 DB_DATA 1
RANGE $4153-$4155 DW_DATA 1
RANGE $4155-$4156 DB_DATA 1
RANGE $4156-$4157 DB_DATA 1
RANGE $4157-$4159 DW_DATA 1
RANGE $4159-$415A DB_DATA 1
RANGE $415A-$415B DB_DATA 1
RANGE $415B-$415C DB_DATA 1
RANGE $415C-$415D DB_DATA 1
RANGE $415D-$415F DW_DATA 1
RANGE $415F-$4161 DB_DATA 2
RANGE $4161-$4163 DB_DATA 2
RANGE $4163-$4165 DB_DATA 2
RANGE $4165-$4167 DB_DATA 2
RANGE $4167-$4169 DB_DATA 2
RANGE $4169-$416B DB_DATA 2
RANGE $416B-$416D DB_DATA 2
RANGE $416D-$416F DB_DATA 2
RANGE $416F-$4171 DB_DATA 2
RANGE $4171-$4173 DB_DATA 2
RANGE $4173-$4175 DB_DATA 2
RANGE $4175-$4176 DB_DATA 1
RANGE $4176-$4178 DW_DATA 1
RANGE $4178-$4179 DB_DATA 1
RANGE $4179-$417A DB_DATA 1
RANGE $417A-$417C DW_DATA 1
RANGE $417C-$417D DB_DATA 1
RANGE $417D-$417E DB_DATA 1
RANGE $417E-$417F DB_DATA 1
RANGE $417F-$4180 DB_DATA 1
RANGE $4180-$4182 DW_DATA 1
RANGE $4182-$4184 DB_DATA 2
RANGE $4184-$4186 DB_DATA 2
RANGE $4186-$4188 DB_DATA 2
RANGE $4188-$418A DB_DATA 2
RANGE $418A-$418C DB_DATA 2
RANGE $418C-$418E DB_DATA 2
RANGE $418E-$4190 DB_DATA 2
RANGE $4190-$4192 DB_DATA 2
RANGE $4192-$4194 DB_DATA 2
RANGE $4194-$4196 DB_DATA 2
RANGE $4196-$4198 DB_DATA 2
RANGE $4198-$4199 DB_DATA 1
RANGE $4199-$419B DW_DATA 1
RANGE $419B-$419C DB_DATA 1
RANGE $419C-$419D DB_DATA 1
RANGE $419D-$419F DW_DATA 1
RANGE $419F-$41A0 DB_DATA 1
RANGE $41A0-$41A1 DB_DATA 1
RANGE $41A1-$41A2 DB_DATA 1
RANGE $41A2-$41A3 DB_DATA 1
RANGE $41A3-$41A4 DB_DATA 1
RANGE $41A4-$41A6 DW_DATA 1
RANGE $41A6-$41A7 DB_DATA 1
RANGE $41A7-$41A8 DB_DATA 1
RANGE $41A8-$41AA DW_DATA 1
RANGE $41AA-$41AB DB_DATA 1
RANGE $41AB-$41AC DB_DATA 1
RANGE $41AC-$41AD DB_DATA 1
RANGE $41AD-$41AE DB_DATA 1
RANGE $41AE-$41AF DB_DATA 1
RANGE $41AF-$41B1 DW_DATA 1
RANGE $41B1-$41B2 DB_DATA 1
RANGE $41B2-$41B3 DB_DATA 1
RANGE $41B3-$41B5 DW_DATA 1
RANGE $41B5-$41B6 DB_DATA 1
RANGE $41B6-$41B7 DB_DATA 1
RANGE $41B7-$41B8 DB_DATA 1
RANGE $41B8-$41B9 DB_DATA 1
RANGE $41B9-$41BA DB_DATA 1
RANGE $41BA-$41BC DW_DATA 1
RANGE $41BC-$41BD DB_DATA 1
RANGE $41BD-$41BE DB_DATA 1
RANGE $41BE-$41C0 DW_DATA 1
RANGE $41C0-$41C1 DB_DATA 1
RANGE $41C1-$41C2 DB_DATA 1
RANGE $41C2-$41C3 DB_DATA 1
RANGE $41C3-$41C4 DB_DATA 1
RANGE $41C4-$41C5 DB_DATA 1
RANGE $41C5-$41C7 DW_DATA 1
RANGE $41C7-$41C8 DB_DATA 1
RANGE $41C8-$41C9 DB_DATA 1
RANGE $41C9-$41CB DW_DATA 1
RANGE $41CB-$41CC DB_DATA 1
RANGE $41CC-$41CD DB_DATA 1
RANGE $41CD-$41CE DB_DATA 1
RANGE $41CE-$41CF DB_DATA 1
RANGE $41CF-$41D0 DB_DATA 1
RANGE $41D0-$41D2 DW_DATA 1
RANGE $41D2-$41D3 DB_DATA 1
RANGE $41D3-$41D4 DB_DATA 1
RANGE $41D4-$41D6 DW_DATA 1
RANGE $41D6-$41D7 DB_DATA 1
RANGE $41D7-$41D8 DB_DATA 1
RANGE $41D8-$41D9 DB_DATA 1
RANGE $41D9-$41DA DB_DATA 1
RANGE $41DA-$41DB DB_DATA 1
RANGE $41DB-$41DD DW_DATA 1
RANGE $41DD-$41DE DB_DATA 1
RANGE $41DE-$41DF DB_DATA 1
RANGE $41DF-$41E1 DW_DATA 1
RANGE $41E1-$41E2 DB_DATA 1
RANGE $41E2-$41E3 DB_DATA 1
RANGE $41E3-$41E4 DB_DATA 1
RANGE $41E4-$41E5 DB_DATA 1
RANGE $41E5-$41E6 DB_DATA 1
RANGE $41E6-$41E8 DW_DATA 1
RANGE $41E8-$41E9 DB_DATA 1
RANGE $41E9-$41EA DB_DATA 1
RANGE $41EA-$41EC DW_DATA 1
RANGE $41EC-$41ED DB_DATA 1
RANGE $41ED-$41EE DB_DATA 1
RANGE $41EE-$41EF DB_DATA 1
RANGE $41EF-$41F0 DB_DATA 1
RANGE $41F0-$41F1 DB_DATA 1
RANGE $41F1-$41F3 DW_DATA 1
RANGE $41F3-$41F4 DB_DATA 1
RANGE $41F4-$41F5 DB_DATA 1
RANGE $41F5-$41F7 DW_DATA 1
RANGE $41F7-$41F8 DB_DATA 1
RANGE $41F8-$41F9 DB_DATA 1
RANGE $41F9-$41FA DB_DATA 1
RANGE $41FA-$41FB DB_DATA 1
RANGE $41FB-$41FC DB_DATA 1
RANGE $41FC-$41FE DW_DATA 1
RANGE $41FE-$41FF DB_DATA 1
RANGE $41FF-$4200 DB_DATA 1
RANGE $4200-$4202 DW_DATA 1
RANGE $4202-$4203 DB_DATA 1
RANGE $4203-$4204 DB_DATA 1
RANGE $4204-$4205 DB_DATA 1
RANGE $4205-$4206 DB_DATA 1
RANGE $4206-$4208 DW_DATA 1
RANGE $4208-$420A DB_DATA 2
RANGE $420A-$420C DB_DATA 2
RANGE $420C-$420E DB_DATA 2
RANGE $420E-$4210 DB_DATA 2
RANGE $4210-$4212 DB_DATA 2
RANGE $4212-$4214 DB_DATA 2
RANGE $4214-$4216 DB_DATA 2
RANGE $4216-$4218 DB_DATA 2
RANGE $4218-$421A DB_DATA 2
RANGE $421A-$421C DB_DATA 2
RANGE $421C-$421E DB_DATA 2
RANGE $421E-$421F DB_DATA 1
RANGE $421F-$4221 DW_DATA 1
RANGE $4221-$4222 DB_DATA 1
RANGE $4222-$4223 DB_DATA 1
RANGE $4223-$4225 DW_DATA 1
RANGE $4225-$4226 DB_DATA 1
RANGE $4226-$4227 DB_DATA 1
RANGE $4227-$4228 DB_DATA 1
RANGE $4228-$4229 DB_DATA 1
RANGE $4229-$422B DW_DATA 1
RANGE $422B-$422D DB_DATA 2
RANGE $422D-$422F DB_DATA 2
RANGE $422F-$4231 DB_DATA 2
RANGE $4231-$4233 DB_DATA 2
RANGE $4233-$4235 DB_DATA 2
RANGE $4235-$4237 DB_DATA 2
RANGE $4237-$4239 DB_DATA 2
RANGE $4239-$423B DB_DATA 2
RANGE $423B-$423D DB_DATA 2
RANGE $423D-$423F DB_DATA 2
RANGE $423F-$4241 DB_DATA 2
RANGE $4241-$4243 DB_DATA 2
RANGE $4243-$4245 DB_DATA 2
RANGE $4245-$4246 DB_DATA 1
RANGE $4246-$4248 DW_DATA 1
RANGE $4248-$4249 DB_DATA 1
RANGE $4249-$424A DB_DATA 1
RANGE $424A-$424C DW_DATA 1
RANGE $424C-$424D DB_DATA 1
RANGE $424D-$424E DB_DATA 1
RANGE $424E-$424F DB_DATA 1
RANGE $424F-$4250 DB_DATA 1
RANGE $4250-$4252 DW_DATA 1
RANGE $4252-$4254 DB_DATA 2
RANGE $4254-$4256 DB_DATA 2
RANGE $4256-$4258 DB_DATA 2
RANGE $4258-$425A DB_DATA 2
RANGE $425A-$425C DB_DATA 2
RANGE $425C-$425E DB_DATA 2
RANGE $425E-$4260 DB_DATA 2
RANGE $4260-$4262 DB_DATA 2
RANGE $4262-$4264 DB_DATA 2
RANGE $4264-$4266 DB_DATA 2
RANGE $4266-$4268 DB_DATA 2
RANGE $4268-$426A DB_DATA 2
RANGE $426A-$426C DB_DATA 2
RANGE $426C-$426D DB_DATA 1
RANGE $426D-$426F DW_DATA 1
RANGE $426F-$4270 DB_DATA 1
RANGE $4270-$4271 DB_DATA 1
RANGE $4271-$4273 DW_DATA 1
RANGE $4273-$4274 DB_DATA 1
RANGE $4274-$4275 DB_DATA 1
RANGE $4275-$4276 DB_DATA 1
RANGE $4276-$4277 DB_DATA 1
RANGE $4277-$4279 DW_DATA 1
RANGE $4279-$427B DB_DATA 2
RANGE $427B-$427D DB_DATA 2
RANGE $427D-$427F DB_DATA 2
RANGE $427F-$4281 DB_DATA 2
RANGE $4281-$4283 DB_DATA 2
RANGE $4283-$4285 DB_DATA 2
RANGE $4285-$4287 DB_DATA 2
RANGE $4287-$4289 DB_DATA 2
RANGE $4289-$428B DB_DATA 2
RANGE $428B-$428D DB_DATA 2
RANGE $428D-$428F DB_DATA 2
RANGE $428F-$4290 DB_DATA 1
RANGE $4290-$4292 DW_DATA 1
RANGE $4292-$4293 DB_DATA 1
RANGE $4293-$4294 DB_DATA 1
RANGE $4294-$4296 DW_DATA 1
RANGE $4296-$4297 DB_DATA 1
RANGE $4297-$4298 DB_DATA 1
RANGE $4298-$4299 DB_DATA 1
RANGE $4299-$429A DB_DATA 1
RANGE $429A-$429C DW_DATA 1
RANGE $429C-$429E DB_DATA 2
RANGE $429E-$42A0 DB_DATA 2
RANGE $42A0-$42A2 DB_DATA 2
RANGE $42A2-$42A4 DB_DATA 2
RANGE $42A4-$42A6 DB_DATA 2
RANGE $42A6-$42A8 DB_DATA 2
RANGE $42A8-$42AA DB_DATA 2
RANGE $42AA-$42AC DB_DATA 2
RANGE $42AC-$42AE DB_DATA 2
RANGE $42AE-$42B0 DB_DATA 2
RANGE $42B0-$42B2 DB_DATA 2
RANGE $42B2-$42B4 DB_DATA 2
RANGE $42B4-$42B6 DB_DATA 2
RANGE $42B6-$42B7 DB_DATA 1
RANGE $42B7-$42B9 DW_DATA 1
RANGE $42B9-$42BA DB_DATA 1
RANGE $42BA-$42BB DB_DATA 1
RANGE $42BB-$42BD DW_DATA 1
RANGE $42BD-$42BE DB_DATA 1
RANGE $42BE-$42BF DB_DATA 1
RANGE $42BF-$42C0 DB_DATA 1
RANGE $42C0-$42C1 DB_DATA 1
RANGE $42C1-$42C3 DW_DATA 1
RANGE $42C3-$42C5 DB_DATA 2
RANGE $42C5-$42C7 DB_DATA 2
RANGE $42C7-$42C9 DB_DATA 2
RANGE $42C9-$42CB DB_DATA 2
RANGE $42CB-$42CD DB_DATA 2
RANGE $42CD-$42CF DB_DATA 2
RANGE $42CF-$42D1 DB_DATA 2
RANGE $42D1-$42D3 DB_DATA 2
RANGE $42D3-$42D5 DB_DATA 2
RANGE $42D5-$42D7 DB_DATA 2
RANGE $42D7-$42D9 DB_DATA 2
RANGE $42D9-$42DB DB_DATA 2
RANGE $42DB-$42DD DB_DATA 2
RANGE $42DD-$42DE DB_DATA 1
RANGE $42DE-$42E0 DW_DATA 1
RANGE $42E0-$42E1 DB_DATA 1
RANGE $42E1-$42E2 DB_DATA 1
RANGE $42E2-$42E4 DW_DATA 1
RANGE $42E4-$42E5 DB_DATA 1
RANGE $42E5-$42E6 DB_DATA 1
RANGE $42E6-$42E7 DB_DATA 1
RANGE $42E7-$42E8 DB_DATA 1
RANGE $42E8-$42E9 DB_DATA 1
RANGE $42E9-$42EB DW_DATA 1
RANGE $42EB-$42EC DB_DATA 1
RANGE $42EC-$42ED DB_DATA 1
RANGE $42ED-$42EF DW_DATA 1
RANGE $42EF-$42F0 DB_DATA 1
RANGE $42F0-$42F1 DB_DATA 1
RANGE $42F1-$42F2 DB_DATA 1
RANGE $42F2-$42F3 DB_DATA 1
RANGE $42F3-$42F4 DB_DATA 1
RANGE $42F4-$42F6 DW_DATA 1
RANGE $42F6-$42F7 DB_DATA 1
RANGE $42F7-$42F8 DB_DATA 1
RANGE $42F8-$42FA DW_DATA 1
RANGE $42FA-$42FB DB_DATA 1
RANGE $42FB-$42FC DB_DATA 1
RANGE $42FC-$42FD DB_DATA 1
RANGE $42FD-$42FE DB_DATA 1
RANGE $42FE-$42FF DB_DATA 1
RANGE $42FF-$4301 DW_DATA 1
RANGE $4301-$4302 DB_DATA 1
RANGE $4302-$4303 DB_DATA 1
RANGE $4303-$4305 DW_DATA 1
RANGE $4305-$4306 DB_DATA 1
RANGE $4306-$4307 DB_DATA 1
RANGE $4307-$4308 DB_DATA 1
RANGE $4308-$4309 DB_DATA 1
RANGE $4309-$430A DB_DATA 1
RANGE $430A-$430C DW_DATA 1
RANGE $430C-$430D DB_DATA 1
RANGE $430D-$430E DB_DATA 1
RANGE $430E-$4310 DW_DATA 1
RANGE $4310-$4311 DB_DATA 1
RANGE $4311-$4312 DB_DATA 1
RANGE $4312-$4313 DB_DATA 1
RANGE $4313-$4314 DB_DATA 1
RANGE $4314-$4315 DB_DATA 1
RANGE $4315-$4317 DW_DATA 1
RANGE $4317-$4318 DB_DATA 1
RANGE $4318-$4319 DB_DATA 1
RANGE $4319-$431B DW_DATA 1
RANGE $431B-$431C DB_DATA 1
RANGE $431C-$431D DB_DATA 1
RANGE $431D-$431E DB_DATA 1
RANGE $431E-$431F DB_DATA 1
RANGE $431F-$4320 DB_DATA 1
RANGE $4320-$4322 DW_DATA 1
RANGE $4322-$4323 DB_DATA 1
RANGE $4323-$4324 DB_DATA 1
RANGE $4324-$4326 DW_DATA 1
RANGE $4326-$4327 DB_DATA 1
RANGE $4327-$4328 DB_DATA 1
RANGE $4328-$4329 DB_DATA 1
RANGE $4329-$432A DB_DATA 1
RANGE $432A-$432B DB_DATA 1
RANGE $432B-$432D DW_DATA 1
RANGE $432D-$432E DB_DATA 1
RANGE $432E-$432F DB_DATA 1
RANGE $432F-$4331 DW_DATA 1
RANGE $4331-$4332 DB_DATA 1
RANGE $4332-$4333 DB_DATA 1
RANGE $4333-$4334 DB_DATA 1
RANGE $4334-$4335 DB_DATA 1
RANGE $4335-$4337 DW_DATA 1
RANGE $4337-$4338 DB_DATA 1
RANGE $4338-$433A DW_DATA 1
RANGE $433A-$433B DB_DATA 1
RANGE $433B-$433C DB_DATA 1
RANGE $433C-$433E DW_DATA 1
RANGE $433E-$433F DB_DATA 1
RANGE $433F-$4340 DB_DATA 1
RANGE $4340-$4341 DB_DATA 1
RANGE $4341-$4342 DB_DATA 1
RANGE $4342-$4344 DW_DATA 1
RANGE $4344-$4345 DB_DATA 1
RANGE $4345-$4347 DW_DATA 1
RANGE $4347-$4348 DB_DATA 1
RANGE $4348-$4349 DB_DATA 1
RANGE $4349-$434B DW_DATA 1
RANGE $434B-$434C DB_DATA 1
RANGE $434C-$434D DB_DATA 1
RANGE $434D-$434E DB_DATA 1
RANGE $434E-$434F DB_DATA 1
RANGE $434F-$4351 DW_DATA 1
RANGE $4351-$4352 DB_DATA 1
RANGE $4352-$4354 DW_DATA 1
RANGE $4354-$4355 DB_DATA 1
RANGE $4355-$4356 DB_DATA 1
RANGE $4356-$4358 DW_DATA 1
RANGE $4358-$4359 DB_DATA 1
RANGE $4359-$435A DB_DATA 1
RANGE $435A-$435B DB_DATA 1
RANGE $435B-$435C DB_DATA 1
RANGE $435C-$435E DW_DATA 1
RANGE $435E-$435F DB_DATA 1
RANGE $435F-$4361 DW_DATA 1
RANGE $4361-$4362 DB_DATA 1
RANGE $4362-$4363 DB_DATA 1
RANGE $4363-$4365 DW_DATA 1
RANGE $4365-$4366 DB_DATA 1
RANGE $4366-$4367 DB_DATA 1
RANGE $4367-$4368 DB_DATA 1
RANGE $4368-$4369 DB_DATA 1
RANGE $4369-$436B DW_DATA 1
RANGE $436B-$436C DB_DATA 1
RANGE $436C-$436E DW_DATA 1
RANGE $436E-$436F DB_DATA 1
RANGE $436F-$4370 DB_DATA 1
RANGE $4370-$4372 DW_DATA 1
RANGE $4372-$4373 DB_DATA 1
RANGE $4373-$4374 DB_DATA 1
RANGE $4374-$4375 DB_DATA 1
RANGE $4375-$4376 DB_DATA 1
RANGE $4376-$4378 DW_DATA 1
RANGE $4378-$4379 DB_DATA 1
RANGE $4379-$437B DW_DATA 1
RANGE $437B-$437C DB_DATA 1
RANGE $437C-$437D DB_DATA 1
RANGE $437D-$437F DW_DATA 1
RANGE $437F-$4380 DB_DATA 1
RANGE $4380-$4381 DB_DATA 1
RANGE $4381-$4382 DB_DATA 1
RANGE $4382-$4383 DB_DATA 1
RANGE $4383-$4385 DW_DATA 1
RANGE $4385-$4386 DB_DATA 1
RANGE $4386-$4388 DW_DATA 1
RANGE $4388-$4389 DB_DATA 1
RANGE $4389-$438A DB_DATA 1
RANGE $438A-$438C DW_DATA 1
RANGE $438C-$438D DB_DATA 1
RANGE $438D-$438E DB_DATA 1
RANGE $438E-$438F DB_DATA 1
RANGE $438F-$4390 DB_DATA 1
RANGE $4390-$4392 DW_DATA 1
RANGE $4392-$4393 DB_DATA 1
RANGE $4393-$4395 DW_DATA 1
RANGE $4395-$4396 DB_DATA 1
RANGE $4396-$4397 DB_DATA 1
RANGE $4397-$4399 DW_DATA 1
RANGE $4399-$439A DB_DATA 1
RANGE $439A-$439B DB_DATA 1
RANGE $439B-$439C DB_DATA 1
RANGE $439C-$439D DB_DATA 1
RANGE $439D-$439F DW_DATA 1
RANGE $439F-$43A0 DB_DATA 1
RANGE $43A0-$43A2 DW_DATA 1
RANGE $43A2-$43A3 DB_DATA 1
RANGE $43A3-$43A4 DB_DATA 1
RANGE $43A4-$43A6 DW_DATA 1
RANGE $43A6-$43A7 DB_DATA 1
RANGE $43A7-$43A8 DB_DATA 1
RANGE $43A8-$43A9 DB_DATA 1
RANGE $43A9-$43AA DB_DATA 1
RANGE $43AA-$43AC DW_DATA 1
RANGE $43AC-$43AD DB_DATA 1
RANGE $43AD-$43AF DW_DATA 1
RANGE $43AF-$43B0 DB_DATA 1
RANGE $43B0-$43B1 DB_DATA 1
RANGE $43B1-$43B3 DW_DATA 1
RANGE $43B3-$43B4 DB_DATA 1
RANGE $43B4-$43B5 DB_DATA 1
RANGE $43B5-$43B6 DB_DATA 1
RANGE $43B6-$43B7 DB_DATA 1
RANGE $43B7-$43B9 DW_DATA 1
RANGE $43B9-$43BA DB_DATA 1
RANGE $43BA-$43BC DW_DATA 1
RANGE $43BC-$43BD DB_DATA 1
RANGE $43BD-$43BE DB_DATA 1
RANGE $43BE-$43C0 DW_DATA 1
RANGE $43C0-$43C1 DB_DATA 1
RANGE $43C1-$43C2 DB_DATA 1
RANGE $43C2-$43C3 DB_DATA 1
RANGE $43C3-$43C4 DB_DATA 1
RANGE $43C4-$43C6 DW_DATA 1
RANGE $43C6-$43C8 DW_DATA 1
RANGE $43C8-$43CA DB_DATA 2
RANGE $43CA-$43CC DB_DATA 2
RANGE $43CC-$43CE DB_DATA 2
RANGE $43CE-$43D0 DB_DATA 2
RANGE $43D0-$43D2 DB_DATA 2
RANGE $43D2-$43D4 DB_DATA 2
RANGE $43D4-$43D6 DB_DATA 2
RANGE $43D6-$43D8 DB_DATA 2
RANGE $43D8-$43DA DB_DATA 2
RANGE $43DA-$43DC DW_DATA 1
RANGE $43DC-$43DE DB_DATA 2
RANGE $43DE-$43E0 DB_DATA 2
RANGE $43E0-$43E2 DB_DATA 2
RANGE $43E2-$43E4 DB_DATA 2
RANGE $43E4-$43E6 DB_DATA 2
RANGE $43E6-$43E8 DB_DATA 2
RANGE $43E8-$43EA DB_DATA 2
RANGE $43EA-$43EC DB_DATA 2
RANGE $43EC-$43EE DB_DATA 2
RANGE $43EE-$43F0 DW_DATA 1
RANGE $43F0-$43F2 DB_DATA 2
RANGE $43F2-$43F4 DB_DATA 2
RANGE $43F4-$43F6 DB_DATA 2
RANGE $43F6-$43F8 DB_DATA 2
RANGE $43F8-$43FA DB_DATA 2
RANGE $43FA-$43FC DB_DATA 2
RANGE $43FC-$43FE DW_DATA 1
RANGE $43FE-$4400 DB_DATA 2
RANGE $4400-$4402 DB_DATA 2
RANGE $4402-$4404 DB_DATA 2
RANGE $4404-$4406 DB_DATA 2
RANGE $4406-$4408 DB_DATA 2
RANGE $4408-$440A DB_DATA 2
RANGE $440A-$440C DB_DATA 2
RANGE $440C-$440E DB_DATA 2
RANGE $440E-$4410 DB_DATA 2
RANGE $4410-$4412 DB_DATA 2
RANGE $4412-$4414 DB_DATA 2
RANGE $4414-$4416 DB_DATA 2
RANGE $4416-$4418 DB_DATA 2
RANGE $4418-$441A DB_DATA 2
RANGE $441A-$441C DW_DATA 1
RANGE $441C-$441E DB_DATA 2
RANGE $441E-$4420 DB_DATA 2
RANGE $4420-$4422 DB_DATA 2
RANGE $4422-$4424 DB_DATA 2
RANGE $4424-$4426 DB_DATA 2
RANGE $4426-$4428 DB_DATA 2
RANGE $4428-$442A DB_DATA 2
RANGE $442A-$442C DB_DATA 2
RANGE $442C-$442E DB_DATA 2
RANGE $442E-$4430 DW_DATA 1
RANGE $4430-$4432 DB_DATA 2
RANGE $4432-$4434 DB_DATA 2
RANGE $4434-$4436 DB_DATA 2
RANGE $4436-$4438 DB_DATA 2
RANGE $4438-$4439 DB_DATA 1
RANGE $4439-$443B DW_DATA 1
RANGE $443B-$443C DB_DATA 1
RANGE $443C-$443D DB_DATA 1
RANGE $443D-$443F DW_DATA 1
RANGE $443F-$4440 DB_DATA 1
RANGE $4440-$4441 DB_DATA 1
RANGE $4441-$4442 DB_DATA 1
RANGE $4442-$4443 DB_DATA 1
RANGE $4443-$4445 DW_DATA 1
RANGE $4445-$4446 DB_DATA 1
RANGE $4446-$4448 DW_DATA 1
RANGE $4448-$4449 DB_DATA 1
RANGE $4449-$444A DB_DATA 1
RANGE $444A-$444C DW_DATA 1
RANGE $444C-$444D DB_DATA 1
RANGE $444D-$444E DB_DATA 1
RANGE $444E-$444F DB_DATA 1
RANGE $444F-$4450 DB_DATA 1
RANGE $4450-$4452 DW_DATA 1
RANGE $4452-$4453 DB_DATA 1
RANGE $4453-$4455 DW_DATA 1
RANGE $4455-$4456 DB_DATA 1
RANGE $4456-$4457 DB_DATA 1
RANGE $4457-$4459 DW_DATA 1
RANGE $4459-$445A DB_DATA 1
RANGE $445A-$445B DB_DATA 1
RANGE $445B-$445C DB_DATA 1
RANGE $445C-$445D DB_DATA 1
RANGE $445D-$445F DW_DATA 1
RANGE $445F-$4460 DB_DATA 1
RANGE $4460-$4462 DW_DATA 1
RANGE $4462-$4463 DB_DATA 1
RANGE $4463-$4464 DB_DATA 1
RANGE $4464-$4466 DW_DATA 1
RANGE $4466-$4467 DB_DATA 1
RANGE $4467-$4468 DB_DATA 1
RANGE $4468-$4469 DB_DATA 1
RANGE $4469-$446A DB_DATA 1
RANGE $446A-$446C DW_DATA 1
RANGE $446C-$446D DB_DATA 1
RANGE $446D-$446F DW_DATA 1
RANGE $446F-$4470 DB_DATA 1
RANGE $4470-$4471 DB_DATA 1
RANGE $4471-$4473 DW_DATA 1
RANGE $4473-$4474 DB_DATA 1
RANGE $4474-$4475 DB_DATA 1
RANGE $4475-$4476 DB_DATA 1
RANGE $4476-$4477 DB_DATA 1
RANGE $4477-$4479 DW_DATA 1
RANGE $4479-$447A DB_DATA 1
RANGE $447A-$447C DW_DATA 1
RANGE $447C-$447D DB_DATA 1
RANGE $447D-$447E DB_DATA 1
RANGE $447E-$4480 DW_DATA 1
RANGE $4480-$4481 DB_DATA 1
RANGE $4481-$4482 DB_DATA 1
RANGE $4482-$4483 DB_DATA 1
RANGE $4483-$4484 DB_DATA 1
RANGE $4484-$4486 DW_DATA 1
RANGE $4486-$4487 DB_DATA 1
RANGE $4487-$4489 DW_DATA 1
RANGE $4489-$448A DB_DATA 1
RANGE $448A-$448B DB_DATA 1
RANGE $448B-$448D DW_DATA 1
RANGE $448D-$448E DB_DATA 1
RANGE $448E-$448F DB_DATA 1
RANGE $448F-$4490 DB_DATA 1
RANGE $4490-$4491 DB_DATA 1
RANGE $4491-$4493 DW_DATA 1
RANGE $4493-$4494 DB_DATA 1
RANGE $4494-$4496 DW_DATA 1
RANGE $4496-$4497 DB_DATA 1
RANGE $4497-$4498 DB_DATA 1
RANGE $4498-$449A DW_DATA 1
RANGE $449A-$449B DB_DATA 1
RANGE $449B-$449C DB_DATA 1
RANGE $449C-$449D DB_DATA 1
RANGE $449D-$449E DB_DATA 1
RANGE $449E-$44A0 DW_DATA 1
RANGE $44A0-$44A1 DB_DATA 1
RANGE $44A1-$44A3 DW_DATA 1
RANGE $44A3-$44A4 DB_DATA 1
RANGE $44A4-$44A5 DB_DATA 1
RANGE $44A5-$44A7 DW_DATA 1
RANGE $44A7-$44A8 DB_DATA 1
RANGE $44A8-$44A9 DB_DATA 1
RANGE $44A9-$44AA DB_DATA 1
RANGE $44AA-$44AB DB_DATA 1
RANGE $44AB-$44AD DW_DATA 1
RANGE $44AD-$44AE DB_DATA 1
RANGE $44AE-$44B0 DW_DATA 1
RANGE $44B0-$44B1 DB_DATA 1
RANGE $44B1-$44B2 DB_DATA 1
RANGE $44B2-$44B4 DW_DATA 1
RANGE $44B4-$44B5 DB_DATA 1
RANGE $44B5-$44B6 DB_DATA 1
RANGE $44B6-$44B7 DB_DATA 1
RANGE $44B7-$44B8 DB_DATA 1
RANGE $44B8-$44BA DW_DATA 1
RANGE $44BA-$44BB DB_DATA 1
RANGE $44BB-$44BD DW_DATA 1
RANGE $44BD-$44BE DB_DATA 1
RANGE $44BE-$44BF DB_DATA 1
RANGE $44BF-$44C1 DW_DATA 1
RANGE $44C1-$44C2 DB_DATA 1
RANGE $44C2-$44C3 DB_DATA 1
RANGE $44C3-$44C4 DB_DATA 1
RANGE $44C4-$44C5 DB_DATA 1
RANGE $44C5-$44C7 DW_DATA 1
RANGE $44C7-$44C8 DB_DATA 1
RANGE $44C8-$44CA DW_DATA 1
RANGE $44CA-$44CB DB_DATA 1
RANGE $44CB-$44CC DB_DATA 1
RANGE $44CC-$44CE DW_DATA 1
RANGE $44CE-$44CF DB_DATA 1
RANGE $44CF-$44D0 DB_DATA 1
RANGE $44D0-$44D1 DB_DATA 1
RANGE $44D1-$44D2 DB_DATA 1
RANGE $44D2-$44D4 DW_DATA 1
RANGE $44D4-$44D5 DB_DATA 1
RANGE $44D5-$44D7 DW_DATA 1
RANGE $44D7-$44D8 DB_DATA 1
RANGE $44D8-$44D9 DB_DATA 1
RANGE $44D9-$44DB DW_DATA 1
RANGE $44DB-$44DC DB_DATA 1
RANGE $44DC-$44DD DB_DATA 1
RANGE $44DD-$44DE DB_DATA 1
RANGE $44DE-$44DF DB_DATA 1
RANGE $44DF-$44E1 DW_DATA 1
RANGE $44E1-$44E2 DB_DATA 1
RANGE $44E2-$44E4 DW_DATA 1
RANGE $44E4-$44E5 DB_DATA 1
RANGE $44E5-$44E6 DB_DATA 1
RANGE $44E6-$44E8 DW_DATA 1
RANGE $44E8-$44E9 DB_DATA 1
RANGE $44E9-$44EA DB_DATA 1
RANGE $44EA-$44EB DB_DATA 1
RANGE $44EB-$44EC DB_DATA 1
RANGE $44EC-$44EE DW_DATA 1
RANGE $44EE-$44EF DB_DATA 1
RANGE $44EF-$44F1 DW_DATA 1
RANGE $44F1-$44F2 DB_DATA 1
RANGE $44F2-$44F3 DB_DATA 1
RANGE $44F3-$44F5 DW_DATA 1
RANGE $44F5-$44F6 DB_DATA 1
RANGE $44F6-$44F7 DB_DATA 1
RANGE $44F7-$44F8 DB_DATA 1
RANGE $44F8-$44F9 DB_DATA 1
RANGE $44F9-$44FB DW_DATA 1
RANGE $44FB-$44FC DB_DATA 1
RANGE $44FC-$44FE DW_DATA 1
RANGE $44FE-$44FF DB_DATA 1
RANGE $44FF-$4500 DB_DATA 1
RANGE $4500-$4502 DW_DATA 1
RANGE $4502-$4503 DB_DATA 1
RANGE $4503-$4504 DB_DATA 1
RANGE $4504-$4505 DB_DATA 1
RANGE $4505-$4506 DB_DATA 1
RANGE $4506-$4508 DW_DATA 1
RANGE $4508-$4509 DB_DATA 1
RANGE $4509-$450B DW_DATA 1
RANGE $450B-$450C DB_DATA 1
RANGE $450C-$450D DB_DATA 1
RANGE $450D-$450F DW_DATA 1
RANGE $450F-$4510 DB_DATA 1
RANGE $4510-$4511 DB_DATA 1
RANGE $4511-$4512 DB_DATA 1
RANGE $4512-$4513 DB_DATA 1
RANGE $4513-$4515 DW_DATA 1
RANGE $4515-$4516 DB_DATA 1
RANGE $4516-$4518 DW_DATA 1
RANGE $4518-$4519 DB_DATA 1
RANGE $4519-$451A DB_DATA 1
RANGE $451A-$451C DW_DATA 1
RANGE $451C-$451D DB_DATA 1
RANGE $451D-$451E DB_DATA 1
RANGE $451E-$451F DB_DATA 1
RANGE $451F-$4520 DB_DATA 1
RANGE $4520-$4522 DW_DATA 1
RANGE $4522-$4523 DB_DATA 1
RANGE $4523-$4525 DW_DATA 1
RANGE $4525-$4526 DB_DATA 1
RANGE $4526-$4527 DB_DATA 1
RANGE $4527-$4529 DW_DATA 1
RANGE $4529-$452A DB_DATA 1
RANGE $452A-$452B DB_DATA 1
RANGE $452B-$452C DB_DATA 1
RANGE $452C-$452D DB_DATA 1
RANGE $452D-$452F DW_DATA 1
RANGE $452F-$4530 DB_DATA 1
RANGE $4530-$4532 DW_DATA 1
RANGE $4532-$4533 DB_DATA 1
RANGE $4533-$4534 DB_DATA 1
RANGE $4534-$4536 DW_DATA 1
RANGE $4536-$4537 DB_DATA 1
RANGE $4537-$4538 DB_DATA 1
RANGE $4538-$4539 DB_DATA 1
RANGE $4539-$453A DB_DATA 1
RANGE $453A-$453C DW_DATA 1
RANGE $453C-$453E DW_DATA 1
RANGE $453E-$4540 DB_DATA 2
RANGE $4540-$4542 DB_DATA 2
RANGE $4542-$4544 DB_DATA 2
RANGE $4544-$4546 DB_DATA 2
RANGE $4546-$4548 DB_DATA 2
RANGE $4548-$454A DB_DATA 2
RANGE $454A-$454C DB_DATA 2
RANGE $454C-$454E DB_DATA 2
RANGE $454E-$4550 DB_DATA 2
RANGE $4550-$4552 DW_DATA 1
RANGE $4552-$4554 DB_DATA 2
RANGE $4554-$4556 DB_DATA 2
RANGE $4556-$4558 DB_DATA 2
RANGE $4558-$455A DB_DATA 2
RANGE $455A-$455C DB_DATA 2
RANGE $455C-$455E DB_DATA 2
RANGE $455E-$4560 DB_DATA 2
RANGE $4560-$4562 DB_DATA 2
RANGE $4562-$4564 DB_DATA 2
RANGE $4564-$4566 DW_DATA 1
RANGE $4566-$4568 DB_DATA 2
RANGE $4568-$456A DB_DATA 2
RANGE $456A-$456C DB_DATA 2
RANGE $456C-$456E DB_DATA 2
RANGE $456E-$4570 DB_DATA 2
RANGE $4570-$4572 DB_DATA 2
RANGE $4572-$4574 DB_DATA 2
RANGE $4574-$4576 DB_DATA 2
RANGE $4576-$4578 DB_DATA 2
RANGE $4578-$457A DB_DATA 2
RANGE $457A-$457C DB_DATA 2
RANGE $457C-$457E DB_DATA 2
RANGE $457E-$4580 DB_DATA 2
RANGE $4580-$4582 DB_DATA 2
RANGE $4582-$4584 DW_DATA 1
RANGE $4584-$4586 DB_DATA 2
RANGE $4586-$4588 DB_DATA 2
RANGE $4588-$458A DB_DATA 2
RANGE $458A-$458C DB_DATA 2
RANGE $458C-$458E DB_DATA 2
RANGE $458E-$4590 DB_DATA 2
RANGE $4590-$4592 DB_DATA 2
RANGE $4592-$4594 DB_DATA 2
RANGE $4594-$4596 DB_DATA 2
RANGE $4596-$4598 DW_DATA 1
RANGE $4598-$459A DB_DATA 2
RANGE $459A-$459C DB_DATA 2
RANGE $459C-$459E DB_DATA 2
RANGE $459E-$45A0 DB_DATA 2
RANGE $45A0-$45A1 DB_DATA 1
RANGE $45A1-$45A3 DW_DATA 1
RANGE $45A3-$45A4 DB_DATA 1
RANGE $45A4-$45A5 DB_DATA 1
RANGE $45A5-$45A7 DW_DATA 1
RANGE $45A7-$45A8 DB_DATA 1
RANGE $45A8-$45A9 DB_DATA 1
RANGE $45A9-$45AA DB_DATA 1
RANGE $45AA-$45AB DB_DATA 1
RANGE $45AB-$45AD DW_DATA 1
RANGE $45AD-$45AE DB_DATA 1
RANGE $45AE-$45B0 DW_DATA 1
RANGE $45B0-$45B1 DB_DATA 1
RANGE $45B1-$45B2 DB_DATA 1
RANGE $45B2-$45B4 DW_DATA 1
RANGE $45B4-$45B5 DB_DATA 1
RANGE $45B5-$45B6 DB_DATA 1
RANGE $45B6-$45B7 DB_DATA 1
RANGE $45B7-$45B8 DB_DATA 1
RANGE $45B8-$45BA DW_DATA 1
RANGE $45BA-$45BB DB_DATA 1
RANGE $45BB-$45BD DW_DATA 1
RANGE $45BD-$45BE DB_DATA 1
RANGE $45BE-$45BF DB_DATA 1
RANGE $45BF-$45C1 DW_DATA 1
RANGE $45C1-$45C2 DB_DATA 1
RANGE $45C2-$45C3 DB_DATA 1
RANGE $45C3-$45C4 DB_DATA 1
RANGE $45C4-$45C5 DB_DATA 1
RANGE $45C5-$45C7 DW_DATA 1
RANGE $45C7-$45C8 DB_DATA 1
RANGE $45C8-$45CA DW_DATA 1
RANGE $45CA-$45CB DB_DATA 1
RANGE $45CB-$45CC DB_DATA 1
RANGE $45CC-$45CE DW_DATA 1
RANGE $45CE-$45CF DB_DATA 1
RANGE $45CF-$45D0 DB_DATA 1
RANGE $45D0-$45D1 DB_DATA 1
RANGE $45D1-$45D2 DB_DATA 1
RANGE $45D2-$45D4 DW_DATA 1
RANGE $45D4-$45D5 DB_DATA 1
RANGE $45D5-$45D7 DW_DATA 1
RANGE $45D7-$45D8 DB_DATA 1
RANGE $45D8-$45D9 DB_DATA 1
RANGE $45D9-$45DB DW_DATA 1
RANGE $45DB-$45DC DB_DATA 1
RANGE $45DC-$45DD DB_DATA 1
RANGE $45DD-$45DE DB_DATA 1
RANGE $45DE-$45DF DB_DATA 1
RANGE $45DF-$45E1 DW_DATA 1
RANGE $45E1-$45E2 DB_DATA 1
RANGE $45E2-$45E4 DW_DATA 1
RANGE $45E4-$45E5 DB_DATA 1
RANGE $45E5-$45E6 DB_DATA 1
RANGE $45E6-$45E8 DW_DATA 1
RANGE $45E8-$45E9 DB_DATA 1
RANGE $45E9-$45EA DB_DATA 1
RANGE $45EA-$45EB DB_DATA 1
RANGE $45EB-$45EC DB_DATA 1
RANGE $45EC-$45EE DW_DATA 1
RANGE $45EE-$45EF DB_DATA 1
RANGE $45EF-$45F1 DW_DATA 1
RANGE $45F1-$45F2 DB_DATA 1
RANGE $45F2-$45F3 DB_DATA 1
RANGE $45F3-$45F5 DW_DATA 1
RANGE $45F5-$45F6 DB_DATA 1
RANGE $45F6-$45F7 DB_DATA 1
RANGE $45F7-$45F8 DB_DATA 1
RANGE $45F8-$45F9 DB_DATA 1
RANGE $45F9-$45FB DW_DATA 1
RANGE $45FB-$45FC DB_DATA 1
RANGE $45FC-$45FE DW_DATA 1
RANGE $45FE-$45FF DB_DATA 1
RANGE $45FF-$4600 DB_DATA 1
RANGE $4600-$4602 DW_DATA 1
RANGE $4602-$4603 DB_DATA 1
RANGE $4603-$4604 DB_DATA 1
RANGE $4604-$4605 DB_DATA 1
RANGE $4605-$4606 DB_DATA 1
RANGE $4606-$4608 DW_DATA 1
RANGE $4608-$4609 DB_DATA 1
RANGE $4609-$460B DW_DATA 1
RANGE $460B-$460C DB_DATA 1
RANGE $460C-$460D DB_DATA 1
RANGE $460D-$460F DW_DATA 1
RANGE $460F-$4610 DB_DATA 1
RANGE $4610-$4611 DB_DATA 1
RANGE $4611-$4612 DB_DATA 1
RANGE $4612-$4613 DB_DATA 1
RANGE $4613-$4615 DW_DATA 1
RANGE $4615-$4616 DB_DATA 1
RANGE $4616-$4618 DW_DATA 1
RANGE $4618-$4619 DB_DATA 1
RANGE $4619-$461A DB_DATA 1
RANGE $461A-$461C DW_DATA 1
RANGE $461C-$461D DB_DATA 1
RANGE $461D-$461E DB_DATA 1
RANGE $461E-$461F DB_DATA 1
RANGE $461F-$4620 DB_DATA 1
RANGE $4620-$4622 DW_DATA 1
RANGE $4622-$4623 DB_DATA 1
RANGE $4623-$4625 DW_DATA 1
RANGE $4625-$4626 DB_DATA 1
RANGE $4626-$4627 DB_DATA 1
RANGE $4627-$4629 DW_DATA 1
RANGE $4629-$462A DB_DATA 1
RANGE $462A-$462B DB_DATA 1
RANGE $462B-$462C DB_DATA 1
RANGE $462C-$462D DB_DATA 1
RANGE $462D-$462F DW_DATA 1
RANGE $462F-$4630 DB_DATA 1
RANGE $4630-$4632 DW_DATA 1
RANGE $4632-$4633 DB_DATA 1
RANGE $4633-$4634 DB_DATA 1
RANGE $4634-$4636 DW_DATA 1
RANGE $4636-$4637 DB_DATA 1
RANGE $4637-$4638 DB_DATA 1
RANGE $4638-$4639 DB_DATA 1
RANGE $4639-$463A DB_DATA 1
RANGE $463A-$463C DW_DATA 1
RANGE $463C-$463D DB_DATA 1
RANGE $463D-$463F DW_DATA 1
RANGE $463F-$4640 DB_DATA 1
RANGE $4640-$4641 DB_DATA 1
RANGE $4641-$4643 DW_DATA 1
RANGE $4643-$4644 DB_DATA 1
RANGE $4644-$4645 DB_DATA 1
RANGE $4645-$4646 DB_DATA 1
RANGE $4646-$4647 DB_DATA 1
RANGE $4647-$4649 DW_DATA 1
RANGE $4649-$464A DB_DATA 1
RANGE $464A-$464C DW_DATA 1
RANGE $464C-$464D DB_DATA 1
RANGE $464D-$464E DB_DATA 1
RANGE $464E-$4650 DW_DATA 1
RANGE $4650-$4651 DB_DATA 1
RANGE $4651-$4652 DB_DATA 1
RANGE $4652-$4653 DB_DATA 1
RANGE $4653-$4654 DB_DATA 1
RANGE $4654-$4656 DW_DATA 1
RANGE $4656-$4657 DB_DATA 1
RANGE $4657-$4659 DW_DATA 1
RANGE $4659-$465A DB_DATA 1
RANGE $465A-$465B DB_DATA 1
RANGE $465B-$465D DW_DATA 1
RANGE $465D-$465E DB_DATA 1
RANGE $465E-$465F DB_DATA 1
RANGE $465F-$4660 DB_DATA 1
RANGE $4660-$4661 DB_DATA 1
RANGE $4661-$4663 DW_DATA 1
RANGE $4663-$4664 DB_DATA 1
RANGE $4664-$4666 DW_DATA 1
RANGE $4666-$4667 DB_DATA 1
RANGE $4667-$4668 DB_DATA 1
RANGE $4668-$466A DW_DATA 1
RANGE $466A-$466B DB_DATA 1
RANGE $466B-$466C DB_DATA 1
RANGE $466C-$466D DB_DATA 1
RANGE $466D-$466E DB_DATA 1
RANGE $466E-$4670 DW_DATA 1
RANGE $4670-$4671 DB_DATA 1
RANGE $4671-$4673 DW_DATA 1
RANGE $4673-$4674 DB_DATA 1
RANGE $4674-$4675 DB_DATA 1
RANGE $4675-$4677 DW_DATA 1
RANGE $4677-$4678 DB_DATA 1
RANGE $4678-$4679 DB_DATA 1
RANGE $4679-$467A DB_DATA 1
RANGE $467A-$467B DB_DATA 1
RANGE $467B-$467D DW_DATA 1
RANGE $467D-$467E DB_DATA 1
RANGE $467E-$4680 DW_DATA 1
RANGE $4680-$4681 DB_DATA 1
RANGE $4681-$4682 DB_DATA 1
RANGE $4682-$4684 DW_DATA 1
RANGE $4684-$4685 DB_DATA 1
RANGE $4685-$4686 DB_DATA 1
RANGE $4686-$4687 DB_DATA 1
RANGE $4687-$4688 DB_DATA 1
RANGE $4688-$468A DW_DATA 1
RANGE $468A-$468B DB_DATA 1
RANGE $468B-$468D DW_DATA 1
RANGE $468D-$468E DB_DATA 1
RANGE $468E-$468F DB_DATA 1
RANGE $468F-$4691 DW_DATA 1
RANGE $4691-$4692 DB_DATA 1
RANGE $4692-$4693 DB_DATA 1
RANGE $4693-$4694 DB_DATA 1
RANGE $4694-$4695 DB_DATA 1
RANGE $4695-$4697 DW_DATA 1
RANGE $4697-$4698 DB_DATA 1
RANGE $4698-$469A DW_DATA 1
RANGE $469A-$469B DB_DATA 1
RANGE $469B-$469C DB_DATA 1
RANGE $469C-$469E DW_DATA 1
RANGE $469E-$469F DB_DATA 1
RANGE $469F-$46A0 DB_DATA 1
RANGE $46A0-$46A1 DB_DATA 1
RANGE $46A1-$46A2 DB_DATA 1
RANGE $46A2-$46A4 DW_DATA 1
RANGE $46A4-$46A6 DW_DATA 1
RANGE $46A6-$46A8 DB_DATA 2
RANGE $46A8-$46AA DB_DATA 2
RANGE $46AA-$46AC DB_DATA 2
RANGE $46AC-$46AE DB_DATA 2
RANGE $46AE-$46B0 DB_DATA 2
RANGE $46B0-$46B2 DB_DATA 2
RANGE $46B2-$46B4 DB_DATA 2
RANGE $46B4-$46B6 DB_DATA 2
RANGE $46B6-$46B8 DB_DATA 2
RANGE $46B8-$46BA DB_DATA 2
RANGE $46BA-$46BC DB_DATA 2
RANGE $46BC-$46BD DB_DATA 1
RANGE $46BD-$46BF DW_DATA 1
RANGE $46BF-$46C0 DB_DATA 1
RANGE $46C0-$46C1 DB_DATA 1
RANGE $46C1-$46C3 DW_DATA 1
RANGE $46C3-$46C4 DB_DATA 1
RANGE $46C4-$46C5 DB_DATA 1
RANGE $46C5-$46C6 DB_DATA 1
RANGE $46C6-$46C7 DB_DATA 1
RANGE $46C7-$46C9 DW_DATA 1
RANGE $46C9-$46CB DB_DATA 2
RANGE $46CB-$46CD DB_DATA 2
RANGE $46CD-$46CF DB_DATA 2
RANGE $46CF-$46D1 DB_DATA 2
RANGE $46D1-$46D3 DB_DATA 2
RANGE $46D3-$46D5 DB_DATA 2
RANGE $46D5-$46D7 DB_DATA 2
RANGE $46D7-$46D9 DB_DATA 2
RANGE $46D9-$46DB DB_DATA 2
RANGE $46DB-$46DD DB_DATA 2
RANGE $46DD-$46DF DB_DATA 2
RANGE $46DF-$46E0 DB_DATA 1
RANGE $46E0-$46E2 DW_DATA 1
RANGE $46E2-$46E3 DB_DATA 1
RANGE $46E3-$46E4 DB_DATA 1
RANGE $46E4-$46E6 DW_DATA 1
RANGE $46E6-$46E7 DB_DATA 1
RANGE $46E7-$46E8 DB_DATA 1
RANGE $46E8-$46E9 DB_DATA 1
RANGE $46E9-$46EA DB_DATA 1
RANGE $46EA-$46EC DW_DATA 1
RANGE $46EC-$46EE DB_DATA 2
RANGE $46EE-$46F0 DB_DATA 2
RANGE $46F0-$46F2 DB_DATA 2
RANGE $46F2-$46F4 DB_DATA 2
RANGE $46F4-$46F6 DB_DATA 2
RANGE $46F6-$46F8 DB_DATA 2
RANGE $46F8-$46FA DB_DATA 2
RANGE $46FA-$46FC DB_DATA 2
RANGE $46FC-$46FE DB_DATA 2
RANGE $46FE-$4700 DB_DATA 2
RANGE $4700-$4702 DB_DATA 2
RANGE $4702-$4703 DB_DATA 1
RANGE $4703-$4705 DW_DATA 1
RANGE $4705-$4706 DB_DATA 1
RANGE $4706-$4707 DB_DATA 1
RANGE $4707-$4709 DW_DATA 1
RANGE $4709-$470A DB_DATA 1
RANGE $470A-$470B DB_DATA 1
RANGE $470B-$470C DB_DATA 1
RANGE $470C-$470D DB_DATA 1
RANGE $470D-$470F DW_DATA 1
RANGE $470F-$4711 DB_DATA 2
RANGE $4711-$4713 DB_DATA 2
RANGE $4713-$4715 DB_DATA 2
RANGE $4715-$4717 DB_DATA 2
RANGE $4717-$4719 DB_DATA 2
RANGE $4719-$471B DB_DATA 2
RANGE $471B-$471D DB_DATA 2
RANGE $471D-$471F DB_DATA 2
RANGE $471F-$4721 DB_DATA 2
RANGE $4721-$4723 DB_DATA 2
RANGE $4723-$4725 DB_DATA 2
RANGE $4725-$4726 DB_DATA 1
RANGE $4726-$4728 DW_DATA 1
RANGE $4728-$4729 DB_DATA 1
RANGE $4729-$472A DB_DATA 1
RANGE $472A-$472C DW_DATA 1
RANGE $472C-$472D DB_DATA 1
RANGE $472D-$472E DB_DATA 1
RANGE $472E-$472F DB_DATA 1
RANGE $472F-$4730 DB_DATA 1
RANGE $4730-$4732 DW_DATA 1
RANGE $4732-$4734 DB_DATA 2
RANGE $4734-$4736 DB_DATA 2
RANGE $4736-$4738 DB_DATA 2
RANGE $4738-$473A DB_DATA 2
RANGE $473A-$473C DB_DATA 2
RANGE $473C-$473E DB_DATA 2
RANGE $473E-$4740 DB_DATA 2
RANGE $4740-$4742 DB_DATA 2
RANGE $4742-$4744 DB_DATA 2
RANGE $4744-$4746 DB_DATA 2
RANGE $4746-$4748 DB_DATA 2
RANGE $4748-$4749 DB_DATA 1
RANGE $4749-$474B DW_DATA 1
RANGE $474B-$474C DB_DATA 1
RANGE $474C-$474D DB_DATA 1
RANGE $474D-$474F DW_DATA 1
RANGE $474F-$4750 DB_DATA 1
RANGE $4750-$4751 DB_DATA 1
RANGE $4751-$4752 DB_DATA 1
RANGE $4752-$4753 DB_DATA 1
RANGE $4753-$4754 DB_DATA 1
RANGE $4754-$4756 DW_DATA 1
RANGE $4756-$4757 DB_DATA 1
RANGE $4757-$4758 DB_DATA 1
RANGE $4758-$475A DW_DATA 1
RANGE $475A-$475B DB_DATA 1
RANGE $475B-$475C DB_DATA 1
RANGE $475C-$475D DB_DATA 1
RANGE $475D-$475E DB_DATA 1
RANGE $475E-$475F DB_DATA 1
RANGE $475F-$4761 DW_DATA 1
RANGE $4761-$4762 DB_DATA 1
RANGE $4762-$4763 DB_DATA 1
RANGE $4763-$4765 DW_DATA 1
RANGE $4765-$4766 DB_DATA 1
RANGE $4766-$4767 DB_DATA 1
RANGE $4767-$4768 DB_DATA 1
RANGE $4768-$4769 DB_DATA 1
RANGE $4769-$476A DB_DATA 1
RANGE $476A-$476C DW_DATA 1
RANGE $476C-$476D DB_DATA 1
RANGE $476D-$476E DB_DATA 1
RANGE $476E-$4770 DW_DATA 1
RANGE $4770-$4771 DB_DATA 1
RANGE $4771-$4772 DB_DATA 1
RANGE $4772-$4773 DB_DATA 1
RANGE $4773-$4774 DB_DATA 1
RANGE $4774-$4775 DB_DATA 1
RANGE $4775-$4777 DW_DATA 1
RANGE $4777-$4778 DB_DATA 1
RANGE $4778-$4779 DB_DATA 1
RANGE $4779-$477B DW_DATA 1
RANGE $477B-$477C DB_DATA 1
RANGE $477C-$477D DB_DATA 1
RANGE $477D-$477E DB_DATA 1
RANGE $477E-$477F DB_DATA 1
RANGE $477F-$4780 DB_DATA 1
RANGE $4780-$4782 DW_DATA 1
RANGE $4782-$4783 DB_DATA 1
RANGE $4783-$4784 DB_DATA 1
RANGE $4784-$4786 DW_DATA 1
RANGE $4786-$4787 DB_DATA 1
RANGE $4787-$4788 DB_DATA 1
RANGE $4788-$4789 DB_DATA 1
RANGE $4789-$478A DB_DATA 1
RANGE $478A-$478B DB_DATA 1
RANGE $478B-$478D DW_DATA 1
RANGE $478D-$478E DB_DATA 1
RANGE $478E-$478F DB_DATA 1
RANGE $478F-$4791 DW_DATA 1
RANGE $4791-$4792 DB_DATA 1
RANGE $4792-$4793 DB_DATA 1
RANGE $4793-$4794 DB_DATA 1
RANGE $4794-$4795 DB_DATA 1
RANGE $4795-$4796 DB_DATA 1
RANGE $4796-$4798 DW_DATA 1
RANGE $4798-$4799 DB_DATA 1
RANGE $4799-$479A DB_DATA 1
RANGE $479A-$479C DW_DATA 1
RANGE $479C-$479D DB_DATA 1
RANGE $479D-$479E DB_DATA 1
RANGE $479E-$479F DB_DATA 1
RANGE $479F-$47A0 DB_DATA 1
RANGE $47A0-$47A1 DB_DATA 1
RANGE $47A1-$47A3 DW_DATA 1
RANGE $47A3-$47A4 DB_DATA 1
RANGE $47A4-$47A5 DB_DATA 1
RANGE $47A5-$47A7 DW_DATA 1
RANGE $47A7-$47A8 DB_DATA 1
RANGE $47A8-$47A9 DB_DATA 1
RANGE $47A9-$47AA DB_DATA 1
RANGE $47AA-$47AB DB_DATA 1
RANGE $47AB-$47AC DB_DATA 1
RANGE $47AC-$47AE DW_DATA 1
RANGE $47AE-$47AF DB_DATA 1
RANGE $47AF-$47B0 DB_DATA 1
RANGE $47B0-$47B2 DW_DATA 1
RANGE $47B2-$47B3 DB_DATA 1
RANGE $47B3-$47B4 DB_DATA 1
RANGE $47B4-$47B5 DB_DATA 1
RANGE $47B5-$47B6 DB_DATA 1
RANGE $47B6-$47B7 DB_DATA 1
RANGE $47B7-$47B9 DW_DATA 1
RANGE $47B9-$47BA DB_DATA 1
RANGE $47BA-$47BB DB_DATA 1
RANGE $47BB-$47BD DW_DATA 1
RANGE $47BD-$47BE DB_DATA 1
RANGE $47BE-$47BF DB_DATA 1
RANGE $47BF-$47C0 DB_DATA 1
RANGE $47C0-$47C1 DB_DATA 1
RANGE $47C1-$47C2 DB_DATA 1
RANGE $47C2-$47C4 DW_DATA 1
RANGE $47C4-$47C5 DB_DATA 1
RANGE $47C5-$47C6 DB_DATA 1
RANGE $47C6-$47C8 DW_DATA 1
RANGE $47C8-$47C9 DB_DATA 1
RANGE $47C9-$47CA DB_DATA 1
RANGE $47CA-$47CB DB_DATA 1
RANGE $47CB-$47CC DB_DATA 1
RANGE $47CC-$47CE DW_DATA 1
RANGE $47CE-$47D0 DB_DATA 2
RANGE $47D0-$47D2 DB_DATA 2
RANGE $47D2-$47D4 DB_DATA 2
RANGE $47D4-$47D6 DB_DATA 2
RANGE $47D6-$47D8 DB_DATA 2
RANGE $47D8-$47DA DB_DATA 2
RANGE $47DA-$47DC DB_DATA 2
RANGE $47DC-$47DE DB_DATA 2
RANGE $47DE-$47E0 DB_DATA 2
RANGE $47E0-$47E2 DB_DATA 2
RANGE $47E2-$47E4 DB_DATA 2
RANGE $47E4-$47E5 DB_DATA 1
RANGE $47E5-$47E7 DW_DATA 1
RANGE $47E7-$47E8 DB_DATA 1
RANGE $47E8-$47E9 DB_DATA 1
RANGE $47E9-$47EB DW_DATA 1
RANGE $47EB-$47EC DB_DATA 1
RANGE $47EC-$47ED DB_DATA 1
RANGE $47ED-$47EE DB_DATA 1
RANGE $47EE-$47EF DB_DATA 1
RANGE $47EF-$47F1 DW_DATA 1
RANGE $47F1-$47F3 DB_DATA 2
RANGE $47F3-$47F5 DB_DATA 2
RANGE $47F5-$47F7 DB_DATA 2
RANGE $47F7-$47F9 DB_DATA 2
RANGE $47F9-$47FB DB_DATA 2
RANGE $47FB-$47FD DB_DATA 2
RANGE $47FD-$47FF DB_DATA 2
RANGE $47FF-$4801 DB_DATA 2
RANGE $4801-$4803 DB_DATA 2
RANGE $4803-$4805 DB_DATA 2
RANGE $4805-$4807 DB_DATA 2
RANGE $4807-$4808 DB_DATA 1
RANGE $4808-$480A DW_DATA 1
RANGE $480A-$480B DB_DATA 1
RANGE $480B-$480C DB_DATA 1
RANGE $480C-$480E DW_DATA 1
RANGE $480E-$480F DB_DATA 1
RANGE $480F-$4810 DB_DATA 1
RANGE $4810-$4811 DB_DATA 1
RANGE $4811-$4812 DB_DATA 1
RANGE $4812-$4814 DW_DATA 1
RANGE $4814-$4816 DB_DATA 2
RANGE $4816-$4818 DB_DATA 2
RANGE $4818-$481A DB_DATA 2
RANGE $481A-$481C DB_DATA 2
RANGE $481C-$481E DB_DATA 2
RANGE $481E-$4820 DB_DATA 2
RANGE $4820-$4822 DB_DATA 2
RANGE $4822-$4824 DB_DATA 2
RANGE $4824-$4826 DB_DATA 2
RANGE $4826-$4828 DB_DATA 2
RANGE $4828-$482A DB_DATA 2
RANGE $482A-$482B DB_DATA 1
RANGE $482B-$482D DW_DATA 1
RANGE $482D-$482E DB_DATA 1
RANGE $482E-$482F DB_DATA 1
RANGE $482F-$4831 DW_DATA 1
RANGE $4831-$4832 DB_DATA 1
RANGE $4832-$4833 DB_DATA 1
RANGE $4833-$4834 DB_DATA 1
RANGE $4834-$4835 DB_DATA 1
RANGE $4835-$4837 DW_DATA 1
RANGE $4837-$4839 DB_DATA 2
RANGE $4839-$483B DB_DATA 2
RANGE $483B-$483D DB_DATA 2
RANGE $483D-$483F DB_DATA 2
RANGE $483F-$4841 DB_DATA 2
RANGE $4841-$4843 DB_DATA 2
RANGE $4843-$4845 DB_DATA 2
RANGE $4845-$4847 DB_DATA 2
RANGE $4847-$4849 DB_DATA 2
RANGE $4849-$484B DB_DATA 2
RANGE $484B-$484D DB_DATA 2
RANGE $484D-$484E DB_DATA 1
RANGE $484E-$4850 DW_DATA 1
RANGE $4850-$4851 DB_DATA 1
RANGE $4851-$4852 DB_DATA 1
RANGE $4852-$4854 DW_DATA 1
RANGE $4854-$4855 DB_DATA 1
RANGE $4855-$4856 DB_DATA 1
RANGE $4856-$4857 DB_DATA 1
RANGE $4857-$4858 DB_DATA 1
RANGE $4858-$485A DW_DATA 1
RANGE $485A-$485C DB_DATA 2
RANGE $485C-$485E DB_DATA 2
RANGE $485E-$4860 DB_DATA 2
RANGE $4860-$4862 DB_DATA 2
RANGE $4862-$4864 DB_DATA 2
RANGE $4864-$4866 DB_DATA 2
RANGE $4866-$4868 DB_DATA 2
RANGE $4868-$486A DB_DATA 2
RANGE $486A-$486C DB_DATA 2
RANGE $486C-$486E DB_DATA 2
RANGE $486E-$4870 DB_DATA 2
RANGE $4870-$4871 DB_DATA 1
RANGE $4871-$4873 DW_DATA 1
RANGE $4873-$4874 DB_DATA 1
RANGE $4874-$4875 DB_DATA 1
RANGE $4875-$4877 DW_DATA 1
RANGE $4877-$4878 DB_DATA 1
RANGE $4878-$4879 DB_DATA 1
RANGE $4879-$487A DB_DATA 1
RANGE $487A-$487B DB_DATA 1
RANGE $487B-$487C DB_DATA 1
RANGE $487C-$487E DW_DATA 1
RANGE $487E-$487F DB_DATA 1
RANGE $487F-$4880 DB_DATA 1
RANGE $4880-$4882 DW_DATA 1
RANGE $4882-$4883 DB_DATA 1
RANGE $4883-$4884 DB_DATA 1
RANGE $4884-$4885 DB_DATA 1
RANGE $4885-$4886 DB_DATA 1
RANGE $4886-$4887 DB_DATA 1
RANGE $4887-$4889 DW_DATA 1
RANGE $4889-$488A DB_DATA 1
RANGE $488A-$488B DB_DATA 1
RANGE $488B-$488D DW_DATA 1
RANGE $488D-$488E DB_DATA 1
RANGE $488E-$488F DB_DATA 1
RANGE $488F-$4890 DB_DATA 1
RANGE $4890-$4891 DB_DATA 1
RANGE $4891-$4892 DB_DATA 1
RANGE $4892-$4894 DW_DATA 1
RANGE $4894-$4895 DB_DATA 1
RANGE $4895-$4896 DB_DATA 1
RANGE $4896-$4898 DW_DATA 1
RANGE $4898-$4899 DB_DATA 1
RANGE $4899-$489A DB_DATA 1
RANGE $489A-$489B DB_DATA 1
RANGE $489B-$489C DB_DATA 1
RANGE $489C-$489D DB_DATA 1
RANGE $489D-$489F DW_DATA 1
RANGE $489F-$48A0 DB_DATA 1
RANGE $48A0-$48A1 DB_DATA 1
RANGE $48A1-$48A3 DW_DATA 1
RANGE $48A3-$48A4 DB_DATA 1
RANGE $48A4-$48A5 DB_DATA 1
RANGE $48A5-$48A6 DB_DATA 1
RANGE $48A6-$48A7 DB_DATA 1
RANGE $48A7-$48A8 DB_DATA 1
RANGE $48A8-$48AA DW_DATA 1
RANGE $48AA-$48AB DB_DATA 1
RANGE $48AB-$48AC DB_DATA 1
RANGE $48AC-$48AE DW_DATA 1
RANGE $48AE-$48AF DB_DATA 1
RANGE $48AF-$48B0 DB_DATA 1
RANGE $48B0-$48B1 DB_DATA 1
RANGE $48B1-$48B2 DB_DATA 1
RANGE $48B2-$48B3 DB_DATA 1
RANGE $48B3-$48B5 DW_DATA 1
RANGE $48B5-$48B6 DB_DATA 1
RANGE $48B6-$48B7 DB_DATA 1
RANGE $48B7-$48B9 DW_DATA 1
RANGE $48B9-$48BA DB_DATA 1
RANGE $48BA-$48BB DB_DATA 1
RANGE $48BB-$48BC DB_DATA 1
RANGE $48BC-$48BD DB_DATA 1
RANGE $48BD-$48BE DB_DATA 1
RANGE $48BE-$48C0 DW_DATA 1
RANGE $48C0-$48C1 DB_DATA 1
RANGE $48C1-$48C2 DB_DATA 1
RANGE $48C2-$48C4 DW_DATA 1
RANGE $48C4-$48C5 DB_DATA 1
RANGE $48C5-$48C6 DB_DATA 1
RANGE $48C6-$48C7 DB_DATA 1
RANGE $48C7-$48C8 DB_DATA 1
RANGE $48C8-$48C9 DB_DATA 1
RANGE $48C9-$48CB DW_DATA 1
RANGE $48CB-$48CC DB_DATA 1
RANGE $48CC-$48CD DB_DATA 1
RANGE $48CD-$48CF DW_DATA 1
RANGE $48CF-$48D0 DB_DATA 1
RANGE $48D0-$48D1 DB_DATA 1
RANGE $48D1-$48D2 DB_DATA 1
RANGE $48D2-$48D3 DB_DATA 1
RANGE $48D3-$48D4 DB_DATA 1
RANGE $48D4-$48D6 DW_DATA 1
RANGE $48D6-$48D7 DB_DATA 1
RANGE $48D7-$48D8 DB_DATA 1
RANGE $48D8-$48DA DW_DATA 1
RANGE $48DA-$48DB DB_DATA 1
RANGE $48DB-$48DC DB_DATA 1
RANGE $48DC-$48DD DB_DATA 1
RANGE $48DD-$48DE DB_DATA 1
RANGE $48DE-$48DF DB_DATA 1
RANGE $48DF-$48E1 DW_DATA 1
RANGE $48E1-$48E2 DB_DATA 1
RANGE $48E2-$48E3 DB_DATA 1
RANGE $48E3-$48E5 DW_DATA 1
RANGE $48E5-$48E6 DB_DATA 1
RANGE $48E6-$48E7 DB_DATA 1
RANGE $48E7-$48E8 DB_DATA 1
RANGE $48E8-$48E9 DB_DATA 1
RANGE $48E9-$48EA DB_DATA 1
RANGE $48EA-$48EC DW_DATA 1
RANGE $48EC-$48ED DB_DATA 1
RANGE $48ED-$48EE DB_DATA 1
RANGE $48EE-$48F0 DW_DATA 1
RANGE $48F0-$48F1 DB_DATA 1
RANGE $48F1-$48F2 DB_DATA 1
RANGE $48F2-$48F3 DB_DATA 1
RANGE $48F3-$48F4 DB_DATA 1
RANGE $48F4-$48F6 DW_DATA 1
RANGE $48F6-$48F8 DB_DATA 2
RANGE $48F8-$48FA DB_DATA 2
RANGE $48FA-$48FC DB_DATA 2
RANGE $48FC-$48FE DB_DATA 2
RANGE $48FE-$4900 DB_DATA 2
RANGE $4900-$4902 DB_DATA 2
RANGE $4902-$4904 DB_DATA 2
RANGE $4904-$4906 DB_DATA 2
RANGE $4906-$4908 DB_DATA 2
RANGE $4908-$490A DB_DATA 2
RANGE $490A-$490C DB_DATA 2
RANGE $490C-$490E DB_DATA 2
RANGE $490E-$4910 DB_DATA 2
RANGE $4910-$4912 DB_DATA 2
RANGE $4912-$4913 DB_DATA 1
RANGE $4913-$4915 DW_DATA 1
RANGE $4915-$4916 DB_DATA 1
RANGE $4916-$4917 DB_DATA 1
RANGE $4917-$4919 DW_DATA 1
RANGE $4919-$491A DB_DATA 1
RANGE $491A-$491B DB_DATA 1
RANGE $491B-$491C DB_DATA 1
RANGE $491C-$491D DB_DATA 1
RANGE $491D-$491F DW_DATA 1
RANGE $491F-$4921 DB_DATA 2
RANGE $4921-$4923 DB_DATA 2
RANGE $4923-$4925 DB_DATA 2
RANGE $4925-$4927 DB_DATA 2
RANGE $4927-$4929 DB_DATA 2
RANGE $4929-$492B DB_DATA 2
RANGE $492B-$492D DB_DATA 2
RANGE $492D-$492F DB_DATA 2
RANGE $492F-$4931 DB_DATA 2
RANGE $4931-$4933 DB_DATA 2
RANGE $4933-$4935 DB_DATA 2
RANGE $4935-$4937 DB_DATA 2
RANGE $4937-$4939 DB_DATA 2
RANGE $4939-$493B DB_DATA 2
RANGE $493B-$493C DB_DATA 1
RANGE $493C-$493E DW_DATA 1
RANGE $493E-$493F DB_DATA 1
RANGE $493F-$4940 DB_DATA 1
RANGE $4940-$4942 DW_DATA 1
RANGE $4942-$4943 DB_DATA 1
RANGE $4943-$4944 DB_DATA 1
RANGE $4944-$4945 DB_DATA 1
RANGE $4945-$4946 DB_DATA 1
RANGE $4946-$4948 DW_DATA 1
RANGE $4948-$494A DB_DATA 2
RANGE $494A-$494C DB_DATA 2
RANGE $494C-$494E DB_DATA 2
RANGE $494E-$4950 DB_DATA 2
RANGE $4950-$4952 DB_DATA 2
RANGE $4952-$4954 DB_DATA 2
RANGE $4954-$4956 DB_DATA 2
RANGE $4956-$4958 DB_DATA 2
RANGE $4958-$495A DB_DATA 2
RANGE $495A-$495C DB_DATA 2
RANGE $495C-$495E DB_DATA 2
RANGE $495E-$4960 DB_DATA 2
RANGE $4960-$4961 DB_DATA 1
RANGE $4961-$4963 DW_DATA 1
RANGE $4963-$4964 DB_DATA 1
RANGE $4964-$4965 DB_DATA 1
RANGE $4965-$4967 DW_DATA 1
RANGE $4967-$4968 DB_DATA 1
RANGE $4968-$4969 DB_DATA 1
RANGE $4969-$496A DB_DATA 1
RANGE $496A-$496B DB_DATA 1
RANGE $496B-$496D DW_DATA 1
RANGE $496D-$496F DB_DATA 2
RANGE $496F-$4971 DB_DATA 2
RANGE $4971-$4973 DB_DATA 2
RANGE $4973-$4975 DB_DATA 2
RANGE $4975-$4977 DB_DATA 2
RANGE $4977-$4979 DB_DATA 2
RANGE $4979-$497B DB_DATA 2
RANGE $497B-$497D DB_DATA 2
RANGE $497D-$497F DB_DATA 2
RANGE $497F-$4981 DB_DATA 2
RANGE $4981-$4983 DB_DATA 2
RANGE $4983-$4985 DB_DATA 2
RANGE $4985-$4987 DB_DATA 2
RANGE $4987-$4989 DB_DATA 2
RANGE $4989-$498A DB_DATA 1
RANGE $498A-$498C DW_DATA 1
RANGE $498C-$498D DB_DATA 1
RANGE $498D-$498E DB_DATA 1
RANGE $498E-$4990 DW_DATA 1
RANGE $4990-$4991 DB_DATA 1
RANGE $4991-$4992 DB_DATA 1
RANGE $4992-$4993 DB_DATA 1
RANGE $4993-$4994 DB_DATA 1
RANGE $4994-$4995 DB_DATA 1
RANGE $4995-$4997 DW_DATA 1
RANGE $4997-$4998 DB_DATA 1
RANGE $4998-$4999 DB_DATA 1
RANGE $4999-$499B DW_DATA 1
RANGE $499B-$499C DB_DATA 1
RANGE $499C-$499D DB_DATA 1
RANGE $499D-$499E DB_DATA 1
RANGE $499E-$499F DB_DATA 1
RANGE $499F-$49A0 DB_DATA 1
RANGE $49A0-$49A2 DW_DATA 1
RANGE $49A2-$49A3 DB_DATA 1
RANGE $49A3-$49A4 DB_DATA 1
RANGE $49A4-$49A6 DW_DATA 1
RANGE $49A6-$49A7 DB_DATA 1
RANGE $49A7-$49A8 DB_DATA 1
RANGE $49A8-$49A9 DB_DATA 1
RANGE $49A9-$49AA DB_DATA 1
RANGE $49AA-$49AB DB_DATA 1
RANGE $49AB-$49AD DW_DATA 1
RANGE $49AD-$49AE DB_DATA 1
RANGE $49AE-$49AF DB_DATA 1
RANGE $49AF-$49B1 DW_DATA 1
RANGE $49B1-$49B2 DB_DATA 1
RANGE $49B2-$49B3 DB_DATA 1
RANGE $49B3-$49B4 DB_DATA 1
RANGE $49B4-$49B5 DB_DATA 1
RANGE $49B5-$49B6 DB_DATA 1
RANGE $49B6-$49B8 DW_DATA 1
RANGE $49B8-$49B9 DB_DATA 1
RANGE $49B9-$49BA DB_DATA 1
RANGE $49BA-$49BC DW_DATA 1
RANGE $49BC-$49BD DB_DATA 1
RANGE $49BD-$49BE DB_DATA 1
RANGE $49BE-$49BF DB_DATA 1
RANGE $49BF-$49C0 DB_DATA 1
RANGE $49C0-$49C2 DW_DATA 1
RANGE $49C2-$49C4 DB_DATA 2
RANGE $49C4-$49C6 DB_DATA 2
RANGE $49C6-$49C8 DB_DATA 2
RANGE $49C8-$49CA DB_DATA 2
RANGE $49CA-$49CC DB_DATA 2
RANGE $49CC-$49CE DB_DATA 2
RANGE $49CE-$49D0 DB_DATA 2
RANGE $49D0-$49D2 DB_DATA 2
RANGE $49D2-$49D4 DB_DATA 2
RANGE $49D4-$49D6 DB_DATA 2
RANGE $49D6-$49D8 DB_DATA 2
RANGE $49D8-$49DA DB_DATA 2
RANGE $49DA-$49DC DB_DATA 2
RANGE $49DC-$49DD DB_DATA 1
RANGE $49DD-$49DF DW_DATA 1
RANGE $49DF-$49E0 DB_DATA 1
RANGE $49E0-$49E1 DB_DATA 1
RANGE $49E1-$49E3 DW_DATA 1
RANGE $49E3-$49E4 DB_DATA 1
RANGE $49E4-$49E5 DB_DATA 1
RANGE $49E5-$49E6 DB_DATA 1
RANGE $49E6-$49E7 DB_DATA 1
RANGE $49E7-$49E9 DW_DATA 1
RANGE $49E9-$49EB DB_DATA 2
RANGE $49EB-$49ED DB_DATA 2
RANGE $49ED-$49EF DB_DATA 2
RANGE $49EF-$49F1 DB_DATA 2
RANGE $49F1-$49F3 DB_DATA 2
RANGE $49F3-$49F5 DB_DATA 2
RANGE $49F5-$49F7 DB_DATA 2
RANGE $49F7-$49F9 DB_DATA 2
RANGE $49F9-$49FB DB_DATA 2
RANGE $49FB-$49FD DB_DATA 2
RANGE $49FD-$49FF DB_DATA 2
RANGE $49FF-$4A01 DB_DATA 2
RANGE $4A01-$4A03 DB_DATA 2
RANGE $4A03-$4A05 DB_DATA 2
RANGE $4A05-$4A07 DB_DATA 2
RANGE $4A07-$4A09 DB_DATA 2
RANGE $4A09-$4A0A DB_DATA 1
RANGE $4A0A-$4A0C DW_DATA 1
RANGE $4A0C-$4A0D DB_DATA 1
RANGE $4A0D-$4A0E DB_DATA 1
RANGE $4A0E-$4A10 DW_DATA 1
RANGE $4A10-$4A11 DB_DATA 1
RANGE $4A11-$4A12 DB_DATA 1
RANGE $4A12-$4A13 DB_DATA 1
RANGE $4A13-$4A14 DB_DATA 1
RANGE $4A14-$4A16 DW_DATA 1
RANGE $4A16-$4A18 DB_DATA 2
RANGE $4A18-$4A1A DB_DATA 2
RANGE $4A1A-$4A1C DB_DATA 2
RANGE $4A1C-$4A1E DB_DATA 2
RANGE $4A1E-$4A20 DB_DATA 2
RANGE $4A20-$4A22 DB_DATA 2
RANGE $4A22-$4A24 DB_DATA 2
RANGE $4A24-$4A26 DB_DATA 2
RANGE $4A26-$4A28 DB_DATA 2
RANGE $4A28-$4A2A DB_DATA 2
RANGE $4A2A-$4A2C DB_DATA 2
RANGE $4A2C-$4A2E DB_DATA 2
RANGE $4A2E-$4A30 DB_DATA 2
RANGE $4A30-$4A32 DB_DATA 2
RANGE $4A32-$4A34 DB_DATA 2
RANGE $4A34-$4A36 DB_DATA 2
RANGE $4A36-$4A38 DB_DATA 2
RANGE $4A38-$4A3A DB_DATA 2
RANGE $4A3A-$4A3B DB_DATA 1
RANGE $4A3B-$4A3D DW_DATA 1
RANGE $4A3D-$4A3E DB_DATA 1
RANGE $4A3E-$4A3F DB_DATA 1
RANGE $4A3F-$4A41 DW_DATA 1
RANGE $4A41-$4A42 DB_DATA 1
RANGE $4A42-$4A43 DB_DATA 1
RANGE $4A43-$4A44 DB_DATA 1
RANGE $4A44-$4A45 DB_DATA 1
RANGE $4A45-$4A47 DW_DATA 1
RANGE $4A47-$4A49 DB_DATA 2
RANGE $4A49-$4A4B DB_DATA 2
RANGE $4A4B-$4A4D DB_DATA 2
RANGE $4A4D-$4A4F DB_DATA 2
RANGE $4A4F-$4A51 DB_DATA 2
RANGE $4A51-$4A53 DB_DATA 2
RANGE $4A53-$4A55 DB_DATA 2
RANGE $4A55-$4A57 DB_DATA 2
RANGE $4A57-$4A59 DB_DATA 2
RANGE $4A59-$4A5B DB_DATA 2
RANGE $4A5B-$4A5D DB_DATA 2
RANGE $4A5D-$4A5F DB_DATA 2
RANGE $4A5F-$4A61 DB_DATA 2
RANGE $4A61-$4A63 DB_DATA 2
RANGE $4A63-$4A65 DB_DATA 2
RANGE $4A65-$4A67 DB_DATA 2
RANGE $4A67-$4A69 DB_DATA 2
RANGE $4A69-$4A6B DB_DATA 2
RANGE $4A6B-$4A6C DB_DATA 1
RANGE $4A6C-$4A6E DW_DATA 1
RANGE $4A6E-$4A6F DB_DATA 1
RANGE $4A6F-$4A70 DB_DATA 1
RANGE $4A70-$4A72 DW_DATA 1
RANGE $4A72-$4A73 DB_DATA 1
RANGE $4A73-$4A74 DB_DATA 1
RANGE $4A74-$4A75 DB_DATA 1
RANGE $4A75-$4A76 DB_DATA 1
RANGE $4A76-$4A78 DW_DATA 1
RANGE $4A78-$4A7A DB_DATA 2
RANGE $4A7A-$4A7C DB_DATA 2
RANGE $4A7C-$4A7E DB_DATA 2
RANGE $4A7E-$4A80 DB_DATA 2
RANGE $4A80-$4A82 DB_DATA 2
RANGE $4A82-$4A84 DB_DATA 2
RANGE $4A84-$4A86 DB_DATA 2
RANGE $4A86-$4A88 DB_DATA 2
RANGE $4A88-$4A8A DB_DATA 2
RANGE $4A8A-$4A8C DB_DATA 2
RANGE $4A8C-$4A8E DB_DATA 2
RANGE $4A8E-$4A90 DB_DATA 2
RANGE $4A90-$4A92 DB_DATA 2
RANGE $4A92-$4A94 DB_DATA 2
RANGE $4A94-$4A96 DB_DATA 2
RANGE $4A96-$4A98 DB_DATA 2
RANGE $4A98-$4A9A DB_DATA 2
RANGE $4A9A-$4A9C DB_DATA 2
RANGE $4A9C-$4A9D DB_DATA 1
RANGE $4A9D-$4A9F DW_DATA 1
RANGE $4A9F-$4AA0 DB_DATA 1
RANGE $4AA0-$4AA1 DB_DATA 1
RANGE $4AA1-$4AA3 DW_DATA 1
RANGE $4AA3-$4AA4 DB_DATA 1
RANGE $4AA4-$4AA5 DB_DATA 1
RANGE $4AA5-$4AA6 DB_DATA 1
RANGE $4AA6-$4AA7 DB_DATA 1
RANGE $4AA7-$4AA8 DB_DATA 1
RANGE $4AA8-$4AAA DW_DATA 1
RANGE $4AAA-$4AAB DB_DATA 1
RANGE $4AAB-$4AAC DB_DATA 1
RANGE $4AAC-$4AAE DW_DATA 1
RANGE $4AAE-$4AAF DB_DATA 1
RANGE $4AAF-$4AB0 DB_DATA 1
RANGE $4AB0-$4AB1 DB_DATA 1
RANGE $4AB1-$4AB2 DB_DATA 1
RANGE $4AB2-$4AB4 DW_DATA 1
RANGE $4AB4-$4AB6 DB_DATA 2
RANGE $4AB6-$4AB8 DB_DATA 2
RANGE $4AB8-$4ABA DB_DATA 2
RANGE $4ABA-$4ABC DB_DATA 2
RANGE $4ABC-$4ABE DB_DATA 2
RANGE $4ABE-$4AC0 DB_DATA 2
RANGE $4AC0-$4AC2 DB_DATA 2
RANGE $4AC2-$4AC4 DB_DATA 2
RANGE $4AC4-$4AC6 DB_DATA 2
RANGE $4AC6-$4AC8 DB_DATA 2
RANGE $4AC8-$4AC9 DB_DATA 1
RANGE $4AC9-$4ACB DW_DATA 1
RANGE $4ACB-$4ACC DB_DATA 1
RANGE $4ACC-$4ACD DB_DATA 1
RANGE $4ACD-$4ACF DW_DATA 1
RANGE $4ACF-$4AD0 DB_DATA 1
RANGE $4AD0-$4AD1 DB_DATA 1
RANGE $4AD1-$4AD2 DB_DATA 1
RANGE $4AD2-$4AD3 DB_DATA 1
RANGE $4AD3-$4AD5 DW_DATA 1
RANGE $4AD5-$4AD7 DB_DATA 2
RANGE $4AD7-$4AD9 DB_DATA 2
RANGE $4AD9-$4ADB DB_DATA 2
RANGE $4ADB-$4ADD DB_DATA 2
RANGE $4ADD-$4ADF DB_DATA 2
RANGE $4ADF-$4AE1 DB_DATA 2
RANGE $4AE1-$4AE3 DB_DATA 2
RANGE $4AE3-$4AE5 DB_DATA 2
RANGE $4AE5-$4AE7 DB_DATA 2
RANGE $4AE7-$4AE9 DB_DATA 2
RANGE $4AE9-$4AEA DB_DATA 1
RANGE $4AEA-$4AEC DW_DATA 1
RANGE $4AEC-$4AED DB_DATA 1
RANGE $4AED-$4AEE DB_DATA 1
RANGE $4AEE-$4AF0 DW_DATA 1
RANGE $4AF0-$4AF1 DB_DATA 1
RANGE $4AF1-$4AF2 DB_DATA 1
RANGE $4AF2-$4AF3 DB_DATA 1
RANGE $4AF3-$4AF4 DB_DATA 1
RANGE $4AF4-$4AF6 DW_DATA 1
RANGE $4AF6-$4AF8 DW_DATA 1
RANGE $4AF8-$4AFA DW_DATA 1
RANGE $4AFA-$4AFC DW_DATA 1
RANGE $4AFC-$4AFE DW_DATA 1
RANGE $4AFE-$4B00 DW_DATA 1
RANGE $4B00-$4B02 DW_DATA 1
RANGE $4B02-$4B04 DW_DATA 1
RANGE $4B04-$4B06 DW_DATA 1
RANGE $4B06-$4B08 DW_DATA 1
RANGE $4B08-$4B0A DW_DATA 1
RANGE $4B0A-$4B0C DW_DATA 1
RANGE $4B0C-$4B0E DW_DATA 1
RANGE $4B0E-$4B10 DW_DATA 1
RANGE $4B10-$4B12 DW_DATA 1
RANGE $4B12-$4B14 DW_DATA 1
RANGE $4B14-$4B16 DW_DATA 1
RANGE $4B16-$4B18 DW_DATA 1
RANGE $4B18-$4B1A DW_DATA 1
RANGE $4B1A-$4B1C DW_DATA 1
RANGE $4B1C-$4B1E DW_DATA 1
RANGE $4B1E-$4B20 DW_DATA 1
RANGE $4B20-$4B22 DW_DATA 1
RANGE $4B22-$4B24 DW_DATA 1
RANGE $4B24-$4B26 DW_DATA 1
RANGE $4B26-$4B28 DW_DATA 1
RANGE $4B28-$4B2A DW_DATA 1
RANGE $4B2A-$4B2C DW_DATA 1
RANGE $4B2C-$4B2E DW_DATA 1
RANGE $4B2E-$4B30 DW_DATA 1
RANGE $4B30-$4B32 DW_DATA 1
RANGE $4B32-$4B34 DW_DATA 1
RANGE $4B34-$4B36 DW_DATA 1
RANGE $4B36-$4B38 DW_DATA 1
RANGE $4B38-$4B3A DW_DATA 1
RANGE $4B3A-$4B3C DW_DATA 1
RANGE $4B3C-$4B3E DW_DATA 1
RANGE $4B3E-$4B40 DW_DATA 1
RANGE $4B40-$4B42 DW_DATA 1
RANGE $4B42-$4B44 DW_DATA 1
RANGE $4B44-$4B46 DW_DATA 1
RANGE $4B46-$4B48 DW_DATA 1
RANGE $4B48-$4B4A DW_DATA 1
RANGE $4B4A-$4B4C DW_DATA 1
RANGE $4B4C-$4B4E DW_DATA 1
RANGE $4B4E-$4B50 DW_DATA 1
RANGE $4B50-$4B52 DW_DATA 1
RANGE $4B52-$4B5E DB_DATA 12
RANGE $4B5E-$4B6A DB_DATA 12
RANGE $4B6A-$4B76 DB_DATA 12
RANGE $4B76-$4B82 DB_DATA 12
RANGE $4B82-$4B8E DB_DATA 12
RANGE $4B8E-$4B9A DB_DATA 12
RANGE $4B9A-$4BA6 DB_DATA 12
RANGE $4BA6-$4BB2 DB_DATA 12
RANGE $4BB2-$4BBE DB_DATA 12
RANGE $4BBE-$4BCA DB_DATA 12
RANGE $4BCA-$4BD6 DB_DATA 12
RANGE $4BD6-$4BD7 DB_DATA 1
RANGE $4BD7-$4BD8 DB_DATA 1
RANGE $4BD8-$4BD9 DB_DATA 1
RANGE $4BD9-$4BDA DB_DATA 1
RANGE $4BDA-$4BDB DB_DATA 1
RANGE $4BDB-$4BDC DB_DATA 1
RANGE $4BDC-$4BDD DB_DATA 1
RANGE $4BDD-$4BE9 DB_DATA 12
RANGE $4BE9-$4BF5 DB_DATA 12
RANGE $4BF5-$4C01 DB_DATA 12
RANGE $4C01-$4C0D DB_DATA 12
RANGE $4C0D-$4C19 DB_DATA 12
RANGE $4C19-$4C25 DB_DATA 12
RANGE $4C25-$4C31 DB_DATA 12
RANGE $4C31-$4C3D DB_DATA 12
RANGE $4C3D-$4C49 DB_DATA 12
RANGE $4C49-$4C55 DB_DATA 12
RANGE $4C55-$4C61 DB_DATA 12
RANGE $4C61-$4C62 DB_DATA 1
RANGE $4C62-$4C63 DB_DATA 1
RANGE $4C63-$4C64 DB_DATA 1
RANGE $4C64-$4C65 DB_DATA 1
RANGE $4C65-$4C66 DB_DATA 1
RANGE $4C66-$4C67 DB_DATA 1
RANGE $4C67-$4C68 DB_DATA 1
RANGE $4C68-$4C74 DB_DATA 12
RANGE $4C74-$4C80 DB_DATA 12
RANGE $4C80-$4C8C DB_DATA 12
RANGE $4C8C-$4C98 DB_DATA 12
RANGE $4C98-$4CA4 DB_DATA 12
RANGE $4CA4-$4CB0 DB_DATA 12
RANGE $4CB0-$4CBC DB_DATA 12
RANGE $4CBC-$4CC8 DB_DATA 12
RANGE $4CC8-$4CD4 DB_DATA 12
RANGE $4CD4-$4CE0 DB_DATA 12
RANGE $4CE0-$4CEC DB_DATA 12
RANGE $4CEC-$4CED DB_DATA 1
RANGE $4CED-$4CEE DB_DATA 1
RANGE $4CEE-$4CEF DB_DATA 1
RANGE $4CEF-$4CF0 DB_DATA 1
RANGE $4CF0-$4CF1 DB_DATA 1
RANGE $4CF1-$4CF2 DB_DATA 1
RANGE $4CF2-$4CF3 DB_DATA 1
RANGE $4CF3-$4CFF DB_DATA 12
RANGE $4CFF-$4D0B DB_DATA 12
RANGE $4D0B-$4D17 DB_DATA 12
RANGE $4D17-$4D23 DB_DATA 12
RANGE $4D23-$4D2F DB_DATA 12
RANGE $4D2F-$4D3B DB_DATA 12
RANGE $4D3B-$4D47 DB_DATA 12
RANGE $4D47-$4D53 DB_DATA 12
RANGE $4D53-$4D5F DB_DATA 12
RANGE $4D5F-$4D6B DB_DATA 12
RANGE $4D6B-$4D77 DB_DATA 12
RANGE $4D77-$4D78 DB_DATA 1
RANGE $4D78-$4D79 DB_DATA 1
RANGE $4D79-$4D7A DB_DATA 1
RANGE $4D7A-$4D7B DB_DATA 1
RANGE $4D7B-$4D7C DB_DATA 1
RANGE $4D7C-$4D7D DB_DATA 1
RANGE $4D7D-$4D7E DB_DATA 1
RANGE $4D7E-$4D8A DB_DATA 12
RANGE $4D8A-$4D96 DB_DATA 12
RANGE $4D96-$4DA2 DB_DATA 12
RANGE $4DA2-$4DAE DB_DATA 12
RANGE $4DAE-$4DBA DB_DATA 12
RANGE $4DBA-$4DC6 DB_DATA 12
RANGE $4DC6-$4DD2 DB_DATA 12
RANGE $4DD2-$4DDE DB_DATA 12
RANGE $4DDE-$4DEA DB_DATA 12
RANGE $4DEA-$4DF6 DB_DATA 12
RANGE $4DF6-$4E02 DB_DATA 12
RANGE $4E02-$4E03 DB_DATA 1
RANGE $4E03-$4E04 DB_DATA 1
RANGE $4E04-$4E05 DB_DATA 1
RANGE $4E05-$4E06 DB_DATA 1
RANGE $4E06-$4E07 DB_DATA 1
RANGE $4E07-$4E08 DB_DATA 1
RANGE $4E08-$4E09 DB_DATA 1
RANGE $4E09-$4E15 DB_DATA 12
RANGE $4E15-$4E21 DB_DATA 12
RANGE $4E21-$4E2D DB_DATA 12
RANGE $4E2D-$4E39 DB_DATA 12
RANGE $4E39-$4E45 DB_DATA 12
RANGE $4E45-$4E51 DB_DATA 12
RANGE $4E51-$4E5D DB_DATA 12
RANGE $4E5D-$4E69 DB_DATA 12
RANGE $4E69-$4E75 DB_DATA 12
RANGE $4E75-$4E81 DB_DATA 12
RANGE $4E81-$4E8D DB_DATA 12
RANGE $4E8D-$4E8E DB_DATA 1
RANGE $4E8E-$4E8F DB_DATA 1
RANGE $4E8F-$4E90 DB_DATA 1
RANGE $4E90-$4E91 DB_DATA 1
RANGE $4E91-$4E92 DB_DATA 1
RANGE $4E92-$4E93 DB_DATA 1
RANGE $4E93-$4E94 DB_DATA 1
RANGE $4E94-$4EA0 DB_DATA 12
RANGE $4EA0-$4EAC DB_DATA 12
RANGE $4EAC-$4EB8 DB_DATA 12
RANGE $4EB8-$4EC4 DB_DATA 12
RANGE $4EC4-$4ED0 DB_DATA 12
RANGE $4ED0-$4EDC DB_DATA 12
RANGE $4EDC-$4EE8 DB_DATA 12
RANGE $4EE8-$4EF4 DB_DATA 12
RANGE $4EF4-$4F00 DB_DATA 12
RANGE $4F00-$4F0C DB_DATA 12
RANGE $4F0C-$4F18 DB_DATA 12
RANGE $4F18-$4F19 DB_DATA 1
RANGE $4F19-$4F1A DB_DATA 1
RANGE $4F1A-$4F1B DB_DATA 1
RANGE $4F1B-$4F1C DB_DATA 1
RANGE $4F1C-$4F1D DB_DATA 1
RANGE $4F1D-$4F1E DB_DATA 1
RANGE $4F1E-$4F1F DB_DATA 1
RANGE $4F1F-$4F2B DB_DATA 12
RANGE $4F2B-$4F37 DB_DATA 12
RANGE $4F37-$4F43 DB_DATA 12
RANGE $4F43-$4F4F DB_DATA 12
RANGE $4F4F-$4F5B DB_DATA 12
RANGE $4F5B-$4F67 DB_DATA 12
RANGE $4F67-$4F73 DB_DATA 12
RANGE $4F73-$4F7F DB_DATA 12
RANGE $4F7F-$4F8B DB_DATA 12
RANGE $4F8B-$4F97 DB_DATA 12
RANGE $4F97-$4FA3 DB_DATA 12
RANGE $4FA3-$4FA4 DB_DATA 1
RANGE $4FA4-$4FA5 DB_DATA 1
RANGE $4FA5-$4FA6 DB_DATA 1
RANGE $4FA6-$4FA7 DB_DATA 1
RANGE $4FA7-$4FA8 DB_DATA 1
RANGE $4FA8-$4FA9 DB_DATA 1
RANGE $4FA9-$4FAA DB_DATA 1
RANGE $4FAA-$4FB6 DB_DATA 12
RANGE $4FB6-$4FC2 DB_DATA 12
RANGE $4FC2-$4FCE DB_DATA 12
RANGE $4FCE-$4FDA DB_DATA 12
RANGE $4FDA-$4FE6 DB_DATA 12
RANGE $4FE6-$4FF2 DB_DATA 12
RANGE $4FF2-$4FFE DB_DATA 12
RANGE $4FFE-$500A DB_DATA 12
RANGE $500A-$5016 DB_DATA 12
RANGE $5016-$5022 DB_DATA 12
RANGE $5022-$502E DB_DATA 12
RANGE $502E-$502F DB_DATA 1
RANGE $502F-$5030 DB_DATA 1
RANGE $5030-$5031 DB_DATA 1
RANGE $5031-$5032 DB_DATA 1
RANGE $5032-$5033 DB_DATA 1
RANGE $5033-$5034 DB_DATA 1
RANGE $5034-$5035 DB_DATA 1
RANGE $5035-$5041 DB_DATA 12
RANGE $5041-$504D DB_DATA 12
RANGE $504D-$5059 DB_DATA 12
RANGE $5059-$5065 DB_DATA 12
RANGE $5065-$5071 DB_DATA 12
RANGE $5071-$507D DB_DATA 12
RANGE $507D-$5089 DB_DATA 12
RANGE $5089-$5095 DB_DATA 12
RANGE $5095-$50A1 DB_DATA 12
RANGE $50A1-$50AD DB_DATA 12
RANGE $50AD-$50B9 DB_DATA 12
RANGE $50B9-$50BA DB_DATA 1
RANGE $50BA-$50BB DB_DATA 1
RANGE $50BB-$50BC DB_DATA 1
RANGE $50BC-$50BD DB_DATA 1
RANGE $50BD-$50BE DB_DATA 1
RANGE $50BE-$50BF DB_DATA 1
RANGE $50BF-$50C0 DB_DATA 1
RANGE $50C0-$50CC DB_DATA 12
RANGE $50CC-$50D8 DB_DATA 12
RANGE $50D8-$50E4 DB_DATA 12
RANGE $50E4-$50F0 DB_DATA 12
RANGE $50F0-$50FC DB_DATA 12
RANGE $50FC-$5108 DB_DATA 12
RANGE $5108-$5114 DB_DATA 12
RANGE $5114-$5120 DB_DATA 12
RANGE $5120-$512C DB_DATA 12
RANGE $512C-$5138 DB_DATA 12
RANGE $5138-$5144 DB_DATA 12
RANGE $5144-$5145 DB_DATA 1
RANGE $5145-$5146 DB_DATA 1
RANGE $5146-$5147 DB_DATA 1
RANGE $5147-$5148 DB_DATA 1
RANGE $5148-$5149 DB_DATA 1
RANGE $5149-$514A DB_DATA 1
RANGE $514A-$514B DB_DATA 1
RANGE $514B-$5157 DB_DATA 12
RANGE $5157-$5163 DB_DATA 12
RANGE $5163-$516F DB_DATA 12
RANGE $516F-$517B DB_DATA 12
RANGE $517B-$5187 DB_DATA 12
RANGE $5187-$5193 DB_DATA 12
RANGE $5193-$519F DB_DATA 12
RANGE $519F-$51AB DB_DATA 12
RANGE $51AB-$51B7 DB_DATA 12
RANGE $51B7-$51C3 DB_DATA 12
RANGE $51C3-$51CF DB_DATA 12
RANGE $51CF-$51D0 DB_DATA 1
RANGE $51D0-$51D1 DB_DATA 1
RANGE $51D1-$51D2 DB_DATA 1
RANGE $51D2-$51D3 DB_DATA 1
RANGE $51D3-$51D4 DB_DATA 1
RANGE $51D4-$51D5 DB_DATA 1
RANGE $51D5-$51D6 DB_DATA 1
RANGE $51D6-$51E2 DB_DATA 12
RANGE $51E2-$51EE DB_DATA 12
RANGE $51EE-$51FA DB_DATA 12
RANGE $51FA-$5206 DB_DATA 12
RANGE $5206-$5212 DB_DATA 12
RANGE $5212-$521E DB_DATA 12
RANGE $521E-$522A DB_DATA 12
RANGE $522A-$5236 DB_DATA 12
RANGE $5236-$5242 DB_DATA 12
RANGE $5242-$524E DB_DATA 12
RANGE $524E-$525A DB_DATA 12
RANGE $525A-$525B DB_DATA 1
RANGE $525B-$525C DB_DATA 1
RANGE $525C-$525D DB_DATA 1
RANGE $525D-$525E DB_DATA 1
RANGE $525E-$525F DB_DATA 1
RANGE $525F-$5260 DB_DATA 1
RANGE $5260-$5261 DB_DATA 1
RANGE $5261-$526D DB_DATA 12
RANGE $526D-$5279 DB_DATA 12
RANGE $5279-$5285 DB_DATA 12
RANGE $5285-$5291 DB_DATA 12
RANGE $5291-$529D DB_DATA 12
RANGE $529D-$52A9 DB_DATA 12
RANGE $52A9-$52B5 DB_DATA 12
RANGE $52B5-$52C1 DB_DATA 12
RANGE $52C1-$52CD DB_DATA 12
RANGE $52CD-$52D9 DB_DATA 12
RANGE $52D9-$52E5 DB_DATA 12
RANGE $52E5-$52E6 DB_DATA 1
RANGE $52E6-$52E7 DB_DATA 1
RANGE $52E7-$52E8 DB_DATA 1
RANGE $52E8-$52E9 DB_DATA 1
RANGE $52E9-$52EA DB_DATA 1
RANGE $52EA-$52EB DB_DATA 1
RANGE $52EB-$52EC DB_DATA 1
RANGE $52EC-$52F8 DB_DATA 12
RANGE $52F8-$5304 DB_DATA 12
RANGE $5304-$5310 DB_DATA 12
RANGE $5310-$531C DB_DATA 12
RANGE $531C-$5328 DB_DATA 12
RANGE $5328-$5334 DB_DATA 12
RANGE $5334-$5340 DB_DATA 12
RANGE $5340-$534C DB_DATA 12
RANGE $534C-$5358 DB_DATA 12
RANGE $5358-$5364 DB_DATA 12
RANGE $5364-$5370 DB_DATA 12
RANGE $5370-$5371 DB_DATA 1
RANGE $5371-$5372 DB_DATA 1
RANGE $5372-$5373 DB_DATA 1
RANGE $5373-$5374 DB_DATA 1
RANGE $5374-$5375 DB_DATA 1
RANGE $5375-$5376 DB_DATA 1
RANGE $5376-$5377 DB_DATA 1
RANGE $5377-$5383 DB_DATA 12
RANGE $5383-$538F DB_DATA 12
RANGE $538F-$539B DB_DATA 12
RANGE $539B-$53A7 DB_DATA 12
RANGE $53A7-$53B3 DB_DATA 12
RANGE $53B3-$53BF DB_DATA 12
RANGE $53BF-$53CB DB_DATA 12
RANGE $53CB-$53D7 DB_DATA 12
RANGE $53D7-$53E3 DB_DATA 12
RANGE $53E3-$53EF DB_DATA 12
RANGE $53EF-$53FB DB_DATA 12
RANGE $53FB-$53FC DB_DATA 1
RANGE $53FC-$53FD DB_DATA 1
RANGE $53FD-$53FE DB_DATA 1
RANGE $53FE-$53FF DB_DATA 1
RANGE $53FF-$5400 DB_DATA 1
RANGE $5400-$5401 DB_DATA 1
RANGE $5401-$5402 DB_DATA 1
RANGE $5402-$540E DB_DATA 12
RANGE $540E-$5421 DB_DATA 19
RANGE $5421-$5434 DB_DATA 19
RANGE $5434-$5447 DB_DATA 19
RANGE $5447-$545A DB_DATA 19
RANGE $545A-$546D DB_DATA 19
RANGE $546D-$5472 DB_DATA 5
RANGE $5472-$5478 DB_DATA 6
RANGE $5478-$547E DB_DATA 6
RANGE $547E-$5484 DB_DATA 6
RANGE $5484-$548A DB_DATA 6
RANGE $548A-$5490 DB_DATA 6
RANGE $5490-$5496 DB_DATA 6
RANGE $5496-$549C DB_DATA 6
RANGE $549C-$54A2 DB_DATA 6
RANGE $54A2-$54A8 DB_DATA 6
RANGE $54A8-$54AE DB_DATA 6
RANGE $54AE-$54B4 DB_DATA 6
RANGE $54B4-$54B9 DB_DATA 5
RANGE $54B9-$54BF DB_DATA 6
RANGE $54BF-$54C5 DB_DATA 6
RANGE $54C5-$54CB DB_DATA 6
RANGE $54CB-$54D1 DB_DATA 6
RANGE $54D1-$54D7 DB_DATA 6
RANGE $54D7-$54DD DB_DATA 6
RANGE $54DD-$54E3 DB_DATA 6
RANGE $54E3-$54E9 DB_DATA 6
RANGE $54E9-$54EF DB_DATA 6
RANGE $54EF-$54F5 DB_DATA 6
RANGE $54F5-$54FB DB_DATA 6
RANGE $54FB-$5500 DB_DATA 5
RANGE $5500-$5506 DB_DATA 6
RANGE $5506-$550C DB_DATA 6
RANGE $550C-$5512 DB_DATA 6
RANGE $5512-$5518 DB_DATA 6
RANGE $5518-$551E DB_DATA 6
RANGE $551E-$5524 DB_DATA 6
RANGE $5524-$552A DB_DATA 6
RANGE $552A-$5530 DB_DATA 6
RANGE $5530-$5536 DB_DATA 6
RANGE $5536-$553C DB_DATA 6
RANGE $553C-$5542 DB_DATA 6
RANGE $5542-$5547 DB_DATA 5
RANGE $5547-$554D DB_DATA 6
RANGE $554D-$5553 DB_DATA 6
RANGE $5553-$5559 DB_DATA 6
RANGE $5559-$555F DB_DATA 6
RANGE $555F-$5565 DB_DATA 6
RANGE $5565-$556B DB_DATA 6
RANGE $556B-$5571 DB_DATA 6
RANGE $5571-$5577 DB_DATA 6
RANGE $5577-$557D DB_DATA 6
RANGE $557D-$5583 DB_DATA 6
RANGE $5583-$5589 DB_DATA 6
RANGE $5589-$558E DB_DATA 5
RANGE $558E-$5594 DB_DATA 6
RANGE $5594-$559A DB_DATA 6
RANGE $559A-$55A0 DB_DATA 6
RANGE $55A0-$55A6 DB_DATA 6
RANGE $55A6-$55AC DB_DATA 6
RANGE $55AC-$55B2 DB_DATA 6
RANGE $55B2-$55B8 DB_DATA 6
RANGE $55B8-$55BE DB_DATA 6
RANGE $55BE-$55C4 DB_DATA 6
RANGE $55C4-$55CA DB_DATA 6
RANGE $55CA-$55D0 DB_DATA 6
RANGE $55D0-$55D5 DB_DATA 5
RANGE $55D5-$55DB DB_DATA 6
RANGE $55DB-$55E1 DB_DATA 6
RANGE $55E1-$55E7 DB_DATA 6
RANGE $55E7-$55ED DB_DATA 6
RANGE $55ED-$55F3 DB_DATA 6
RANGE $55F3-$55F9 DB_DATA 6
RANGE $55F9-$55FF DB_DATA 6
RANGE $55FF-$5605 DB_DATA 6
RANGE $5605-$560B DB_DATA 6
RANGE $560B-$5611 DB_DATA 6
RANGE $5611-$5617 DB_DATA 6
RANGE $5617-$561C DB_DATA 5
RANGE $561C-$5622 DB_DATA 6
RANGE $5622-$5628 DB_DATA 6
RANGE $5628-$562E DB_DATA 6
RANGE $562E-$5634 DB_DATA 6
RANGE $5634-$563A DB_DATA 6
RANGE $563A-$5640 DB_DATA 6
RANGE $5640-$5646 DB_DATA 6
RANGE $5646-$564C DB_DATA 6
RANGE $564C-$5652 DB_DATA 6
RANGE $5652-$5658 DB_DATA 6
RANGE $5658-$565E DB_DATA 6
RANGE $565E-$56DE CODE
RANGE $56DE-$56E6 CHAR_DATA 8
RANGE $56E6-$56F2 CHAR_DATA 12
RANGE $56F2-$56F4 CHAR_DATA 2
RANGE $56F4-$56F6 CHAR_DATA 2
RANGE $56F6-$5702 CHAR_DATA 12
RANGE $5702-$570E CHAR_DATA 12
RANGE $570E-$5717 CHAR_DATA 9
RANGE $5717-$5720 CHAR_DATA 9
RANGE $5720-$572C CHAR_DATA 12
RANGE $572C-$572F CHAR_DATA 3
RANGE $572F-$5733 CHAR_DATA 4
RANGE $5733-$573A CHAR_DATA 7
RANGE $573A-$5742 CHAR_DATA 8
RANGE $5742-$5747 CHAR_DATA 5
RANGE $5747-$59C3 CODE
RANGE $59C3-$59D3 DB_DATA 16
RANGE $59D3-$60FD CODE
RANGE $60FD-$60FF DW_DATA 1
RANGE $60FF-$6109 DB_DATA 10
RANGE $6109-$6113 DB_DATA 10
RANGE $6113-$611D DB_DATA 10
RANGE $611D-$6127 DB_DATA 10
RANGE $6127-$6131 DB_DATA 10
RANGE $6131-$613B DB_DATA 10
RANGE $613B-$6145 DB_DATA 10
RANGE $6145-$614F DB_DATA 10
RANGE $614F-$6159 DB_DATA 10
RANGE $6159-$6163 DB_DATA 10
RANGE $6163-$616D DB_DATA 10
RANGE $616D-$6177 DB_DATA 10
RANGE $6177-$6181 DB_DATA 10
RANGE $6181-$618B DB_DATA 10
RANGE $618B-$6195 DB_DATA 10
RANGE $6195-$619F DB_DATA 10
RANGE $619F-$61A9 DB_DATA 10
RANGE $61A9-$61B3 DB_DATA 10
RANGE $61B3-$61BD DB_DATA 10
RANGE $61BD-$61C7 DB_DATA 10
RANGE $61C7-$61D1 DB_DATA 10
RANGE $61D1-$61DB DB_DATA 10
RANGE $61DB-$61E5 DB_DATA 10
RANGE $61E5-$61EF DB_DATA 10
RANGE $61EF-$61F9 DB_DATA 10
RANGE $61F9-$6203 DB_DATA 10
RANGE $6203-$620D DB_DATA 10
RANGE $620D-$6217 DB_DATA 10
RANGE $6217-$6221 DB_DATA 10
RANGE $6221-$622B DB_DATA 10
RANGE $622B-$6235 DB_DATA 10
RANGE $6235-$623F DB_DATA 10
RANGE $623F-$6249 DB_DATA 10
RANGE $6249-$6253 DB_DATA 10
RANGE $6253-$625D DB_DATA 10
RANGE $625D-$6267 DB_DATA 10
RANGE $6267-$6271 DB_DATA 10
RANGE $6271-$627B DB_DATA 10
RANGE $627B-$6285 DB_DATA 10
RANGE $6285-$628F DB_DATA 10
RANGE $628F-$6299 DB_DATA 10
RANGE $6299-$62A3 DB_DATA 10
RANGE $62A3-$62AD DB_DATA 10
RANGE $62AD-$62B7 DB_DATA 10
RANGE $62B7-$62C1 DB_DATA 10
RANGE $62C1-$62CB DB_DATA 10
RANGE $62CB-$62D5 DB_DATA 10
RANGE $62D5-$62DF DB_DATA 10
RANGE $62DF-$62E7 DB_DATA 8
RANGE $62E7-$62E9 DW_DATA 1
RANGE $62E9-$62F3 DB_DATA 10
RANGE $62F3-$62FD DB_DATA 10
RANGE $62FD-$6307 DB_DATA 10
RANGE $6307-$6311 DB_DATA 10
RANGE $6311-$631B DB_DATA 10
RANGE $631B-$6325 DB_DATA 10
RANGE $6325-$632F DB_DATA 10
RANGE $632F-$6339 DB_DATA 10
RANGE $6339-$6343 DB_DATA 10
RANGE $6343-$634D DB_DATA 10
RANGE $634D-$6357 DB_DATA 10
RANGE $6357-$6361 DB_DATA 10
RANGE $6361-$636B DB_DATA 10
RANGE $636B-$6375 DB_DATA 10
RANGE $6375-$637F DB_DATA 10
RANGE $637F-$6389 DB_DATA 10
RANGE $6389-$6393 DB_DATA 10
RANGE $6393-$639D DB_DATA 10
RANGE $639D-$63A7 DB_DATA 10
RANGE $63A7-$63B1 DB_DATA 10
RANGE $63B1-$63BB DB_DATA 10
RANGE $63BB-$63C5 DB_DATA 10
RANGE $63C5-$63CF DB_DATA 10
RANGE $63CF-$63D9 DB_DATA 10
RANGE $63D9-$63E3 DB_DATA 10
RANGE $63E3-$63ED DB_DATA 10
RANGE $63ED-$63F7 DB_DATA 10
RANGE $63F7-$6401 DB_DATA 10
RANGE $6401-$640B DB_DATA 10
RANGE $640B-$6415 DB_DATA 10
RANGE $6415-$641F DB_DATA 10
RANGE $641F-$6429 DB_DATA 10
RANGE $6429-$6433 DB_DATA 10
RANGE $6433-$643D DB_DATA 10
RANGE $643D-$6447 DB_DATA 10
RANGE $6447-$6451 DB_DATA 10
RANGE $6451-$645B DB_DATA 10
RANGE $645B-$6465 DB_DATA 10
RANGE $6465-$646F DB_DATA 10
RANGE $646F-$6479 DB_DATA 10
RANGE $6479-$6483 DB_DATA 10
RANGE $6483-$648D DB_DATA 10
RANGE $648D-$6497 DB_DATA 10
RANGE $6497-$64A1 DB_DATA 10
RANGE $64A1-$64AB DB_DATA 10
RANGE $64AB-$64B5 DB_DATA 10
RANGE $64B5-$64BF DB_DATA 10
RANGE $64BF-$64C9 DB_DATA 10
RANGE $64C9-$64D3 DB_DATA 10
RANGE $64D3-$64DD DB_DATA 10
RANGE $64DD-$64E7 DB_DATA 10
RANGE $64E7-$64F1 DB_DATA 10
RANGE $64F1-$64F6 DB_DATA 5
RANGE $64F6-$64F8 DW_DATA 1
RANGE $64F8-$6502 DB_DATA 10
RANGE $6502-$650C DB_DATA 10
RANGE $650C-$6516 DB_DATA 10
RANGE $6516-$6520 DB_DATA 10
RANGE $6520-$652A DB_DATA 10
RANGE $652A-$6534 DB_DATA 10
RANGE $6534-$653E DB_DATA 10
RANGE $653E-$6548 DB_DATA 10
RANGE $6548-$6552 DB_DATA 10
RANGE $6552-$655C DB_DATA 10
RANGE $655C-$6566 DB_DATA 10
RANGE $6566-$6570 DB_DATA 10
RANGE $6570-$657A DB_DATA 10
RANGE $657A-$6584 DB_DATA 10
RANGE $6584-$658E DB_DATA 10
RANGE $658E-$6598 DB_DATA 10
RANGE $6598-$65A2 DB_DATA 10
RANGE $65A2-$65AC DB_DATA 10
RANGE $65AC-$65B6 DB_DATA 10
RANGE $65B6-$65C0 DB_DATA 10
RANGE $65C0-$65CA DB_DATA 10
RANGE $65CA-$65D4 DB_DATA 10
RANGE $65D4-$65DE DB_DATA 10
RANGE $65DE-$65E8 DB_DATA 10
RANGE $65E8-$65F2 DB_DATA 10
RANGE $65F2-$65FC DB_DATA 10
RANGE $65FC-$6606 DB_DATA 10
RANGE $6606-$6610 DB_DATA 10
RANGE $6610-$661A DB_DATA 10
RANGE $661A-$6624 DB_DATA 10
RANGE $6624-$662E DB_DATA 10
RANGE $662E-$6638 DB_DATA 10
RANGE $6638-$6642 DB_DATA 10
RANGE $6642-$664C DB_DATA 10
RANGE $664C-$6656 DB_DATA 10
RANGE $6656-$6660 DB_DATA 10
RANGE $6660-$666A DB_DATA 10
RANGE $666A-$6674 DB_DATA 10
RANGE $6674-$667E DB_DATA 10
RANGE $667E-$6688 DB_DATA 10
RANGE $6688-$6692 DB_DATA 10
RANGE $6692-$669C DB_DATA 10
RANGE $669C-$66A6 DB_DATA 10
RANGE $66A6-$66B0 DB_DATA 10
RANGE $66B0-$66BA DB_DATA 10
RANGE $66BA-$66C4 DB_DATA 10
RANGE $66C4-$66CE DB_DATA 10
RANGE $66CE-$66D8 DB_DATA 10
RANGE $66D8-$66E2 DB_DATA 10
RANGE $66E2-$66EC DB_DATA 10
RANGE $66EC-$66F6 DB_DATA 10
RANGE $66F6-$6700 DB_DATA 10
RANGE $6700-$670A DB_DATA 10
RANGE $670A-$6714 DB_DATA 10
RANGE $6714-$671E DB_DATA 10
RANGE $671E-$6728 DB_DATA 10
RANGE $6728-$6732 DB_DATA 10
RANGE $6732-$673C DB_DATA 10
RANGE $673C-$6746 DB_DATA 10
RANGE $6746-$6750 DB_DATA 10
RANGE $6750-$675A DB_DATA 10
RANGE $675A-$6764 DB_DATA 10
RANGE $6764-$676E DB_DATA 10
RANGE $676E-$6778 DB_DATA 10
RANGE $6778-$6782 DB_DATA 10
RANGE $6782-$678C DB_DATA 10
RANGE $678C-$6796 DB_DATA 10
RANGE $6796-$67A0 DB_DATA 10
RANGE $67A0-$67AA DB_DATA 10
RANGE $67AA-$67B4 DB_DATA 10
RANGE $67B4-$67BE DB_DATA 10
RANGE $67BE-$67C8 DB_DATA 10
RANGE $67C8-$67D2 DB_DATA 10
RANGE $67D2-$67DC DB_DATA 10
RANGE $67DC-$67E6 DB_DATA 10
RANGE $67E6-$67F0 DB_DATA 10
RANGE $67F0-$67FA DB_DATA 10
RANGE $67FA-$6804 DB_DATA 10
RANGE $6804-$680E DB_DATA 10
RANGE $680E-$6818 DB_DATA 10
RANGE $6818-$6822 DB_DATA 10
RANGE $6822-$682C DB_DATA 10
RANGE $682C-$6836 DB_DATA 10
RANGE $6836-$6840 DB_DATA 10
RANGE $6840-$684A DB_DATA 10
RANGE $684A-$6854 DB_DATA 10
RANGE $6854-$685E DB_DATA 10
RANGE $685E-$6868 DB_DATA 10
RANGE $6868-$6872 DB_DATA 10
RANGE $6872-$687C DB_DATA 10
RANGE $687C-$6886 DB_DATA 10
RANGE $6886-$6890 DB_DATA 10
RANGE $6890-$689A DB_DATA 10
RANGE $689A-$68A4 DB_DATA 10
RANGE $68A4-$68AE DB_DATA 10
RANGE $68AE-$68B8 DB_DATA 10
RANGE $68B8-$68C2 DB_DATA 10
RANGE $68C2-$68CC DB_DATA 10
RANGE $68CC-$68D6 DB_DATA 10
RANGE $68D6-$68E0 DB_DATA 10
RANGE $68E0-$68EA DB_DATA 10
RANGE $68EA-$68F4 DB_DATA 10
RANGE $68F4-$68FE DB_DATA 10
RANGE $68FE-$6908 DB_DATA 10
RANGE $6908-$6912 DB_DATA 10
RANGE $6912-$691C DB_DATA 10
RANGE $691C-$6926 DB_DATA 10
RANGE $6926-$6930 DB_DATA 10
RANGE $6930-$693A DB_DATA 10
RANGE $693A-$6944 DB_DATA 10
RANGE $6944-$694E DB_DATA 10
RANGE $694E-$6958 DB_DATA 10
RANGE $6958-$6962 DB_DATA 10
RANGE $6962-$696C DB_DATA 10
RANGE $696C-$6976 DB_DATA 10
RANGE $6976-$6980 DB_DATA 10
RANGE $6980-$698A DB_DATA 10
RANGE $698A-$6994 DB_DATA 10
RANGE $6994-$699E DB_DATA 10
RANGE $699E-$69A8 DB_DATA 10
RANGE $69A8-$69B2 DB_DATA 10
RANGE $69B2-$69BC DB_DATA 10
RANGE $69BC-$69C6 DB_DATA 10
RANGE $69C6-$69D0 DB_DATA 10
RANGE $69D0-$69DA DB_DATA 10
RANGE $69DA-$69E4 DB_DATA 10
RANGE $69E4-$69EE DB_DATA 10
RANGE $69EE-$69F8 DB_DATA 10
RANGE $69F8-$6A02 DB_DATA 10
RANGE $6A02-$6A0C DB_DATA 10
RANGE $6A0C-$6A16 DB_DATA 10
RANGE $6A16-$6A20 DB_DATA 10
RANGE $6A20-$6A2A DB_DATA 10
RANGE $6A2A-$6A34 DB_DATA 10
RANGE $6A34-$6A3E DB_DATA 10
RANGE $6A3E-$6A48 DB_DATA 10
RANGE $6A48-$6A52 DB_DATA 10
RANGE $6A52-$6A5C DB_DATA 10
RANGE $6A5C-$6A66 DB_DATA 10
RANGE $6A66-$6A70 DB_DATA 10
RANGE $6A70-$6A7A DB_DATA 10
RANGE $6A7A-$6A84 DB_DATA 10
RANGE $6A84-$6A8E DB_DATA 10
RANGE $6A8E-$6A98 DB_DATA 10
RANGE $6A98-$6AA2 DB_DATA 10
RANGE $6AA2-$6AAC DB_DATA 10
RANGE $6AAC-$6AB6 DB_DATA 10
RANGE $6AB6-$6AC0 DB_DATA 10
RANGE $6AC0-$6ACA DB_DATA 10
RANGE $6ACA-$6AD4 DB_DATA 10
RANGE $6AD4-$6AD7 DB_DATA 3
RANGE $6AD7-$6AD9 DW_DATA 1
RANGE $6AD9-$6AE3 DB_DATA 10
RANGE $6AE3-$6AED DB_DATA 10
RANGE $6AED-$6AF7 DB_DATA 10
RANGE $6AF7-$6B01 DB_DATA 10
RANGE $6B01-$6B0B DB_DATA 10
RANGE $6B0B-$6B15 DB_DATA 10
RANGE $6B15-$6B1F DB_DATA 10
RANGE $6B1F-$6B29 DB_DATA 10
RANGE $6B29-$6B33 DB_DATA 10
RANGE $6B33-$6B3D DB_DATA 10
RANGE $6B3D-$6B47 DB_DATA 10
RANGE $6B47-$6B51 DB_DATA 10
RANGE $6B51-$6B5B DB_DATA 10
RANGE $6B5B-$6B65 DB_DATA 10
RANGE $6B65-$6B6F DB_DATA 10
RANGE $6B6F-$6B79 DB_DATA 10
RANGE $6B79-$6B83 DB_DATA 10
RANGE $6B83-$6B8D DB_DATA 10
RANGE $6B8D-$6B97 DB_DATA 10
RANGE $6B97-$6BA1 DB_DATA 10
RANGE $6BA1-$6BAB DB_DATA 10
RANGE $6BAB-$6BB5 DB_DATA 10
RANGE $6BB5-$6BBF DB_DATA 10
RANGE $6BBF-$6BC9 DB_DATA 10
RANGE $6BC9-$6BD3 DB_DATA 10
RANGE $6BD3-$6BDD DB_DATA 10
RANGE $6BDD-$6BE7 DB_DATA 10
RANGE $6BE7-$6BF1 DB_DATA 10
RANGE $6BF1-$6BFB DB_DATA 10
RANGE $6BFB-$6C05 DB_DATA 10
RANGE $6C05-$6C0F DB_DATA 10
RANGE $6C0F-$6C19 DB_DATA 10
RANGE $6C19-$6C23 DB_DATA 10
RANGE $6C23-$6C2D DB_DATA 10
RANGE $6C2D-$6C37 DB_DATA 10
RANGE $6C37-$6C41 DB_DATA 10
RANGE $6C41-$6C4B DB_DATA 10
RANGE $6C4B-$6C55 DB_DATA 10
RANGE $6C55-$6C5F DB_DATA 10
RANGE $6C5F-$6C69 DB_DATA 10
RANGE $6C69-$6C73 DB_DATA 10
RANGE $6C73-$6C7D DB_DATA 10
RANGE $6C7D-$6C87 DB_DATA 10
RANGE $6C87-$6C91 DB_DATA 10
RANGE $6C91-$6C9B DB_DATA 10
RANGE $6C9B-$6CA5 DB_DATA 10
RANGE $6CA5-$6CAF DB_DATA 10
RANGE $6CAF-$6CB9 DB_DATA 10
RANGE $6CB9-$6CC3 DB_DATA 10
RANGE $6CC3-$6CCD DB_DATA 10
RANGE $6CCD-$6CD7 DB_DATA 10
RANGE $6CD7-$6CE1 DB_DATA 10
RANGE $6CE1-$6CEB DB_DATA 10
RANGE $6CEB-$6CF5 DB_DATA 10
RANGE $6CF5-$6CFF DB_DATA 10
RANGE $6CFF-$6D09 DB_DATA 10
RANGE $6D09-$6D13 DB_DATA 10
RANGE $6D13-$6D1D DB_DATA 10
RANGE $6D1D-$6D27 DB_DATA 10
RANGE $6D27-$6D31 DB_DATA 10
RANGE $6D31-$6D3B DB_DATA 10
RANGE $6D3B-$6D45 DB_DATA 10
RANGE $6D45-$6D4F DB_DATA 10
RANGE $6D4F-$6D59 DB_DATA 10
RANGE $6D59-$6D63 DB_DATA 10
RANGE $6D63-$6D6D DB_DATA 10
RANGE $6D6D-$6D77 DB_DATA 10
RANGE $6D77-$6D81 DB_DATA 10
RANGE $6D81-$6D8B DB_DATA 10
RANGE $6D8B-$6D95 DB_DATA 10
RANGE $6D95-$6D9F DB_DATA 10
RANGE $6D9F-$6DA9 DB_DATA 10
RANGE $6DA9-$6DB3 DB_DATA 10
RANGE $6DB3-$6DBD DB_DATA 10
RANGE $6DBD-$6DC7 DB_DATA 10
RANGE $6DC7-$6DD1 DB_DATA 10
RANGE $6DD1-$6DDB DB_DATA 10
RANGE $6DDB-$6DE5 DB_DATA 10
RANGE $6DE5-$6DEF DB_DATA 10
RANGE $6DEF-$6DF9 DB_DATA 10
RANGE $6DF9-$6E03 DB_DATA 10
RANGE $6E03-$6E0D DB_DATA 10
RANGE $6E0D-$6E17 DB_DATA 10
RANGE $6E17-$6E21 DB_DATA 10
RANGE $6E21-$6E26 DB_DATA 5
RANGE $6E26-$6E28 DW_DATA 1
RANGE $6E28-$6E32 DB_DATA 10
RANGE $6E32-$6E3C DB_DATA 10
RANGE $6E3C-$6E46 DB_DATA 10
RANGE $6E46-$6E50 DB_DATA 10
RANGE $6E50-$6E5A DB_DATA 10
RANGE $6E5A-$6E64 DB_DATA 10
RANGE $6E64-$6E6E DB_DATA 10
RANGE $6E6E-$6E78 DB_DATA 10
RANGE $6E78-$6E82 DB_DATA 10
RANGE $6E82-$6E8C DB_DATA 10
RANGE $6E8C-$6E96 DB_DATA 10
RANGE $6E96-$6EA0 DB_DATA 10
RANGE $6EA0-$6EAA DB_DATA 10
RANGE $6EAA-$6EB4 DB_DATA 10
RANGE $6EB4-$6EBE DB_DATA 10
RANGE $6EBE-$6EC8 DB_DATA 10
RANGE $6EC8-$6ED2 DB_DATA 10
RANGE $6ED2-$6EDC DB_DATA 10
RANGE $6EDC-$6EE6 DB_DATA 10
RANGE $6EE6-$6EF0 DB_DATA 10
RANGE $6EF0-$6EFA DB_DATA 10
RANGE $6EFA-$6F04 DB_DATA 10
RANGE $6F04-$6F0E DB_DATA 10
RANGE $6F0E-$6F18 DB_DATA 10
RANGE $6F18-$6F22 DB_DATA 10
RANGE $6F22-$6F2C DB_DATA 10
RANGE $6F2C-$6F36 DB_DATA 10
RANGE $6F36-$6F40 DB_DATA 10
RANGE $6F40-$6F4A DB_DATA 10
RANGE $6F4A-$6F54 DB_DATA 10
RANGE $6F54-$6F5E DB_DATA 10
RANGE $6F5E-$6F68 DB_DATA 10
RANGE $6F68-$6F72 DB_DATA 10
RANGE $6F72-$6F7C DB_DATA 10
RANGE $6F7C-$6F86 DB_DATA 10
RANGE $6F86-$6F90 DB_DATA 10
RANGE $6F90-$6F9A DB_DATA 10
RANGE $6F9A-$6FA4 DB_DATA 10
RANGE $6FA4-$6FAE DB_DATA 10
RANGE $6FAE-$6FB8 DB_DATA 10
RANGE $6FB8-$6FC2 DB_DATA 10
RANGE $6FC2-$6FCC DB_DATA 10
RANGE $6FCC-$6FD6 DB_DATA 10
RANGE $6FD6-$6FE0 DB_DATA 10
RANGE $6FE0-$6FEA DB_DATA 10
RANGE $6FEA-$6FF4 DB_DATA 10
RANGE $6FF4-$6FFE DB_DATA 10
RANGE $6FFE-$7008 DB_DATA 10
RANGE $7008-$7012 DB_DATA 10
RANGE $7012-$701C DB_DATA 10
RANGE $701C-$7026 DB_DATA 10
RANGE $7026-$7030 DB_DATA 10
RANGE $7030-$703A DB_DATA 10
RANGE $703A-$7044 DB_DATA 10
RANGE $7044-$704E DB_DATA 10
RANGE $704E-$7058 DB_DATA 10
RANGE $7058-$7062 DB_DATA 10
RANGE $7062-$706C DB_DATA 10
RANGE $706C-$7076 DB_DATA 10
RANGE $7076-$7080 DB_DATA 10
RANGE $7080-$708A DB_DATA 10
RANGE $708A-$7094 DB_DATA 10
RANGE $7094-$709E DB_DATA 10
RANGE $709E-$70A8 DB_DATA 10
RANGE $70A8-$70B2 DB_DATA 10
RANGE $70B2-$70BC DB_DATA 10
RANGE $70BC-$70C6 DB_DATA 10
RANGE $70C6-$70D0 DB_DATA 10
RANGE $70D0-$70DA DB_DATA 10
RANGE $70DA-$70E4 DB_DATA 10
RANGE $70E4-$70EE DB_DATA 10
RANGE $70EE-$70F8 DB_DATA 10
RANGE $70F8-$7102 DB_DATA 10
RANGE $7102-$7105 DB_DATA 3
RANGE $7105-$7107 DW_DATA 1
RANGE $7107-$7111 DB_DATA 10
RANGE $7111-$711B DB_DATA 10
RANGE $711B-$7125 DB_DATA 10
RANGE $7125-$712F DB_DATA 10
RANGE $712F-$7139 DB_DATA 10
RANGE $7139-$7143 DB_DATA 10
RANGE $7143-$714D DB_DATA 10
RANGE $714D-$7157 DB_DATA 10
RANGE $7157-$7161 DB_DATA 10
RANGE $7161-$716B DB_DATA 10
RANGE $716B-$7175 DB_DATA 10
RANGE $7175-$717F DB_DATA 10
RANGE $717F-$7189 DB_DATA 10
RANGE $7189-$7193 DB_DATA 10
RANGE $7193-$719D DB_DATA 10
RANGE $719D-$71A7 DB_DATA 10
RANGE $71A7-$71B1 DB_DATA 10
RANGE $71B1-$71BB DB_DATA 10
RANGE $71BB-$71C5 DB_DATA 10
RANGE $71C5-$71CF DB_DATA 10
RANGE $71CF-$71D9 DB_DATA 10
RANGE $71D9-$71E3 DB_DATA 10
RANGE $71E3-$71ED DB_DATA 10
RANGE $71ED-$71F7 DB_DATA 10
RANGE $71F7-$7201 DB_DATA 10
RANGE $7201-$720B DB_DATA 10
RANGE $720B-$7215 DB_DATA 10
RANGE $7215-$721F DB_DATA 10
RANGE $721F-$7221 DW_DATA 1
RANGE $7221-$722B DB_DATA 10
RANGE $722B-$7235 DB_DATA 10
RANGE $7235-$723F DB_DATA 10
RANGE $723F-$7249 DB_DATA 10
RANGE $7249-$7253 DB_DATA 10
RANGE $7253-$725D DB_DATA 10
RANGE $725D-$7267 DB_DATA 10
RANGE $7267-$7271 DB_DATA 10
RANGE $7271-$727B DB_DATA 10
RANGE $727B-$7285 DB_DATA 10
RANGE $7285-$728F DB_DATA 10
RANGE $728F-$7299 DB_DATA 10
RANGE $7299-$72A3 DB_DATA 10
RANGE $72A3-$72AD DB_DATA 10
RANGE $72AD-$72B7 DB_DATA 10
RANGE $72B7-$72C1 DB_DATA 10
RANGE $72C1-$72CB DB_DATA 10
RANGE $72CB-$72D5 DB_DATA 10
RANGE $72D5-$72DF DB_DATA 10
RANGE $72DF-$72E9 DB_DATA 10
RANGE $72E9-$72F3 DB_DATA 10
RANGE $72F3-$72FD DB_DATA 10
RANGE $72FD-$7307 DB_DATA 10
RANGE $7307-$7311 DB_DATA 10
RANGE $7311-$731B DB_DATA 10
RANGE $731B-$7325 DB_DATA 10
RANGE $7325-$732F DB_DATA 10
RANGE $732F-$7339 DB_DATA 10
RANGE $7339-$7343 DB_DATA 10
RANGE $7343-$734D DB_DATA 10
RANGE $734D-$7357 DB_DATA 10
RANGE $7357-$7361 DB_DATA 10
RANGE $7361-$736B DB_DATA 10
RANGE $736B-$736F DB_DATA 4
RANGE $736F-$7371 DW_DATA 1
RANGE $7371-$737B DB_DATA 10
RANGE $737B-$7385 DB_DATA 10
RANGE $7385-$738F DB_DATA 10
RANGE $738F-$7399 DB_DATA 10
RANGE $7399-$73A3 DB_DATA 10
RANGE $73A3-$73AD DB_DATA 10
RANGE $73AD-$73B7 DB_DATA 10
RANGE $73B7-$73C1 DB_DATA 10
RANGE $73C1-$73CB DB_DATA 10
RANGE $73CB-$73D5 DB_DATA 10
RANGE $73D5-$73DF DB_DATA 10
RANGE $73DF-$73E9 DB_DATA 10
RANGE $73E9-$73F3 DB_DATA 10
RANGE $73F3-$73FD DB_DATA 10
RANGE $73FD-$7407 DB_DATA 10
RANGE $7407-$7411 DB_DATA 10
RANGE $7411-$741B DB_DATA 10
RANGE $741B-$7425 DB_DATA 10
RANGE $7425-$742F DB_DATA 10
RANGE $742F-$7439 DB_DATA 10
RANGE $7439-$7443 DB_DATA 10
RANGE $7443-$744D DB_DATA 10
RANGE $744D-$7457 DB_DATA 10
RANGE $7457-$7461 DB_DATA 10
RANGE $7461-$746B DB_DATA 10
RANGE $746B-$7475 DB_DATA 10
RANGE $7475-$747F DB_DATA 10
RANGE $747F-$7489 DB_DATA 10
RANGE $7489-$7493 DB_DATA 10
RANGE $7493-$749D DB_DATA 10
RANGE $749D-$749F DB_DATA 2
RANGE $749F-$74A1 DW_DATA 1
RANGE $74A1-$74A3 DW_DATA 1
RANGE $74A3-$74A5 DW_DATA 1
RANGE $74A5-$74A7 DW_DATA 1
RANGE $74A7-$74A9 DW_DATA 1
RANGE $74A9-$74AB DW_DATA 1
RANGE $74AB-$74AD DW_DATA 1
RANGE $74AD-$74AF DW_DATA 1
RANGE $74AF-$74B1 DW_DATA 1
RANGE $74B1-$74B3 DW_DATA 1
RANGE $74B3-$74B5 DW_DATA 1
RANGE $74B5-$74B7 DW_DATA 1
RANGE $74B7-$74B9 DW_DATA 1
RANGE $74B9-$74BB DW_DATA 1
RANGE $74BB-$74BD DW_DATA 1
RANGE $74BD-$74BF DW_DATA 1
RANGE $74BF-$74C1 DW_DATA 1
RANGE $74C1-$74C3 DW_DATA 1
RANGE $74C3-$74C5 DW_DATA 1
RANGE $74C5-$74C7 DW_DATA 1
RANGE $74C7-$74C9 DW_DATA 1
RANGE $74C9-$74CA DB_DATA 1
RANGE $74CA-$74CC DW_DATA 1
RANGE $74CC-$74CD DB_DATA 1
RANGE $74CD-$74CF DW_DATA 1
RANGE $74CF-$74D0 DB_DATA 1
RANGE $74D0-$74D2 DW_DATA 1
RANGE $74D2-$74D3 DB_DATA 1
RANGE $74D3-$74D5 DW_DATA 1
RANGE $74D5-$74D6 DB_DATA 1
RANGE $74D6-$74D8 DW_DATA 1
RANGE $74D8-$74D9 DB_DATA 1
RANGE $74D9-$74DB DW_DATA 1
RANGE $74DB-$74DC DB_DATA 1
RANGE $74DC-$74DE DW_DATA 1
RANGE $74DE-$74DF DB_DATA 1
RANGE $74DF-$74E0 DB_DATA 1
RANGE $74E0-$74E2 DW_DATA 1
RANGE $74E2-$74E3 DB_DATA 1
RANGE $74E3-$74E5 DW_DATA 1
RANGE $74E5-$74E6 DB_DATA 1
RANGE $74E6-$74E8 DW_DATA 1
RANGE $74E8-$74E9 DB_DATA 1
RANGE $74E9-$74F3 DB_DATA 10
RANGE $74F3-$74FD DB_DATA 10
RANGE $74FD-$7505 DB_DATA 8
RANGE $7505-$750F DB_DATA 10
RANGE $750F-$7519 DB_DATA 10
RANGE $7519-$7523 DB_DATA 10
RANGE $7523-$752D DB_DATA 10
RANGE $752D-$7537 DB_DATA 10
RANGE $7537-$7541 DB_DATA 10
RANGE $7541-$754B DB_DATA 10
RANGE $754B-$7555 DB_DATA 10
RANGE $7555-$755F DB_DATA 10
RANGE $755F-$7569 DB_DATA 10
RANGE $7569-$7573 DB_DATA 10
RANGE $7573-$757D DB_DATA 10
RANGE $757D-$7587 DB_DATA 10
RANGE $7587-$7591 DB_DATA 10
RANGE $7591-$7598 DB_DATA 7
RANGE $7598-$75A2 DB_DATA 10
RANGE $75A2-$75AC DB_DATA 10
RANGE $75AC-$75B6 DB_DATA 10
RANGE $75B6-$75C0 DB_DATA 10
RANGE $75C0-$75CA DB_DATA 10
RANGE $75CA-$75D4 DB_DATA 10
RANGE $75D4-$75DE DB_DATA 10
RANGE $75DE-$75E8 DB_DATA 10
RANGE $75E8-$75F2 DB_DATA 10
RANGE $75F2-$75FC DB_DATA 10
RANGE $75FC-$7606 DB_DATA 10
RANGE $7606-$7610 DB_DATA 10
RANGE $7610-$761A DB_DATA 10
RANGE $761A-$7624 DB_DATA 10
RANGE $7624-$762D DB_DATA 9
RANGE $762D-$7637 DB_DATA 10
RANGE $7637-$7641 DB_DATA 10
RANGE $7641-$764B DB_DATA 10
RANGE $764B-$7655 DB_DATA 10
RANGE $7655-$765F DB_DATA 10
RANGE $765F-$7669 DB_DATA 10
RANGE $7669-$7673 DB_DATA 10
RANGE $7673-$767D DB_DATA 10
RANGE $767D-$7687 DB_DATA 10
RANGE $7687-$7691 DB_DATA 10
RANGE $7691-$769B DB_DATA 10
RANGE $769B-$76A5 DB_DATA 10
RANGE $76A5-$76AF DB_DATA 10
RANGE $76AF-$76B9 DB_DATA 10
RANGE $76B9-$76C3 DB_DATA 10
RANGE $76C3-$76CD DB_DATA 10
RANGE $76CD-$76D7 DB_DATA 10
RANGE $76D7-$76E1 DB_DATA 10
RANGE $76E1-$76EB DB_DATA 10
RANGE $76EB-$76F5 DB_DATA 10
RANGE $76F5-$76FF DB_DATA 10
RANGE $76FF-$7709 DB_DATA 10
RANGE $7709-$7713 DB_DATA 10
RANGE $7713-$771D DB_DATA 10
RANGE $771D-$7726 DB_DATA 9
RANGE $7726-$7730 DB_DATA 10
RANGE $7730-$773A DB_DATA 10
RANGE $773A-$7744 DB_DATA 10
RANGE $7744-$774E DB_DATA 10
RANGE $774E-$7758 DB_DATA 10
RANGE $7758-$7762 DB_DATA 10
RANGE $7762-$776C DB_DATA 10
RANGE $776C-$7776 DB_DATA 10
RANGE $7776-$777A DB_DATA 4
RANGE $777A-$7784 DB_DATA 10
RANGE $7784-$778E DB_DATA 10
RANGE $778E-$7798 DB_DATA 10
RANGE $7798-$77A2 DB_DATA 10
RANGE $77A2-$77AC DB_DATA 10
RANGE $77AC-$77B6 DB_DATA 10
RANGE $77B6-$77C0 DB_DATA 10
RANGE $77C0-$77CA DB_DATA 10
RANGE $77CA-$77CD DB_DATA 3
RANGE $77CD-$77D7 DB_DATA 10
RANGE $77D7-$77E1 DB_DATA 10
RANGE $77E1-$77EB DB_DATA 10
RANGE $77EB-$77F5 DB_DATA 10
RANGE $77F5-$77FF DB_DATA 10
RANGE $77FF-$7809 DB_DATA 10
RANGE $7809-$7813 DB_DATA 10
RANGE $7813-$781D DB_DATA 10
RANGE $781D-$7827 DB_DATA 10
RANGE $7827-$7831 DB_DATA 10
RANGE $7831-$783B DB_DATA 10
RANGE $783B-$7845 DB_DATA 10
RANGE $7845-$784F DB_DATA 10
RANGE $784F-$7859 DB_DATA 10
RANGE $7859-$7863 DB_DATA 10
RANGE $7863-$786B DB_DATA 8
RANGE $786B-$7875 DB_DATA 10
RANGE $7875-$787F DB_DATA 10
RANGE $787F-$7889 DB_DATA 10
RANGE $7889-$788A DB_DATA 1
RANGE $788A-$7894 DB_DATA 10
RANGE $7894-$789E DB_DATA 10
RANGE $789E-$78A8 DB_DATA 10
RANGE $78A8-$78B2 DB_DATA 10
RANGE $78B2-$78B4 DB_DATA 2
RANGE $78B4-$78B6 DB_DATA 2
RANGE $78B6-$78D2 DB_DATA 28
RANGE $78D2-$78EE DB_DATA 28
RANGE $78EE-$790A DB_DATA 28
RANGE $790A-$7926 DB_DATA 28
RANGE $7926-$7942 DB_DATA 28
RANGE $7942-$795E DB_DATA 28
RANGE $795E-$797A DB_DATA 28
RANGE $797A-$7996 DB_DATA 28
RANGE $7996-$79B2 DB_DATA 28
RANGE $79B2-$79CE DB_DATA 28
RANGE $79CE-$79EA DB_DATA 28
RANGE $79EA-$7A06 DB_DATA 28
RANGE $7A06-$7A22 DB_DATA 28
RANGE $7A22-$7A3E DB_DATA 28
RANGE $7A3E-$7A5A DB_DATA 28
RANGE $7A5A-$7A76 DB_DATA 28
RANGE $7A76-$7A86 DW_DATA 8
RANGE $7A86-$7A8A DW_DATA 2
RANGE $7A8A-$7A8C DB_DATA 2
RANGE $7A8C-$7A8E DB_DATA 2
RANGE $7A8E-$7A90 DB_DATA 2
RANGE $7A90-$7A92 DB_DATA 2
RANGE $7A92-$7A94 DB_DATA 2
RANGE $7A94-$7A96 DB_DATA 2
RANGE $7A96-$7A98 DB_DATA 2
RANGE $7A98-$7A9A DB_DATA 2
RANGE $7A9A-$7A9C DB_DATA 2
RANGE $7A9C-$7A9E DB_DATA 2
RANGE $7A9E-$7AA0 DB_DATA 2
RANGE $7AA0-$7AA2 DB_DATA 2
RANGE $7AA2-$7AA4 DB_DATA 2
RANGE $7AA4-$7AA6 DB_DATA 2
RANGE $7AA6-$7AA8 DB_DATA 2
RANGE $7AA8-$7AAA DB_DATA 2
RANGE $7AAA-$7AAC DB_DATA 2
RANGE $7AAC-$7AAE DB_DATA 2
RANGE $7AAE-$7AB0 DB_DATA 2
RANGE $7AB0-$7AB2 DB_DATA 2
RANGE $7AB2-$7AB4 DB_DATA 2
RANGE $7AB4-$7AB6 DB_DATA 2
RANGE $7AB6-$7AB8 DB_DATA 2
RANGE $7AB8-$7ABA DB_DATA 2
RANGE $7ABA-$7ABC DB_DATA 2
RANGE $7ABC-$7ABE DB_DATA 2
RANGE $7ABE-$7AC2 DB_DATA 4
RANGE $7AC2-$7AC6 DB_DATA 4
RANGE $7AC6-$7ACA DB_DATA 4
RANGE $7ACA-$7ACE DB_DATA 4
RANGE $7ACE-$7AD2 DB_DATA 4
RANGE $7AD2-$7AD6 DB_DATA 4
RANGE $7AD6-$7ADA DB_DATA 4
RANGE $7ADA-$7ADE DB_DATA 4
RANGE $7ADE-$7AE2 DB_DATA 4
RANGE $7AE2-$7AE6 DB_DATA 4
RANGE $7AE6-$7AEA DB_DATA 4
RANGE $7AEA-$7AEE DB_DATA 4
RANGE $7AEE-$7AF2 DB_DATA 4
RANGE $7AF2-$7AF6 DB_DATA 4
RANGE $7AF6-$7AF8 DB_DATA 2
RANGE $7AF8-$7AFC DB_DATA 4
RANGE $7AFC-$7B00 DB_DATA 4
RANGE $7B00-$7B04 DB_DATA 4
RANGE $7B04-$7B08 DB_DATA 4
RANGE $7B08-$7B0C DB_DATA 4
RANGE $7B0C-$7B10 DB_DATA 4
RANGE $7B10-$7B14 DB_DATA 4
RANGE $7B14-$7B18 DB_DATA 4
RANGE $7B18-$7B1C DB_DATA 4
RANGE $7B1C-$7B20 DB_DATA 4
RANGE $7B20-$7B24 DB_DATA 4
RANGE $7B24-$7B28 DB_DATA 4
RANGE $7B28-$7B2C DB_DATA 4
RANGE $7B2C-$7B30 DB_DATA 4
RANGE $7B30-$7B34 DB_DATA 4
RANGE $7B34-$7B36 DB_DATA 2
RANGE $7B36-$7B3A DB_DATA 4
RANGE $7B3A-$7B3C DB_DATA 2
RANGE $7B3C-$7B40 DB_DATA 4
RANGE $7B40-$7B43 DB_DATA 3
RANGE $7B43-$7B47 DB_DATA 4
RANGE $7B47-$7B4B DB_DATA 4
RANGE $7B4B-$7B4F DB_DATA 4
RANGE $7B4F-$7B53 DB_DATA 4
RANGE $7B53-$7B57 DB_DATA 4
RANGE $7B57-$7B59 DB_DATA 2
RANGE $7B59-$7B5D DB_DATA 4
RANGE $7B5D-$7B60 DB_DATA 3
RANGE $7B60-$7B64 DB_DATA 4
RANGE $7B64-$7B68 DB_DATA 4
RANGE $7B68-$7B6C DB_DATA 4
RANGE $7B6C-$7B6E DB_DATA 2
RANGE $7B6E-$7B72 DB_DATA 4
RANGE $7B72-$7B74 DB_DATA 2
RANGE $7B74-$7B78 DB_DATA 4
RANGE $7B78-$7B7B DB_DATA 3
RANGE $7B7B-$7B7F DB_DATA 4
RANGE $7B7F-$7B83 DB_DATA 4
RANGE $7B83-$7B87 DB_DATA 4
RANGE $7B87-$7B8B DB_DATA 4
RANGE $7B8B-$7B8F DB_DATA 4
RANGE $7B8F-$7B93 DB_DATA 4
RANGE $7B93-$7B97 DB_DATA 4
RANGE $7B97-$7B9B DB_DATA 4
RANGE $7B9B-$7B9F DB_DATA 4
RANGE $7B9F-$7BA3 DB_DATA 4
RANGE $7BA3-$7BA7 DB_DATA 4
RANGE $7BA7-$7BA9 DB_DATA 2
RANGE $7BA9-$7BAD DB_DATA 4
RANGE $7BAD-$7BAF DB_DATA 2
RANGE $7BAF-$7BB1 DB_DATA 2
RANGE $7BB1-$7BB3 DW_DATA 1
RANGE $7BB3-$7BB5 DW_DATA 1
RANGE $7BB5-$7BB7 DW_DATA 1
RANGE $7BB7-$7BB9 DW_DATA 1
RANGE $7BB9-$7BBB DW_DATA 1
RANGE $7BBB-$7BBD DW_DATA 1
RANGE $7BBD-$7BBF DW_DATA 1
RANGE $7BBF-$7BC1 DW_DATA 1
RANGE $7BC1-$7BD7 CHAR_DATA 22
RANGE $7BD7-$7BEE CHAR_DATA 23
RANGE $7BEE-$7C01 CHAR_DATA 19
RANGE $7C01-$7C14 CHAR_DATA 19
RANGE $7C14-$7C27 CHAR_DATA 19
RANGE $7C27-$7C36 CHAR_DATA 15
RANGE $7C36-$7C44 CHAR_DATA 14
RANGE $7C44-$7C9A CODE
RANGE $7C9A-$7D06 DB_DATA 108
RANGE $7D06-$7FC8 DB_DATA 706
RANGE $7FC8-$7FD8 DB_DATA 16

